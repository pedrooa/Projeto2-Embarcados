
RTOS-BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a1ac  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a1ac  0040a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  0040a1b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000358  204009b8  0040ab6c  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400d10  0040aec4  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402d10  0040cec4  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00022cff  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000045bd  00000000  00000000  0004373e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a0fd  00000000  00000000  00047cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f78  00000000  00000000  00051df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001110  00000000  00000000  00052d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000229a3  00000000  00000000  00053e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012513  00000000  00000000  00076823  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094939  00000000  00000000  00088d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000038f4  00000000  00000000  0011d670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 2d 40 20 b1 0d 40 00 af 0d 40 00 af 0d 40 00     .-@ ..@...@...@.
  400010:	af 0d 40 00 af 0d 40 00 af 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	89 11 40 00 af 0d 40 00 00 00 00 00 29 12 40 00     ..@...@.....).@.
  40003c:	91 12 40 00 af 0d 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  40004c:	af 0d 40 00 af 0d 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  40005c:	af 0d 40 00 af 0d 40 00 00 00 00 00 99 0a 40 00     ..@...@.......@.
  40006c:	ad 0a 40 00 c1 0a 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  40007c:	af 0d 40 00 d5 0a 40 00 e9 0a 40 00 af 0d 40 00     ..@...@...@...@.
  40008c:	af 0d 40 00 af 0d 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  40009c:	af 0d 40 00 af 0d 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  4000ac:	af 0d 40 00 af 0d 40 00 8d 07 40 00 af 0d 40 00     ..@...@...@...@.
  4000bc:	af 0d 40 00 af 0d 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  4000cc:	af 0d 40 00 00 00 00 00 af 0d 40 00 00 00 00 00     ..@.......@.....
  4000dc:	af 0d 40 00 a1 07 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  4000ec:	af 0d 40 00 af 0d 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  4000fc:	af 0d 40 00 af 0d 40 00 af 0d 40 00 af 0d 40 00     ..@...@...@...@.
  40010c:	af 0d 40 00 af 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 af 0d 40 00 af 0d 40 00 af 0d 40 00     ......@...@...@.
  40012c:	af 0d 40 00 af 0d 40 00 00 00 00 00 af 0d 40 00     ..@...@.......@.
  40013c:	af 0d 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	0040a1b4 	.word	0x0040a1b4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040a1b4 	.word	0x0040a1b4
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	0040a1b4 	.word	0x0040a1b4
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400f85 	.word	0x00400f85
  4001f8:	00400b99 	.word	0x00400b99
  4001fc:	00400bed 	.word	0x00400bed
  400200:	00400bfd 	.word	0x00400bfd
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400c0d 	.word	0x00400c0d
  400210:	00400afd 	.word	0x00400afd
  400214:	00400b35 	.word	0x00400b35
  400218:	00400e79 	.word	0x00400e79

0040021c <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  40021c:	2a00      	cmp	r2, #0
  40021e:	d054      	beq.n	4002ca <usart_serial_write_packet+0xae>
{
  400220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400224:	4692      	mov	sl, r2
  400226:	4606      	mov	r6, r0
  400228:	460f      	mov	r7, r1
  40022a:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40022c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4002e8 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  400230:	4d27      	ldr	r5, [pc, #156]	; (4002d0 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400232:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4002ec <usart_serial_write_packet+0xd0>
  400236:	e006      	b.n	400246 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400238:	4621      	mov	r1, r4
  40023a:	4640      	mov	r0, r8
  40023c:	47a8      	blx	r5
  40023e:	2800      	cmp	r0, #0
  400240:	d1fa      	bne.n	400238 <usart_serial_write_packet+0x1c>
	while (len) {
  400242:	45ba      	cmp	sl, r7
  400244:	d03e      	beq.n	4002c4 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400246:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  40024a:	4546      	cmp	r6, r8
  40024c:	d0f4      	beq.n	400238 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40024e:	454e      	cmp	r6, r9
  400250:	d016      	beq.n	400280 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400252:	4b20      	ldr	r3, [pc, #128]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400254:	429e      	cmp	r6, r3
  400256:	d019      	beq.n	40028c <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400258:	4b1f      	ldr	r3, [pc, #124]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40025a:	429e      	cmp	r6, r3
  40025c:	d01c      	beq.n	400298 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40025e:	4b1f      	ldr	r3, [pc, #124]	; (4002dc <usart_serial_write_packet+0xc0>)
  400260:	429e      	cmp	r6, r3
  400262:	d01f      	beq.n	4002a4 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400264:	4b1e      	ldr	r3, [pc, #120]	; (4002e0 <usart_serial_write_packet+0xc4>)
  400266:	429e      	cmp	r6, r3
  400268:	d024      	beq.n	4002b4 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40026a:	4b1e      	ldr	r3, [pc, #120]	; (4002e4 <usart_serial_write_packet+0xc8>)
  40026c:	429e      	cmp	r6, r3
  40026e:	d1e8      	bne.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400270:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4002f0 <usart_serial_write_packet+0xd4>
  400274:	4621      	mov	r1, r4
  400276:	481b      	ldr	r0, [pc, #108]	; (4002e4 <usart_serial_write_packet+0xc8>)
  400278:	47d8      	blx	fp
  40027a:	2800      	cmp	r0, #0
  40027c:	d1fa      	bne.n	400274 <usart_serial_write_packet+0x58>
  40027e:	e7e0      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400280:	4621      	mov	r1, r4
  400282:	4648      	mov	r0, r9
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_write_packet+0x64>
  40028a:	e7da      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40028c:	4621      	mov	r1, r4
  40028e:	4811      	ldr	r0, [pc, #68]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400290:	47a8      	blx	r5
  400292:	2800      	cmp	r0, #0
  400294:	d1fa      	bne.n	40028c <usart_serial_write_packet+0x70>
  400296:	e7d4      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400298:	4621      	mov	r1, r4
  40029a:	480f      	ldr	r0, [pc, #60]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40029c:	47a8      	blx	r5
  40029e:	2800      	cmp	r0, #0
  4002a0:	d1fa      	bne.n	400298 <usart_serial_write_packet+0x7c>
  4002a2:	e7ce      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002a4:	f8df b048 	ldr.w	fp, [pc, #72]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002a8:	4621      	mov	r1, r4
  4002aa:	480c      	ldr	r0, [pc, #48]	; (4002dc <usart_serial_write_packet+0xc0>)
  4002ac:	47d8      	blx	fp
  4002ae:	2800      	cmp	r0, #0
  4002b0:	d1fa      	bne.n	4002a8 <usart_serial_write_packet+0x8c>
  4002b2:	e7c6      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002b4:	f8df b038 	ldr.w	fp, [pc, #56]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002b8:	4621      	mov	r1, r4
  4002ba:	4809      	ldr	r0, [pc, #36]	; (4002e0 <usart_serial_write_packet+0xc4>)
  4002bc:	47d8      	blx	fp
  4002be:	2800      	cmp	r0, #0
  4002c0:	d1fa      	bne.n	4002b8 <usart_serial_write_packet+0x9c>
  4002c2:	e7be      	b.n	400242 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4002c4:	2000      	movs	r0, #0
  4002c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002ca:	2000      	movs	r0, #0
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	00400c71 	.word	0x00400c71
  4002d4:	400e1a00 	.word	0x400e1a00
  4002d8:	400e1c00 	.word	0x400e1c00
  4002dc:	40024000 	.word	0x40024000
  4002e0:	40028000 	.word	0x40028000
  4002e4:	4002c000 	.word	0x4002c000
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	400e0a00 	.word	0x400e0a00
  4002f0:	00400d81 	.word	0x00400d81

004002f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4002f8:	b980      	cbnz	r0, 40031c <_read+0x28>
  4002fa:	460c      	mov	r4, r1
  4002fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4002fe:	2a00      	cmp	r2, #0
  400300:	dd0f      	ble.n	400322 <_read+0x2e>
  400302:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400304:	4e08      	ldr	r6, [pc, #32]	; (400328 <_read+0x34>)
  400306:	4d09      	ldr	r5, [pc, #36]	; (40032c <_read+0x38>)
  400308:	6830      	ldr	r0, [r6, #0]
  40030a:	4621      	mov	r1, r4
  40030c:	682b      	ldr	r3, [r5, #0]
  40030e:	4798      	blx	r3
		ptr++;
  400310:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400312:	42bc      	cmp	r4, r7
  400314:	d1f8      	bne.n	400308 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400316:	4640      	mov	r0, r8
  400318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40031c:	f04f 38ff 	mov.w	r8, #4294967295
  400320:	e7f9      	b.n	400316 <_read+0x22>
	for (; len > 0; --len) {
  400322:	4680      	mov	r8, r0
  400324:	e7f7      	b.n	400316 <_read+0x22>
  400326:	bf00      	nop
  400328:	20400be4 	.word	0x20400be4
  40032c:	20400bdc 	.word	0x20400bdc

00400330 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400330:	3801      	subs	r0, #1
  400332:	2802      	cmp	r0, #2
  400334:	d815      	bhi.n	400362 <_write+0x32>
{
  400336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40033a:	460e      	mov	r6, r1
  40033c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40033e:	b19a      	cbz	r2, 400368 <_write+0x38>
  400340:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400342:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40037c <_write+0x4c>
  400346:	4f0c      	ldr	r7, [pc, #48]	; (400378 <_write+0x48>)
  400348:	f8d8 0000 	ldr.w	r0, [r8]
  40034c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400350:	683b      	ldr	r3, [r7, #0]
  400352:	4798      	blx	r3
  400354:	2800      	cmp	r0, #0
  400356:	db0a      	blt.n	40036e <_write+0x3e>
  400358:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40035a:	3c01      	subs	r4, #1
  40035c:	d1f4      	bne.n	400348 <_write+0x18>
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
  400366:	4770      	bx	lr
	for (; len != 0; --len) {
  400368:	4610      	mov	r0, r2
  40036a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40036e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400376:	bf00      	nop
  400378:	20400be0 	.word	0x20400be0
  40037c:	20400be4 	.word	0x20400be4

00400380 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400386:	4b5c      	ldr	r3, [pc, #368]	; (4004f8 <board_init+0x178>)
  400388:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40038e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400392:	4b5a      	ldr	r3, [pc, #360]	; (4004fc <board_init+0x17c>)
  400394:	2200      	movs	r2, #0
  400396:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40039a:	695a      	ldr	r2, [r3, #20]
  40039c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4003a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4003a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003a6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4003aa:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4003ae:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4003b2:	f007 0007 	and.w	r0, r7, #7
  4003b6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4003b8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4003bc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4003c0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4003c4:	f3bf 8f4f 	dsb	sy
  4003c8:	f04f 34ff 	mov.w	r4, #4294967295
  4003cc:	fa04 fc00 	lsl.w	ip, r4, r0
  4003d0:	fa06 f000 	lsl.w	r0, r6, r0
  4003d4:	fa04 f40e 	lsl.w	r4, r4, lr
  4003d8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4003dc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4003de:	463a      	mov	r2, r7
  4003e0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4003e2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4003e6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4003ea:	3a01      	subs	r2, #1
  4003ec:	4423      	add	r3, r4
  4003ee:	f1b2 3fff 	cmp.w	r2, #4294967295
  4003f2:	d1f6      	bne.n	4003e2 <board_init+0x62>
        } while(sets--);
  4003f4:	3e01      	subs	r6, #1
  4003f6:	4460      	add	r0, ip
  4003f8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4003fc:	d1ef      	bne.n	4003de <board_init+0x5e>
  4003fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400402:	4b3e      	ldr	r3, [pc, #248]	; (4004fc <board_init+0x17c>)
  400404:	695a      	ldr	r2, [r3, #20]
  400406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40040a:	615a      	str	r2, [r3, #20]
  40040c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400410:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400414:	4a3a      	ldr	r2, [pc, #232]	; (400500 <board_init+0x180>)
  400416:	493b      	ldr	r1, [pc, #236]	; (400504 <board_init+0x184>)
  400418:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40041a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40041e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400424:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400428:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40042c:	f022 0201 	bic.w	r2, r2, #1
  400430:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400434:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400438:	f022 0201 	bic.w	r2, r2, #1
  40043c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400444:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400448:	200a      	movs	r0, #10
  40044a:	4c2f      	ldr	r4, [pc, #188]	; (400508 <board_init+0x188>)
  40044c:	47a0      	blx	r4
  40044e:	200b      	movs	r0, #11
  400450:	47a0      	blx	r4
  400452:	200c      	movs	r0, #12
  400454:	47a0      	blx	r4
  400456:	2010      	movs	r0, #16
  400458:	47a0      	blx	r4
  40045a:	2011      	movs	r0, #17
  40045c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40045e:	4b2b      	ldr	r3, [pc, #172]	; (40050c <board_init+0x18c>)
  400460:	f44f 7280 	mov.w	r2, #256	; 0x100
  400464:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40046a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40046c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400470:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400474:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400476:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40047a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40047c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400480:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400482:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400488:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40048a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40048e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400490:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400492:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400496:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400498:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40049c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4004a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4004a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004c0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004c4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004c6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4004c8:	4a11      	ldr	r2, [pc, #68]	; (400510 <board_init+0x190>)
  4004ca:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004ce:	f043 0310 	orr.w	r3, r3, #16
  4004d2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <board_init+0x194>)
  4004d8:	2210      	movs	r2, #16
  4004da:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004e0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4004e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004ea:	4311      	orrs	r1, r2
  4004ec:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4004ee:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004f0:	4311      	orrs	r1, r2
  4004f2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f4:	605a      	str	r2, [r3, #4]
  4004f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004f8:	400e1850 	.word	0x400e1850
  4004fc:	e000ed00 	.word	0xe000ed00
  400500:	400e0c00 	.word	0x400e0c00
  400504:	5a00080c 	.word	0x5a00080c
  400508:	00400c1d 	.word	0x00400c1d
  40050c:	400e1200 	.word	0x400e1200
  400510:	40088000 	.word	0x40088000
  400514:	400e1000 	.word	0x400e1000

00400518 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400518:	b570      	push	{r4, r5, r6, lr}
  40051a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40051c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40051e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400520:	4013      	ands	r3, r2
  400522:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400524:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400526:	4e1c      	ldr	r6, [pc, #112]	; (400598 <afec_process_callback+0x80>)
  400528:	4d1c      	ldr	r5, [pc, #112]	; (40059c <afec_process_callback+0x84>)
  40052a:	42a8      	cmp	r0, r5
  40052c:	bf14      	ite	ne
  40052e:	2000      	movne	r0, #0
  400530:	2001      	moveq	r0, #1
  400532:	0105      	lsls	r5, r0, #4
  400534:	e00b      	b.n	40054e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400536:	2c0e      	cmp	r4, #14
  400538:	d81e      	bhi.n	400578 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40053a:	9a01      	ldr	r2, [sp, #4]
  40053c:	f104 010c 	add.w	r1, r4, #12
  400540:	2301      	movs	r3, #1
  400542:	408b      	lsls	r3, r1
  400544:	4213      	tst	r3, r2
  400546:	d110      	bne.n	40056a <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400548:	3401      	adds	r4, #1
  40054a:	2c10      	cmp	r4, #16
  40054c:	d022      	beq.n	400594 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40054e:	2c0b      	cmp	r4, #11
  400550:	d8f1      	bhi.n	400536 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400552:	9a01      	ldr	r2, [sp, #4]
  400554:	2301      	movs	r3, #1
  400556:	40a3      	lsls	r3, r4
  400558:	4213      	tst	r3, r2
  40055a:	d0f5      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40055c:	192b      	adds	r3, r5, r4
  40055e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400562:	2b00      	cmp	r3, #0
  400564:	d0f0      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400566:	4798      	blx	r3
  400568:	e7ee      	b.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40056a:	192b      	adds	r3, r5, r4
  40056c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400570:	2b00      	cmp	r3, #0
  400572:	d0e9      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400574:	4798      	blx	r3
  400576:	e7e7      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400578:	9a01      	ldr	r2, [sp, #4]
  40057a:	f104 010f 	add.w	r1, r4, #15
  40057e:	2301      	movs	r3, #1
  400580:	408b      	lsls	r3, r1
  400582:	4213      	tst	r3, r2
  400584:	d0e0      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400586:	192b      	adds	r3, r5, r4
  400588:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40058c:	2b00      	cmp	r3, #0
  40058e:	d0db      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400590:	4798      	blx	r3
  400592:	e7d9      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400594:	b002      	add	sp, #8
  400596:	bd70      	pop	{r4, r5, r6, pc}
  400598:	20400be8 	.word	0x20400be8
  40059c:	40064000 	.word	0x40064000

004005a0 <afec_ch_set_config>:
{
  4005a0:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4005a2:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4005a4:	2301      	movs	r3, #1
  4005a6:	408b      	lsls	r3, r1
  4005a8:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4005ac:	7815      	ldrb	r5, [r2, #0]
  4005ae:	2d00      	cmp	r5, #0
  4005b0:	bf08      	it	eq
  4005b2:	2300      	moveq	r3, #0
  4005b4:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4005b6:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4005b8:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4005ba:	004b      	lsls	r3, r1, #1
  4005bc:	2103      	movs	r1, #3
  4005be:	4099      	lsls	r1, r3
  4005c0:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4005c4:	7851      	ldrb	r1, [r2, #1]
  4005c6:	4099      	lsls	r1, r3
  4005c8:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4005ca:	6541      	str	r1, [r0, #84]	; 0x54
}
  4005cc:	bc30      	pop	{r4, r5}
  4005ce:	4770      	bx	lr

004005d0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4005d0:	784b      	ldrb	r3, [r1, #1]
  4005d2:	780a      	ldrb	r2, [r1, #0]
  4005d4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4005d6:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4005d8:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4005da:	884b      	ldrh	r3, [r1, #2]
  4005dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4005e0:	6743      	str	r3, [r0, #116]	; 0x74
  4005e2:	4770      	bx	lr

004005e4 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4005e4:	2200      	movs	r2, #0
  4005e6:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4005e8:	4b08      	ldr	r3, [pc, #32]	; (40060c <afec_get_config_defaults+0x28>)
  4005ea:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4005ec:	4b08      	ldr	r3, [pc, #32]	; (400610 <afec_get_config_defaults+0x2c>)
  4005ee:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4005f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4005f4:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4005f6:	2302      	movs	r3, #2
  4005f8:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4005fa:	2301      	movs	r3, #1
  4005fc:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4005fe:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400600:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400602:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400604:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400606:	7583      	strb	r3, [r0, #22]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	11e1a300 	.word	0x11e1a300
  400610:	005b8d80 	.word	0x005b8d80

00400614 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400614:	2300      	movs	r3, #0
  400616:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400618:	2301      	movs	r3, #1
  40061a:	7043      	strb	r3, [r0, #1]
  40061c:	4770      	bx	lr

0040061e <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40061e:	2300      	movs	r3, #0
  400620:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400622:	2320      	movs	r3, #32
  400624:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400626:	23ff      	movs	r3, #255	; 0xff
  400628:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  40062a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40062e:	8083      	strh	r3, [r0, #4]
  400630:	4770      	bx	lr
	...

00400634 <afec_init>:
	return afec->AFEC_ISR;
  400634:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400636:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  40063a:	d001      	beq.n	400640 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40063c:	2019      	movs	r0, #25
  40063e:	4770      	bx	lr
{
  400640:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400642:	2301      	movs	r3, #1
  400644:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400646:	7ccb      	ldrb	r3, [r1, #19]
  400648:	2b00      	cmp	r3, #0
  40064a:	bf18      	it	ne
  40064c:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400650:	684b      	ldr	r3, [r1, #4]
  400652:	688c      	ldr	r4, [r1, #8]
  400654:	fbb3 f3f4 	udiv	r3, r3, r4
  400658:	3b01      	subs	r3, #1
  40065a:	021b      	lsls	r3, r3, #8
  40065c:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40065e:	68cc      	ldr	r4, [r1, #12]
  400660:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400664:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400666:	7c0c      	ldrb	r4, [r1, #16]
  400668:	0624      	lsls	r4, r4, #24
  40066a:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40066e:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400670:	7c4c      	ldrb	r4, [r1, #17]
  400672:	0724      	lsls	r4, r4, #28
  400674:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400678:	4323      	orrs	r3, r4
  40067a:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  40067c:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40067e:	7d0b      	ldrb	r3, [r1, #20]
  400680:	2b00      	cmp	r3, #0
  400682:	bf14      	ite	ne
  400684:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400688:	2300      	moveq	r3, #0
  40068a:	680a      	ldr	r2, [r1, #0]
  40068c:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40068e:	7d4a      	ldrb	r2, [r1, #21]
  400690:	2a00      	cmp	r2, #0
  400692:	bf14      	ite	ne
  400694:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400698:	2200      	moveq	r2, #0
			(config->resolution) |
  40069a:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40069c:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40069e:	7d8b      	ldrb	r3, [r1, #22]
  4006a0:	021b      	lsls	r3, r3, #8
  4006a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4006a6:	f043 030c 	orr.w	r3, r3, #12
  4006aa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4006ae:	4b0f      	ldr	r3, [pc, #60]	; (4006ec <afec_init+0xb8>)
  4006b0:	4298      	cmp	r0, r3
  4006b2:	d006      	beq.n	4006c2 <afec_init+0x8e>
	if(afec == AFEC1) {
  4006b4:	4b0e      	ldr	r3, [pc, #56]	; (4006f0 <afec_init+0xbc>)
  4006b6:	4298      	cmp	r0, r3
  4006b8:	d00d      	beq.n	4006d6 <afec_init+0xa2>
	return STATUS_OK;
  4006ba:	2000      	movs	r0, #0
}
  4006bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006c0:	4770      	bx	lr
  4006c2:	4b0c      	ldr	r3, [pc, #48]	; (4006f4 <afec_init+0xc0>)
  4006c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4006c8:	2200      	movs	r2, #0
  4006ca:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006ce:	428b      	cmp	r3, r1
  4006d0:	d1fb      	bne.n	4006ca <afec_init+0x96>
	return STATUS_OK;
  4006d2:	2000      	movs	r0, #0
  4006d4:	e7f2      	b.n	4006bc <afec_init+0x88>
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <afec_init+0xc4>)
  4006d8:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4006dc:	2200      	movs	r2, #0
  4006de:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006e2:	428b      	cmp	r3, r1
  4006e4:	d1fb      	bne.n	4006de <afec_init+0xaa>
	return STATUS_OK;
  4006e6:	2000      	movs	r0, #0
  4006e8:	e7e8      	b.n	4006bc <afec_init+0x88>
  4006ea:	bf00      	nop
  4006ec:	4003c000 	.word	0x4003c000
  4006f0:	40064000 	.word	0x40064000
  4006f4:	20400be4 	.word	0x20400be4
  4006f8:	20400c28 	.word	0x20400c28

004006fc <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4006fc:	4b0c      	ldr	r3, [pc, #48]	; (400730 <afec_enable_interrupt+0x34>)
  4006fe:	4299      	cmp	r1, r3
  400700:	d007      	beq.n	400712 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400702:	290b      	cmp	r1, #11
  400704:	d80b      	bhi.n	40071e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400706:	d006      	beq.n	400716 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400708:	2301      	movs	r3, #1
  40070a:	fa03 f101 	lsl.w	r1, r3, r1
  40070e:	6241      	str	r1, [r0, #36]	; 0x24
  400710:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400712:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400714:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400716:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40071a:	6243      	str	r3, [r0, #36]	; 0x24
  40071c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40071e:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400720:	bf94      	ite	ls
  400722:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400724:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400726:	2301      	movs	r3, #1
  400728:	fa03 f101 	lsl.w	r1, r3, r1
  40072c:	6241      	str	r1, [r0, #36]	; 0x24
  40072e:	4770      	bx	lr
  400730:	47000fff 	.word	0x47000fff

00400734 <afec_set_callback>:
{
  400734:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400736:	4c11      	ldr	r4, [pc, #68]	; (40077c <afec_set_callback+0x48>)
  400738:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  40073a:	bf0c      	ite	eq
  40073c:	2410      	moveq	r4, #16
  40073e:	2400      	movne	r4, #0
  400740:	440c      	add	r4, r1
  400742:	4d0f      	ldr	r5, [pc, #60]	; (400780 <afec_set_callback+0x4c>)
  400744:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400748:	d10a      	bne.n	400760 <afec_set_callback+0x2c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40074a:	4a0e      	ldr	r2, [pc, #56]	; (400784 <afec_set_callback+0x50>)
  40074c:	f44f 7480 	mov.w	r4, #256	; 0x100
  400750:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400754:	015b      	lsls	r3, r3, #5
  400756:	b2db      	uxtb	r3, r3
  400758:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40075c:	6054      	str	r4, [r2, #4]
  40075e:	e009      	b.n	400774 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400760:	4a08      	ldr	r2, [pc, #32]	; (400784 <afec_set_callback+0x50>)
  400762:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400766:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40076a:	015b      	lsls	r3, r3, #5
  40076c:	b2db      	uxtb	r3, r3
  40076e:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400772:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400774:	4b04      	ldr	r3, [pc, #16]	; (400788 <afec_set_callback+0x54>)
  400776:	4798      	blx	r3
  400778:	bd38      	pop	{r3, r4, r5, pc}
  40077a:	bf00      	nop
  40077c:	40064000 	.word	0x40064000
  400780:	20400be8 	.word	0x20400be8
  400784:	e000e100 	.word	0xe000e100
  400788:	004006fd 	.word	0x004006fd

0040078c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40078c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40078e:	4802      	ldr	r0, [pc, #8]	; (400798 <AFEC0_Handler+0xc>)
  400790:	4b02      	ldr	r3, [pc, #8]	; (40079c <AFEC0_Handler+0x10>)
  400792:	4798      	blx	r3
  400794:	bd08      	pop	{r3, pc}
  400796:	bf00      	nop
  400798:	4003c000 	.word	0x4003c000
  40079c:	00400519 	.word	0x00400519

004007a0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4007a0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4007a2:	4802      	ldr	r0, [pc, #8]	; (4007ac <AFEC1_Handler+0xc>)
  4007a4:	4b02      	ldr	r3, [pc, #8]	; (4007b0 <AFEC1_Handler+0x10>)
  4007a6:	4798      	blx	r3
  4007a8:	bd08      	pop	{r3, pc}
  4007aa:	bf00      	nop
  4007ac:	40064000 	.word	0x40064000
  4007b0:	00400519 	.word	0x00400519

004007b4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4007b4:	b500      	push	{lr}
  4007b6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4007b8:	4b13      	ldr	r3, [pc, #76]	; (400808 <afec_enable+0x54>)
  4007ba:	4298      	cmp	r0, r3
  4007bc:	bf0c      	ite	eq
  4007be:	2028      	moveq	r0, #40	; 0x28
  4007c0:	201d      	movne	r0, #29
  4007c2:	4b12      	ldr	r3, [pc, #72]	; (40080c <afec_enable+0x58>)
  4007c4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4007c6:	4b12      	ldr	r3, [pc, #72]	; (400810 <afec_enable+0x5c>)
  4007c8:	789b      	ldrb	r3, [r3, #2]
  4007ca:	2bff      	cmp	r3, #255	; 0xff
  4007cc:	d01a      	beq.n	400804 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4007d2:	fab3 f383 	clz	r3, r3
  4007d6:	095b      	lsrs	r3, r3, #5
  4007d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4007da:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4007dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4007e0:	2200      	movs	r2, #0
  4007e2:	4b0c      	ldr	r3, [pc, #48]	; (400814 <afec_enable+0x60>)
  4007e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4007e6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4007e8:	4a09      	ldr	r2, [pc, #36]	; (400810 <afec_enable+0x5c>)
  4007ea:	7893      	ldrb	r3, [r2, #2]
  4007ec:	3301      	adds	r3, #1
  4007ee:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007f0:	b129      	cbz	r1, 4007fe <afec_enable+0x4a>
		cpu_irq_enable();
  4007f2:	2201      	movs	r2, #1
  4007f4:	4b07      	ldr	r3, [pc, #28]	; (400814 <afec_enable+0x60>)
  4007f6:	701a      	strb	r2, [r3, #0]
  4007f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007fc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4007fe:	b003      	add	sp, #12
  400800:	f85d fb04 	ldr.w	pc, [sp], #4
  400804:	e7fe      	b.n	400804 <afec_enable+0x50>
  400806:	bf00      	nop
  400808:	40064000 	.word	0x40064000
  40080c:	00400c1d 	.word	0x00400c1d
  400810:	20400bd4 	.word	0x20400bd4
  400814:	20400000 	.word	0x20400000

00400818 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400818:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40081a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40081e:	d03a      	beq.n	400896 <pio_set_peripheral+0x7e>
  400820:	d813      	bhi.n	40084a <pio_set_peripheral+0x32>
  400822:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400826:	d025      	beq.n	400874 <pio_set_peripheral+0x5c>
  400828:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40082c:	d10a      	bne.n	400844 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40082e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400830:	4313      	orrs	r3, r2
  400832:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400834:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400836:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400838:	400b      	ands	r3, r1
  40083a:	ea23 0302 	bic.w	r3, r3, r2
  40083e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400840:	6042      	str	r2, [r0, #4]
  400842:	4770      	bx	lr
	switch (ul_type) {
  400844:	2900      	cmp	r1, #0
  400846:	d1fb      	bne.n	400840 <pio_set_peripheral+0x28>
  400848:	4770      	bx	lr
  40084a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40084e:	d021      	beq.n	400894 <pio_set_peripheral+0x7c>
  400850:	d809      	bhi.n	400866 <pio_set_peripheral+0x4e>
  400852:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400856:	d1f3      	bne.n	400840 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400858:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40085a:	4313      	orrs	r3, r2
  40085c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40085e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400860:	4313      	orrs	r3, r2
  400862:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400864:	e7ec      	b.n	400840 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400866:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40086a:	d013      	beq.n	400894 <pio_set_peripheral+0x7c>
  40086c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400870:	d010      	beq.n	400894 <pio_set_peripheral+0x7c>
  400872:	e7e5      	b.n	400840 <pio_set_peripheral+0x28>
{
  400874:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400876:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400878:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40087a:	43d3      	mvns	r3, r2
  40087c:	4021      	ands	r1, r4
  40087e:	461c      	mov	r4, r3
  400880:	4019      	ands	r1, r3
  400882:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400884:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400886:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400888:	400b      	ands	r3, r1
  40088a:	4023      	ands	r3, r4
  40088c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40088e:	6042      	str	r2, [r0, #4]
}
  400890:	f85d 4b04 	ldr.w	r4, [sp], #4
  400894:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400896:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400898:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40089a:	400b      	ands	r3, r1
  40089c:	ea23 0302 	bic.w	r3, r3, r2
  4008a0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008a4:	4313      	orrs	r3, r2
  4008a6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008a8:	e7ca      	b.n	400840 <pio_set_peripheral+0x28>

004008aa <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008aa:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008ac:	f012 0f01 	tst.w	r2, #1
  4008b0:	d10d      	bne.n	4008ce <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4008b2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4008b4:	f012 0f0a 	tst.w	r2, #10
  4008b8:	d00b      	beq.n	4008d2 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4008ba:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4008bc:	f012 0f02 	tst.w	r2, #2
  4008c0:	d109      	bne.n	4008d6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4008c2:	f012 0f08 	tst.w	r2, #8
  4008c6:	d008      	beq.n	4008da <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4008c8:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4008cc:	e005      	b.n	4008da <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4008ce:	6641      	str	r1, [r0, #100]	; 0x64
  4008d0:	e7f0      	b.n	4008b4 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4008d2:	6241      	str	r1, [r0, #36]	; 0x24
  4008d4:	e7f2      	b.n	4008bc <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4008d6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4008da:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4008dc:	6001      	str	r1, [r0, #0]
  4008de:	4770      	bx	lr

004008e0 <pio_set_output>:
{
  4008e0:	b410      	push	{r4}
  4008e2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4008e4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008e6:	b94c      	cbnz	r4, 4008fc <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4008e8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4008ea:	b14b      	cbz	r3, 400900 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4008ec:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4008ee:	b94a      	cbnz	r2, 400904 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4008f0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4008f2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4008f4:	6001      	str	r1, [r0, #0]
}
  4008f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008fa:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4008fc:	6641      	str	r1, [r0, #100]	; 0x64
  4008fe:	e7f4      	b.n	4008ea <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400900:	6541      	str	r1, [r0, #84]	; 0x54
  400902:	e7f4      	b.n	4008ee <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400904:	6301      	str	r1, [r0, #48]	; 0x30
  400906:	e7f4      	b.n	4008f2 <pio_set_output+0x12>

00400908 <pio_configure>:
{
  400908:	b570      	push	{r4, r5, r6, lr}
  40090a:	b082      	sub	sp, #8
  40090c:	4605      	mov	r5, r0
  40090e:	4616      	mov	r6, r2
  400910:	461c      	mov	r4, r3
	switch (ul_type) {
  400912:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400916:	d014      	beq.n	400942 <pio_configure+0x3a>
  400918:	d90a      	bls.n	400930 <pio_configure+0x28>
  40091a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40091e:	d024      	beq.n	40096a <pio_configure+0x62>
  400920:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400924:	d021      	beq.n	40096a <pio_configure+0x62>
  400926:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40092a:	d017      	beq.n	40095c <pio_configure+0x54>
		return 0;
  40092c:	2000      	movs	r0, #0
  40092e:	e01a      	b.n	400966 <pio_configure+0x5e>
	switch (ul_type) {
  400930:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400934:	d005      	beq.n	400942 <pio_configure+0x3a>
  400936:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40093a:	d002      	beq.n	400942 <pio_configure+0x3a>
  40093c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400940:	d1f4      	bne.n	40092c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400942:	4632      	mov	r2, r6
  400944:	4628      	mov	r0, r5
  400946:	4b11      	ldr	r3, [pc, #68]	; (40098c <pio_configure+0x84>)
  400948:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40094a:	f014 0f01 	tst.w	r4, #1
  40094e:	d102      	bne.n	400956 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400950:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400952:	2001      	movs	r0, #1
  400954:	e007      	b.n	400966 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400956:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400958:	2001      	movs	r0, #1
  40095a:	e004      	b.n	400966 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40095c:	461a      	mov	r2, r3
  40095e:	4631      	mov	r1, r6
  400960:	4b0b      	ldr	r3, [pc, #44]	; (400990 <pio_configure+0x88>)
  400962:	4798      	blx	r3
	return 1;
  400964:	2001      	movs	r0, #1
}
  400966:	b002      	add	sp, #8
  400968:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40096a:	f004 0301 	and.w	r3, r4, #1
  40096e:	9300      	str	r3, [sp, #0]
  400970:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400974:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400978:	bf14      	ite	ne
  40097a:	2200      	movne	r2, #0
  40097c:	2201      	moveq	r2, #1
  40097e:	4631      	mov	r1, r6
  400980:	4628      	mov	r0, r5
  400982:	4c04      	ldr	r4, [pc, #16]	; (400994 <pio_configure+0x8c>)
  400984:	47a0      	blx	r4
	return 1;
  400986:	2001      	movs	r0, #1
		break;
  400988:	e7ed      	b.n	400966 <pio_configure+0x5e>
  40098a:	bf00      	nop
  40098c:	00400819 	.word	0x00400819
  400990:	004008ab 	.word	0x004008ab
  400994:	004008e1 	.word	0x004008e1

00400998 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400998:	f012 0f10 	tst.w	r2, #16
  40099c:	d012      	beq.n	4009c4 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40099e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4009a2:	f012 0f20 	tst.w	r2, #32
  4009a6:	d007      	beq.n	4009b8 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4009a8:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4009ac:	f012 0f40 	tst.w	r2, #64	; 0x40
  4009b0:	d005      	beq.n	4009be <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4009b2:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4009b6:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4009b8:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4009bc:	e7f6      	b.n	4009ac <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4009be:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4009c2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4009c4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4009c8:	4770      	bx	lr

004009ca <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4009ca:	6401      	str	r1, [r0, #64]	; 0x40
  4009cc:	4770      	bx	lr

004009ce <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4009ce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4009d0:	4770      	bx	lr

004009d2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4009d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4009d4:	4770      	bx	lr
	...

004009d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009dc:	4604      	mov	r4, r0
  4009de:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009e0:	4b0e      	ldr	r3, [pc, #56]	; (400a1c <pio_handler_process+0x44>)
  4009e2:	4798      	blx	r3
  4009e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4009e6:	4620      	mov	r0, r4
  4009e8:	4b0d      	ldr	r3, [pc, #52]	; (400a20 <pio_handler_process+0x48>)
  4009ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4009ec:	4005      	ands	r5, r0
  4009ee:	d013      	beq.n	400a18 <pio_handler_process+0x40>
  4009f0:	4c0c      	ldr	r4, [pc, #48]	; (400a24 <pio_handler_process+0x4c>)
  4009f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4009f6:	e003      	b.n	400a00 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009f8:	42b4      	cmp	r4, r6
  4009fa:	d00d      	beq.n	400a18 <pio_handler_process+0x40>
  4009fc:	3410      	adds	r4, #16
		while (status != 0) {
  4009fe:	b15d      	cbz	r5, 400a18 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a00:	6820      	ldr	r0, [r4, #0]
  400a02:	4540      	cmp	r0, r8
  400a04:	d1f8      	bne.n	4009f8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a06:	6861      	ldr	r1, [r4, #4]
  400a08:	4229      	tst	r1, r5
  400a0a:	d0f5      	beq.n	4009f8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a0c:	68e3      	ldr	r3, [r4, #12]
  400a0e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a10:	6863      	ldr	r3, [r4, #4]
  400a12:	ea25 0503 	bic.w	r5, r5, r3
  400a16:	e7ef      	b.n	4009f8 <pio_handler_process+0x20>
  400a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a1c:	004009cf 	.word	0x004009cf
  400a20:	004009d3 	.word	0x004009d3
  400a24:	204009d4 	.word	0x204009d4

00400a28 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400a2a:	4c18      	ldr	r4, [pc, #96]	; (400a8c <pio_handler_set+0x64>)
  400a2c:	6826      	ldr	r6, [r4, #0]
  400a2e:	2e06      	cmp	r6, #6
  400a30:	d82a      	bhi.n	400a88 <pio_handler_set+0x60>
  400a32:	f04f 0c00 	mov.w	ip, #0
  400a36:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a38:	4f15      	ldr	r7, [pc, #84]	; (400a90 <pio_handler_set+0x68>)
  400a3a:	e004      	b.n	400a46 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a3c:	3401      	adds	r4, #1
  400a3e:	b2e4      	uxtb	r4, r4
  400a40:	46a4      	mov	ip, r4
  400a42:	42a6      	cmp	r6, r4
  400a44:	d309      	bcc.n	400a5a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400a46:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a48:	0125      	lsls	r5, r4, #4
  400a4a:	597d      	ldr	r5, [r7, r5]
  400a4c:	428d      	cmp	r5, r1
  400a4e:	d1f5      	bne.n	400a3c <pio_handler_set+0x14>
  400a50:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400a54:	686d      	ldr	r5, [r5, #4]
  400a56:	4295      	cmp	r5, r2
  400a58:	d1f0      	bne.n	400a3c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400a5a:	4d0d      	ldr	r5, [pc, #52]	; (400a90 <pio_handler_set+0x68>)
  400a5c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400a60:	eb05 040e 	add.w	r4, r5, lr
  400a64:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400a68:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400a6a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400a6c:	9906      	ldr	r1, [sp, #24]
  400a6e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400a70:	3601      	adds	r6, #1
  400a72:	4566      	cmp	r6, ip
  400a74:	d005      	beq.n	400a82 <pio_handler_set+0x5a>
  400a76:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400a78:	461a      	mov	r2, r3
  400a7a:	4b06      	ldr	r3, [pc, #24]	; (400a94 <pio_handler_set+0x6c>)
  400a7c:	4798      	blx	r3

	return 0;
  400a7e:	2000      	movs	r0, #0
  400a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400a82:	4902      	ldr	r1, [pc, #8]	; (400a8c <pio_handler_set+0x64>)
  400a84:	600e      	str	r6, [r1, #0]
  400a86:	e7f6      	b.n	400a76 <pio_handler_set+0x4e>
		return 1;
  400a88:	2001      	movs	r0, #1
}
  400a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a8c:	20400a44 	.word	0x20400a44
  400a90:	204009d4 	.word	0x204009d4
  400a94:	00400999 	.word	0x00400999

00400a98 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a98:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400a9a:	210a      	movs	r1, #10
  400a9c:	4801      	ldr	r0, [pc, #4]	; (400aa4 <PIOA_Handler+0xc>)
  400a9e:	4b02      	ldr	r3, [pc, #8]	; (400aa8 <PIOA_Handler+0x10>)
  400aa0:	4798      	blx	r3
  400aa2:	bd08      	pop	{r3, pc}
  400aa4:	400e0e00 	.word	0x400e0e00
  400aa8:	004009d9 	.word	0x004009d9

00400aac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400aac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400aae:	210b      	movs	r1, #11
  400ab0:	4801      	ldr	r0, [pc, #4]	; (400ab8 <PIOB_Handler+0xc>)
  400ab2:	4b02      	ldr	r3, [pc, #8]	; (400abc <PIOB_Handler+0x10>)
  400ab4:	4798      	blx	r3
  400ab6:	bd08      	pop	{r3, pc}
  400ab8:	400e1000 	.word	0x400e1000
  400abc:	004009d9 	.word	0x004009d9

00400ac0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ac0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400ac2:	210c      	movs	r1, #12
  400ac4:	4801      	ldr	r0, [pc, #4]	; (400acc <PIOC_Handler+0xc>)
  400ac6:	4b02      	ldr	r3, [pc, #8]	; (400ad0 <PIOC_Handler+0x10>)
  400ac8:	4798      	blx	r3
  400aca:	bd08      	pop	{r3, pc}
  400acc:	400e1200 	.word	0x400e1200
  400ad0:	004009d9 	.word	0x004009d9

00400ad4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ad4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ad6:	2110      	movs	r1, #16
  400ad8:	4801      	ldr	r0, [pc, #4]	; (400ae0 <PIOD_Handler+0xc>)
  400ada:	4b02      	ldr	r3, [pc, #8]	; (400ae4 <PIOD_Handler+0x10>)
  400adc:	4798      	blx	r3
  400ade:	bd08      	pop	{r3, pc}
  400ae0:	400e1400 	.word	0x400e1400
  400ae4:	004009d9 	.word	0x004009d9

00400ae8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ae8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400aea:	2111      	movs	r1, #17
  400aec:	4801      	ldr	r0, [pc, #4]	; (400af4 <PIOE_Handler+0xc>)
  400aee:	4b02      	ldr	r3, [pc, #8]	; (400af8 <PIOE_Handler+0x10>)
  400af0:	4798      	blx	r3
  400af2:	bd08      	pop	{r3, pc}
  400af4:	400e1600 	.word	0x400e1600
  400af8:	004009d9 	.word	0x004009d9

00400afc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400afc:	2803      	cmp	r0, #3
  400afe:	d011      	beq.n	400b24 <pmc_mck_set_division+0x28>
  400b00:	2804      	cmp	r0, #4
  400b02:	d012      	beq.n	400b2a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b04:	2802      	cmp	r0, #2
  400b06:	bf0c      	ite	eq
  400b08:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b0c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b0e:	4a08      	ldr	r2, [pc, #32]	; (400b30 <pmc_mck_set_division+0x34>)
  400b10:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b16:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b18:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b1a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b1c:	f013 0f08 	tst.w	r3, #8
  400b20:	d0fb      	beq.n	400b1a <pmc_mck_set_division+0x1e>
}
  400b22:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b24:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b28:	e7f1      	b.n	400b0e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b2e:	e7ee      	b.n	400b0e <pmc_mck_set_division+0x12>
  400b30:	400e0600 	.word	0x400e0600

00400b34 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b34:	4a17      	ldr	r2, [pc, #92]	; (400b94 <pmc_switch_mck_to_pllack+0x60>)
  400b36:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b3c:	4318      	orrs	r0, r3
  400b3e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b40:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b42:	f013 0f08 	tst.w	r3, #8
  400b46:	d10a      	bne.n	400b5e <pmc_switch_mck_to_pllack+0x2a>
  400b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b4c:	4911      	ldr	r1, [pc, #68]	; (400b94 <pmc_switch_mck_to_pllack+0x60>)
  400b4e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b50:	f012 0f08 	tst.w	r2, #8
  400b54:	d103      	bne.n	400b5e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b56:	3b01      	subs	r3, #1
  400b58:	d1f9      	bne.n	400b4e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400b5a:	2001      	movs	r0, #1
  400b5c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b5e:	4a0d      	ldr	r2, [pc, #52]	; (400b94 <pmc_switch_mck_to_pllack+0x60>)
  400b60:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b62:	f023 0303 	bic.w	r3, r3, #3
  400b66:	f043 0302 	orr.w	r3, r3, #2
  400b6a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b6c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b6e:	f013 0f08 	tst.w	r3, #8
  400b72:	d10a      	bne.n	400b8a <pmc_switch_mck_to_pllack+0x56>
  400b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b78:	4906      	ldr	r1, [pc, #24]	; (400b94 <pmc_switch_mck_to_pllack+0x60>)
  400b7a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b7c:	f012 0f08 	tst.w	r2, #8
  400b80:	d105      	bne.n	400b8e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b82:	3b01      	subs	r3, #1
  400b84:	d1f9      	bne.n	400b7a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400b86:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b88:	4770      	bx	lr
	return 0;
  400b8a:	2000      	movs	r0, #0
  400b8c:	4770      	bx	lr
  400b8e:	2000      	movs	r0, #0
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop
  400b94:	400e0600 	.word	0x400e0600

00400b98 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b98:	b9a0      	cbnz	r0, 400bc4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b9a:	480e      	ldr	r0, [pc, #56]	; (400bd4 <pmc_switch_mainck_to_xtal+0x3c>)
  400b9c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400b9e:	0209      	lsls	r1, r1, #8
  400ba0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400ba2:	4a0d      	ldr	r2, [pc, #52]	; (400bd8 <pmc_switch_mainck_to_xtal+0x40>)
  400ba4:	401a      	ands	r2, r3
  400ba6:	4b0d      	ldr	r3, [pc, #52]	; (400bdc <pmc_switch_mainck_to_xtal+0x44>)
  400ba8:	4313      	orrs	r3, r2
  400baa:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bac:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400bae:	4602      	mov	r2, r0
  400bb0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bb2:	f013 0f01 	tst.w	r3, #1
  400bb6:	d0fb      	beq.n	400bb0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400bb8:	4a06      	ldr	r2, [pc, #24]	; (400bd4 <pmc_switch_mainck_to_xtal+0x3c>)
  400bba:	6a11      	ldr	r1, [r2, #32]
  400bbc:	4b08      	ldr	r3, [pc, #32]	; (400be0 <pmc_switch_mainck_to_xtal+0x48>)
  400bbe:	430b      	orrs	r3, r1
  400bc0:	6213      	str	r3, [r2, #32]
  400bc2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bc4:	4903      	ldr	r1, [pc, #12]	; (400bd4 <pmc_switch_mainck_to_xtal+0x3c>)
  400bc6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400bc8:	4a06      	ldr	r2, [pc, #24]	; (400be4 <pmc_switch_mainck_to_xtal+0x4c>)
  400bca:	401a      	ands	r2, r3
  400bcc:	4b06      	ldr	r3, [pc, #24]	; (400be8 <pmc_switch_mainck_to_xtal+0x50>)
  400bce:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bd0:	620b      	str	r3, [r1, #32]
  400bd2:	4770      	bx	lr
  400bd4:	400e0600 	.word	0x400e0600
  400bd8:	ffc8fffc 	.word	0xffc8fffc
  400bdc:	00370001 	.word	0x00370001
  400be0:	01370000 	.word	0x01370000
  400be4:	fec8fffc 	.word	0xfec8fffc
  400be8:	01370002 	.word	0x01370002

00400bec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400bec:	4b02      	ldr	r3, [pc, #8]	; (400bf8 <pmc_osc_is_ready_mainck+0xc>)
  400bee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400bf0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400bf4:	4770      	bx	lr
  400bf6:	bf00      	nop
  400bf8:	400e0600 	.word	0x400e0600

00400bfc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400bfc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c00:	4b01      	ldr	r3, [pc, #4]	; (400c08 <pmc_disable_pllack+0xc>)
  400c02:	629a      	str	r2, [r3, #40]	; 0x28
  400c04:	4770      	bx	lr
  400c06:	bf00      	nop
  400c08:	400e0600 	.word	0x400e0600

00400c0c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c0c:	4b02      	ldr	r3, [pc, #8]	; (400c18 <pmc_is_locked_pllack+0xc>)
  400c0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c10:	f000 0002 	and.w	r0, r0, #2
  400c14:	4770      	bx	lr
  400c16:	bf00      	nop
  400c18:	400e0600 	.word	0x400e0600

00400c1c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c1c:	283f      	cmp	r0, #63	; 0x3f
  400c1e:	d81e      	bhi.n	400c5e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c20:	281f      	cmp	r0, #31
  400c22:	d80c      	bhi.n	400c3e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c24:	4b11      	ldr	r3, [pc, #68]	; (400c6c <pmc_enable_periph_clk+0x50>)
  400c26:	699a      	ldr	r2, [r3, #24]
  400c28:	2301      	movs	r3, #1
  400c2a:	4083      	lsls	r3, r0
  400c2c:	4393      	bics	r3, r2
  400c2e:	d018      	beq.n	400c62 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c30:	2301      	movs	r3, #1
  400c32:	fa03 f000 	lsl.w	r0, r3, r0
  400c36:	4b0d      	ldr	r3, [pc, #52]	; (400c6c <pmc_enable_periph_clk+0x50>)
  400c38:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c3a:	2000      	movs	r0, #0
  400c3c:	4770      	bx	lr
		ul_id -= 32;
  400c3e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c40:	4b0a      	ldr	r3, [pc, #40]	; (400c6c <pmc_enable_periph_clk+0x50>)
  400c42:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c46:	2301      	movs	r3, #1
  400c48:	4083      	lsls	r3, r0
  400c4a:	4393      	bics	r3, r2
  400c4c:	d00b      	beq.n	400c66 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c4e:	2301      	movs	r3, #1
  400c50:	fa03 f000 	lsl.w	r0, r3, r0
  400c54:	4b05      	ldr	r3, [pc, #20]	; (400c6c <pmc_enable_periph_clk+0x50>)
  400c56:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400c5a:	2000      	movs	r0, #0
  400c5c:	4770      	bx	lr
		return 1;
  400c5e:	2001      	movs	r0, #1
  400c60:	4770      	bx	lr
	return 0;
  400c62:	2000      	movs	r0, #0
  400c64:	4770      	bx	lr
  400c66:	2000      	movs	r0, #0
}
  400c68:	4770      	bx	lr
  400c6a:	bf00      	nop
  400c6c:	400e0600 	.word	0x400e0600

00400c70 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400c70:	6943      	ldr	r3, [r0, #20]
  400c72:	f013 0f02 	tst.w	r3, #2
  400c76:	d002      	beq.n	400c7e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400c78:	61c1      	str	r1, [r0, #28]
	return 0;
  400c7a:	2000      	movs	r0, #0
  400c7c:	4770      	bx	lr
		return 1;
  400c7e:	2001      	movs	r0, #1
}
  400c80:	4770      	bx	lr

00400c82 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400c82:	6943      	ldr	r3, [r0, #20]
  400c84:	f013 0f01 	tst.w	r3, #1
  400c88:	d003      	beq.n	400c92 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400c8a:	6983      	ldr	r3, [r0, #24]
  400c8c:	700b      	strb	r3, [r1, #0]
	return 0;
  400c8e:	2000      	movs	r0, #0
  400c90:	4770      	bx	lr
		return 1;
  400c92:	2001      	movs	r0, #1
}
  400c94:	4770      	bx	lr

00400c96 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400c96:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400c98:	010b      	lsls	r3, r1, #4
  400c9a:	4293      	cmp	r3, r2
  400c9c:	d914      	bls.n	400cc8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400c9e:	00c9      	lsls	r1, r1, #3
  400ca0:	084b      	lsrs	r3, r1, #1
  400ca2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400ca6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400caa:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cac:	1e5c      	subs	r4, r3, #1
  400cae:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cb2:	428c      	cmp	r4, r1
  400cb4:	d901      	bls.n	400cba <usart_set_async_baudrate+0x24>
		return 1;
  400cb6:	2001      	movs	r0, #1
  400cb8:	e017      	b.n	400cea <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400cba:	6841      	ldr	r1, [r0, #4]
  400cbc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400cc0:	6041      	str	r1, [r0, #4]
  400cc2:	e00c      	b.n	400cde <usart_set_async_baudrate+0x48>
		return 1;
  400cc4:	2001      	movs	r0, #1
  400cc6:	e010      	b.n	400cea <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400cc8:	0859      	lsrs	r1, r3, #1
  400cca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400cce:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400cd2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cd4:	1e5c      	subs	r4, r3, #1
  400cd6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cda:	428c      	cmp	r4, r1
  400cdc:	d8f2      	bhi.n	400cc4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400cde:	0412      	lsls	r2, r2, #16
  400ce0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400ce4:	431a      	orrs	r2, r3
  400ce6:	6202      	str	r2, [r0, #32]

	return 0;
  400ce8:	2000      	movs	r0, #0
}
  400cea:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cee:	4770      	bx	lr

00400cf0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400cf0:	4b08      	ldr	r3, [pc, #32]	; (400d14 <usart_reset+0x24>)
  400cf2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400cf6:	2300      	movs	r3, #0
  400cf8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400cfa:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400cfc:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400cfe:	2388      	movs	r3, #136	; 0x88
  400d00:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d02:	2324      	movs	r3, #36	; 0x24
  400d04:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400d06:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d0a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d10:	6003      	str	r3, [r0, #0]
  400d12:	4770      	bx	lr
  400d14:	55534100 	.word	0x55534100

00400d18 <usart_init_rs232>:
{
  400d18:	b570      	push	{r4, r5, r6, lr}
  400d1a:	4605      	mov	r5, r0
  400d1c:	460c      	mov	r4, r1
  400d1e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400d20:	4b0f      	ldr	r3, [pc, #60]	; (400d60 <usart_init_rs232+0x48>)
  400d22:	4798      	blx	r3
	ul_reg_val = 0;
  400d24:	2200      	movs	r2, #0
  400d26:	4b0f      	ldr	r3, [pc, #60]	; (400d64 <usart_init_rs232+0x4c>)
  400d28:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400d2a:	b1a4      	cbz	r4, 400d56 <usart_init_rs232+0x3e>
  400d2c:	4632      	mov	r2, r6
  400d2e:	6821      	ldr	r1, [r4, #0]
  400d30:	4628      	mov	r0, r5
  400d32:	4b0d      	ldr	r3, [pc, #52]	; (400d68 <usart_init_rs232+0x50>)
  400d34:	4798      	blx	r3
  400d36:	4602      	mov	r2, r0
  400d38:	b978      	cbnz	r0, 400d5a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d3a:	6863      	ldr	r3, [r4, #4]
  400d3c:	68a1      	ldr	r1, [r4, #8]
  400d3e:	430b      	orrs	r3, r1
  400d40:	6921      	ldr	r1, [r4, #16]
  400d42:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400d44:	68e1      	ldr	r1, [r4, #12]
  400d46:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d48:	4906      	ldr	r1, [pc, #24]	; (400d64 <usart_init_rs232+0x4c>)
  400d4a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400d4c:	6869      	ldr	r1, [r5, #4]
  400d4e:	430b      	orrs	r3, r1
  400d50:	606b      	str	r3, [r5, #4]
}
  400d52:	4610      	mov	r0, r2
  400d54:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400d56:	2201      	movs	r2, #1
  400d58:	e7fb      	b.n	400d52 <usart_init_rs232+0x3a>
  400d5a:	2201      	movs	r2, #1
  400d5c:	e7f9      	b.n	400d52 <usart_init_rs232+0x3a>
  400d5e:	bf00      	nop
  400d60:	00400cf1 	.word	0x00400cf1
  400d64:	20400a48 	.word	0x20400a48
  400d68:	00400c97 	.word	0x00400c97

00400d6c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400d6c:	2340      	movs	r3, #64	; 0x40
  400d6e:	6003      	str	r3, [r0, #0]
  400d70:	4770      	bx	lr

00400d72 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400d72:	2310      	movs	r3, #16
  400d74:	6003      	str	r3, [r0, #0]
  400d76:	4770      	bx	lr

00400d78 <usart_is_tx_ready>:
	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
  400d78:	6940      	ldr	r0, [r0, #20]
}
  400d7a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400d7e:	4770      	bx	lr

00400d80 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400d80:	6943      	ldr	r3, [r0, #20]
  400d82:	f013 0f02 	tst.w	r3, #2
  400d86:	d004      	beq.n	400d92 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400d88:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400d8c:	61c1      	str	r1, [r0, #28]
	return 0;
  400d8e:	2000      	movs	r0, #0
  400d90:	4770      	bx	lr
		return 1;
  400d92:	2001      	movs	r0, #1
}
  400d94:	4770      	bx	lr

00400d96 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d96:	6943      	ldr	r3, [r0, #20]
  400d98:	f013 0f01 	tst.w	r3, #1
  400d9c:	d005      	beq.n	400daa <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d9e:	6983      	ldr	r3, [r0, #24]
  400da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400da4:	600b      	str	r3, [r1, #0]
	return 0;
  400da6:	2000      	movs	r0, #0
  400da8:	4770      	bx	lr
		return 1;
  400daa:	2001      	movs	r0, #1
}
  400dac:	4770      	bx	lr

00400dae <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400dae:	e7fe      	b.n	400dae <Dummy_Handler>

00400db0 <Reset_Handler>:
{
  400db0:	b500      	push	{lr}
  400db2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400db4:	4b25      	ldr	r3, [pc, #148]	; (400e4c <Reset_Handler+0x9c>)
  400db6:	4a26      	ldr	r2, [pc, #152]	; (400e50 <Reset_Handler+0xa0>)
  400db8:	429a      	cmp	r2, r3
  400dba:	d010      	beq.n	400dde <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400dbc:	4b25      	ldr	r3, [pc, #148]	; (400e54 <Reset_Handler+0xa4>)
  400dbe:	4a23      	ldr	r2, [pc, #140]	; (400e4c <Reset_Handler+0x9c>)
  400dc0:	429a      	cmp	r2, r3
  400dc2:	d20c      	bcs.n	400dde <Reset_Handler+0x2e>
  400dc4:	3b01      	subs	r3, #1
  400dc6:	1a9b      	subs	r3, r3, r2
  400dc8:	f023 0303 	bic.w	r3, r3, #3
  400dcc:	3304      	adds	r3, #4
  400dce:	4413      	add	r3, r2
  400dd0:	491f      	ldr	r1, [pc, #124]	; (400e50 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400dd2:	f851 0b04 	ldr.w	r0, [r1], #4
  400dd6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400dda:	429a      	cmp	r2, r3
  400ddc:	d1f9      	bne.n	400dd2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400dde:	4b1e      	ldr	r3, [pc, #120]	; (400e58 <Reset_Handler+0xa8>)
  400de0:	4a1e      	ldr	r2, [pc, #120]	; (400e5c <Reset_Handler+0xac>)
  400de2:	429a      	cmp	r2, r3
  400de4:	d20a      	bcs.n	400dfc <Reset_Handler+0x4c>
  400de6:	3b01      	subs	r3, #1
  400de8:	1a9b      	subs	r3, r3, r2
  400dea:	f023 0303 	bic.w	r3, r3, #3
  400dee:	3304      	adds	r3, #4
  400df0:	4413      	add	r3, r2
                *pDest++ = 0;
  400df2:	2100      	movs	r1, #0
  400df4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400df8:	4293      	cmp	r3, r2
  400dfa:	d1fb      	bne.n	400df4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400dfc:	4a18      	ldr	r2, [pc, #96]	; (400e60 <Reset_Handler+0xb0>)
  400dfe:	4b19      	ldr	r3, [pc, #100]	; (400e64 <Reset_Handler+0xb4>)
  400e00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e04:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e06:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e0a:	fab3 f383 	clz	r3, r3
  400e0e:	095b      	lsrs	r3, r3, #5
  400e10:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e12:	b672      	cpsid	i
  400e14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e18:	2200      	movs	r2, #0
  400e1a:	4b13      	ldr	r3, [pc, #76]	; (400e68 <Reset_Handler+0xb8>)
  400e1c:	701a      	strb	r2, [r3, #0]
	return flags;
  400e1e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e20:	4a12      	ldr	r2, [pc, #72]	; (400e6c <Reset_Handler+0xbc>)
  400e22:	6813      	ldr	r3, [r2, #0]
  400e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400e2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e2e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400e32:	b129      	cbz	r1, 400e40 <Reset_Handler+0x90>
		cpu_irq_enable();
  400e34:	2201      	movs	r2, #1
  400e36:	4b0c      	ldr	r3, [pc, #48]	; (400e68 <Reset_Handler+0xb8>)
  400e38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400e3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e3e:	b662      	cpsie	i
        __libc_init_array();
  400e40:	4b0b      	ldr	r3, [pc, #44]	; (400e70 <Reset_Handler+0xc0>)
  400e42:	4798      	blx	r3
        main();
  400e44:	4b0b      	ldr	r3, [pc, #44]	; (400e74 <Reset_Handler+0xc4>)
  400e46:	4798      	blx	r3
  400e48:	e7fe      	b.n	400e48 <Reset_Handler+0x98>
  400e4a:	bf00      	nop
  400e4c:	20400000 	.word	0x20400000
  400e50:	0040a1b4 	.word	0x0040a1b4
  400e54:	204009b8 	.word	0x204009b8
  400e58:	20400d10 	.word	0x20400d10
  400e5c:	204009b8 	.word	0x204009b8
  400e60:	e000ed00 	.word	0xe000ed00
  400e64:	00400000 	.word	0x00400000
  400e68:	20400000 	.word	0x20400000
  400e6c:	e000ed88 	.word	0xe000ed88
  400e70:	004039b9 	.word	0x004039b9
  400e74:	004038c9 	.word	0x004038c9

00400e78 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400e78:	4b3b      	ldr	r3, [pc, #236]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e7c:	f003 0303 	and.w	r3, r3, #3
  400e80:	2b01      	cmp	r3, #1
  400e82:	d01d      	beq.n	400ec0 <SystemCoreClockUpdate+0x48>
  400e84:	b183      	cbz	r3, 400ea8 <SystemCoreClockUpdate+0x30>
  400e86:	2b02      	cmp	r3, #2
  400e88:	d036      	beq.n	400ef8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400e8a:	4b37      	ldr	r3, [pc, #220]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e92:	2b70      	cmp	r3, #112	; 0x70
  400e94:	d05f      	beq.n	400f56 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400e96:	4b34      	ldr	r3, [pc, #208]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400e9a:	4934      	ldr	r1, [pc, #208]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400e9c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400ea0:	680b      	ldr	r3, [r1, #0]
  400ea2:	40d3      	lsrs	r3, r2
  400ea4:	600b      	str	r3, [r1, #0]
  400ea6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ea8:	4b31      	ldr	r3, [pc, #196]	; (400f70 <SystemCoreClockUpdate+0xf8>)
  400eaa:	695b      	ldr	r3, [r3, #20]
  400eac:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400eb0:	bf14      	ite	ne
  400eb2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400eb6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400eba:	4b2c      	ldr	r3, [pc, #176]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400ebc:	601a      	str	r2, [r3, #0]
  400ebe:	e7e4      	b.n	400e8a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ec0:	4b29      	ldr	r3, [pc, #164]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400ec2:	6a1b      	ldr	r3, [r3, #32]
  400ec4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ec8:	d003      	beq.n	400ed2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400eca:	4a2a      	ldr	r2, [pc, #168]	; (400f74 <SystemCoreClockUpdate+0xfc>)
  400ecc:	4b27      	ldr	r3, [pc, #156]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400ece:	601a      	str	r2, [r3, #0]
  400ed0:	e7db      	b.n	400e8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ed2:	4a29      	ldr	r2, [pc, #164]	; (400f78 <SystemCoreClockUpdate+0x100>)
  400ed4:	4b25      	ldr	r3, [pc, #148]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400ed6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ed8:	4b23      	ldr	r3, [pc, #140]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400eda:	6a1b      	ldr	r3, [r3, #32]
  400edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ee0:	2b10      	cmp	r3, #16
  400ee2:	d005      	beq.n	400ef0 <SystemCoreClockUpdate+0x78>
  400ee4:	2b20      	cmp	r3, #32
  400ee6:	d1d0      	bne.n	400e8a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400ee8:	4a22      	ldr	r2, [pc, #136]	; (400f74 <SystemCoreClockUpdate+0xfc>)
  400eea:	4b20      	ldr	r3, [pc, #128]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400eec:	601a      	str	r2, [r3, #0]
          break;
  400eee:	e7cc      	b.n	400e8a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400ef0:	4a22      	ldr	r2, [pc, #136]	; (400f7c <SystemCoreClockUpdate+0x104>)
  400ef2:	4b1e      	ldr	r3, [pc, #120]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400ef4:	601a      	str	r2, [r3, #0]
          break;
  400ef6:	e7c8      	b.n	400e8a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ef8:	4b1b      	ldr	r3, [pc, #108]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400efa:	6a1b      	ldr	r3, [r3, #32]
  400efc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f00:	d016      	beq.n	400f30 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f02:	4a1c      	ldr	r2, [pc, #112]	; (400f74 <SystemCoreClockUpdate+0xfc>)
  400f04:	4b19      	ldr	r3, [pc, #100]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400f06:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f08:	4b17      	ldr	r3, [pc, #92]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f0c:	f003 0303 	and.w	r3, r3, #3
  400f10:	2b02      	cmp	r3, #2
  400f12:	d1ba      	bne.n	400e8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f14:	4a14      	ldr	r2, [pc, #80]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400f16:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f18:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f1a:	4814      	ldr	r0, [pc, #80]	; (400f6c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f1c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400f20:	6803      	ldr	r3, [r0, #0]
  400f22:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f26:	b2d2      	uxtb	r2, r2
  400f28:	fbb3 f3f2 	udiv	r3, r3, r2
  400f2c:	6003      	str	r3, [r0, #0]
  400f2e:	e7ac      	b.n	400e8a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f30:	4a11      	ldr	r2, [pc, #68]	; (400f78 <SystemCoreClockUpdate+0x100>)
  400f32:	4b0e      	ldr	r3, [pc, #56]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400f34:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f36:	4b0c      	ldr	r3, [pc, #48]	; (400f68 <SystemCoreClockUpdate+0xf0>)
  400f38:	6a1b      	ldr	r3, [r3, #32]
  400f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f3e:	2b10      	cmp	r3, #16
  400f40:	d005      	beq.n	400f4e <SystemCoreClockUpdate+0xd6>
  400f42:	2b20      	cmp	r3, #32
  400f44:	d1e0      	bne.n	400f08 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400f46:	4a0b      	ldr	r2, [pc, #44]	; (400f74 <SystemCoreClockUpdate+0xfc>)
  400f48:	4b08      	ldr	r3, [pc, #32]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400f4a:	601a      	str	r2, [r3, #0]
          break;
  400f4c:	e7dc      	b.n	400f08 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400f4e:	4a0b      	ldr	r2, [pc, #44]	; (400f7c <SystemCoreClockUpdate+0x104>)
  400f50:	4b06      	ldr	r3, [pc, #24]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400f52:	601a      	str	r2, [r3, #0]
          break;
  400f54:	e7d8      	b.n	400f08 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400f56:	4a05      	ldr	r2, [pc, #20]	; (400f6c <SystemCoreClockUpdate+0xf4>)
  400f58:	6813      	ldr	r3, [r2, #0]
  400f5a:	4909      	ldr	r1, [pc, #36]	; (400f80 <SystemCoreClockUpdate+0x108>)
  400f5c:	fba1 1303 	umull	r1, r3, r1, r3
  400f60:	085b      	lsrs	r3, r3, #1
  400f62:	6013      	str	r3, [r2, #0]
  400f64:	4770      	bx	lr
  400f66:	bf00      	nop
  400f68:	400e0600 	.word	0x400e0600
  400f6c:	20400004 	.word	0x20400004
  400f70:	400e1810 	.word	0x400e1810
  400f74:	00b71b00 	.word	0x00b71b00
  400f78:	003d0900 	.word	0x003d0900
  400f7c:	007a1200 	.word	0x007a1200
  400f80:	aaaaaaab 	.word	0xaaaaaaab

00400f84 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400f84:	4b16      	ldr	r3, [pc, #88]	; (400fe0 <system_init_flash+0x5c>)
  400f86:	4298      	cmp	r0, r3
  400f88:	d913      	bls.n	400fb2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400f8a:	4b16      	ldr	r3, [pc, #88]	; (400fe4 <system_init_flash+0x60>)
  400f8c:	4298      	cmp	r0, r3
  400f8e:	d915      	bls.n	400fbc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400f90:	4b15      	ldr	r3, [pc, #84]	; (400fe8 <system_init_flash+0x64>)
  400f92:	4298      	cmp	r0, r3
  400f94:	d916      	bls.n	400fc4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400f96:	4b15      	ldr	r3, [pc, #84]	; (400fec <system_init_flash+0x68>)
  400f98:	4298      	cmp	r0, r3
  400f9a:	d917      	bls.n	400fcc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400f9c:	4b14      	ldr	r3, [pc, #80]	; (400ff0 <system_init_flash+0x6c>)
  400f9e:	4298      	cmp	r0, r3
  400fa0:	d918      	bls.n	400fd4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400fa2:	4b14      	ldr	r3, [pc, #80]	; (400ff4 <system_init_flash+0x70>)
  400fa4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400fa6:	bf94      	ite	ls
  400fa8:	4a13      	ldrls	r2, [pc, #76]	; (400ff8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400faa:	4a14      	ldrhi	r2, [pc, #80]	; (400ffc <system_init_flash+0x78>)
  400fac:	4b14      	ldr	r3, [pc, #80]	; (401000 <system_init_flash+0x7c>)
  400fae:	601a      	str	r2, [r3, #0]
  400fb0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fb6:	4b12      	ldr	r3, [pc, #72]	; (401000 <system_init_flash+0x7c>)
  400fb8:	601a      	str	r2, [r3, #0]
  400fba:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fbc:	4a11      	ldr	r2, [pc, #68]	; (401004 <system_init_flash+0x80>)
  400fbe:	4b10      	ldr	r3, [pc, #64]	; (401000 <system_init_flash+0x7c>)
  400fc0:	601a      	str	r2, [r3, #0]
  400fc2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400fc4:	4a10      	ldr	r2, [pc, #64]	; (401008 <system_init_flash+0x84>)
  400fc6:	4b0e      	ldr	r3, [pc, #56]	; (401000 <system_init_flash+0x7c>)
  400fc8:	601a      	str	r2, [r3, #0]
  400fca:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400fcc:	4a0f      	ldr	r2, [pc, #60]	; (40100c <system_init_flash+0x88>)
  400fce:	4b0c      	ldr	r3, [pc, #48]	; (401000 <system_init_flash+0x7c>)
  400fd0:	601a      	str	r2, [r3, #0]
  400fd2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400fd4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400fd8:	4b09      	ldr	r3, [pc, #36]	; (401000 <system_init_flash+0x7c>)
  400fda:	601a      	str	r2, [r3, #0]
  400fdc:	4770      	bx	lr
  400fde:	bf00      	nop
  400fe0:	015ef3bf 	.word	0x015ef3bf
  400fe4:	02bde77f 	.word	0x02bde77f
  400fe8:	041cdb3f 	.word	0x041cdb3f
  400fec:	057bceff 	.word	0x057bceff
  400ff0:	06dac2bf 	.word	0x06dac2bf
  400ff4:	0839b67f 	.word	0x0839b67f
  400ff8:	04000500 	.word	0x04000500
  400ffc:	04000600 	.word	0x04000600
  401000:	400e0c00 	.word	0x400e0c00
  401004:	04000100 	.word	0x04000100
  401008:	04000200 	.word	0x04000200
  40100c:	04000300 	.word	0x04000300

00401010 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401010:	4b0a      	ldr	r3, [pc, #40]	; (40103c <_sbrk+0x2c>)
  401012:	681b      	ldr	r3, [r3, #0]
  401014:	b153      	cbz	r3, 40102c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401016:	4b09      	ldr	r3, [pc, #36]	; (40103c <_sbrk+0x2c>)
  401018:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40101a:	181a      	adds	r2, r3, r0
  40101c:	4908      	ldr	r1, [pc, #32]	; (401040 <_sbrk+0x30>)
  40101e:	4291      	cmp	r1, r2
  401020:	db08      	blt.n	401034 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401022:	4610      	mov	r0, r2
  401024:	4a05      	ldr	r2, [pc, #20]	; (40103c <_sbrk+0x2c>)
  401026:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401028:	4618      	mov	r0, r3
  40102a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40102c:	4a05      	ldr	r2, [pc, #20]	; (401044 <_sbrk+0x34>)
  40102e:	4b03      	ldr	r3, [pc, #12]	; (40103c <_sbrk+0x2c>)
  401030:	601a      	str	r2, [r3, #0]
  401032:	e7f0      	b.n	401016 <_sbrk+0x6>
		return (caddr_t) -1;	
  401034:	f04f 30ff 	mov.w	r0, #4294967295
}
  401038:	4770      	bx	lr
  40103a:	bf00      	nop
  40103c:	20400a4c 	.word	0x20400a4c
  401040:	2045fffc 	.word	0x2045fffc
  401044:	20402f10 	.word	0x20402f10

00401048 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401048:	f04f 30ff 	mov.w	r0, #4294967295
  40104c:	4770      	bx	lr

0040104e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40104e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401052:	604b      	str	r3, [r1, #4]

	return 0;
}
  401054:	2000      	movs	r0, #0
  401056:	4770      	bx	lr

00401058 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401058:	2001      	movs	r0, #1
  40105a:	4770      	bx	lr

0040105c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40105c:	2000      	movs	r0, #0
  40105e:	4770      	bx	lr

00401060 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401060:	f100 0308 	add.w	r3, r0, #8
  401064:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401066:	f04f 32ff 	mov.w	r2, #4294967295
  40106a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40106c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40106e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401070:	2300      	movs	r3, #0
  401072:	6003      	str	r3, [r0, #0]
  401074:	4770      	bx	lr

00401076 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401076:	2300      	movs	r3, #0
  401078:	6103      	str	r3, [r0, #16]
  40107a:	4770      	bx	lr

0040107c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40107c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40107e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401080:	689a      	ldr	r2, [r3, #8]
  401082:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401084:	689a      	ldr	r2, [r3, #8]
  401086:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401088:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40108a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40108c:	6803      	ldr	r3, [r0, #0]
  40108e:	3301      	adds	r3, #1
  401090:	6003      	str	r3, [r0, #0]
  401092:	4770      	bx	lr

00401094 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401094:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401096:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401098:	f1b5 3fff 	cmp.w	r5, #4294967295
  40109c:	d002      	beq.n	4010a4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40109e:	f100 0208 	add.w	r2, r0, #8
  4010a2:	e002      	b.n	4010aa <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4010a4:	6902      	ldr	r2, [r0, #16]
  4010a6:	e004      	b.n	4010b2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010a8:	461a      	mov	r2, r3
  4010aa:	6853      	ldr	r3, [r2, #4]
  4010ac:	681c      	ldr	r4, [r3, #0]
  4010ae:	42a5      	cmp	r5, r4
  4010b0:	d2fa      	bcs.n	4010a8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4010b2:	6853      	ldr	r3, [r2, #4]
  4010b4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4010b6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4010b8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4010ba:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4010bc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4010be:	6803      	ldr	r3, [r0, #0]
  4010c0:	3301      	adds	r3, #1
  4010c2:	6003      	str	r3, [r0, #0]
}
  4010c4:	bc30      	pop	{r4, r5}
  4010c6:	4770      	bx	lr

004010c8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4010c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4010ca:	6842      	ldr	r2, [r0, #4]
  4010cc:	6881      	ldr	r1, [r0, #8]
  4010ce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4010d0:	6882      	ldr	r2, [r0, #8]
  4010d2:	6841      	ldr	r1, [r0, #4]
  4010d4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4010d6:	685a      	ldr	r2, [r3, #4]
  4010d8:	4290      	cmp	r0, r2
  4010da:	d005      	beq.n	4010e8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4010dc:	2200      	movs	r2, #0
  4010de:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4010e0:	6818      	ldr	r0, [r3, #0]
  4010e2:	3801      	subs	r0, #1
  4010e4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4010e6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4010e8:	6882      	ldr	r2, [r0, #8]
  4010ea:	605a      	str	r2, [r3, #4]
  4010ec:	e7f6      	b.n	4010dc <uxListRemove+0x14>
	...

004010f0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4010f0:	4b0d      	ldr	r3, [pc, #52]	; (401128 <prvTaskExitError+0x38>)
  4010f2:	681b      	ldr	r3, [r3, #0]
  4010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010f8:	d00a      	beq.n	401110 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4010fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010fe:	b672      	cpsid	i
  401100:	f383 8811 	msr	BASEPRI, r3
  401104:	f3bf 8f6f 	isb	sy
  401108:	f3bf 8f4f 	dsb	sy
  40110c:	b662      	cpsie	i
  40110e:	e7fe      	b.n	40110e <prvTaskExitError+0x1e>
  401110:	f04f 0380 	mov.w	r3, #128	; 0x80
  401114:	b672      	cpsid	i
  401116:	f383 8811 	msr	BASEPRI, r3
  40111a:	f3bf 8f6f 	isb	sy
  40111e:	f3bf 8f4f 	dsb	sy
  401122:	b662      	cpsie	i
  401124:	e7fe      	b.n	401124 <prvTaskExitError+0x34>
  401126:	bf00      	nop
  401128:	20400008 	.word	0x20400008

0040112c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40112c:	4806      	ldr	r0, [pc, #24]	; (401148 <prvPortStartFirstTask+0x1c>)
  40112e:	6800      	ldr	r0, [r0, #0]
  401130:	6800      	ldr	r0, [r0, #0]
  401132:	f380 8808 	msr	MSP, r0
  401136:	b662      	cpsie	i
  401138:	b661      	cpsie	f
  40113a:	f3bf 8f4f 	dsb	sy
  40113e:	f3bf 8f6f 	isb	sy
  401142:	df00      	svc	0
  401144:	bf00      	nop
  401146:	0000      	.short	0x0000
  401148:	e000ed08 	.word	0xe000ed08

0040114c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40114c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40115c <vPortEnableVFP+0x10>
  401150:	6801      	ldr	r1, [r0, #0]
  401152:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401156:	6001      	str	r1, [r0, #0]
  401158:	4770      	bx	lr
  40115a:	0000      	.short	0x0000
  40115c:	e000ed88 	.word	0xe000ed88

00401160 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401164:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401168:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40116c:	4b05      	ldr	r3, [pc, #20]	; (401184 <pxPortInitialiseStack+0x24>)
  40116e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401172:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401176:	f06f 0302 	mvn.w	r3, #2
  40117a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40117e:	3844      	subs	r0, #68	; 0x44
  401180:	4770      	bx	lr
  401182:	bf00      	nop
  401184:	004010f1 	.word	0x004010f1

00401188 <SVC_Handler>:
	__asm volatile (
  401188:	4b06      	ldr	r3, [pc, #24]	; (4011a4 <pxCurrentTCBConst2>)
  40118a:	6819      	ldr	r1, [r3, #0]
  40118c:	6808      	ldr	r0, [r1, #0]
  40118e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401192:	f380 8809 	msr	PSP, r0
  401196:	f3bf 8f6f 	isb	sy
  40119a:	f04f 0000 	mov.w	r0, #0
  40119e:	f380 8811 	msr	BASEPRI, r0
  4011a2:	4770      	bx	lr

004011a4 <pxCurrentTCBConst2>:
  4011a4:	20400a58 	.word	0x20400a58
  4011a8:	4770      	bx	lr
  4011aa:	bf00      	nop

004011ac <vPortEnterCritical>:
  4011ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011b0:	b672      	cpsid	i
  4011b2:	f383 8811 	msr	BASEPRI, r3
  4011b6:	f3bf 8f6f 	isb	sy
  4011ba:	f3bf 8f4f 	dsb	sy
  4011be:	b662      	cpsie	i
	uxCriticalNesting++;
  4011c0:	4a0b      	ldr	r2, [pc, #44]	; (4011f0 <vPortEnterCritical+0x44>)
  4011c2:	6813      	ldr	r3, [r2, #0]
  4011c4:	3301      	adds	r3, #1
  4011c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4011c8:	2b01      	cmp	r3, #1
  4011ca:	d10f      	bne.n	4011ec <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4011cc:	4b09      	ldr	r3, [pc, #36]	; (4011f4 <vPortEnterCritical+0x48>)
  4011ce:	681b      	ldr	r3, [r3, #0]
  4011d0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4011d4:	d00a      	beq.n	4011ec <vPortEnterCritical+0x40>
  4011d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011da:	b672      	cpsid	i
  4011dc:	f383 8811 	msr	BASEPRI, r3
  4011e0:	f3bf 8f6f 	isb	sy
  4011e4:	f3bf 8f4f 	dsb	sy
  4011e8:	b662      	cpsie	i
  4011ea:	e7fe      	b.n	4011ea <vPortEnterCritical+0x3e>
  4011ec:	4770      	bx	lr
  4011ee:	bf00      	nop
  4011f0:	20400008 	.word	0x20400008
  4011f4:	e000ed04 	.word	0xe000ed04

004011f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4011f8:	4b0a      	ldr	r3, [pc, #40]	; (401224 <vPortExitCritical+0x2c>)
  4011fa:	681b      	ldr	r3, [r3, #0]
  4011fc:	b953      	cbnz	r3, 401214 <vPortExitCritical+0x1c>
  4011fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401202:	b672      	cpsid	i
  401204:	f383 8811 	msr	BASEPRI, r3
  401208:	f3bf 8f6f 	isb	sy
  40120c:	f3bf 8f4f 	dsb	sy
  401210:	b662      	cpsie	i
  401212:	e7fe      	b.n	401212 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401214:	3b01      	subs	r3, #1
  401216:	4a03      	ldr	r2, [pc, #12]	; (401224 <vPortExitCritical+0x2c>)
  401218:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40121a:	b90b      	cbnz	r3, 401220 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40121c:	f383 8811 	msr	BASEPRI, r3
  401220:	4770      	bx	lr
  401222:	bf00      	nop
  401224:	20400008 	.word	0x20400008

00401228 <PendSV_Handler>:
	__asm volatile
  401228:	f3ef 8009 	mrs	r0, PSP
  40122c:	f3bf 8f6f 	isb	sy
  401230:	4b15      	ldr	r3, [pc, #84]	; (401288 <pxCurrentTCBConst>)
  401232:	681a      	ldr	r2, [r3, #0]
  401234:	f01e 0f10 	tst.w	lr, #16
  401238:	bf08      	it	eq
  40123a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40123e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401242:	6010      	str	r0, [r2, #0]
  401244:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401248:	f04f 0080 	mov.w	r0, #128	; 0x80
  40124c:	b672      	cpsid	i
  40124e:	f380 8811 	msr	BASEPRI, r0
  401252:	f3bf 8f4f 	dsb	sy
  401256:	f3bf 8f6f 	isb	sy
  40125a:	b662      	cpsie	i
  40125c:	f001 f8b6 	bl	4023cc <vTaskSwitchContext>
  401260:	f04f 0000 	mov.w	r0, #0
  401264:	f380 8811 	msr	BASEPRI, r0
  401268:	bc08      	pop	{r3}
  40126a:	6819      	ldr	r1, [r3, #0]
  40126c:	6808      	ldr	r0, [r1, #0]
  40126e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401272:	f01e 0f10 	tst.w	lr, #16
  401276:	bf08      	it	eq
  401278:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40127c:	f380 8809 	msr	PSP, r0
  401280:	f3bf 8f6f 	isb	sy
  401284:	4770      	bx	lr
  401286:	bf00      	nop

00401288 <pxCurrentTCBConst>:
  401288:	20400a58 	.word	0x20400a58
  40128c:	4770      	bx	lr
  40128e:	bf00      	nop

00401290 <SysTick_Handler>:
{
  401290:	b508      	push	{r3, lr}
	__asm volatile
  401292:	f3ef 8311 	mrs	r3, BASEPRI
  401296:	f04f 0280 	mov.w	r2, #128	; 0x80
  40129a:	b672      	cpsid	i
  40129c:	f382 8811 	msr	BASEPRI, r2
  4012a0:	f3bf 8f6f 	isb	sy
  4012a4:	f3bf 8f4f 	dsb	sy
  4012a8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4012aa:	4b05      	ldr	r3, [pc, #20]	; (4012c0 <SysTick_Handler+0x30>)
  4012ac:	4798      	blx	r3
  4012ae:	b118      	cbz	r0, 4012b8 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4012b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012b4:	4b03      	ldr	r3, [pc, #12]	; (4012c4 <SysTick_Handler+0x34>)
  4012b6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4012b8:	2300      	movs	r3, #0
  4012ba:	f383 8811 	msr	BASEPRI, r3
  4012be:	bd08      	pop	{r3, pc}
  4012c0:	004020c9 	.word	0x004020c9
  4012c4:	e000ed04 	.word	0xe000ed04

004012c8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4012c8:	4a03      	ldr	r2, [pc, #12]	; (4012d8 <vPortSetupTimerInterrupt+0x10>)
  4012ca:	4b04      	ldr	r3, [pc, #16]	; (4012dc <vPortSetupTimerInterrupt+0x14>)
  4012cc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4012ce:	2207      	movs	r2, #7
  4012d0:	3b04      	subs	r3, #4
  4012d2:	601a      	str	r2, [r3, #0]
  4012d4:	4770      	bx	lr
  4012d6:	bf00      	nop
  4012d8:	000927bf 	.word	0x000927bf
  4012dc:	e000e014 	.word	0xe000e014

004012e0 <xPortStartScheduler>:
{
  4012e0:	b500      	push	{lr}
  4012e2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4012e4:	4b25      	ldr	r3, [pc, #148]	; (40137c <xPortStartScheduler+0x9c>)
  4012e6:	781a      	ldrb	r2, [r3, #0]
  4012e8:	b2d2      	uxtb	r2, r2
  4012ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4012ec:	22ff      	movs	r2, #255	; 0xff
  4012ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4012f0:	781b      	ldrb	r3, [r3, #0]
  4012f2:	b2db      	uxtb	r3, r3
  4012f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4012f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4012fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401300:	4a1f      	ldr	r2, [pc, #124]	; (401380 <xPortStartScheduler+0xa0>)
  401302:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401304:	2207      	movs	r2, #7
  401306:	4b1f      	ldr	r3, [pc, #124]	; (401384 <xPortStartScheduler+0xa4>)
  401308:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40130a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40130e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401312:	d010      	beq.n	401336 <xPortStartScheduler+0x56>
  401314:	2206      	movs	r2, #6
  401316:	e000      	b.n	40131a <xPortStartScheduler+0x3a>
  401318:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40131a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40131e:	005b      	lsls	r3, r3, #1
  401320:	b2db      	uxtb	r3, r3
  401322:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401326:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40132a:	1e51      	subs	r1, r2, #1
  40132c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401330:	d1f2      	bne.n	401318 <xPortStartScheduler+0x38>
  401332:	4b14      	ldr	r3, [pc, #80]	; (401384 <xPortStartScheduler+0xa4>)
  401334:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401336:	4a13      	ldr	r2, [pc, #76]	; (401384 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401338:	6813      	ldr	r3, [r2, #0]
  40133a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40133c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401340:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401342:	9b01      	ldr	r3, [sp, #4]
  401344:	b2db      	uxtb	r3, r3
  401346:	4a0d      	ldr	r2, [pc, #52]	; (40137c <xPortStartScheduler+0x9c>)
  401348:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40134a:	4b0f      	ldr	r3, [pc, #60]	; (401388 <xPortStartScheduler+0xa8>)
  40134c:	681a      	ldr	r2, [r3, #0]
  40134e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401352:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401354:	681a      	ldr	r2, [r3, #0]
  401356:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40135a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40135c:	4b0b      	ldr	r3, [pc, #44]	; (40138c <xPortStartScheduler+0xac>)
  40135e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401360:	2200      	movs	r2, #0
  401362:	4b0b      	ldr	r3, [pc, #44]	; (401390 <xPortStartScheduler+0xb0>)
  401364:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401366:	4b0b      	ldr	r3, [pc, #44]	; (401394 <xPortStartScheduler+0xb4>)
  401368:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40136a:	4a0b      	ldr	r2, [pc, #44]	; (401398 <xPortStartScheduler+0xb8>)
  40136c:	6813      	ldr	r3, [r2, #0]
  40136e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401372:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401374:	4b09      	ldr	r3, [pc, #36]	; (40139c <xPortStartScheduler+0xbc>)
  401376:	4798      	blx	r3
	prvTaskExitError();
  401378:	4b09      	ldr	r3, [pc, #36]	; (4013a0 <xPortStartScheduler+0xc0>)
  40137a:	4798      	blx	r3
  40137c:	e000e400 	.word	0xe000e400
  401380:	20400a50 	.word	0x20400a50
  401384:	20400a54 	.word	0x20400a54
  401388:	e000ed20 	.word	0xe000ed20
  40138c:	004012c9 	.word	0x004012c9
  401390:	20400008 	.word	0x20400008
  401394:	0040114d 	.word	0x0040114d
  401398:	e000ef34 	.word	0xe000ef34
  40139c:	0040112d 	.word	0x0040112d
  4013a0:	004010f1 	.word	0x004010f1

004013a4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4013a4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4013a8:	2b0f      	cmp	r3, #15
  4013aa:	d911      	bls.n	4013d0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4013ac:	4a12      	ldr	r2, [pc, #72]	; (4013f8 <vPortValidateInterruptPriority+0x54>)
  4013ae:	5c9b      	ldrb	r3, [r3, r2]
  4013b0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4013b2:	4a12      	ldr	r2, [pc, #72]	; (4013fc <vPortValidateInterruptPriority+0x58>)
  4013b4:	7812      	ldrb	r2, [r2, #0]
  4013b6:	429a      	cmp	r2, r3
  4013b8:	d90a      	bls.n	4013d0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4013ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013be:	b672      	cpsid	i
  4013c0:	f383 8811 	msr	BASEPRI, r3
  4013c4:	f3bf 8f6f 	isb	sy
  4013c8:	f3bf 8f4f 	dsb	sy
  4013cc:	b662      	cpsie	i
  4013ce:	e7fe      	b.n	4013ce <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4013d0:	4b0b      	ldr	r3, [pc, #44]	; (401400 <vPortValidateInterruptPriority+0x5c>)
  4013d2:	681b      	ldr	r3, [r3, #0]
  4013d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4013d8:	4a0a      	ldr	r2, [pc, #40]	; (401404 <vPortValidateInterruptPriority+0x60>)
  4013da:	6812      	ldr	r2, [r2, #0]
  4013dc:	4293      	cmp	r3, r2
  4013de:	d90a      	bls.n	4013f6 <vPortValidateInterruptPriority+0x52>
  4013e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013e4:	b672      	cpsid	i
  4013e6:	f383 8811 	msr	BASEPRI, r3
  4013ea:	f3bf 8f6f 	isb	sy
  4013ee:	f3bf 8f4f 	dsb	sy
  4013f2:	b662      	cpsie	i
  4013f4:	e7fe      	b.n	4013f4 <vPortValidateInterruptPriority+0x50>
  4013f6:	4770      	bx	lr
  4013f8:	e000e3f0 	.word	0xe000e3f0
  4013fc:	20400a50 	.word	0x20400a50
  401400:	e000ed0c 	.word	0xe000ed0c
  401404:	20400a54 	.word	0x20400a54

00401408 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401408:	b510      	push	{r4, lr}
  40140a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  40140c:	4b06      	ldr	r3, [pc, #24]	; (401428 <pvPortMalloc+0x20>)
  40140e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401410:	4620      	mov	r0, r4
  401412:	4b06      	ldr	r3, [pc, #24]	; (40142c <pvPortMalloc+0x24>)
  401414:	4798      	blx	r3
  401416:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401418:	4b05      	ldr	r3, [pc, #20]	; (401430 <pvPortMalloc+0x28>)
  40141a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40141c:	b10c      	cbz	r4, 401422 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40141e:	4620      	mov	r0, r4
  401420:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401422:	4b04      	ldr	r3, [pc, #16]	; (401434 <pvPortMalloc+0x2c>)
  401424:	4798      	blx	r3
	return pvReturn;
  401426:	e7fa      	b.n	40141e <pvPortMalloc+0x16>
  401428:	004020ad 	.word	0x004020ad
  40142c:	00403a31 	.word	0x00403a31
  401430:	00402215 	.word	0x00402215
  401434:	0040325b 	.word	0x0040325b

00401438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401438:	b148      	cbz	r0, 40144e <vPortFree+0x16>
{
  40143a:	b510      	push	{r4, lr}
  40143c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  40143e:	4b04      	ldr	r3, [pc, #16]	; (401450 <vPortFree+0x18>)
  401440:	4798      	blx	r3
		{
			free( pv );
  401442:	4620      	mov	r0, r4
  401444:	4b03      	ldr	r3, [pc, #12]	; (401454 <vPortFree+0x1c>)
  401446:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401448:	4b03      	ldr	r3, [pc, #12]	; (401458 <vPortFree+0x20>)
  40144a:	4798      	blx	r3
  40144c:	bd10      	pop	{r4, pc}
  40144e:	4770      	bx	lr
  401450:	004020ad 	.word	0x004020ad
  401454:	00403a41 	.word	0x00403a41
  401458:	00402215 	.word	0x00402215

0040145c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40145c:	b538      	push	{r3, r4, r5, lr}
  40145e:	4604      	mov	r4, r0
  401460:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401462:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401464:	b95a      	cbnz	r2, 40147e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401466:	6803      	ldr	r3, [r0, #0]
  401468:	2b00      	cmp	r3, #0
  40146a:	d12e      	bne.n	4014ca <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40146c:	6840      	ldr	r0, [r0, #4]
  40146e:	4b1b      	ldr	r3, [pc, #108]	; (4014dc <prvCopyDataToQueue+0x80>)
  401470:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401472:	2300      	movs	r3, #0
  401474:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401476:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401478:	3301      	adds	r3, #1
  40147a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40147c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40147e:	b96d      	cbnz	r5, 40149c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401480:	6880      	ldr	r0, [r0, #8]
  401482:	4b17      	ldr	r3, [pc, #92]	; (4014e0 <prvCopyDataToQueue+0x84>)
  401484:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401486:	68a3      	ldr	r3, [r4, #8]
  401488:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40148a:	4413      	add	r3, r2
  40148c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40148e:	6862      	ldr	r2, [r4, #4]
  401490:	4293      	cmp	r3, r2
  401492:	d31c      	bcc.n	4014ce <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401494:	6823      	ldr	r3, [r4, #0]
  401496:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401498:	2000      	movs	r0, #0
  40149a:	e7ec      	b.n	401476 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40149c:	68c0      	ldr	r0, [r0, #12]
  40149e:	4b10      	ldr	r3, [pc, #64]	; (4014e0 <prvCopyDataToQueue+0x84>)
  4014a0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4014a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4014a4:	425b      	negs	r3, r3
  4014a6:	68e2      	ldr	r2, [r4, #12]
  4014a8:	441a      	add	r2, r3
  4014aa:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4014ac:	6821      	ldr	r1, [r4, #0]
  4014ae:	428a      	cmp	r2, r1
  4014b0:	d202      	bcs.n	4014b8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4014b2:	6862      	ldr	r2, [r4, #4]
  4014b4:	4413      	add	r3, r2
  4014b6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4014b8:	2d02      	cmp	r5, #2
  4014ba:	d10a      	bne.n	4014d2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4014bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014be:	b153      	cbz	r3, 4014d6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4014c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014c2:	3b01      	subs	r3, #1
  4014c4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4014c6:	2000      	movs	r0, #0
  4014c8:	e7d5      	b.n	401476 <prvCopyDataToQueue+0x1a>
  4014ca:	2000      	movs	r0, #0
  4014cc:	e7d3      	b.n	401476 <prvCopyDataToQueue+0x1a>
  4014ce:	2000      	movs	r0, #0
  4014d0:	e7d1      	b.n	401476 <prvCopyDataToQueue+0x1a>
  4014d2:	2000      	movs	r0, #0
  4014d4:	e7cf      	b.n	401476 <prvCopyDataToQueue+0x1a>
  4014d6:	2000      	movs	r0, #0
  4014d8:	e7cd      	b.n	401476 <prvCopyDataToQueue+0x1a>
  4014da:	bf00      	nop
  4014dc:	004027cd 	.word	0x004027cd
  4014e0:	00403fb1 	.word	0x00403fb1

004014e4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4014e4:	b530      	push	{r4, r5, lr}
  4014e6:	b083      	sub	sp, #12
  4014e8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4014ea:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4014ec:	b174      	cbz	r4, 40150c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4014ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014f2:	429a      	cmp	r2, r3
  4014f4:	d315      	bcc.n	401522 <prvNotifyQueueSetContainer+0x3e>
  4014f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014fa:	b672      	cpsid	i
  4014fc:	f383 8811 	msr	BASEPRI, r3
  401500:	f3bf 8f6f 	isb	sy
  401504:	f3bf 8f4f 	dsb	sy
  401508:	b662      	cpsie	i
  40150a:	e7fe      	b.n	40150a <prvNotifyQueueSetContainer+0x26>
  40150c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401510:	b672      	cpsid	i
  401512:	f383 8811 	msr	BASEPRI, r3
  401516:	f3bf 8f6f 	isb	sy
  40151a:	f3bf 8f4f 	dsb	sy
  40151e:	b662      	cpsie	i
  401520:	e7fe      	b.n	401520 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401522:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401524:	4293      	cmp	r3, r2
  401526:	d803      	bhi.n	401530 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401528:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40152a:	4628      	mov	r0, r5
  40152c:	b003      	add	sp, #12
  40152e:	bd30      	pop	{r4, r5, pc}
  401530:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401532:	a901      	add	r1, sp, #4
  401534:	4620      	mov	r0, r4
  401536:	4b0b      	ldr	r3, [pc, #44]	; (401564 <prvNotifyQueueSetContainer+0x80>)
  401538:	4798      	blx	r3
  40153a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40153c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40153e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401542:	d10a      	bne.n	40155a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401544:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401546:	2b00      	cmp	r3, #0
  401548:	d0ef      	beq.n	40152a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40154a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40154e:	4b06      	ldr	r3, [pc, #24]	; (401568 <prvNotifyQueueSetContainer+0x84>)
  401550:	4798      	blx	r3
  401552:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401554:	bf18      	it	ne
  401556:	2501      	movne	r5, #1
  401558:	e7e7      	b.n	40152a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40155a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40155c:	3301      	adds	r3, #1
  40155e:	64a3      	str	r3, [r4, #72]	; 0x48
  401560:	e7e3      	b.n	40152a <prvNotifyQueueSetContainer+0x46>
  401562:	bf00      	nop
  401564:	0040145d 	.word	0x0040145d
  401568:	004025a1 	.word	0x004025a1

0040156c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40156c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40156e:	b172      	cbz	r2, 40158e <prvCopyDataFromQueue+0x22>
{
  401570:	b510      	push	{r4, lr}
  401572:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401574:	68c4      	ldr	r4, [r0, #12]
  401576:	4414      	add	r4, r2
  401578:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40157a:	6840      	ldr	r0, [r0, #4]
  40157c:	4284      	cmp	r4, r0
  40157e:	d301      	bcc.n	401584 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401580:	6818      	ldr	r0, [r3, #0]
  401582:	60d8      	str	r0, [r3, #12]
  401584:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401586:	68d9      	ldr	r1, [r3, #12]
  401588:	4b01      	ldr	r3, [pc, #4]	; (401590 <prvCopyDataFromQueue+0x24>)
  40158a:	4798      	blx	r3
  40158c:	bd10      	pop	{r4, pc}
  40158e:	4770      	bx	lr
  401590:	00403fb1 	.word	0x00403fb1

00401594 <prvUnlockQueue>:
{
  401594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401596:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401598:	4b22      	ldr	r3, [pc, #136]	; (401624 <prvUnlockQueue+0x90>)
  40159a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40159c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40159e:	2b00      	cmp	r3, #0
  4015a0:	dd1b      	ble.n	4015da <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4015a2:	4d21      	ldr	r5, [pc, #132]	; (401628 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4015a4:	4f21      	ldr	r7, [pc, #132]	; (40162c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015a6:	4e22      	ldr	r6, [pc, #136]	; (401630 <prvUnlockQueue+0x9c>)
  4015a8:	e00b      	b.n	4015c2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4015aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015ac:	b1ab      	cbz	r3, 4015da <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015b2:	47b0      	blx	r6
  4015b4:	b978      	cbnz	r0, 4015d6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4015b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015b8:	3b01      	subs	r3, #1
  4015ba:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4015bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015be:	2b00      	cmp	r3, #0
  4015c0:	dd0b      	ble.n	4015da <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4015c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4015c4:	2b00      	cmp	r3, #0
  4015c6:	d0f0      	beq.n	4015aa <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4015c8:	2100      	movs	r1, #0
  4015ca:	4620      	mov	r0, r4
  4015cc:	47a8      	blx	r5
  4015ce:	2801      	cmp	r0, #1
  4015d0:	d1f1      	bne.n	4015b6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4015d2:	47b8      	blx	r7
  4015d4:	e7ef      	b.n	4015b6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4015d6:	47b8      	blx	r7
  4015d8:	e7ed      	b.n	4015b6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4015da:	f04f 33ff 	mov.w	r3, #4294967295
  4015de:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4015e0:	4b14      	ldr	r3, [pc, #80]	; (401634 <prvUnlockQueue+0xa0>)
  4015e2:	4798      	blx	r3
	taskENTER_CRITICAL();
  4015e4:	4b0f      	ldr	r3, [pc, #60]	; (401624 <prvUnlockQueue+0x90>)
  4015e6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4015e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015ea:	2b00      	cmp	r3, #0
  4015ec:	dd14      	ble.n	401618 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015ee:	6923      	ldr	r3, [r4, #16]
  4015f0:	b193      	cbz	r3, 401618 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4015f2:	f104 0610 	add.w	r6, r4, #16
  4015f6:	4d0e      	ldr	r5, [pc, #56]	; (401630 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4015f8:	4f0c      	ldr	r7, [pc, #48]	; (40162c <prvUnlockQueue+0x98>)
  4015fa:	e007      	b.n	40160c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4015fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015fe:	3b01      	subs	r3, #1
  401600:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401602:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401604:	2b00      	cmp	r3, #0
  401606:	dd07      	ble.n	401618 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401608:	6923      	ldr	r3, [r4, #16]
  40160a:	b12b      	cbz	r3, 401618 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40160c:	4630      	mov	r0, r6
  40160e:	47a8      	blx	r5
  401610:	2800      	cmp	r0, #0
  401612:	d0f3      	beq.n	4015fc <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401614:	47b8      	blx	r7
  401616:	e7f1      	b.n	4015fc <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401618:	f04f 33ff 	mov.w	r3, #4294967295
  40161c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40161e:	4b05      	ldr	r3, [pc, #20]	; (401634 <prvUnlockQueue+0xa0>)
  401620:	4798      	blx	r3
  401622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401624:	004011ad 	.word	0x004011ad
  401628:	004014e5 	.word	0x004014e5
  40162c:	004026fd 	.word	0x004026fd
  401630:	004025a1 	.word	0x004025a1
  401634:	004011f9 	.word	0x004011f9

00401638 <xQueueGenericReset>:
{
  401638:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40163a:	b308      	cbz	r0, 401680 <xQueueGenericReset+0x48>
  40163c:	4604      	mov	r4, r0
  40163e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401640:	4b1d      	ldr	r3, [pc, #116]	; (4016b8 <xQueueGenericReset+0x80>)
  401642:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401644:	6822      	ldr	r2, [r4, #0]
  401646:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40164a:	fb03 f301 	mul.w	r3, r3, r1
  40164e:	18d0      	adds	r0, r2, r3
  401650:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401652:	2000      	movs	r0, #0
  401654:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401656:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401658:	1a5b      	subs	r3, r3, r1
  40165a:	4413      	add	r3, r2
  40165c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40165e:	f04f 33ff 	mov.w	r3, #4294967295
  401662:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401664:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401666:	b9fd      	cbnz	r5, 4016a8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401668:	6923      	ldr	r3, [r4, #16]
  40166a:	b12b      	cbz	r3, 401678 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40166c:	f104 0010 	add.w	r0, r4, #16
  401670:	4b12      	ldr	r3, [pc, #72]	; (4016bc <xQueueGenericReset+0x84>)
  401672:	4798      	blx	r3
  401674:	2801      	cmp	r0, #1
  401676:	d00e      	beq.n	401696 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401678:	4b11      	ldr	r3, [pc, #68]	; (4016c0 <xQueueGenericReset+0x88>)
  40167a:	4798      	blx	r3
}
  40167c:	2001      	movs	r0, #1
  40167e:	bd38      	pop	{r3, r4, r5, pc}
  401680:	f04f 0380 	mov.w	r3, #128	; 0x80
  401684:	b672      	cpsid	i
  401686:	f383 8811 	msr	BASEPRI, r3
  40168a:	f3bf 8f6f 	isb	sy
  40168e:	f3bf 8f4f 	dsb	sy
  401692:	b662      	cpsie	i
  401694:	e7fe      	b.n	401694 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40169a:	4b0a      	ldr	r3, [pc, #40]	; (4016c4 <xQueueGenericReset+0x8c>)
  40169c:	601a      	str	r2, [r3, #0]
  40169e:	f3bf 8f4f 	dsb	sy
  4016a2:	f3bf 8f6f 	isb	sy
  4016a6:	e7e7      	b.n	401678 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4016a8:	f104 0010 	add.w	r0, r4, #16
  4016ac:	4d06      	ldr	r5, [pc, #24]	; (4016c8 <xQueueGenericReset+0x90>)
  4016ae:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4016b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016b4:	47a8      	blx	r5
  4016b6:	e7df      	b.n	401678 <xQueueGenericReset+0x40>
  4016b8:	004011ad 	.word	0x004011ad
  4016bc:	004025a1 	.word	0x004025a1
  4016c0:	004011f9 	.word	0x004011f9
  4016c4:	e000ed04 	.word	0xe000ed04
  4016c8:	00401061 	.word	0x00401061

004016cc <xQueueGenericCreate>:
{
  4016cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4016ce:	b950      	cbnz	r0, 4016e6 <xQueueGenericCreate+0x1a>
  4016d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016d4:	b672      	cpsid	i
  4016d6:	f383 8811 	msr	BASEPRI, r3
  4016da:	f3bf 8f6f 	isb	sy
  4016de:	f3bf 8f4f 	dsb	sy
  4016e2:	b662      	cpsie	i
  4016e4:	e7fe      	b.n	4016e4 <xQueueGenericCreate+0x18>
  4016e6:	4606      	mov	r6, r0
  4016e8:	4617      	mov	r7, r2
  4016ea:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4016ec:	b189      	cbz	r1, 401712 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4016ee:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4016f2:	3059      	adds	r0, #89	; 0x59
  4016f4:	4b12      	ldr	r3, [pc, #72]	; (401740 <xQueueGenericCreate+0x74>)
  4016f6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4016f8:	4604      	mov	r4, r0
  4016fa:	b9e8      	cbnz	r0, 401738 <xQueueGenericCreate+0x6c>
  4016fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401700:	b672      	cpsid	i
  401702:	f383 8811 	msr	BASEPRI, r3
  401706:	f3bf 8f6f 	isb	sy
  40170a:	f3bf 8f4f 	dsb	sy
  40170e:	b662      	cpsie	i
  401710:	e7fe      	b.n	401710 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401712:	2058      	movs	r0, #88	; 0x58
  401714:	4b0a      	ldr	r3, [pc, #40]	; (401740 <xQueueGenericCreate+0x74>)
  401716:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401718:	4604      	mov	r4, r0
  40171a:	2800      	cmp	r0, #0
  40171c:	d0ee      	beq.n	4016fc <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40171e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401720:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401722:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401724:	2101      	movs	r1, #1
  401726:	4620      	mov	r0, r4
  401728:	4b06      	ldr	r3, [pc, #24]	; (401744 <xQueueGenericCreate+0x78>)
  40172a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  40172c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401730:	2300      	movs	r3, #0
  401732:	6563      	str	r3, [r4, #84]	; 0x54
}
  401734:	4620      	mov	r0, r4
  401736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401738:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40173c:	6003      	str	r3, [r0, #0]
  40173e:	e7ef      	b.n	401720 <xQueueGenericCreate+0x54>
  401740:	00401409 	.word	0x00401409
  401744:	00401639 	.word	0x00401639

00401748 <xQueueGenericSend>:
{
  401748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40174c:	b085      	sub	sp, #20
  40174e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401750:	b1b8      	cbz	r0, 401782 <xQueueGenericSend+0x3a>
  401752:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401754:	b301      	cbz	r1, 401798 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401756:	2b02      	cmp	r3, #2
  401758:	d02c      	beq.n	4017b4 <xQueueGenericSend+0x6c>
  40175a:	461d      	mov	r5, r3
  40175c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40175e:	4b66      	ldr	r3, [pc, #408]	; (4018f8 <xQueueGenericSend+0x1b0>)
  401760:	4798      	blx	r3
  401762:	2800      	cmp	r0, #0
  401764:	d134      	bne.n	4017d0 <xQueueGenericSend+0x88>
  401766:	9b01      	ldr	r3, [sp, #4]
  401768:	2b00      	cmp	r3, #0
  40176a:	d038      	beq.n	4017de <xQueueGenericSend+0x96>
  40176c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401770:	b672      	cpsid	i
  401772:	f383 8811 	msr	BASEPRI, r3
  401776:	f3bf 8f6f 	isb	sy
  40177a:	f3bf 8f4f 	dsb	sy
  40177e:	b662      	cpsie	i
  401780:	e7fe      	b.n	401780 <xQueueGenericSend+0x38>
  401782:	f04f 0380 	mov.w	r3, #128	; 0x80
  401786:	b672      	cpsid	i
  401788:	f383 8811 	msr	BASEPRI, r3
  40178c:	f3bf 8f6f 	isb	sy
  401790:	f3bf 8f4f 	dsb	sy
  401794:	b662      	cpsie	i
  401796:	e7fe      	b.n	401796 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401798:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40179a:	2a00      	cmp	r2, #0
  40179c:	d0db      	beq.n	401756 <xQueueGenericSend+0xe>
  40179e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017a2:	b672      	cpsid	i
  4017a4:	f383 8811 	msr	BASEPRI, r3
  4017a8:	f3bf 8f6f 	isb	sy
  4017ac:	f3bf 8f4f 	dsb	sy
  4017b0:	b662      	cpsie	i
  4017b2:	e7fe      	b.n	4017b2 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4017b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4017b6:	2a01      	cmp	r2, #1
  4017b8:	d0cf      	beq.n	40175a <xQueueGenericSend+0x12>
  4017ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017be:	b672      	cpsid	i
  4017c0:	f383 8811 	msr	BASEPRI, r3
  4017c4:	f3bf 8f6f 	isb	sy
  4017c8:	f3bf 8f4f 	dsb	sy
  4017cc:	b662      	cpsie	i
  4017ce:	e7fe      	b.n	4017ce <xQueueGenericSend+0x86>
  4017d0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4017d2:	4e4a      	ldr	r6, [pc, #296]	; (4018fc <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4017d4:	f8df a150 	ldr.w	sl, [pc, #336]	; 401928 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4017d8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401908 <xQueueGenericSend+0x1c0>
  4017dc:	e042      	b.n	401864 <xQueueGenericSend+0x11c>
  4017de:	2700      	movs	r7, #0
  4017e0:	e7f7      	b.n	4017d2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4017e2:	462a      	mov	r2, r5
  4017e4:	4641      	mov	r1, r8
  4017e6:	4620      	mov	r0, r4
  4017e8:	4b45      	ldr	r3, [pc, #276]	; (401900 <xQueueGenericSend+0x1b8>)
  4017ea:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4017ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4017ee:	b19b      	cbz	r3, 401818 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4017f0:	4629      	mov	r1, r5
  4017f2:	4620      	mov	r0, r4
  4017f4:	4b43      	ldr	r3, [pc, #268]	; (401904 <xQueueGenericSend+0x1bc>)
  4017f6:	4798      	blx	r3
  4017f8:	2801      	cmp	r0, #1
  4017fa:	d107      	bne.n	40180c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4017fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401800:	4b41      	ldr	r3, [pc, #260]	; (401908 <xQueueGenericSend+0x1c0>)
  401802:	601a      	str	r2, [r3, #0]
  401804:	f3bf 8f4f 	dsb	sy
  401808:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40180c:	4b3f      	ldr	r3, [pc, #252]	; (40190c <xQueueGenericSend+0x1c4>)
  40180e:	4798      	blx	r3
				return pdPASS;
  401810:	2001      	movs	r0, #1
}
  401812:	b005      	add	sp, #20
  401814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401818:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40181a:	b173      	cbz	r3, 40183a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40181c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401820:	4b3b      	ldr	r3, [pc, #236]	; (401910 <xQueueGenericSend+0x1c8>)
  401822:	4798      	blx	r3
  401824:	2801      	cmp	r0, #1
  401826:	d1f1      	bne.n	40180c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40182c:	4b36      	ldr	r3, [pc, #216]	; (401908 <xQueueGenericSend+0x1c0>)
  40182e:	601a      	str	r2, [r3, #0]
  401830:	f3bf 8f4f 	dsb	sy
  401834:	f3bf 8f6f 	isb	sy
  401838:	e7e8      	b.n	40180c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40183a:	2800      	cmp	r0, #0
  40183c:	d0e6      	beq.n	40180c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40183e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401842:	4b31      	ldr	r3, [pc, #196]	; (401908 <xQueueGenericSend+0x1c0>)
  401844:	601a      	str	r2, [r3, #0]
  401846:	f3bf 8f4f 	dsb	sy
  40184a:	f3bf 8f6f 	isb	sy
  40184e:	e7dd      	b.n	40180c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401850:	4b2e      	ldr	r3, [pc, #184]	; (40190c <xQueueGenericSend+0x1c4>)
  401852:	4798      	blx	r3
					return errQUEUE_FULL;
  401854:	2000      	movs	r0, #0
  401856:	e7dc      	b.n	401812 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401858:	4620      	mov	r0, r4
  40185a:	4b2e      	ldr	r3, [pc, #184]	; (401914 <xQueueGenericSend+0x1cc>)
  40185c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40185e:	4b2e      	ldr	r3, [pc, #184]	; (401918 <xQueueGenericSend+0x1d0>)
  401860:	4798      	blx	r3
  401862:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401864:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401866:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401868:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40186a:	429a      	cmp	r2, r3
  40186c:	d3b9      	bcc.n	4017e2 <xQueueGenericSend+0x9a>
  40186e:	2d02      	cmp	r5, #2
  401870:	d0b7      	beq.n	4017e2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401872:	9b01      	ldr	r3, [sp, #4]
  401874:	2b00      	cmp	r3, #0
  401876:	d0eb      	beq.n	401850 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401878:	b90f      	cbnz	r7, 40187e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40187a:	a802      	add	r0, sp, #8
  40187c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40187e:	4b23      	ldr	r3, [pc, #140]	; (40190c <xQueueGenericSend+0x1c4>)
  401880:	4798      	blx	r3
		vTaskSuspendAll();
  401882:	4b26      	ldr	r3, [pc, #152]	; (40191c <xQueueGenericSend+0x1d4>)
  401884:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401886:	47b0      	blx	r6
  401888:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40188a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40188e:	d101      	bne.n	401894 <xQueueGenericSend+0x14c>
  401890:	2300      	movs	r3, #0
  401892:	6463      	str	r3, [r4, #68]	; 0x44
  401894:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401896:	f1b3 3fff 	cmp.w	r3, #4294967295
  40189a:	d101      	bne.n	4018a0 <xQueueGenericSend+0x158>
  40189c:	2300      	movs	r3, #0
  40189e:	64a3      	str	r3, [r4, #72]	; 0x48
  4018a0:	4b1a      	ldr	r3, [pc, #104]	; (40190c <xQueueGenericSend+0x1c4>)
  4018a2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4018a4:	a901      	add	r1, sp, #4
  4018a6:	a802      	add	r0, sp, #8
  4018a8:	4b1d      	ldr	r3, [pc, #116]	; (401920 <xQueueGenericSend+0x1d8>)
  4018aa:	4798      	blx	r3
  4018ac:	b9e0      	cbnz	r0, 4018e8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4018ae:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4018b0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4018b4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4018b6:	4b15      	ldr	r3, [pc, #84]	; (40190c <xQueueGenericSend+0x1c4>)
  4018b8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4018ba:	45bb      	cmp	fp, r7
  4018bc:	d1cc      	bne.n	401858 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4018be:	9901      	ldr	r1, [sp, #4]
  4018c0:	f104 0010 	add.w	r0, r4, #16
  4018c4:	4b17      	ldr	r3, [pc, #92]	; (401924 <xQueueGenericSend+0x1dc>)
  4018c6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4018c8:	4620      	mov	r0, r4
  4018ca:	4b12      	ldr	r3, [pc, #72]	; (401914 <xQueueGenericSend+0x1cc>)
  4018cc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4018ce:	4b12      	ldr	r3, [pc, #72]	; (401918 <xQueueGenericSend+0x1d0>)
  4018d0:	4798      	blx	r3
  4018d2:	2800      	cmp	r0, #0
  4018d4:	d1c5      	bne.n	401862 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4018d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4018da:	f8c9 3000 	str.w	r3, [r9]
  4018de:	f3bf 8f4f 	dsb	sy
  4018e2:	f3bf 8f6f 	isb	sy
  4018e6:	e7bc      	b.n	401862 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4018e8:	4620      	mov	r0, r4
  4018ea:	4b0a      	ldr	r3, [pc, #40]	; (401914 <xQueueGenericSend+0x1cc>)
  4018ec:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4018ee:	4b0a      	ldr	r3, [pc, #40]	; (401918 <xQueueGenericSend+0x1d0>)
  4018f0:	4798      	blx	r3
			return errQUEUE_FULL;
  4018f2:	2000      	movs	r0, #0
  4018f4:	e78d      	b.n	401812 <xQueueGenericSend+0xca>
  4018f6:	bf00      	nop
  4018f8:	00402709 	.word	0x00402709
  4018fc:	004011ad 	.word	0x004011ad
  401900:	0040145d 	.word	0x0040145d
  401904:	004014e5 	.word	0x004014e5
  401908:	e000ed04 	.word	0xe000ed04
  40190c:	004011f9 	.word	0x004011f9
  401910:	004025a1 	.word	0x004025a1
  401914:	00401595 	.word	0x00401595
  401918:	00402215 	.word	0x00402215
  40191c:	004020ad 	.word	0x004020ad
  401920:	00402669 	.word	0x00402669
  401924:	0040249d 	.word	0x0040249d
  401928:	00402639 	.word	0x00402639

0040192c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  40192c:	2800      	cmp	r0, #0
  40192e:	d036      	beq.n	40199e <xQueueGenericSendFromISR+0x72>
{
  401930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401934:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401936:	2900      	cmp	r1, #0
  401938:	d03c      	beq.n	4019b4 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40193a:	2b02      	cmp	r3, #2
  40193c:	d048      	beq.n	4019d0 <xQueueGenericSendFromISR+0xa4>
  40193e:	461e      	mov	r6, r3
  401940:	4615      	mov	r5, r2
  401942:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401944:	4b35      	ldr	r3, [pc, #212]	; (401a1c <xQueueGenericSendFromISR+0xf0>)
  401946:	4798      	blx	r3
	__asm volatile
  401948:	f3ef 8711 	mrs	r7, BASEPRI
  40194c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401950:	b672      	cpsid	i
  401952:	f383 8811 	msr	BASEPRI, r3
  401956:	f3bf 8f6f 	isb	sy
  40195a:	f3bf 8f4f 	dsb	sy
  40195e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401960:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401964:	429a      	cmp	r2, r3
  401966:	d301      	bcc.n	40196c <xQueueGenericSendFromISR+0x40>
  401968:	2e02      	cmp	r6, #2
  40196a:	d14f      	bne.n	401a0c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40196c:	4632      	mov	r2, r6
  40196e:	4641      	mov	r1, r8
  401970:	4620      	mov	r0, r4
  401972:	4b2b      	ldr	r3, [pc, #172]	; (401a20 <xQueueGenericSendFromISR+0xf4>)
  401974:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401976:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401978:	f1b3 3fff 	cmp.w	r3, #4294967295
  40197c:	d141      	bne.n	401a02 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40197e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401980:	2b00      	cmp	r3, #0
  401982:	d033      	beq.n	4019ec <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401984:	4631      	mov	r1, r6
  401986:	4620      	mov	r0, r4
  401988:	4b26      	ldr	r3, [pc, #152]	; (401a24 <xQueueGenericSendFromISR+0xf8>)
  40198a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40198c:	2d00      	cmp	r5, #0
  40198e:	d03f      	beq.n	401a10 <xQueueGenericSendFromISR+0xe4>
  401990:	2801      	cmp	r0, #1
  401992:	d13d      	bne.n	401a10 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401994:	6028      	str	r0, [r5, #0]
	__asm volatile
  401996:	f387 8811 	msr	BASEPRI, r7
}
  40199a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40199e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019a2:	b672      	cpsid	i
  4019a4:	f383 8811 	msr	BASEPRI, r3
  4019a8:	f3bf 8f6f 	isb	sy
  4019ac:	f3bf 8f4f 	dsb	sy
  4019b0:	b662      	cpsie	i
  4019b2:	e7fe      	b.n	4019b2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4019b4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4019b6:	2800      	cmp	r0, #0
  4019b8:	d0bf      	beq.n	40193a <xQueueGenericSendFromISR+0xe>
  4019ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019be:	b672      	cpsid	i
  4019c0:	f383 8811 	msr	BASEPRI, r3
  4019c4:	f3bf 8f6f 	isb	sy
  4019c8:	f3bf 8f4f 	dsb	sy
  4019cc:	b662      	cpsie	i
  4019ce:	e7fe      	b.n	4019ce <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4019d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4019d2:	2801      	cmp	r0, #1
  4019d4:	d0b3      	beq.n	40193e <xQueueGenericSendFromISR+0x12>
  4019d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019da:	b672      	cpsid	i
  4019dc:	f383 8811 	msr	BASEPRI, r3
  4019e0:	f3bf 8f6f 	isb	sy
  4019e4:	f3bf 8f4f 	dsb	sy
  4019e8:	b662      	cpsie	i
  4019ea:	e7fe      	b.n	4019ea <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4019ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4019ee:	b18b      	cbz	r3, 401a14 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4019f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019f4:	4b0c      	ldr	r3, [pc, #48]	; (401a28 <xQueueGenericSendFromISR+0xfc>)
  4019f6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4019f8:	b175      	cbz	r5, 401a18 <xQueueGenericSendFromISR+0xec>
  4019fa:	b168      	cbz	r0, 401a18 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4019fc:	2001      	movs	r0, #1
  4019fe:	6028      	str	r0, [r5, #0]
  401a00:	e7c9      	b.n	401996 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401a02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a04:	3301      	adds	r3, #1
  401a06:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401a08:	2001      	movs	r0, #1
  401a0a:	e7c4      	b.n	401996 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401a0c:	2000      	movs	r0, #0
  401a0e:	e7c2      	b.n	401996 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401a10:	2001      	movs	r0, #1
  401a12:	e7c0      	b.n	401996 <xQueueGenericSendFromISR+0x6a>
  401a14:	2001      	movs	r0, #1
  401a16:	e7be      	b.n	401996 <xQueueGenericSendFromISR+0x6a>
  401a18:	2001      	movs	r0, #1
  401a1a:	e7bc      	b.n	401996 <xQueueGenericSendFromISR+0x6a>
  401a1c:	004013a5 	.word	0x004013a5
  401a20:	0040145d 	.word	0x0040145d
  401a24:	004014e5 	.word	0x004014e5
  401a28:	004025a1 	.word	0x004025a1

00401a2c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401a2c:	b170      	cbz	r0, 401a4c <xQueueGiveFromISR+0x20>
{
  401a2e:	b570      	push	{r4, r5, r6, lr}
  401a30:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401a32:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401a34:	b1ab      	cbz	r3, 401a62 <xQueueGiveFromISR+0x36>
  401a36:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a3a:	b672      	cpsid	i
  401a3c:	f383 8811 	msr	BASEPRI, r3
  401a40:	f3bf 8f6f 	isb	sy
  401a44:	f3bf 8f4f 	dsb	sy
  401a48:	b662      	cpsie	i
  401a4a:	e7fe      	b.n	401a4a <xQueueGiveFromISR+0x1e>
  401a4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a50:	b672      	cpsid	i
  401a52:	f383 8811 	msr	BASEPRI, r3
  401a56:	f3bf 8f6f 	isb	sy
  401a5a:	f3bf 8f4f 	dsb	sy
  401a5e:	b662      	cpsie	i
  401a60:	e7fe      	b.n	401a60 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401a62:	6803      	ldr	r3, [r0, #0]
  401a64:	b333      	cbz	r3, 401ab4 <xQueueGiveFromISR+0x88>
  401a66:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401a68:	4b25      	ldr	r3, [pc, #148]	; (401b00 <xQueueGiveFromISR+0xd4>)
  401a6a:	4798      	blx	r3
	__asm volatile
  401a6c:	f3ef 8611 	mrs	r6, BASEPRI
  401a70:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a74:	b672      	cpsid	i
  401a76:	f383 8811 	msr	BASEPRI, r3
  401a7a:	f3bf 8f6f 	isb	sy
  401a7e:	f3bf 8f4f 	dsb	sy
  401a82:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401a84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401a86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a88:	429a      	cmp	r2, r3
  401a8a:	d231      	bcs.n	401af0 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  401a8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a8e:	3301      	adds	r3, #1
  401a90:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401a92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a94:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a98:	d125      	bne.n	401ae6 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401a9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401a9c:	b1c3      	cbz	r3, 401ad0 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401a9e:	2100      	movs	r1, #0
  401aa0:	4620      	mov	r0, r4
  401aa2:	4b18      	ldr	r3, [pc, #96]	; (401b04 <xQueueGiveFromISR+0xd8>)
  401aa4:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401aa6:	b32d      	cbz	r5, 401af4 <xQueueGiveFromISR+0xc8>
  401aa8:	2801      	cmp	r0, #1
  401aaa:	d123      	bne.n	401af4 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401aac:	6028      	str	r0, [r5, #0]
	__asm volatile
  401aae:	f386 8811 	msr	BASEPRI, r6
}
  401ab2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401ab4:	6843      	ldr	r3, [r0, #4]
  401ab6:	2b00      	cmp	r3, #0
  401ab8:	d0d5      	beq.n	401a66 <xQueueGiveFromISR+0x3a>
	__asm volatile
  401aba:	f04f 0380 	mov.w	r3, #128	; 0x80
  401abe:	b672      	cpsid	i
  401ac0:	f383 8811 	msr	BASEPRI, r3
  401ac4:	f3bf 8f6f 	isb	sy
  401ac8:	f3bf 8f4f 	dsb	sy
  401acc:	b662      	cpsie	i
  401ace:	e7fe      	b.n	401ace <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ad2:	b18b      	cbz	r3, 401af8 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ad4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ad8:	4b0b      	ldr	r3, [pc, #44]	; (401b08 <xQueueGiveFromISR+0xdc>)
  401ada:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401adc:	b175      	cbz	r5, 401afc <xQueueGiveFromISR+0xd0>
  401ade:	b168      	cbz	r0, 401afc <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401ae0:	2001      	movs	r0, #1
  401ae2:	6028      	str	r0, [r5, #0]
  401ae4:	e7e3      	b.n	401aae <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401ae6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ae8:	3301      	adds	r3, #1
  401aea:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401aec:	2001      	movs	r0, #1
  401aee:	e7de      	b.n	401aae <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401af0:	2000      	movs	r0, #0
  401af2:	e7dc      	b.n	401aae <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401af4:	2001      	movs	r0, #1
  401af6:	e7da      	b.n	401aae <xQueueGiveFromISR+0x82>
  401af8:	2001      	movs	r0, #1
  401afa:	e7d8      	b.n	401aae <xQueueGiveFromISR+0x82>
  401afc:	2001      	movs	r0, #1
  401afe:	e7d6      	b.n	401aae <xQueueGiveFromISR+0x82>
  401b00:	004013a5 	.word	0x004013a5
  401b04:	004014e5 	.word	0x004014e5
  401b08:	004025a1 	.word	0x004025a1

00401b0c <xQueueGenericReceive>:
{
  401b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b10:	b084      	sub	sp, #16
  401b12:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b14:	b198      	cbz	r0, 401b3e <xQueueGenericReceive+0x32>
  401b16:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b18:	b1e1      	cbz	r1, 401b54 <xQueueGenericReceive+0x48>
  401b1a:	4698      	mov	r8, r3
  401b1c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b1e:	4b61      	ldr	r3, [pc, #388]	; (401ca4 <xQueueGenericReceive+0x198>)
  401b20:	4798      	blx	r3
  401b22:	bb28      	cbnz	r0, 401b70 <xQueueGenericReceive+0x64>
  401b24:	9b01      	ldr	r3, [sp, #4]
  401b26:	b353      	cbz	r3, 401b7e <xQueueGenericReceive+0x72>
  401b28:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b2c:	b672      	cpsid	i
  401b2e:	f383 8811 	msr	BASEPRI, r3
  401b32:	f3bf 8f6f 	isb	sy
  401b36:	f3bf 8f4f 	dsb	sy
  401b3a:	b662      	cpsie	i
  401b3c:	e7fe      	b.n	401b3c <xQueueGenericReceive+0x30>
  401b3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b42:	b672      	cpsid	i
  401b44:	f383 8811 	msr	BASEPRI, r3
  401b48:	f3bf 8f6f 	isb	sy
  401b4c:	f3bf 8f4f 	dsb	sy
  401b50:	b662      	cpsie	i
  401b52:	e7fe      	b.n	401b52 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b54:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b56:	2a00      	cmp	r2, #0
  401b58:	d0df      	beq.n	401b1a <xQueueGenericReceive+0xe>
  401b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b5e:	b672      	cpsid	i
  401b60:	f383 8811 	msr	BASEPRI, r3
  401b64:	f3bf 8f6f 	isb	sy
  401b68:	f3bf 8f4f 	dsb	sy
  401b6c:	b662      	cpsie	i
  401b6e:	e7fe      	b.n	401b6e <xQueueGenericReceive+0x62>
  401b70:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401b72:	4d4d      	ldr	r5, [pc, #308]	; (401ca8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401b74:	f8df a160 	ldr.w	sl, [pc, #352]	; 401cd8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401b78:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401cb8 <xQueueGenericReceive+0x1ac>
  401b7c:	e04b      	b.n	401c16 <xQueueGenericReceive+0x10a>
  401b7e:	2600      	movs	r6, #0
  401b80:	e7f7      	b.n	401b72 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401b82:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401b84:	4639      	mov	r1, r7
  401b86:	4620      	mov	r0, r4
  401b88:	4b48      	ldr	r3, [pc, #288]	; (401cac <xQueueGenericReceive+0x1a0>)
  401b8a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401b8c:	f1b8 0f00 	cmp.w	r8, #0
  401b90:	d11d      	bne.n	401bce <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401b92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b94:	3b01      	subs	r3, #1
  401b96:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b98:	6823      	ldr	r3, [r4, #0]
  401b9a:	b913      	cbnz	r3, 401ba2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401b9c:	4b44      	ldr	r3, [pc, #272]	; (401cb0 <xQueueGenericReceive+0x1a4>)
  401b9e:	4798      	blx	r3
  401ba0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ba2:	6923      	ldr	r3, [r4, #16]
  401ba4:	b16b      	cbz	r3, 401bc2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401ba6:	f104 0010 	add.w	r0, r4, #16
  401baa:	4b42      	ldr	r3, [pc, #264]	; (401cb4 <xQueueGenericReceive+0x1a8>)
  401bac:	4798      	blx	r3
  401bae:	2801      	cmp	r0, #1
  401bb0:	d107      	bne.n	401bc2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bb6:	4b40      	ldr	r3, [pc, #256]	; (401cb8 <xQueueGenericReceive+0x1ac>)
  401bb8:	601a      	str	r2, [r3, #0]
  401bba:	f3bf 8f4f 	dsb	sy
  401bbe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bc2:	4b3e      	ldr	r3, [pc, #248]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401bc4:	4798      	blx	r3
				return pdPASS;
  401bc6:	2001      	movs	r0, #1
}
  401bc8:	b004      	add	sp, #16
  401bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401bce:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bd2:	2b00      	cmp	r3, #0
  401bd4:	d0f5      	beq.n	401bc2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bda:	4b36      	ldr	r3, [pc, #216]	; (401cb4 <xQueueGenericReceive+0x1a8>)
  401bdc:	4798      	blx	r3
  401bde:	2800      	cmp	r0, #0
  401be0:	d0ef      	beq.n	401bc2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401be6:	4b34      	ldr	r3, [pc, #208]	; (401cb8 <xQueueGenericReceive+0x1ac>)
  401be8:	601a      	str	r2, [r3, #0]
  401bea:	f3bf 8f4f 	dsb	sy
  401bee:	f3bf 8f6f 	isb	sy
  401bf2:	e7e6      	b.n	401bc2 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401bf4:	4b31      	ldr	r3, [pc, #196]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401bf6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401bf8:	2000      	movs	r0, #0
  401bfa:	e7e5      	b.n	401bc8 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401bfc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401bfe:	6860      	ldr	r0, [r4, #4]
  401c00:	4b2f      	ldr	r3, [pc, #188]	; (401cc0 <xQueueGenericReceive+0x1b4>)
  401c02:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401c04:	4b2d      	ldr	r3, [pc, #180]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401c06:	4798      	blx	r3
  401c08:	e030      	b.n	401c6c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401c0a:	4620      	mov	r0, r4
  401c0c:	4b2d      	ldr	r3, [pc, #180]	; (401cc4 <xQueueGenericReceive+0x1b8>)
  401c0e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c10:	4b2d      	ldr	r3, [pc, #180]	; (401cc8 <xQueueGenericReceive+0x1bc>)
  401c12:	4798      	blx	r3
  401c14:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401c16:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c1a:	2b00      	cmp	r3, #0
  401c1c:	d1b1      	bne.n	401b82 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c1e:	9b01      	ldr	r3, [sp, #4]
  401c20:	2b00      	cmp	r3, #0
  401c22:	d0e7      	beq.n	401bf4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401c24:	b90e      	cbnz	r6, 401c2a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401c26:	a802      	add	r0, sp, #8
  401c28:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401c2a:	4b24      	ldr	r3, [pc, #144]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401c2c:	4798      	blx	r3
		vTaskSuspendAll();
  401c2e:	4b27      	ldr	r3, [pc, #156]	; (401ccc <xQueueGenericReceive+0x1c0>)
  401c30:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c32:	47a8      	blx	r5
  401c34:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c36:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c3a:	d101      	bne.n	401c40 <xQueueGenericReceive+0x134>
  401c3c:	2300      	movs	r3, #0
  401c3e:	6463      	str	r3, [r4, #68]	; 0x44
  401c40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c42:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c46:	d101      	bne.n	401c4c <xQueueGenericReceive+0x140>
  401c48:	2300      	movs	r3, #0
  401c4a:	64a3      	str	r3, [r4, #72]	; 0x48
  401c4c:	4b1b      	ldr	r3, [pc, #108]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401c4e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c50:	a901      	add	r1, sp, #4
  401c52:	a802      	add	r0, sp, #8
  401c54:	4b1e      	ldr	r3, [pc, #120]	; (401cd0 <xQueueGenericReceive+0x1c4>)
  401c56:	4798      	blx	r3
  401c58:	b9e8      	cbnz	r0, 401c96 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401c5a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401c5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401c5e:	4b17      	ldr	r3, [pc, #92]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401c60:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401c62:	2e00      	cmp	r6, #0
  401c64:	d1d1      	bne.n	401c0a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c66:	6823      	ldr	r3, [r4, #0]
  401c68:	2b00      	cmp	r3, #0
  401c6a:	d0c7      	beq.n	401bfc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401c6c:	9901      	ldr	r1, [sp, #4]
  401c6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c72:	4b18      	ldr	r3, [pc, #96]	; (401cd4 <xQueueGenericReceive+0x1c8>)
  401c74:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401c76:	4620      	mov	r0, r4
  401c78:	4b12      	ldr	r3, [pc, #72]	; (401cc4 <xQueueGenericReceive+0x1b8>)
  401c7a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c7c:	4b12      	ldr	r3, [pc, #72]	; (401cc8 <xQueueGenericReceive+0x1bc>)
  401c7e:	4798      	blx	r3
  401c80:	2800      	cmp	r0, #0
  401c82:	d1c7      	bne.n	401c14 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c88:	f8c9 3000 	str.w	r3, [r9]
  401c8c:	f3bf 8f4f 	dsb	sy
  401c90:	f3bf 8f6f 	isb	sy
  401c94:	e7be      	b.n	401c14 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401c96:	4620      	mov	r0, r4
  401c98:	4b0a      	ldr	r3, [pc, #40]	; (401cc4 <xQueueGenericReceive+0x1b8>)
  401c9a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401c9c:	4b0a      	ldr	r3, [pc, #40]	; (401cc8 <xQueueGenericReceive+0x1bc>)
  401c9e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401ca0:	2000      	movs	r0, #0
  401ca2:	e791      	b.n	401bc8 <xQueueGenericReceive+0xbc>
  401ca4:	00402709 	.word	0x00402709
  401ca8:	004011ad 	.word	0x004011ad
  401cac:	0040156d 	.word	0x0040156d
  401cb0:	00402889 	.word	0x00402889
  401cb4:	004025a1 	.word	0x004025a1
  401cb8:	e000ed04 	.word	0xe000ed04
  401cbc:	004011f9 	.word	0x004011f9
  401cc0:	00402729 	.word	0x00402729
  401cc4:	00401595 	.word	0x00401595
  401cc8:	00402215 	.word	0x00402215
  401ccc:	004020ad 	.word	0x004020ad
  401cd0:	00402669 	.word	0x00402669
  401cd4:	0040249d 	.word	0x0040249d
  401cd8:	00402639 	.word	0x00402639

00401cdc <vQueueAddToRegistry>:
	{
  401cdc:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401cde:	4b0b      	ldr	r3, [pc, #44]	; (401d0c <vQueueAddToRegistry+0x30>)
  401ce0:	681b      	ldr	r3, [r3, #0]
  401ce2:	b153      	cbz	r3, 401cfa <vQueueAddToRegistry+0x1e>
  401ce4:	2301      	movs	r3, #1
  401ce6:	4c09      	ldr	r4, [pc, #36]	; (401d0c <vQueueAddToRegistry+0x30>)
  401ce8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401cec:	b132      	cbz	r2, 401cfc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401cee:	3301      	adds	r3, #1
  401cf0:	2b08      	cmp	r3, #8
  401cf2:	d1f9      	bne.n	401ce8 <vQueueAddToRegistry+0xc>
	}
  401cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cf8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401cfa:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401cfc:	4a03      	ldr	r2, [pc, #12]	; (401d0c <vQueueAddToRegistry+0x30>)
  401cfe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401d02:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401d06:	6058      	str	r0, [r3, #4]
				break;
  401d08:	e7f4      	b.n	401cf4 <vQueueAddToRegistry+0x18>
  401d0a:	bf00      	nop
  401d0c:	20400c68 	.word	0x20400c68

00401d10 <vQueueWaitForMessageRestricted>:
	{
  401d10:	b570      	push	{r4, r5, r6, lr}
  401d12:	4604      	mov	r4, r0
  401d14:	460d      	mov	r5, r1
  401d16:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401d18:	4b0f      	ldr	r3, [pc, #60]	; (401d58 <vQueueWaitForMessageRestricted+0x48>)
  401d1a:	4798      	blx	r3
  401d1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d22:	d00b      	beq.n	401d3c <vQueueWaitForMessageRestricted+0x2c>
  401d24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d26:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d2a:	d00a      	beq.n	401d42 <vQueueWaitForMessageRestricted+0x32>
  401d2c:	4b0b      	ldr	r3, [pc, #44]	; (401d5c <vQueueWaitForMessageRestricted+0x4c>)
  401d2e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d32:	b14b      	cbz	r3, 401d48 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401d34:	4620      	mov	r0, r4
  401d36:	4b0a      	ldr	r3, [pc, #40]	; (401d60 <vQueueWaitForMessageRestricted+0x50>)
  401d38:	4798      	blx	r3
  401d3a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401d3c:	2300      	movs	r3, #0
  401d3e:	6463      	str	r3, [r4, #68]	; 0x44
  401d40:	e7f0      	b.n	401d24 <vQueueWaitForMessageRestricted+0x14>
  401d42:	2300      	movs	r3, #0
  401d44:	64a3      	str	r3, [r4, #72]	; 0x48
  401d46:	e7f1      	b.n	401d2c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401d48:	4632      	mov	r2, r6
  401d4a:	4629      	mov	r1, r5
  401d4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d50:	4b04      	ldr	r3, [pc, #16]	; (401d64 <vQueueWaitForMessageRestricted+0x54>)
  401d52:	4798      	blx	r3
  401d54:	e7ee      	b.n	401d34 <vQueueWaitForMessageRestricted+0x24>
  401d56:	bf00      	nop
  401d58:	004011ad 	.word	0x004011ad
  401d5c:	004011f9 	.word	0x004011f9
  401d60:	00401595 	.word	0x00401595
  401d64:	00402521 	.word	0x00402521

00401d68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d68:	4b08      	ldr	r3, [pc, #32]	; (401d8c <prvResetNextTaskUnblockTime+0x24>)
  401d6a:	681b      	ldr	r3, [r3, #0]
  401d6c:	681b      	ldr	r3, [r3, #0]
  401d6e:	b13b      	cbz	r3, 401d80 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401d70:	4b06      	ldr	r3, [pc, #24]	; (401d8c <prvResetNextTaskUnblockTime+0x24>)
  401d72:	681b      	ldr	r3, [r3, #0]
  401d74:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401d76:	68db      	ldr	r3, [r3, #12]
  401d78:	685a      	ldr	r2, [r3, #4]
  401d7a:	4b05      	ldr	r3, [pc, #20]	; (401d90 <prvResetNextTaskUnblockTime+0x28>)
  401d7c:	601a      	str	r2, [r3, #0]
  401d7e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401d80:	f04f 32ff 	mov.w	r2, #4294967295
  401d84:	4b02      	ldr	r3, [pc, #8]	; (401d90 <prvResetNextTaskUnblockTime+0x28>)
  401d86:	601a      	str	r2, [r3, #0]
  401d88:	4770      	bx	lr
  401d8a:	bf00      	nop
  401d8c:	20400a5c 	.word	0x20400a5c
  401d90:	20400b08 	.word	0x20400b08

00401d94 <prvAddCurrentTaskToDelayedList>:
{
  401d94:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401d96:	4b0f      	ldr	r3, [pc, #60]	; (401dd4 <prvAddCurrentTaskToDelayedList+0x40>)
  401d98:	681b      	ldr	r3, [r3, #0]
  401d9a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401d9c:	4b0e      	ldr	r3, [pc, #56]	; (401dd8 <prvAddCurrentTaskToDelayedList+0x44>)
  401d9e:	681b      	ldr	r3, [r3, #0]
  401da0:	4298      	cmp	r0, r3
  401da2:	d30e      	bcc.n	401dc2 <prvAddCurrentTaskToDelayedList+0x2e>
  401da4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401da6:	4b0d      	ldr	r3, [pc, #52]	; (401ddc <prvAddCurrentTaskToDelayedList+0x48>)
  401da8:	6818      	ldr	r0, [r3, #0]
  401daa:	4b0a      	ldr	r3, [pc, #40]	; (401dd4 <prvAddCurrentTaskToDelayedList+0x40>)
  401dac:	6819      	ldr	r1, [r3, #0]
  401dae:	3104      	adds	r1, #4
  401db0:	4b0b      	ldr	r3, [pc, #44]	; (401de0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401db2:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401db4:	4b0b      	ldr	r3, [pc, #44]	; (401de4 <prvAddCurrentTaskToDelayedList+0x50>)
  401db6:	681b      	ldr	r3, [r3, #0]
  401db8:	429c      	cmp	r4, r3
  401dba:	d201      	bcs.n	401dc0 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401dbc:	4b09      	ldr	r3, [pc, #36]	; (401de4 <prvAddCurrentTaskToDelayedList+0x50>)
  401dbe:	601c      	str	r4, [r3, #0]
  401dc0:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401dc2:	4b09      	ldr	r3, [pc, #36]	; (401de8 <prvAddCurrentTaskToDelayedList+0x54>)
  401dc4:	6818      	ldr	r0, [r3, #0]
  401dc6:	4b03      	ldr	r3, [pc, #12]	; (401dd4 <prvAddCurrentTaskToDelayedList+0x40>)
  401dc8:	6819      	ldr	r1, [r3, #0]
  401dca:	3104      	adds	r1, #4
  401dcc:	4b04      	ldr	r3, [pc, #16]	; (401de0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401dce:	4798      	blx	r3
  401dd0:	bd10      	pop	{r4, pc}
  401dd2:	bf00      	nop
  401dd4:	20400a58 	.word	0x20400a58
  401dd8:	20400b50 	.word	0x20400b50
  401ddc:	20400a5c 	.word	0x20400a5c
  401de0:	00401095 	.word	0x00401095
  401de4:	20400b08 	.word	0x20400b08
  401de8:	20400a60 	.word	0x20400a60

00401dec <xTaskGenericCreate>:
{
  401dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401df0:	b083      	sub	sp, #12
  401df2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401df4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401df8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401dfa:	b160      	cbz	r0, 401e16 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401dfc:	2d04      	cmp	r5, #4
  401dfe:	d915      	bls.n	401e2c <xTaskGenericCreate+0x40>
  401e00:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e04:	b672      	cpsid	i
  401e06:	f383 8811 	msr	BASEPRI, r3
  401e0a:	f3bf 8f6f 	isb	sy
  401e0e:	f3bf 8f4f 	dsb	sy
  401e12:	b662      	cpsie	i
  401e14:	e7fe      	b.n	401e14 <xTaskGenericCreate+0x28>
  401e16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1a:	b672      	cpsid	i
  401e1c:	f383 8811 	msr	BASEPRI, r3
  401e20:	f3bf 8f6f 	isb	sy
  401e24:	f3bf 8f4f 	dsb	sy
  401e28:	b662      	cpsie	i
  401e2a:	e7fe      	b.n	401e2a <xTaskGenericCreate+0x3e>
  401e2c:	9001      	str	r0, [sp, #4]
  401e2e:	4698      	mov	r8, r3
  401e30:	4691      	mov	r9, r2
  401e32:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e34:	b936      	cbnz	r6, 401e44 <xTaskGenericCreate+0x58>
  401e36:	0090      	lsls	r0, r2, #2
  401e38:	4b62      	ldr	r3, [pc, #392]	; (401fc4 <xTaskGenericCreate+0x1d8>)
  401e3a:	4798      	blx	r3
		if( pxStack != NULL )
  401e3c:	4606      	mov	r6, r0
  401e3e:	2800      	cmp	r0, #0
  401e40:	f000 809e 	beq.w	401f80 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401e44:	2058      	movs	r0, #88	; 0x58
  401e46:	4b5f      	ldr	r3, [pc, #380]	; (401fc4 <xTaskGenericCreate+0x1d8>)
  401e48:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401e4a:	4604      	mov	r4, r0
  401e4c:	2800      	cmp	r0, #0
  401e4e:	f000 8094 	beq.w	401f7a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401e52:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401e54:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401e58:	21a5      	movs	r1, #165	; 0xa5
  401e5a:	4630      	mov	r0, r6
  401e5c:	4b5a      	ldr	r3, [pc, #360]	; (401fc8 <xTaskGenericCreate+0x1dc>)
  401e5e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401e60:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401e64:	444e      	add	r6, r9
  401e66:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e68:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401e6c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401e70:	783b      	ldrb	r3, [r7, #0]
  401e72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401e76:	783b      	ldrb	r3, [r7, #0]
  401e78:	2b00      	cmp	r3, #0
  401e7a:	f040 8084 	bne.w	401f86 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401e7e:	2700      	movs	r7, #0
  401e80:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401e84:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401e86:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401e88:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401e8a:	f104 0904 	add.w	r9, r4, #4
  401e8e:	4648      	mov	r0, r9
  401e90:	f8df b184 	ldr.w	fp, [pc, #388]	; 402018 <xTaskGenericCreate+0x22c>
  401e94:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401e96:	f104 0018 	add.w	r0, r4, #24
  401e9a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401e9c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e9e:	f1c5 0305 	rsb	r3, r5, #5
  401ea2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401ea4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401ea6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401ea8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401eac:	4642      	mov	r2, r8
  401eae:	9901      	ldr	r1, [sp, #4]
  401eb0:	4630      	mov	r0, r6
  401eb2:	4b46      	ldr	r3, [pc, #280]	; (401fcc <xTaskGenericCreate+0x1e0>)
  401eb4:	4798      	blx	r3
  401eb6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401eb8:	f1ba 0f00 	cmp.w	sl, #0
  401ebc:	d001      	beq.n	401ec2 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401ebe:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401ec2:	4b43      	ldr	r3, [pc, #268]	; (401fd0 <xTaskGenericCreate+0x1e4>)
  401ec4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401ec6:	4a43      	ldr	r2, [pc, #268]	; (401fd4 <xTaskGenericCreate+0x1e8>)
  401ec8:	6813      	ldr	r3, [r2, #0]
  401eca:	3301      	adds	r3, #1
  401ecc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401ece:	4b42      	ldr	r3, [pc, #264]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401ed0:	681b      	ldr	r3, [r3, #0]
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	d166      	bne.n	401fa4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401ed6:	4b40      	ldr	r3, [pc, #256]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401ed8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401eda:	6813      	ldr	r3, [r2, #0]
  401edc:	2b01      	cmp	r3, #1
  401ede:	d121      	bne.n	401f24 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ee0:	4f3e      	ldr	r7, [pc, #248]	; (401fdc <xTaskGenericCreate+0x1f0>)
  401ee2:	4638      	mov	r0, r7
  401ee4:	4e3e      	ldr	r6, [pc, #248]	; (401fe0 <xTaskGenericCreate+0x1f4>)
  401ee6:	47b0      	blx	r6
  401ee8:	f107 0014 	add.w	r0, r7, #20
  401eec:	47b0      	blx	r6
  401eee:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401ef2:	47b0      	blx	r6
  401ef4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401ef8:	47b0      	blx	r6
  401efa:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401efe:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401f00:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40201c <xTaskGenericCreate+0x230>
  401f04:	4640      	mov	r0, r8
  401f06:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401f08:	4f36      	ldr	r7, [pc, #216]	; (401fe4 <xTaskGenericCreate+0x1f8>)
  401f0a:	4638      	mov	r0, r7
  401f0c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401f0e:	4836      	ldr	r0, [pc, #216]	; (401fe8 <xTaskGenericCreate+0x1fc>)
  401f10:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401f12:	4836      	ldr	r0, [pc, #216]	; (401fec <xTaskGenericCreate+0x200>)
  401f14:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401f16:	4836      	ldr	r0, [pc, #216]	; (401ff0 <xTaskGenericCreate+0x204>)
  401f18:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401f1a:	4b36      	ldr	r3, [pc, #216]	; (401ff4 <xTaskGenericCreate+0x208>)
  401f1c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401f20:	4b35      	ldr	r3, [pc, #212]	; (401ff8 <xTaskGenericCreate+0x20c>)
  401f22:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401f24:	4a35      	ldr	r2, [pc, #212]	; (401ffc <xTaskGenericCreate+0x210>)
  401f26:	6813      	ldr	r3, [r2, #0]
  401f28:	3301      	adds	r3, #1
  401f2a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401f2c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401f2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401f30:	4a33      	ldr	r2, [pc, #204]	; (402000 <xTaskGenericCreate+0x214>)
  401f32:	6811      	ldr	r1, [r2, #0]
  401f34:	2301      	movs	r3, #1
  401f36:	4083      	lsls	r3, r0
  401f38:	430b      	orrs	r3, r1
  401f3a:	6013      	str	r3, [r2, #0]
  401f3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f40:	4649      	mov	r1, r9
  401f42:	4b26      	ldr	r3, [pc, #152]	; (401fdc <xTaskGenericCreate+0x1f0>)
  401f44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f48:	4b2e      	ldr	r3, [pc, #184]	; (402004 <xTaskGenericCreate+0x218>)
  401f4a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401f4c:	4b2e      	ldr	r3, [pc, #184]	; (402008 <xTaskGenericCreate+0x21c>)
  401f4e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401f50:	4b2e      	ldr	r3, [pc, #184]	; (40200c <xTaskGenericCreate+0x220>)
  401f52:	681b      	ldr	r3, [r3, #0]
  401f54:	2b00      	cmp	r3, #0
  401f56:	d031      	beq.n	401fbc <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401f58:	4b1f      	ldr	r3, [pc, #124]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401f5a:	681b      	ldr	r3, [r3, #0]
  401f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f5e:	429d      	cmp	r5, r3
  401f60:	d92e      	bls.n	401fc0 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f66:	4b2a      	ldr	r3, [pc, #168]	; (402010 <xTaskGenericCreate+0x224>)
  401f68:	601a      	str	r2, [r3, #0]
  401f6a:	f3bf 8f4f 	dsb	sy
  401f6e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401f72:	2001      	movs	r0, #1
}
  401f74:	b003      	add	sp, #12
  401f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401f7a:	4630      	mov	r0, r6
  401f7c:	4b25      	ldr	r3, [pc, #148]	; (402014 <xTaskGenericCreate+0x228>)
  401f7e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401f80:	f04f 30ff 	mov.w	r0, #4294967295
  401f84:	e7f6      	b.n	401f74 <xTaskGenericCreate+0x188>
  401f86:	463b      	mov	r3, r7
  401f88:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401f8c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401f8e:	7859      	ldrb	r1, [r3, #1]
  401f90:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401f94:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401f98:	2900      	cmp	r1, #0
  401f9a:	f43f af70 	beq.w	401e7e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401f9e:	42bb      	cmp	r3, r7
  401fa0:	d1f5      	bne.n	401f8e <xTaskGenericCreate+0x1a2>
  401fa2:	e76c      	b.n	401e7e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401fa4:	4b19      	ldr	r3, [pc, #100]	; (40200c <xTaskGenericCreate+0x220>)
  401fa6:	681b      	ldr	r3, [r3, #0]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d1bb      	bne.n	401f24 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401fac:	4b0a      	ldr	r3, [pc, #40]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401fae:	681b      	ldr	r3, [r3, #0]
  401fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401fb2:	429d      	cmp	r5, r3
  401fb4:	d3b6      	bcc.n	401f24 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401fb6:	4b08      	ldr	r3, [pc, #32]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401fb8:	601c      	str	r4, [r3, #0]
  401fba:	e7b3      	b.n	401f24 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401fbc:	2001      	movs	r0, #1
  401fbe:	e7d9      	b.n	401f74 <xTaskGenericCreate+0x188>
  401fc0:	2001      	movs	r0, #1
	return xReturn;
  401fc2:	e7d7      	b.n	401f74 <xTaskGenericCreate+0x188>
  401fc4:	00401409 	.word	0x00401409
  401fc8:	004040e5 	.word	0x004040e5
  401fcc:	00401161 	.word	0x00401161
  401fd0:	004011ad 	.word	0x004011ad
  401fd4:	20400ac8 	.word	0x20400ac8
  401fd8:	20400a58 	.word	0x20400a58
  401fdc:	20400a64 	.word	0x20400a64
  401fe0:	00401061 	.word	0x00401061
  401fe4:	20400af4 	.word	0x20400af4
  401fe8:	20400b10 	.word	0x20400b10
  401fec:	20400b3c 	.word	0x20400b3c
  401ff0:	20400b28 	.word	0x20400b28
  401ff4:	20400a5c 	.word	0x20400a5c
  401ff8:	20400a60 	.word	0x20400a60
  401ffc:	20400ad4 	.word	0x20400ad4
  402000:	20400adc 	.word	0x20400adc
  402004:	0040107d 	.word	0x0040107d
  402008:	004011f9 	.word	0x004011f9
  40200c:	20400b24 	.word	0x20400b24
  402010:	e000ed04 	.word	0xe000ed04
  402014:	00401439 	.word	0x00401439
  402018:	00401077 	.word	0x00401077
  40201c:	20400ae0 	.word	0x20400ae0

00402020 <vTaskStartScheduler>:
{
  402020:	b510      	push	{r4, lr}
  402022:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402024:	2300      	movs	r3, #0
  402026:	9303      	str	r3, [sp, #12]
  402028:	9302      	str	r3, [sp, #8]
  40202a:	9301      	str	r3, [sp, #4]
  40202c:	9300      	str	r3, [sp, #0]
  40202e:	2282      	movs	r2, #130	; 0x82
  402030:	4916      	ldr	r1, [pc, #88]	; (40208c <vTaskStartScheduler+0x6c>)
  402032:	4817      	ldr	r0, [pc, #92]	; (402090 <vTaskStartScheduler+0x70>)
  402034:	4c17      	ldr	r4, [pc, #92]	; (402094 <vTaskStartScheduler+0x74>)
  402036:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402038:	2801      	cmp	r0, #1
  40203a:	d00b      	beq.n	402054 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  40203c:	bb20      	cbnz	r0, 402088 <vTaskStartScheduler+0x68>
  40203e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402042:	b672      	cpsid	i
  402044:	f383 8811 	msr	BASEPRI, r3
  402048:	f3bf 8f6f 	isb	sy
  40204c:	f3bf 8f4f 	dsb	sy
  402050:	b662      	cpsie	i
  402052:	e7fe      	b.n	402052 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402054:	4b10      	ldr	r3, [pc, #64]	; (402098 <vTaskStartScheduler+0x78>)
  402056:	4798      	blx	r3
	if( xReturn == pdPASS )
  402058:	2801      	cmp	r0, #1
  40205a:	d1ef      	bne.n	40203c <vTaskStartScheduler+0x1c>
  40205c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402060:	b672      	cpsid	i
  402062:	f383 8811 	msr	BASEPRI, r3
  402066:	f3bf 8f6f 	isb	sy
  40206a:	f3bf 8f4f 	dsb	sy
  40206e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402070:	f04f 32ff 	mov.w	r2, #4294967295
  402074:	4b09      	ldr	r3, [pc, #36]	; (40209c <vTaskStartScheduler+0x7c>)
  402076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402078:	2201      	movs	r2, #1
  40207a:	4b09      	ldr	r3, [pc, #36]	; (4020a0 <vTaskStartScheduler+0x80>)
  40207c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40207e:	2200      	movs	r2, #0
  402080:	4b08      	ldr	r3, [pc, #32]	; (4020a4 <vTaskStartScheduler+0x84>)
  402082:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402084:	4b08      	ldr	r3, [pc, #32]	; (4020a8 <vTaskStartScheduler+0x88>)
  402086:	4798      	blx	r3
}
  402088:	b004      	add	sp, #16
  40208a:	bd10      	pop	{r4, pc}
  40208c:	00409e08 	.word	0x00409e08
  402090:	00402335 	.word	0x00402335
  402094:	00401ded 	.word	0x00401ded
  402098:	00402975 	.word	0x00402975
  40209c:	20400b08 	.word	0x20400b08
  4020a0:	20400b24 	.word	0x20400b24
  4020a4:	20400b50 	.word	0x20400b50
  4020a8:	004012e1 	.word	0x004012e1

004020ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4020ac:	4a02      	ldr	r2, [pc, #8]	; (4020b8 <vTaskSuspendAll+0xc>)
  4020ae:	6813      	ldr	r3, [r2, #0]
  4020b0:	3301      	adds	r3, #1
  4020b2:	6013      	str	r3, [r2, #0]
  4020b4:	4770      	bx	lr
  4020b6:	bf00      	nop
  4020b8:	20400ad0 	.word	0x20400ad0

004020bc <xTaskGetTickCount>:
		xTicks = xTickCount;
  4020bc:	4b01      	ldr	r3, [pc, #4]	; (4020c4 <xTaskGetTickCount+0x8>)
  4020be:	6818      	ldr	r0, [r3, #0]
}
  4020c0:	4770      	bx	lr
  4020c2:	bf00      	nop
  4020c4:	20400b50 	.word	0x20400b50

004020c8 <xTaskIncrementTick>:
{
  4020c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4020cc:	4b42      	ldr	r3, [pc, #264]	; (4021d8 <xTaskIncrementTick+0x110>)
  4020ce:	681b      	ldr	r3, [r3, #0]
  4020d0:	2b00      	cmp	r3, #0
  4020d2:	d178      	bne.n	4021c6 <xTaskIncrementTick+0xfe>
		++xTickCount;
  4020d4:	4b41      	ldr	r3, [pc, #260]	; (4021dc <xTaskIncrementTick+0x114>)
  4020d6:	681a      	ldr	r2, [r3, #0]
  4020d8:	3201      	adds	r2, #1
  4020da:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4020dc:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4020de:	b9d6      	cbnz	r6, 402116 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4020e0:	4b3f      	ldr	r3, [pc, #252]	; (4021e0 <xTaskIncrementTick+0x118>)
  4020e2:	681b      	ldr	r3, [r3, #0]
  4020e4:	681b      	ldr	r3, [r3, #0]
  4020e6:	b153      	cbz	r3, 4020fe <xTaskIncrementTick+0x36>
  4020e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ec:	b672      	cpsid	i
  4020ee:	f383 8811 	msr	BASEPRI, r3
  4020f2:	f3bf 8f6f 	isb	sy
  4020f6:	f3bf 8f4f 	dsb	sy
  4020fa:	b662      	cpsie	i
  4020fc:	e7fe      	b.n	4020fc <xTaskIncrementTick+0x34>
  4020fe:	4a38      	ldr	r2, [pc, #224]	; (4021e0 <xTaskIncrementTick+0x118>)
  402100:	6811      	ldr	r1, [r2, #0]
  402102:	4b38      	ldr	r3, [pc, #224]	; (4021e4 <xTaskIncrementTick+0x11c>)
  402104:	6818      	ldr	r0, [r3, #0]
  402106:	6010      	str	r0, [r2, #0]
  402108:	6019      	str	r1, [r3, #0]
  40210a:	4a37      	ldr	r2, [pc, #220]	; (4021e8 <xTaskIncrementTick+0x120>)
  40210c:	6813      	ldr	r3, [r2, #0]
  40210e:	3301      	adds	r3, #1
  402110:	6013      	str	r3, [r2, #0]
  402112:	4b36      	ldr	r3, [pc, #216]	; (4021ec <xTaskIncrementTick+0x124>)
  402114:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402116:	4b36      	ldr	r3, [pc, #216]	; (4021f0 <xTaskIncrementTick+0x128>)
  402118:	681b      	ldr	r3, [r3, #0]
  40211a:	429e      	cmp	r6, r3
  40211c:	d218      	bcs.n	402150 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40211e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402120:	4b34      	ldr	r3, [pc, #208]	; (4021f4 <xTaskIncrementTick+0x12c>)
  402122:	681b      	ldr	r3, [r3, #0]
  402124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402126:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40212a:	4a33      	ldr	r2, [pc, #204]	; (4021f8 <xTaskIncrementTick+0x130>)
  40212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402130:	2b02      	cmp	r3, #2
  402132:	bf28      	it	cs
  402134:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402136:	4b31      	ldr	r3, [pc, #196]	; (4021fc <xTaskIncrementTick+0x134>)
  402138:	681b      	ldr	r3, [r3, #0]
  40213a:	b90b      	cbnz	r3, 402140 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  40213c:	4b30      	ldr	r3, [pc, #192]	; (402200 <xTaskIncrementTick+0x138>)
  40213e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402140:	4b30      	ldr	r3, [pc, #192]	; (402204 <xTaskIncrementTick+0x13c>)
  402142:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402144:	2b00      	cmp	r3, #0
}
  402146:	bf0c      	ite	eq
  402148:	4620      	moveq	r0, r4
  40214a:	2001      	movne	r0, #1
  40214c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402150:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402152:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4021e0 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402156:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402210 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40215a:	4f2b      	ldr	r7, [pc, #172]	; (402208 <xTaskIncrementTick+0x140>)
  40215c:	e01f      	b.n	40219e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40215e:	f04f 32ff 	mov.w	r2, #4294967295
  402162:	4b23      	ldr	r3, [pc, #140]	; (4021f0 <xTaskIncrementTick+0x128>)
  402164:	601a      	str	r2, [r3, #0]
						break;
  402166:	e7db      	b.n	402120 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402168:	4a21      	ldr	r2, [pc, #132]	; (4021f0 <xTaskIncrementTick+0x128>)
  40216a:	6013      	str	r3, [r2, #0]
							break;
  40216c:	e7d8      	b.n	402120 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40216e:	f105 0018 	add.w	r0, r5, #24
  402172:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402174:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402176:	683a      	ldr	r2, [r7, #0]
  402178:	2301      	movs	r3, #1
  40217a:	4083      	lsls	r3, r0
  40217c:	4313      	orrs	r3, r2
  40217e:	603b      	str	r3, [r7, #0]
  402180:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402184:	4651      	mov	r1, sl
  402186:	4b1c      	ldr	r3, [pc, #112]	; (4021f8 <xTaskIncrementTick+0x130>)
  402188:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40218c:	4b1f      	ldr	r3, [pc, #124]	; (40220c <xTaskIncrementTick+0x144>)
  40218e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402190:	4b18      	ldr	r3, [pc, #96]	; (4021f4 <xTaskIncrementTick+0x12c>)
  402192:	681b      	ldr	r3, [r3, #0]
  402194:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402198:	429a      	cmp	r2, r3
  40219a:	bf28      	it	cs
  40219c:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40219e:	f8d9 3000 	ldr.w	r3, [r9]
  4021a2:	681b      	ldr	r3, [r3, #0]
  4021a4:	2b00      	cmp	r3, #0
  4021a6:	d0da      	beq.n	40215e <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4021a8:	f8d9 3000 	ldr.w	r3, [r9]
  4021ac:	68db      	ldr	r3, [r3, #12]
  4021ae:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4021b0:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4021b2:	429e      	cmp	r6, r3
  4021b4:	d3d8      	bcc.n	402168 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4021b6:	f105 0a04 	add.w	sl, r5, #4
  4021ba:	4650      	mov	r0, sl
  4021bc:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4021be:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4021c0:	2b00      	cmp	r3, #0
  4021c2:	d1d4      	bne.n	40216e <xTaskIncrementTick+0xa6>
  4021c4:	e7d6      	b.n	402174 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4021c6:	4a0d      	ldr	r2, [pc, #52]	; (4021fc <xTaskIncrementTick+0x134>)
  4021c8:	6813      	ldr	r3, [r2, #0]
  4021ca:	3301      	adds	r3, #1
  4021cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4021ce:	4b0c      	ldr	r3, [pc, #48]	; (402200 <xTaskIncrementTick+0x138>)
  4021d0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4021d2:	2400      	movs	r4, #0
  4021d4:	e7b4      	b.n	402140 <xTaskIncrementTick+0x78>
  4021d6:	bf00      	nop
  4021d8:	20400ad0 	.word	0x20400ad0
  4021dc:	20400b50 	.word	0x20400b50
  4021e0:	20400a5c 	.word	0x20400a5c
  4021e4:	20400a60 	.word	0x20400a60
  4021e8:	20400b0c 	.word	0x20400b0c
  4021ec:	00401d69 	.word	0x00401d69
  4021f0:	20400b08 	.word	0x20400b08
  4021f4:	20400a58 	.word	0x20400a58
  4021f8:	20400a64 	.word	0x20400a64
  4021fc:	20400acc 	.word	0x20400acc
  402200:	00403259 	.word	0x00403259
  402204:	20400b54 	.word	0x20400b54
  402208:	20400adc 	.word	0x20400adc
  40220c:	0040107d 	.word	0x0040107d
  402210:	004010c9 	.word	0x004010c9

00402214 <xTaskResumeAll>:
{
  402214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402218:	4b38      	ldr	r3, [pc, #224]	; (4022fc <xTaskResumeAll+0xe8>)
  40221a:	681b      	ldr	r3, [r3, #0]
  40221c:	b953      	cbnz	r3, 402234 <xTaskResumeAll+0x20>
  40221e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402222:	b672      	cpsid	i
  402224:	f383 8811 	msr	BASEPRI, r3
  402228:	f3bf 8f6f 	isb	sy
  40222c:	f3bf 8f4f 	dsb	sy
  402230:	b662      	cpsie	i
  402232:	e7fe      	b.n	402232 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402234:	4b32      	ldr	r3, [pc, #200]	; (402300 <xTaskResumeAll+0xec>)
  402236:	4798      	blx	r3
		--uxSchedulerSuspended;
  402238:	4b30      	ldr	r3, [pc, #192]	; (4022fc <xTaskResumeAll+0xe8>)
  40223a:	681a      	ldr	r2, [r3, #0]
  40223c:	3a01      	subs	r2, #1
  40223e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402240:	681b      	ldr	r3, [r3, #0]
  402242:	2b00      	cmp	r3, #0
  402244:	d155      	bne.n	4022f2 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402246:	4b2f      	ldr	r3, [pc, #188]	; (402304 <xTaskResumeAll+0xf0>)
  402248:	681b      	ldr	r3, [r3, #0]
  40224a:	2b00      	cmp	r3, #0
  40224c:	d132      	bne.n	4022b4 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40224e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402250:	4b2d      	ldr	r3, [pc, #180]	; (402308 <xTaskResumeAll+0xf4>)
  402252:	4798      	blx	r3
}
  402254:	4620      	mov	r0, r4
  402256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40225a:	68fb      	ldr	r3, [r7, #12]
  40225c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40225e:	f104 0018 	add.w	r0, r4, #24
  402262:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402264:	f104 0804 	add.w	r8, r4, #4
  402268:	4640      	mov	r0, r8
  40226a:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40226c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40226e:	682a      	ldr	r2, [r5, #0]
  402270:	2301      	movs	r3, #1
  402272:	4083      	lsls	r3, r0
  402274:	4313      	orrs	r3, r2
  402276:	602b      	str	r3, [r5, #0]
  402278:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40227c:	4641      	mov	r1, r8
  40227e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402282:	4b22      	ldr	r3, [pc, #136]	; (40230c <xTaskResumeAll+0xf8>)
  402284:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402286:	4b22      	ldr	r3, [pc, #136]	; (402310 <xTaskResumeAll+0xfc>)
  402288:	681b      	ldr	r3, [r3, #0]
  40228a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40228e:	429a      	cmp	r2, r3
  402290:	d20c      	bcs.n	4022ac <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402292:	683b      	ldr	r3, [r7, #0]
  402294:	2b00      	cmp	r3, #0
  402296:	d1e0      	bne.n	40225a <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402298:	4b1e      	ldr	r3, [pc, #120]	; (402314 <xTaskResumeAll+0x100>)
  40229a:	681b      	ldr	r3, [r3, #0]
  40229c:	b1db      	cbz	r3, 4022d6 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40229e:	4b1d      	ldr	r3, [pc, #116]	; (402314 <xTaskResumeAll+0x100>)
  4022a0:	681b      	ldr	r3, [r3, #0]
  4022a2:	b1c3      	cbz	r3, 4022d6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4022a4:	4e1c      	ldr	r6, [pc, #112]	; (402318 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4022a6:	4d1d      	ldr	r5, [pc, #116]	; (40231c <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4022a8:	4c1a      	ldr	r4, [pc, #104]	; (402314 <xTaskResumeAll+0x100>)
  4022aa:	e00e      	b.n	4022ca <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4022ac:	2201      	movs	r2, #1
  4022ae:	4b1b      	ldr	r3, [pc, #108]	; (40231c <xTaskResumeAll+0x108>)
  4022b0:	601a      	str	r2, [r3, #0]
  4022b2:	e7ee      	b.n	402292 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4022b4:	4f1a      	ldr	r7, [pc, #104]	; (402320 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4022b6:	4e1b      	ldr	r6, [pc, #108]	; (402324 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4022b8:	4d1b      	ldr	r5, [pc, #108]	; (402328 <xTaskResumeAll+0x114>)
  4022ba:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402330 <xTaskResumeAll+0x11c>
  4022be:	e7e8      	b.n	402292 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4022c0:	6823      	ldr	r3, [r4, #0]
  4022c2:	3b01      	subs	r3, #1
  4022c4:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4022c6:	6823      	ldr	r3, [r4, #0]
  4022c8:	b12b      	cbz	r3, 4022d6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4022ca:	47b0      	blx	r6
  4022cc:	2800      	cmp	r0, #0
  4022ce:	d0f7      	beq.n	4022c0 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4022d0:	2301      	movs	r3, #1
  4022d2:	602b      	str	r3, [r5, #0]
  4022d4:	e7f4      	b.n	4022c0 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4022d6:	4b11      	ldr	r3, [pc, #68]	; (40231c <xTaskResumeAll+0x108>)
  4022d8:	681b      	ldr	r3, [r3, #0]
  4022da:	2b01      	cmp	r3, #1
  4022dc:	d10b      	bne.n	4022f6 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4022de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022e2:	4b12      	ldr	r3, [pc, #72]	; (40232c <xTaskResumeAll+0x118>)
  4022e4:	601a      	str	r2, [r3, #0]
  4022e6:	f3bf 8f4f 	dsb	sy
  4022ea:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4022ee:	2401      	movs	r4, #1
  4022f0:	e7ae      	b.n	402250 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4022f2:	2400      	movs	r4, #0
  4022f4:	e7ac      	b.n	402250 <xTaskResumeAll+0x3c>
  4022f6:	2400      	movs	r4, #0
  4022f8:	e7aa      	b.n	402250 <xTaskResumeAll+0x3c>
  4022fa:	bf00      	nop
  4022fc:	20400ad0 	.word	0x20400ad0
  402300:	004011ad 	.word	0x004011ad
  402304:	20400ac8 	.word	0x20400ac8
  402308:	004011f9 	.word	0x004011f9
  40230c:	0040107d 	.word	0x0040107d
  402310:	20400a58 	.word	0x20400a58
  402314:	20400acc 	.word	0x20400acc
  402318:	004020c9 	.word	0x004020c9
  40231c:	20400b54 	.word	0x20400b54
  402320:	20400b10 	.word	0x20400b10
  402324:	004010c9 	.word	0x004010c9
  402328:	20400adc 	.word	0x20400adc
  40232c:	e000ed04 	.word	0xe000ed04
  402330:	20400a64 	.word	0x20400a64

00402334 <prvIdleTask>:
{
  402334:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402336:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4023c0 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40233a:	4e19      	ldr	r6, [pc, #100]	; (4023a0 <prvIdleTask+0x6c>)
				taskYIELD();
  40233c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4023c4 <prvIdleTask+0x90>
  402340:	e02a      	b.n	402398 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402342:	4b18      	ldr	r3, [pc, #96]	; (4023a4 <prvIdleTask+0x70>)
  402344:	681b      	ldr	r3, [r3, #0]
  402346:	2b01      	cmp	r3, #1
  402348:	d81e      	bhi.n	402388 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40234a:	682b      	ldr	r3, [r5, #0]
  40234c:	2b00      	cmp	r3, #0
  40234e:	d0f8      	beq.n	402342 <prvIdleTask+0xe>
			vTaskSuspendAll();
  402350:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402352:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402354:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402356:	2c00      	cmp	r4, #0
  402358:	d0f7      	beq.n	40234a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40235a:	4b13      	ldr	r3, [pc, #76]	; (4023a8 <prvIdleTask+0x74>)
  40235c:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40235e:	68f3      	ldr	r3, [r6, #12]
  402360:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402362:	1d20      	adds	r0, r4, #4
  402364:	4b11      	ldr	r3, [pc, #68]	; (4023ac <prvIdleTask+0x78>)
  402366:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402368:	4a11      	ldr	r2, [pc, #68]	; (4023b0 <prvIdleTask+0x7c>)
  40236a:	6813      	ldr	r3, [r2, #0]
  40236c:	3b01      	subs	r3, #1
  40236e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402370:	682b      	ldr	r3, [r5, #0]
  402372:	3b01      	subs	r3, #1
  402374:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402376:	4b0f      	ldr	r3, [pc, #60]	; (4023b4 <prvIdleTask+0x80>)
  402378:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40237a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40237c:	f8df a048 	ldr.w	sl, [pc, #72]	; 4023c8 <prvIdleTask+0x94>
  402380:	47d0      	blx	sl
		vPortFree( pxTCB );
  402382:	4620      	mov	r0, r4
  402384:	47d0      	blx	sl
  402386:	e7e0      	b.n	40234a <prvIdleTask+0x16>
				taskYIELD();
  402388:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40238c:	f8c9 3000 	str.w	r3, [r9]
  402390:	f3bf 8f4f 	dsb	sy
  402394:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402398:	4d07      	ldr	r5, [pc, #28]	; (4023b8 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40239a:	4f08      	ldr	r7, [pc, #32]	; (4023bc <prvIdleTask+0x88>)
  40239c:	e7d5      	b.n	40234a <prvIdleTask+0x16>
  40239e:	bf00      	nop
  4023a0:	20400b3c 	.word	0x20400b3c
  4023a4:	20400a64 	.word	0x20400a64
  4023a8:	004011ad 	.word	0x004011ad
  4023ac:	004010c9 	.word	0x004010c9
  4023b0:	20400ac8 	.word	0x20400ac8
  4023b4:	004011f9 	.word	0x004011f9
  4023b8:	20400ad8 	.word	0x20400ad8
  4023bc:	00402215 	.word	0x00402215
  4023c0:	004020ad 	.word	0x004020ad
  4023c4:	e000ed04 	.word	0xe000ed04
  4023c8:	00401439 	.word	0x00401439

004023cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4023cc:	4b2d      	ldr	r3, [pc, #180]	; (402484 <vTaskSwitchContext+0xb8>)
  4023ce:	681b      	ldr	r3, [r3, #0]
  4023d0:	2b00      	cmp	r3, #0
  4023d2:	d12c      	bne.n	40242e <vTaskSwitchContext+0x62>
{
  4023d4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4023d6:	2200      	movs	r2, #0
  4023d8:	4b2b      	ldr	r3, [pc, #172]	; (402488 <vTaskSwitchContext+0xbc>)
  4023da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4023dc:	4b2b      	ldr	r3, [pc, #172]	; (40248c <vTaskSwitchContext+0xc0>)
  4023de:	681b      	ldr	r3, [r3, #0]
  4023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023e2:	681a      	ldr	r2, [r3, #0]
  4023e4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4023e8:	d103      	bne.n	4023f2 <vTaskSwitchContext+0x26>
  4023ea:	685a      	ldr	r2, [r3, #4]
  4023ec:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4023f0:	d021      	beq.n	402436 <vTaskSwitchContext+0x6a>
  4023f2:	4b26      	ldr	r3, [pc, #152]	; (40248c <vTaskSwitchContext+0xc0>)
  4023f4:	6818      	ldr	r0, [r3, #0]
  4023f6:	6819      	ldr	r1, [r3, #0]
  4023f8:	3134      	adds	r1, #52	; 0x34
  4023fa:	4b25      	ldr	r3, [pc, #148]	; (402490 <vTaskSwitchContext+0xc4>)
  4023fc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4023fe:	4b25      	ldr	r3, [pc, #148]	; (402494 <vTaskSwitchContext+0xc8>)
  402400:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402402:	fab3 f383 	clz	r3, r3
  402406:	b2db      	uxtb	r3, r3
  402408:	f1c3 031f 	rsb	r3, r3, #31
  40240c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402410:	4a21      	ldr	r2, [pc, #132]	; (402498 <vTaskSwitchContext+0xcc>)
  402412:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402416:	b9ba      	cbnz	r2, 402448 <vTaskSwitchContext+0x7c>
	__asm volatile
  402418:	f04f 0380 	mov.w	r3, #128	; 0x80
  40241c:	b672      	cpsid	i
  40241e:	f383 8811 	msr	BASEPRI, r3
  402422:	f3bf 8f6f 	isb	sy
  402426:	f3bf 8f4f 	dsb	sy
  40242a:	b662      	cpsie	i
  40242c:	e7fe      	b.n	40242c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40242e:	2201      	movs	r2, #1
  402430:	4b15      	ldr	r3, [pc, #84]	; (402488 <vTaskSwitchContext+0xbc>)
  402432:	601a      	str	r2, [r3, #0]
  402434:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402436:	689a      	ldr	r2, [r3, #8]
  402438:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40243c:	d1d9      	bne.n	4023f2 <vTaskSwitchContext+0x26>
  40243e:	68db      	ldr	r3, [r3, #12]
  402440:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402444:	d1d5      	bne.n	4023f2 <vTaskSwitchContext+0x26>
  402446:	e7da      	b.n	4023fe <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402448:	4a13      	ldr	r2, [pc, #76]	; (402498 <vTaskSwitchContext+0xcc>)
  40244a:	0099      	lsls	r1, r3, #2
  40244c:	18c8      	adds	r0, r1, r3
  40244e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402452:	6844      	ldr	r4, [r0, #4]
  402454:	6864      	ldr	r4, [r4, #4]
  402456:	6044      	str	r4, [r0, #4]
  402458:	4419      	add	r1, r3
  40245a:	4602      	mov	r2, r0
  40245c:	3208      	adds	r2, #8
  40245e:	4294      	cmp	r4, r2
  402460:	d009      	beq.n	402476 <vTaskSwitchContext+0xaa>
  402462:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402466:	4a0c      	ldr	r2, [pc, #48]	; (402498 <vTaskSwitchContext+0xcc>)
  402468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40246c:	685b      	ldr	r3, [r3, #4]
  40246e:	68da      	ldr	r2, [r3, #12]
  402470:	4b06      	ldr	r3, [pc, #24]	; (40248c <vTaskSwitchContext+0xc0>)
  402472:	601a      	str	r2, [r3, #0]
  402474:	bd10      	pop	{r4, pc}
  402476:	6860      	ldr	r0, [r4, #4]
  402478:	4a07      	ldr	r2, [pc, #28]	; (402498 <vTaskSwitchContext+0xcc>)
  40247a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40247e:	6050      	str	r0, [r2, #4]
  402480:	e7ef      	b.n	402462 <vTaskSwitchContext+0x96>
  402482:	bf00      	nop
  402484:	20400ad0 	.word	0x20400ad0
  402488:	20400b54 	.word	0x20400b54
  40248c:	20400a58 	.word	0x20400a58
  402490:	00403241 	.word	0x00403241
  402494:	20400adc 	.word	0x20400adc
  402498:	20400a64 	.word	0x20400a64

0040249c <vTaskPlaceOnEventList>:
{
  40249c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40249e:	b1e0      	cbz	r0, 4024da <vTaskPlaceOnEventList+0x3e>
  4024a0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4024a2:	4d17      	ldr	r5, [pc, #92]	; (402500 <vTaskPlaceOnEventList+0x64>)
  4024a4:	6829      	ldr	r1, [r5, #0]
  4024a6:	3118      	adds	r1, #24
  4024a8:	4b16      	ldr	r3, [pc, #88]	; (402504 <vTaskPlaceOnEventList+0x68>)
  4024aa:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4024ac:	6828      	ldr	r0, [r5, #0]
  4024ae:	3004      	adds	r0, #4
  4024b0:	4b15      	ldr	r3, [pc, #84]	; (402508 <vTaskPlaceOnEventList+0x6c>)
  4024b2:	4798      	blx	r3
  4024b4:	b940      	cbnz	r0, 4024c8 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4024b6:	682a      	ldr	r2, [r5, #0]
  4024b8:	4914      	ldr	r1, [pc, #80]	; (40250c <vTaskPlaceOnEventList+0x70>)
  4024ba:	680b      	ldr	r3, [r1, #0]
  4024bc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4024be:	2201      	movs	r2, #1
  4024c0:	4082      	lsls	r2, r0
  4024c2:	ea23 0302 	bic.w	r3, r3, r2
  4024c6:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4024c8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4024cc:	d010      	beq.n	4024f0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4024ce:	4b10      	ldr	r3, [pc, #64]	; (402510 <vTaskPlaceOnEventList+0x74>)
  4024d0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4024d2:	4420      	add	r0, r4
  4024d4:	4b0f      	ldr	r3, [pc, #60]	; (402514 <vTaskPlaceOnEventList+0x78>)
  4024d6:	4798      	blx	r3
  4024d8:	bd38      	pop	{r3, r4, r5, pc}
  4024da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024de:	b672      	cpsid	i
  4024e0:	f383 8811 	msr	BASEPRI, r3
  4024e4:	f3bf 8f6f 	isb	sy
  4024e8:	f3bf 8f4f 	dsb	sy
  4024ec:	b662      	cpsie	i
  4024ee:	e7fe      	b.n	4024ee <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4024f0:	4b03      	ldr	r3, [pc, #12]	; (402500 <vTaskPlaceOnEventList+0x64>)
  4024f2:	6819      	ldr	r1, [r3, #0]
  4024f4:	3104      	adds	r1, #4
  4024f6:	4808      	ldr	r0, [pc, #32]	; (402518 <vTaskPlaceOnEventList+0x7c>)
  4024f8:	4b08      	ldr	r3, [pc, #32]	; (40251c <vTaskPlaceOnEventList+0x80>)
  4024fa:	4798      	blx	r3
  4024fc:	bd38      	pop	{r3, r4, r5, pc}
  4024fe:	bf00      	nop
  402500:	20400a58 	.word	0x20400a58
  402504:	00401095 	.word	0x00401095
  402508:	004010c9 	.word	0x004010c9
  40250c:	20400adc 	.word	0x20400adc
  402510:	20400b50 	.word	0x20400b50
  402514:	00401d95 	.word	0x00401d95
  402518:	20400b28 	.word	0x20400b28
  40251c:	0040107d 	.word	0x0040107d

00402520 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402520:	b1e8      	cbz	r0, 40255e <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402522:	b570      	push	{r4, r5, r6, lr}
  402524:	4615      	mov	r5, r2
  402526:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402528:	4e16      	ldr	r6, [pc, #88]	; (402584 <vTaskPlaceOnEventListRestricted+0x64>)
  40252a:	6831      	ldr	r1, [r6, #0]
  40252c:	3118      	adds	r1, #24
  40252e:	4b16      	ldr	r3, [pc, #88]	; (402588 <vTaskPlaceOnEventListRestricted+0x68>)
  402530:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402532:	6830      	ldr	r0, [r6, #0]
  402534:	3004      	adds	r0, #4
  402536:	4b15      	ldr	r3, [pc, #84]	; (40258c <vTaskPlaceOnEventListRestricted+0x6c>)
  402538:	4798      	blx	r3
  40253a:	b940      	cbnz	r0, 40254e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40253c:	6832      	ldr	r2, [r6, #0]
  40253e:	4914      	ldr	r1, [pc, #80]	; (402590 <vTaskPlaceOnEventListRestricted+0x70>)
  402540:	680b      	ldr	r3, [r1, #0]
  402542:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402544:	2201      	movs	r2, #1
  402546:	4082      	lsls	r2, r0
  402548:	ea23 0302 	bic.w	r3, r3, r2
  40254c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40254e:	2d01      	cmp	r5, #1
  402550:	d010      	beq.n	402574 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402552:	4b10      	ldr	r3, [pc, #64]	; (402594 <vTaskPlaceOnEventListRestricted+0x74>)
  402554:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402556:	4420      	add	r0, r4
  402558:	4b0f      	ldr	r3, [pc, #60]	; (402598 <vTaskPlaceOnEventListRestricted+0x78>)
  40255a:	4798      	blx	r3
  40255c:	bd70      	pop	{r4, r5, r6, pc}
  40255e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402562:	b672      	cpsid	i
  402564:	f383 8811 	msr	BASEPRI, r3
  402568:	f3bf 8f6f 	isb	sy
  40256c:	f3bf 8f4f 	dsb	sy
  402570:	b662      	cpsie	i
  402572:	e7fe      	b.n	402572 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402574:	4b03      	ldr	r3, [pc, #12]	; (402584 <vTaskPlaceOnEventListRestricted+0x64>)
  402576:	6819      	ldr	r1, [r3, #0]
  402578:	3104      	adds	r1, #4
  40257a:	4808      	ldr	r0, [pc, #32]	; (40259c <vTaskPlaceOnEventListRestricted+0x7c>)
  40257c:	4b02      	ldr	r3, [pc, #8]	; (402588 <vTaskPlaceOnEventListRestricted+0x68>)
  40257e:	4798      	blx	r3
  402580:	bd70      	pop	{r4, r5, r6, pc}
  402582:	bf00      	nop
  402584:	20400a58 	.word	0x20400a58
  402588:	0040107d 	.word	0x0040107d
  40258c:	004010c9 	.word	0x004010c9
  402590:	20400adc 	.word	0x20400adc
  402594:	20400b50 	.word	0x20400b50
  402598:	00401d95 	.word	0x00401d95
  40259c:	20400b28 	.word	0x20400b28

004025a0 <xTaskRemoveFromEventList>:
{
  4025a0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4025a2:	68c3      	ldr	r3, [r0, #12]
  4025a4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4025a6:	b324      	cbz	r4, 4025f2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4025a8:	f104 0518 	add.w	r5, r4, #24
  4025ac:	4628      	mov	r0, r5
  4025ae:	4b1a      	ldr	r3, [pc, #104]	; (402618 <xTaskRemoveFromEventList+0x78>)
  4025b0:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4025b2:	4b1a      	ldr	r3, [pc, #104]	; (40261c <xTaskRemoveFromEventList+0x7c>)
  4025b4:	681b      	ldr	r3, [r3, #0]
  4025b6:	bb3b      	cbnz	r3, 402608 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4025b8:	1d25      	adds	r5, r4, #4
  4025ba:	4628      	mov	r0, r5
  4025bc:	4b16      	ldr	r3, [pc, #88]	; (402618 <xTaskRemoveFromEventList+0x78>)
  4025be:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4025c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4025c2:	4a17      	ldr	r2, [pc, #92]	; (402620 <xTaskRemoveFromEventList+0x80>)
  4025c4:	6811      	ldr	r1, [r2, #0]
  4025c6:	2301      	movs	r3, #1
  4025c8:	4083      	lsls	r3, r0
  4025ca:	430b      	orrs	r3, r1
  4025cc:	6013      	str	r3, [r2, #0]
  4025ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025d2:	4629      	mov	r1, r5
  4025d4:	4b13      	ldr	r3, [pc, #76]	; (402624 <xTaskRemoveFromEventList+0x84>)
  4025d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025da:	4b13      	ldr	r3, [pc, #76]	; (402628 <xTaskRemoveFromEventList+0x88>)
  4025dc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4025de:	4b13      	ldr	r3, [pc, #76]	; (40262c <xTaskRemoveFromEventList+0x8c>)
  4025e0:	681b      	ldr	r3, [r3, #0]
  4025e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025e6:	429a      	cmp	r2, r3
  4025e8:	d913      	bls.n	402612 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4025ea:	2001      	movs	r0, #1
  4025ec:	4b10      	ldr	r3, [pc, #64]	; (402630 <xTaskRemoveFromEventList+0x90>)
  4025ee:	6018      	str	r0, [r3, #0]
  4025f0:	bd38      	pop	{r3, r4, r5, pc}
  4025f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025f6:	b672      	cpsid	i
  4025f8:	f383 8811 	msr	BASEPRI, r3
  4025fc:	f3bf 8f6f 	isb	sy
  402600:	f3bf 8f4f 	dsb	sy
  402604:	b662      	cpsie	i
  402606:	e7fe      	b.n	402606 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402608:	4629      	mov	r1, r5
  40260a:	480a      	ldr	r0, [pc, #40]	; (402634 <xTaskRemoveFromEventList+0x94>)
  40260c:	4b06      	ldr	r3, [pc, #24]	; (402628 <xTaskRemoveFromEventList+0x88>)
  40260e:	4798      	blx	r3
  402610:	e7e5      	b.n	4025de <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402612:	2000      	movs	r0, #0
}
  402614:	bd38      	pop	{r3, r4, r5, pc}
  402616:	bf00      	nop
  402618:	004010c9 	.word	0x004010c9
  40261c:	20400ad0 	.word	0x20400ad0
  402620:	20400adc 	.word	0x20400adc
  402624:	20400a64 	.word	0x20400a64
  402628:	0040107d 	.word	0x0040107d
  40262c:	20400a58 	.word	0x20400a58
  402630:	20400b54 	.word	0x20400b54
  402634:	20400b10 	.word	0x20400b10

00402638 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402638:	b130      	cbz	r0, 402648 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40263a:	4a09      	ldr	r2, [pc, #36]	; (402660 <vTaskSetTimeOutState+0x28>)
  40263c:	6812      	ldr	r2, [r2, #0]
  40263e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402640:	4a08      	ldr	r2, [pc, #32]	; (402664 <vTaskSetTimeOutState+0x2c>)
  402642:	6812      	ldr	r2, [r2, #0]
  402644:	6042      	str	r2, [r0, #4]
  402646:	4770      	bx	lr
  402648:	f04f 0380 	mov.w	r3, #128	; 0x80
  40264c:	b672      	cpsid	i
  40264e:	f383 8811 	msr	BASEPRI, r3
  402652:	f3bf 8f6f 	isb	sy
  402656:	f3bf 8f4f 	dsb	sy
  40265a:	b662      	cpsie	i
  40265c:	e7fe      	b.n	40265c <vTaskSetTimeOutState+0x24>
  40265e:	bf00      	nop
  402660:	20400b0c 	.word	0x20400b0c
  402664:	20400b50 	.word	0x20400b50

00402668 <xTaskCheckForTimeOut>:
{
  402668:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40266a:	b1c0      	cbz	r0, 40269e <xTaskCheckForTimeOut+0x36>
  40266c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40266e:	b309      	cbz	r1, 4026b4 <xTaskCheckForTimeOut+0x4c>
  402670:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402672:	4b1d      	ldr	r3, [pc, #116]	; (4026e8 <xTaskCheckForTimeOut+0x80>)
  402674:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402676:	4b1d      	ldr	r3, [pc, #116]	; (4026ec <xTaskCheckForTimeOut+0x84>)
  402678:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40267a:	682b      	ldr	r3, [r5, #0]
  40267c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402680:	d02e      	beq.n	4026e0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402682:	491b      	ldr	r1, [pc, #108]	; (4026f0 <xTaskCheckForTimeOut+0x88>)
  402684:	6809      	ldr	r1, [r1, #0]
  402686:	6820      	ldr	r0, [r4, #0]
  402688:	4288      	cmp	r0, r1
  40268a:	d002      	beq.n	402692 <xTaskCheckForTimeOut+0x2a>
  40268c:	6861      	ldr	r1, [r4, #4]
  40268e:	428a      	cmp	r2, r1
  402690:	d228      	bcs.n	4026e4 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402692:	6861      	ldr	r1, [r4, #4]
  402694:	1a50      	subs	r0, r2, r1
  402696:	4283      	cmp	r3, r0
  402698:	d817      	bhi.n	4026ca <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40269a:	2401      	movs	r4, #1
  40269c:	e01c      	b.n	4026d8 <xTaskCheckForTimeOut+0x70>
  40269e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026a2:	b672      	cpsid	i
  4026a4:	f383 8811 	msr	BASEPRI, r3
  4026a8:	f3bf 8f6f 	isb	sy
  4026ac:	f3bf 8f4f 	dsb	sy
  4026b0:	b662      	cpsie	i
  4026b2:	e7fe      	b.n	4026b2 <xTaskCheckForTimeOut+0x4a>
  4026b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026b8:	b672      	cpsid	i
  4026ba:	f383 8811 	msr	BASEPRI, r3
  4026be:	f3bf 8f6f 	isb	sy
  4026c2:	f3bf 8f4f 	dsb	sy
  4026c6:	b662      	cpsie	i
  4026c8:	e7fe      	b.n	4026c8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4026ca:	1a9b      	subs	r3, r3, r2
  4026cc:	440b      	add	r3, r1
  4026ce:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4026d0:	4620      	mov	r0, r4
  4026d2:	4b08      	ldr	r3, [pc, #32]	; (4026f4 <xTaskCheckForTimeOut+0x8c>)
  4026d4:	4798      	blx	r3
			xReturn = pdFALSE;
  4026d6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4026d8:	4b07      	ldr	r3, [pc, #28]	; (4026f8 <xTaskCheckForTimeOut+0x90>)
  4026da:	4798      	blx	r3
}
  4026dc:	4620      	mov	r0, r4
  4026de:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4026e0:	2400      	movs	r4, #0
  4026e2:	e7f9      	b.n	4026d8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4026e4:	2401      	movs	r4, #1
  4026e6:	e7f7      	b.n	4026d8 <xTaskCheckForTimeOut+0x70>
  4026e8:	004011ad 	.word	0x004011ad
  4026ec:	20400b50 	.word	0x20400b50
  4026f0:	20400b0c 	.word	0x20400b0c
  4026f4:	00402639 	.word	0x00402639
  4026f8:	004011f9 	.word	0x004011f9

004026fc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4026fc:	2201      	movs	r2, #1
  4026fe:	4b01      	ldr	r3, [pc, #4]	; (402704 <vTaskMissedYield+0x8>)
  402700:	601a      	str	r2, [r3, #0]
  402702:	4770      	bx	lr
  402704:	20400b54 	.word	0x20400b54

00402708 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402708:	4b05      	ldr	r3, [pc, #20]	; (402720 <xTaskGetSchedulerState+0x18>)
  40270a:	681b      	ldr	r3, [r3, #0]
  40270c:	b133      	cbz	r3, 40271c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40270e:	4b05      	ldr	r3, [pc, #20]	; (402724 <xTaskGetSchedulerState+0x1c>)
  402710:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402712:	2b00      	cmp	r3, #0
  402714:	bf0c      	ite	eq
  402716:	2002      	moveq	r0, #2
  402718:	2000      	movne	r0, #0
  40271a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  40271c:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40271e:	4770      	bx	lr
  402720:	20400b24 	.word	0x20400b24
  402724:	20400ad0 	.word	0x20400ad0

00402728 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402728:	2800      	cmp	r0, #0
  40272a:	d044      	beq.n	4027b6 <vTaskPriorityInherit+0x8e>
	{
  40272c:	b538      	push	{r3, r4, r5, lr}
  40272e:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402730:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402732:	4921      	ldr	r1, [pc, #132]	; (4027b8 <vTaskPriorityInherit+0x90>)
  402734:	6809      	ldr	r1, [r1, #0]
  402736:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402738:	428a      	cmp	r2, r1
  40273a:	d214      	bcs.n	402766 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40273c:	6981      	ldr	r1, [r0, #24]
  40273e:	2900      	cmp	r1, #0
  402740:	db05      	blt.n	40274e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402742:	491d      	ldr	r1, [pc, #116]	; (4027b8 <vTaskPriorityInherit+0x90>)
  402744:	6809      	ldr	r1, [r1, #0]
  402746:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402748:	f1c1 0105 	rsb	r1, r1, #5
  40274c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40274e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402752:	491a      	ldr	r1, [pc, #104]	; (4027bc <vTaskPriorityInherit+0x94>)
  402754:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402758:	6961      	ldr	r1, [r4, #20]
  40275a:	4291      	cmp	r1, r2
  40275c:	d004      	beq.n	402768 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40275e:	4a16      	ldr	r2, [pc, #88]	; (4027b8 <vTaskPriorityInherit+0x90>)
  402760:	6812      	ldr	r2, [r2, #0]
  402762:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402764:	62e2      	str	r2, [r4, #44]	; 0x2c
  402766:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402768:	1d25      	adds	r5, r4, #4
  40276a:	4628      	mov	r0, r5
  40276c:	4b14      	ldr	r3, [pc, #80]	; (4027c0 <vTaskPriorityInherit+0x98>)
  40276e:	4798      	blx	r3
  402770:	b970      	cbnz	r0, 402790 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402774:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402778:	4a10      	ldr	r2, [pc, #64]	; (4027bc <vTaskPriorityInherit+0x94>)
  40277a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40277e:	b93a      	cbnz	r2, 402790 <vTaskPriorityInherit+0x68>
  402780:	4810      	ldr	r0, [pc, #64]	; (4027c4 <vTaskPriorityInherit+0x9c>)
  402782:	6802      	ldr	r2, [r0, #0]
  402784:	2101      	movs	r1, #1
  402786:	fa01 f303 	lsl.w	r3, r1, r3
  40278a:	ea22 0303 	bic.w	r3, r2, r3
  40278e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402790:	4b09      	ldr	r3, [pc, #36]	; (4027b8 <vTaskPriorityInherit+0x90>)
  402792:	681b      	ldr	r3, [r3, #0]
  402794:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402796:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402798:	4a0a      	ldr	r2, [pc, #40]	; (4027c4 <vTaskPriorityInherit+0x9c>)
  40279a:	6811      	ldr	r1, [r2, #0]
  40279c:	2301      	movs	r3, #1
  40279e:	4083      	lsls	r3, r0
  4027a0:	430b      	orrs	r3, r1
  4027a2:	6013      	str	r3, [r2, #0]
  4027a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4027a8:	4629      	mov	r1, r5
  4027aa:	4b04      	ldr	r3, [pc, #16]	; (4027bc <vTaskPriorityInherit+0x94>)
  4027ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4027b0:	4b05      	ldr	r3, [pc, #20]	; (4027c8 <vTaskPriorityInherit+0xa0>)
  4027b2:	4798      	blx	r3
  4027b4:	bd38      	pop	{r3, r4, r5, pc}
  4027b6:	4770      	bx	lr
  4027b8:	20400a58 	.word	0x20400a58
  4027bc:	20400a64 	.word	0x20400a64
  4027c0:	004010c9 	.word	0x004010c9
  4027c4:	20400adc 	.word	0x20400adc
  4027c8:	0040107d 	.word	0x0040107d

004027cc <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4027cc:	2800      	cmp	r0, #0
  4027ce:	d04d      	beq.n	40286c <xTaskPriorityDisinherit+0xa0>
	{
  4027d0:	b538      	push	{r3, r4, r5, lr}
  4027d2:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4027d4:	4a27      	ldr	r2, [pc, #156]	; (402874 <xTaskPriorityDisinherit+0xa8>)
  4027d6:	6812      	ldr	r2, [r2, #0]
  4027d8:	4290      	cmp	r0, r2
  4027da:	d00a      	beq.n	4027f2 <xTaskPriorityDisinherit+0x26>
  4027dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027e0:	b672      	cpsid	i
  4027e2:	f383 8811 	msr	BASEPRI, r3
  4027e6:	f3bf 8f6f 	isb	sy
  4027ea:	f3bf 8f4f 	dsb	sy
  4027ee:	b662      	cpsie	i
  4027f0:	e7fe      	b.n	4027f0 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4027f2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4027f4:	b952      	cbnz	r2, 40280c <xTaskPriorityDisinherit+0x40>
  4027f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027fa:	b672      	cpsid	i
  4027fc:	f383 8811 	msr	BASEPRI, r3
  402800:	f3bf 8f6f 	isb	sy
  402804:	f3bf 8f4f 	dsb	sy
  402808:	b662      	cpsie	i
  40280a:	e7fe      	b.n	40280a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  40280c:	3a01      	subs	r2, #1
  40280e:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402810:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402812:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402814:	4288      	cmp	r0, r1
  402816:	d02b      	beq.n	402870 <xTaskPriorityDisinherit+0xa4>
  402818:	bb52      	cbnz	r2, 402870 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40281a:	1d25      	adds	r5, r4, #4
  40281c:	4628      	mov	r0, r5
  40281e:	4b16      	ldr	r3, [pc, #88]	; (402878 <xTaskPriorityDisinherit+0xac>)
  402820:	4798      	blx	r3
  402822:	b968      	cbnz	r0, 402840 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402824:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402826:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40282a:	4b14      	ldr	r3, [pc, #80]	; (40287c <xTaskPriorityDisinherit+0xb0>)
  40282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402830:	b933      	cbnz	r3, 402840 <xTaskPriorityDisinherit+0x74>
  402832:	4813      	ldr	r0, [pc, #76]	; (402880 <xTaskPriorityDisinherit+0xb4>)
  402834:	6803      	ldr	r3, [r0, #0]
  402836:	2201      	movs	r2, #1
  402838:	408a      	lsls	r2, r1
  40283a:	ea23 0302 	bic.w	r3, r3, r2
  40283e:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402840:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402842:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402844:	f1c0 0305 	rsb	r3, r0, #5
  402848:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40284a:	4a0d      	ldr	r2, [pc, #52]	; (402880 <xTaskPriorityDisinherit+0xb4>)
  40284c:	6811      	ldr	r1, [r2, #0]
  40284e:	2401      	movs	r4, #1
  402850:	fa04 f300 	lsl.w	r3, r4, r0
  402854:	430b      	orrs	r3, r1
  402856:	6013      	str	r3, [r2, #0]
  402858:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40285c:	4629      	mov	r1, r5
  40285e:	4b07      	ldr	r3, [pc, #28]	; (40287c <xTaskPriorityDisinherit+0xb0>)
  402860:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402864:	4b07      	ldr	r3, [pc, #28]	; (402884 <xTaskPriorityDisinherit+0xb8>)
  402866:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402868:	4620      	mov	r0, r4
  40286a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  40286c:	2000      	movs	r0, #0
  40286e:	4770      	bx	lr
  402870:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402872:	bd38      	pop	{r3, r4, r5, pc}
  402874:	20400a58 	.word	0x20400a58
  402878:	004010c9 	.word	0x004010c9
  40287c:	20400a64 	.word	0x20400a64
  402880:	20400adc 	.word	0x20400adc
  402884:	0040107d 	.word	0x0040107d

00402888 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402888:	4b05      	ldr	r3, [pc, #20]	; (4028a0 <pvTaskIncrementMutexHeldCount+0x18>)
  40288a:	681b      	ldr	r3, [r3, #0]
  40288c:	b123      	cbz	r3, 402898 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40288e:	4b04      	ldr	r3, [pc, #16]	; (4028a0 <pvTaskIncrementMutexHeldCount+0x18>)
  402890:	681a      	ldr	r2, [r3, #0]
  402892:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402894:	3301      	adds	r3, #1
  402896:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402898:	4b01      	ldr	r3, [pc, #4]	; (4028a0 <pvTaskIncrementMutexHeldCount+0x18>)
  40289a:	6818      	ldr	r0, [r3, #0]
	}
  40289c:	4770      	bx	lr
  40289e:	bf00      	nop
  4028a0:	20400a58 	.word	0x20400a58

004028a4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4028a4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4028a6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4028a8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4028aa:	4291      	cmp	r1, r2
  4028ac:	d80c      	bhi.n	4028c8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4028ae:	1ad2      	subs	r2, r2, r3
  4028b0:	6983      	ldr	r3, [r0, #24]
  4028b2:	429a      	cmp	r2, r3
  4028b4:	d301      	bcc.n	4028ba <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4028b6:	2001      	movs	r0, #1
  4028b8:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4028ba:	1d01      	adds	r1, r0, #4
  4028bc:	4b09      	ldr	r3, [pc, #36]	; (4028e4 <prvInsertTimerInActiveList+0x40>)
  4028be:	6818      	ldr	r0, [r3, #0]
  4028c0:	4b09      	ldr	r3, [pc, #36]	; (4028e8 <prvInsertTimerInActiveList+0x44>)
  4028c2:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4028c4:	2000      	movs	r0, #0
  4028c6:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4028c8:	429a      	cmp	r2, r3
  4028ca:	d203      	bcs.n	4028d4 <prvInsertTimerInActiveList+0x30>
  4028cc:	4299      	cmp	r1, r3
  4028ce:	d301      	bcc.n	4028d4 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4028d0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4028d2:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4028d4:	1d01      	adds	r1, r0, #4
  4028d6:	4b05      	ldr	r3, [pc, #20]	; (4028ec <prvInsertTimerInActiveList+0x48>)
  4028d8:	6818      	ldr	r0, [r3, #0]
  4028da:	4b03      	ldr	r3, [pc, #12]	; (4028e8 <prvInsertTimerInActiveList+0x44>)
  4028dc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4028de:	2000      	movs	r0, #0
  4028e0:	bd08      	pop	{r3, pc}
  4028e2:	bf00      	nop
  4028e4:	20400b5c 	.word	0x20400b5c
  4028e8:	00401095 	.word	0x00401095
  4028ec:	20400b58 	.word	0x20400b58

004028f0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4028f0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4028f2:	4b15      	ldr	r3, [pc, #84]	; (402948 <prvCheckForValidListAndQueue+0x58>)
  4028f4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4028f6:	4b15      	ldr	r3, [pc, #84]	; (40294c <prvCheckForValidListAndQueue+0x5c>)
  4028f8:	681b      	ldr	r3, [r3, #0]
  4028fa:	b113      	cbz	r3, 402902 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4028fc:	4b14      	ldr	r3, [pc, #80]	; (402950 <prvCheckForValidListAndQueue+0x60>)
  4028fe:	4798      	blx	r3
  402900:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402902:	4d14      	ldr	r5, [pc, #80]	; (402954 <prvCheckForValidListAndQueue+0x64>)
  402904:	4628      	mov	r0, r5
  402906:	4e14      	ldr	r6, [pc, #80]	; (402958 <prvCheckForValidListAndQueue+0x68>)
  402908:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40290a:	4c14      	ldr	r4, [pc, #80]	; (40295c <prvCheckForValidListAndQueue+0x6c>)
  40290c:	4620      	mov	r0, r4
  40290e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402910:	4b13      	ldr	r3, [pc, #76]	; (402960 <prvCheckForValidListAndQueue+0x70>)
  402912:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402914:	4b13      	ldr	r3, [pc, #76]	; (402964 <prvCheckForValidListAndQueue+0x74>)
  402916:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402918:	2200      	movs	r2, #0
  40291a:	2110      	movs	r1, #16
  40291c:	2005      	movs	r0, #5
  40291e:	4b12      	ldr	r3, [pc, #72]	; (402968 <prvCheckForValidListAndQueue+0x78>)
  402920:	4798      	blx	r3
  402922:	4b0a      	ldr	r3, [pc, #40]	; (40294c <prvCheckForValidListAndQueue+0x5c>)
  402924:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402926:	b118      	cbz	r0, 402930 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402928:	4910      	ldr	r1, [pc, #64]	; (40296c <prvCheckForValidListAndQueue+0x7c>)
  40292a:	4b11      	ldr	r3, [pc, #68]	; (402970 <prvCheckForValidListAndQueue+0x80>)
  40292c:	4798      	blx	r3
  40292e:	e7e5      	b.n	4028fc <prvCheckForValidListAndQueue+0xc>
  402930:	f04f 0380 	mov.w	r3, #128	; 0x80
  402934:	b672      	cpsid	i
  402936:	f383 8811 	msr	BASEPRI, r3
  40293a:	f3bf 8f6f 	isb	sy
  40293e:	f3bf 8f4f 	dsb	sy
  402942:	b662      	cpsie	i
  402944:	e7fe      	b.n	402944 <prvCheckForValidListAndQueue+0x54>
  402946:	bf00      	nop
  402948:	004011ad 	.word	0x004011ad
  40294c:	20400b8c 	.word	0x20400b8c
  402950:	004011f9 	.word	0x004011f9
  402954:	20400b60 	.word	0x20400b60
  402958:	00401061 	.word	0x00401061
  40295c:	20400b74 	.word	0x20400b74
  402960:	20400b58 	.word	0x20400b58
  402964:	20400b5c 	.word	0x20400b5c
  402968:	004016cd 	.word	0x004016cd
  40296c:	00409e10 	.word	0x00409e10
  402970:	00401cdd 	.word	0x00401cdd

00402974 <xTimerCreateTimerTask>:
{
  402974:	b510      	push	{r4, lr}
  402976:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402978:	4b0f      	ldr	r3, [pc, #60]	; (4029b8 <xTimerCreateTimerTask+0x44>)
  40297a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40297c:	4b0f      	ldr	r3, [pc, #60]	; (4029bc <xTimerCreateTimerTask+0x48>)
  40297e:	681b      	ldr	r3, [r3, #0]
  402980:	b173      	cbz	r3, 4029a0 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402982:	2300      	movs	r3, #0
  402984:	9303      	str	r3, [sp, #12]
  402986:	9302      	str	r3, [sp, #8]
  402988:	9301      	str	r3, [sp, #4]
  40298a:	2204      	movs	r2, #4
  40298c:	9200      	str	r2, [sp, #0]
  40298e:	f44f 7282 	mov.w	r2, #260	; 0x104
  402992:	490b      	ldr	r1, [pc, #44]	; (4029c0 <xTimerCreateTimerTask+0x4c>)
  402994:	480b      	ldr	r0, [pc, #44]	; (4029c4 <xTimerCreateTimerTask+0x50>)
  402996:	4c0c      	ldr	r4, [pc, #48]	; (4029c8 <xTimerCreateTimerTask+0x54>)
  402998:	47a0      	blx	r4
	configASSERT( xReturn );
  40299a:	b108      	cbz	r0, 4029a0 <xTimerCreateTimerTask+0x2c>
}
  40299c:	b004      	add	sp, #16
  40299e:	bd10      	pop	{r4, pc}
  4029a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029a4:	b672      	cpsid	i
  4029a6:	f383 8811 	msr	BASEPRI, r3
  4029aa:	f3bf 8f6f 	isb	sy
  4029ae:	f3bf 8f4f 	dsb	sy
  4029b2:	b662      	cpsie	i
  4029b4:	e7fe      	b.n	4029b4 <xTimerCreateTimerTask+0x40>
  4029b6:	bf00      	nop
  4029b8:	004028f1 	.word	0x004028f1
  4029bc:	20400b8c 	.word	0x20400b8c
  4029c0:	00409e18 	.word	0x00409e18
  4029c4:	00402af5 	.word	0x00402af5
  4029c8:	00401ded 	.word	0x00401ded

004029cc <xTimerGenericCommand>:
	configASSERT( xTimer );
  4029cc:	b1d8      	cbz	r0, 402a06 <xTimerGenericCommand+0x3a>
{
  4029ce:	b530      	push	{r4, r5, lr}
  4029d0:	b085      	sub	sp, #20
  4029d2:	4615      	mov	r5, r2
  4029d4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4029d6:	4a15      	ldr	r2, [pc, #84]	; (402a2c <xTimerGenericCommand+0x60>)
  4029d8:	6810      	ldr	r0, [r2, #0]
  4029da:	b320      	cbz	r0, 402a26 <xTimerGenericCommand+0x5a>
  4029dc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4029de:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4029e0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4029e2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4029e4:	2905      	cmp	r1, #5
  4029e6:	dc19      	bgt.n	402a1c <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4029e8:	4b11      	ldr	r3, [pc, #68]	; (402a30 <xTimerGenericCommand+0x64>)
  4029ea:	4798      	blx	r3
  4029ec:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4029ee:	f04f 0300 	mov.w	r3, #0
  4029f2:	bf0c      	ite	eq
  4029f4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4029f6:	461a      	movne	r2, r3
  4029f8:	4669      	mov	r1, sp
  4029fa:	480c      	ldr	r0, [pc, #48]	; (402a2c <xTimerGenericCommand+0x60>)
  4029fc:	6800      	ldr	r0, [r0, #0]
  4029fe:	4c0d      	ldr	r4, [pc, #52]	; (402a34 <xTimerGenericCommand+0x68>)
  402a00:	47a0      	blx	r4
}
  402a02:	b005      	add	sp, #20
  402a04:	bd30      	pop	{r4, r5, pc}
  402a06:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a0a:	b672      	cpsid	i
  402a0c:	f383 8811 	msr	BASEPRI, r3
  402a10:	f3bf 8f6f 	isb	sy
  402a14:	f3bf 8f4f 	dsb	sy
  402a18:	b662      	cpsie	i
  402a1a:	e7fe      	b.n	402a1a <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402a1c:	2300      	movs	r3, #0
  402a1e:	4669      	mov	r1, sp
  402a20:	4c05      	ldr	r4, [pc, #20]	; (402a38 <xTimerGenericCommand+0x6c>)
  402a22:	47a0      	blx	r4
  402a24:	e7ed      	b.n	402a02 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402a26:	2000      	movs	r0, #0
	return xReturn;
  402a28:	e7eb      	b.n	402a02 <xTimerGenericCommand+0x36>
  402a2a:	bf00      	nop
  402a2c:	20400b8c 	.word	0x20400b8c
  402a30:	00402709 	.word	0x00402709
  402a34:	00401749 	.word	0x00401749
  402a38:	0040192d 	.word	0x0040192d

00402a3c <prvSampleTimeNow>:
{
  402a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a40:	b082      	sub	sp, #8
  402a42:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402a44:	4b24      	ldr	r3, [pc, #144]	; (402ad8 <prvSampleTimeNow+0x9c>)
  402a46:	4798      	blx	r3
  402a48:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402a4a:	4b24      	ldr	r3, [pc, #144]	; (402adc <prvSampleTimeNow+0xa0>)
  402a4c:	681b      	ldr	r3, [r3, #0]
  402a4e:	4298      	cmp	r0, r3
  402a50:	d31b      	bcc.n	402a8a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402a52:	2300      	movs	r3, #0
  402a54:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402a58:	4b20      	ldr	r3, [pc, #128]	; (402adc <prvSampleTimeNow+0xa0>)
  402a5a:	601f      	str	r7, [r3, #0]
}
  402a5c:	4638      	mov	r0, r7
  402a5e:	b002      	add	sp, #8
  402a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402a64:	2100      	movs	r1, #0
  402a66:	9100      	str	r1, [sp, #0]
  402a68:	460b      	mov	r3, r1
  402a6a:	4652      	mov	r2, sl
  402a6c:	4620      	mov	r0, r4
  402a6e:	4c1c      	ldr	r4, [pc, #112]	; (402ae0 <prvSampleTimeNow+0xa4>)
  402a70:	47a0      	blx	r4
				configASSERT( xResult );
  402a72:	b960      	cbnz	r0, 402a8e <prvSampleTimeNow+0x52>
  402a74:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a78:	b672      	cpsid	i
  402a7a:	f383 8811 	msr	BASEPRI, r3
  402a7e:	f3bf 8f6f 	isb	sy
  402a82:	f3bf 8f4f 	dsb	sy
  402a86:	b662      	cpsie	i
  402a88:	e7fe      	b.n	402a88 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a8a:	4d16      	ldr	r5, [pc, #88]	; (402ae4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a8c:	4e16      	ldr	r6, [pc, #88]	; (402ae8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a8e:	682b      	ldr	r3, [r5, #0]
  402a90:	681a      	ldr	r2, [r3, #0]
  402a92:	b1c2      	cbz	r2, 402ac6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a94:	68db      	ldr	r3, [r3, #12]
  402a96:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a9a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a9c:	f104 0904 	add.w	r9, r4, #4
  402aa0:	4648      	mov	r0, r9
  402aa2:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402aa6:	4620      	mov	r0, r4
  402aa8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402aaa:	69e3      	ldr	r3, [r4, #28]
  402aac:	2b01      	cmp	r3, #1
  402aae:	d1ee      	bne.n	402a8e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402ab0:	69a3      	ldr	r3, [r4, #24]
  402ab2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402ab4:	459a      	cmp	sl, r3
  402ab6:	d2d5      	bcs.n	402a64 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402ab8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402aba:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402abc:	4649      	mov	r1, r9
  402abe:	6828      	ldr	r0, [r5, #0]
  402ac0:	4b0a      	ldr	r3, [pc, #40]	; (402aec <prvSampleTimeNow+0xb0>)
  402ac2:	4798      	blx	r3
  402ac4:	e7e3      	b.n	402a8e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402ac6:	4a0a      	ldr	r2, [pc, #40]	; (402af0 <prvSampleTimeNow+0xb4>)
  402ac8:	6810      	ldr	r0, [r2, #0]
  402aca:	4906      	ldr	r1, [pc, #24]	; (402ae4 <prvSampleTimeNow+0xa8>)
  402acc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402ace:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402ad0:	2301      	movs	r3, #1
  402ad2:	f8c8 3000 	str.w	r3, [r8]
  402ad6:	e7bf      	b.n	402a58 <prvSampleTimeNow+0x1c>
  402ad8:	004020bd 	.word	0x004020bd
  402adc:	20400b88 	.word	0x20400b88
  402ae0:	004029cd 	.word	0x004029cd
  402ae4:	20400b58 	.word	0x20400b58
  402ae8:	004010c9 	.word	0x004010c9
  402aec:	00401095 	.word	0x00401095
  402af0:	20400b5c 	.word	0x20400b5c

00402af4 <prvTimerTask>:
{
  402af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402af8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402afa:	4e75      	ldr	r6, [pc, #468]	; (402cd0 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402afc:	4f75      	ldr	r7, [pc, #468]	; (402cd4 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402afe:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402cfc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b02:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402d00 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402b06:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402b08:	681a      	ldr	r2, [r3, #0]
  402b0a:	2a00      	cmp	r2, #0
  402b0c:	f000 80ce 	beq.w	402cac <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b10:	68db      	ldr	r3, [r3, #12]
  402b12:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402b14:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402b16:	a804      	add	r0, sp, #16
  402b18:	4b6f      	ldr	r3, [pc, #444]	; (402cd8 <prvTimerTask+0x1e4>)
  402b1a:	4798      	blx	r3
  402b1c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402b1e:	9b04      	ldr	r3, [sp, #16]
  402b20:	2b00      	cmp	r3, #0
  402b22:	d144      	bne.n	402bae <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402b24:	42a0      	cmp	r0, r4
  402b26:	d212      	bcs.n	402b4e <prvTimerTask+0x5a>
  402b28:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402b2a:	1b61      	subs	r1, r4, r5
  402b2c:	4b6b      	ldr	r3, [pc, #428]	; (402cdc <prvTimerTask+0x1e8>)
  402b2e:	6818      	ldr	r0, [r3, #0]
  402b30:	4b6b      	ldr	r3, [pc, #428]	; (402ce0 <prvTimerTask+0x1ec>)
  402b32:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402b34:	4b6b      	ldr	r3, [pc, #428]	; (402ce4 <prvTimerTask+0x1f0>)
  402b36:	4798      	blx	r3
  402b38:	2800      	cmp	r0, #0
  402b3a:	d13a      	bne.n	402bb2 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402b40:	f8c9 3000 	str.w	r3, [r9]
  402b44:	f3bf 8f4f 	dsb	sy
  402b48:	f3bf 8f6f 	isb	sy
  402b4c:	e031      	b.n	402bb2 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402b4e:	4b65      	ldr	r3, [pc, #404]	; (402ce4 <prvTimerTask+0x1f0>)
  402b50:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b52:	6833      	ldr	r3, [r6, #0]
  402b54:	68db      	ldr	r3, [r3, #12]
  402b56:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b5a:	f10a 0004 	add.w	r0, sl, #4
  402b5e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b60:	f8da 301c 	ldr.w	r3, [sl, #28]
  402b64:	2b01      	cmp	r3, #1
  402b66:	d004      	beq.n	402b72 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b68:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402b6c:	4650      	mov	r0, sl
  402b6e:	4798      	blx	r3
  402b70:	e01f      	b.n	402bb2 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402b72:	f8da 1018 	ldr.w	r1, [sl, #24]
  402b76:	4623      	mov	r3, r4
  402b78:	462a      	mov	r2, r5
  402b7a:	4421      	add	r1, r4
  402b7c:	4650      	mov	r0, sl
  402b7e:	4d5a      	ldr	r5, [pc, #360]	; (402ce8 <prvTimerTask+0x1f4>)
  402b80:	47a8      	blx	r5
  402b82:	2801      	cmp	r0, #1
  402b84:	d1f0      	bne.n	402b68 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b86:	2100      	movs	r1, #0
  402b88:	9100      	str	r1, [sp, #0]
  402b8a:	460b      	mov	r3, r1
  402b8c:	4622      	mov	r2, r4
  402b8e:	4650      	mov	r0, sl
  402b90:	4c56      	ldr	r4, [pc, #344]	; (402cec <prvTimerTask+0x1f8>)
  402b92:	47a0      	blx	r4
			configASSERT( xResult );
  402b94:	2800      	cmp	r0, #0
  402b96:	d1e7      	bne.n	402b68 <prvTimerTask+0x74>
  402b98:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b9c:	b672      	cpsid	i
  402b9e:	f383 8811 	msr	BASEPRI, r3
  402ba2:	f3bf 8f6f 	isb	sy
  402ba6:	f3bf 8f4f 	dsb	sy
  402baa:	b662      	cpsie	i
  402bac:	e7fe      	b.n	402bac <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402bae:	4b4d      	ldr	r3, [pc, #308]	; (402ce4 <prvTimerTask+0x1f0>)
  402bb0:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402bb2:	4d4a      	ldr	r5, [pc, #296]	; (402cdc <prvTimerTask+0x1e8>)
  402bb4:	4c4e      	ldr	r4, [pc, #312]	; (402cf0 <prvTimerTask+0x1fc>)
  402bb6:	e006      	b.n	402bc6 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402bb8:	9907      	ldr	r1, [sp, #28]
  402bba:	9806      	ldr	r0, [sp, #24]
  402bbc:	9b05      	ldr	r3, [sp, #20]
  402bbe:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402bc0:	9b04      	ldr	r3, [sp, #16]
  402bc2:	2b00      	cmp	r3, #0
  402bc4:	da09      	bge.n	402bda <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402bc6:	2300      	movs	r3, #0
  402bc8:	461a      	mov	r2, r3
  402bca:	a904      	add	r1, sp, #16
  402bcc:	6828      	ldr	r0, [r5, #0]
  402bce:	47a0      	blx	r4
  402bd0:	2800      	cmp	r0, #0
  402bd2:	d098      	beq.n	402b06 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402bd4:	9b04      	ldr	r3, [sp, #16]
  402bd6:	2b00      	cmp	r3, #0
  402bd8:	dbee      	blt.n	402bb8 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402bda:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402bde:	f8da 3014 	ldr.w	r3, [sl, #20]
  402be2:	b113      	cbz	r3, 402bea <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402be4:	f10a 0004 	add.w	r0, sl, #4
  402be8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bea:	a803      	add	r0, sp, #12
  402bec:	4b3a      	ldr	r3, [pc, #232]	; (402cd8 <prvTimerTask+0x1e4>)
  402bee:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402bf0:	9b04      	ldr	r3, [sp, #16]
  402bf2:	2b09      	cmp	r3, #9
  402bf4:	d8e7      	bhi.n	402bc6 <prvTimerTask+0xd2>
  402bf6:	a201      	add	r2, pc, #4	; (adr r2, 402bfc <prvTimerTask+0x108>)
  402bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402bfc:	00402c25 	.word	0x00402c25
  402c00:	00402c25 	.word	0x00402c25
  402c04:	00402c25 	.word	0x00402c25
  402c08:	00402bc7 	.word	0x00402bc7
  402c0c:	00402c79 	.word	0x00402c79
  402c10:	00402ca5 	.word	0x00402ca5
  402c14:	00402c25 	.word	0x00402c25
  402c18:	00402c25 	.word	0x00402c25
  402c1c:	00402bc7 	.word	0x00402bc7
  402c20:	00402c79 	.word	0x00402c79
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402c24:	9c05      	ldr	r4, [sp, #20]
  402c26:	f8da 1018 	ldr.w	r1, [sl, #24]
  402c2a:	4623      	mov	r3, r4
  402c2c:	4602      	mov	r2, r0
  402c2e:	4421      	add	r1, r4
  402c30:	4650      	mov	r0, sl
  402c32:	4c2d      	ldr	r4, [pc, #180]	; (402ce8 <prvTimerTask+0x1f4>)
  402c34:	47a0      	blx	r4
  402c36:	2801      	cmp	r0, #1
  402c38:	d1bc      	bne.n	402bb4 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c3a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c3e:	4650      	mov	r0, sl
  402c40:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c42:	f8da 301c 	ldr.w	r3, [sl, #28]
  402c46:	2b01      	cmp	r3, #1
  402c48:	d1b4      	bne.n	402bb4 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402c4a:	f8da 2018 	ldr.w	r2, [sl, #24]
  402c4e:	2100      	movs	r1, #0
  402c50:	9100      	str	r1, [sp, #0]
  402c52:	460b      	mov	r3, r1
  402c54:	9805      	ldr	r0, [sp, #20]
  402c56:	4402      	add	r2, r0
  402c58:	4650      	mov	r0, sl
  402c5a:	4c24      	ldr	r4, [pc, #144]	; (402cec <prvTimerTask+0x1f8>)
  402c5c:	47a0      	blx	r4
							configASSERT( xResult );
  402c5e:	2800      	cmp	r0, #0
  402c60:	d1a8      	bne.n	402bb4 <prvTimerTask+0xc0>
  402c62:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c66:	b672      	cpsid	i
  402c68:	f383 8811 	msr	BASEPRI, r3
  402c6c:	f3bf 8f6f 	isb	sy
  402c70:	f3bf 8f4f 	dsb	sy
  402c74:	b662      	cpsie	i
  402c76:	e7fe      	b.n	402c76 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402c78:	9905      	ldr	r1, [sp, #20]
  402c7a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402c7e:	b131      	cbz	r1, 402c8e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402c80:	4603      	mov	r3, r0
  402c82:	4602      	mov	r2, r0
  402c84:	4401      	add	r1, r0
  402c86:	4650      	mov	r0, sl
  402c88:	4c17      	ldr	r4, [pc, #92]	; (402ce8 <prvTimerTask+0x1f4>)
  402c8a:	47a0      	blx	r4
  402c8c:	e792      	b.n	402bb4 <prvTimerTask+0xc0>
  402c8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c92:	b672      	cpsid	i
  402c94:	f383 8811 	msr	BASEPRI, r3
  402c98:	f3bf 8f6f 	isb	sy
  402c9c:	f3bf 8f4f 	dsb	sy
  402ca0:	b662      	cpsie	i
  402ca2:	e7fe      	b.n	402ca2 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402ca4:	4650      	mov	r0, sl
  402ca6:	4b13      	ldr	r3, [pc, #76]	; (402cf4 <prvTimerTask+0x200>)
  402ca8:	4798      	blx	r3
  402caa:	e783      	b.n	402bb4 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402cac:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402cae:	a804      	add	r0, sp, #16
  402cb0:	4b09      	ldr	r3, [pc, #36]	; (402cd8 <prvTimerTask+0x1e4>)
  402cb2:	4798      	blx	r3
  402cb4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402cb6:	9b04      	ldr	r3, [sp, #16]
  402cb8:	2b00      	cmp	r3, #0
  402cba:	f47f af78 	bne.w	402bae <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402cbe:	4b0e      	ldr	r3, [pc, #56]	; (402cf8 <prvTimerTask+0x204>)
  402cc0:	681b      	ldr	r3, [r3, #0]
  402cc2:	681a      	ldr	r2, [r3, #0]
  402cc4:	fab2 f282 	clz	r2, r2
  402cc8:	0952      	lsrs	r2, r2, #5
  402cca:	2400      	movs	r4, #0
  402ccc:	e72d      	b.n	402b2a <prvTimerTask+0x36>
  402cce:	bf00      	nop
  402cd0:	20400b58 	.word	0x20400b58
  402cd4:	004020ad 	.word	0x004020ad
  402cd8:	00402a3d 	.word	0x00402a3d
  402cdc:	20400b8c 	.word	0x20400b8c
  402ce0:	00401d11 	.word	0x00401d11
  402ce4:	00402215 	.word	0x00402215
  402ce8:	004028a5 	.word	0x004028a5
  402cec:	004029cd 	.word	0x004029cd
  402cf0:	00401b0d 	.word	0x00401b0d
  402cf4:	00401439 	.word	0x00401439
  402cf8:	20400b5c 	.word	0x20400b5c
  402cfc:	e000ed04 	.word	0xe000ed04
  402d00:	004010c9 	.word	0x004010c9

00402d04 <butA_callback>:


	xQueueSendFromISR( xQueueAnalogCY, &g_res_value3, 0);
}
void butA_callback(void)
{
  402d04:	b500      	push	{lr}
  402d06:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402d08:	a902      	add	r1, sp, #8
  402d0a:	2300      	movs	r3, #0
  402d0c:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreA, &xHigherPriorityTaskWoken);
  402d10:	4b03      	ldr	r3, [pc, #12]	; (402d20 <butA_callback+0x1c>)
  402d12:	6818      	ldr	r0, [r3, #0]
  402d14:	4b03      	ldr	r3, [pc, #12]	; (402d24 <butA_callback+0x20>)
  402d16:	4798      	blx	r3
}
  402d18:	b003      	add	sp, #12
  402d1a:	f85d fb04 	ldr.w	pc, [sp], #4
  402d1e:	bf00      	nop
  402d20:	20400cac 	.word	0x20400cac
  402d24:	00401a2d 	.word	0x00401a2d

00402d28 <butB_callback>:

void butB_callback(void)
{
  402d28:	b500      	push	{lr}
  402d2a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402d2c:	a902      	add	r1, sp, #8
  402d2e:	2300      	movs	r3, #0
  402d30:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreB, &xHigherPriorityTaskWoken);
  402d34:	4b03      	ldr	r3, [pc, #12]	; (402d44 <butB_callback+0x1c>)
  402d36:	6818      	ldr	r0, [r3, #0]
  402d38:	4b03      	ldr	r3, [pc, #12]	; (402d48 <butB_callback+0x20>)
  402d3a:	4798      	blx	r3
}
  402d3c:	b003      	add	sp, #12
  402d3e:	f85d fb04 	ldr.w	pc, [sp], #4
  402d42:	bf00      	nop
  402d44:	20400ce4 	.word	0x20400ce4
  402d48:	00401a2d 	.word	0x00401a2d

00402d4c <butZ_callback>:

void butZ_callback(void)
{
  402d4c:	b500      	push	{lr}
  402d4e:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402d50:	a902      	add	r1, sp, #8
  402d52:	2300      	movs	r3, #0
  402d54:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreZ, &xHigherPriorityTaskWoken);
  402d58:	4b03      	ldr	r3, [pc, #12]	; (402d68 <butZ_callback+0x1c>)
  402d5a:	6818      	ldr	r0, [r3, #0]
  402d5c:	4b03      	ldr	r3, [pc, #12]	; (402d6c <butZ_callback+0x20>)
  402d5e:	4798      	blx	r3
}
  402d60:	b003      	add	sp, #12
  402d62:	f85d fb04 	ldr.w	pc, [sp], #4
  402d66:	bf00      	nop
  402d68:	20400cdc 	.word	0x20400cdc
  402d6c:	00401a2d 	.word	0x00401a2d

00402d70 <butStart_callback>:

void butStart_callback(void)
{
  402d70:	b500      	push	{lr}
  402d72:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402d74:	a902      	add	r1, sp, #8
  402d76:	2300      	movs	r3, #0
  402d78:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreStart, &xHigherPriorityTaskWoken);
  402d7c:	4b03      	ldr	r3, [pc, #12]	; (402d8c <butStart_callback+0x1c>)
  402d7e:	6818      	ldr	r0, [r3, #0]
  402d80:	4b03      	ldr	r3, [pc, #12]	; (402d90 <butStart_callback+0x20>)
  402d82:	4798      	blx	r3
}
  402d84:	b003      	add	sp, #12
  402d86:	f85d fb04 	ldr.w	pc, [sp], #4
  402d8a:	bf00      	nop
  402d8c:	20400cd4 	.word	0x20400cd4
  402d90:	00401a2d 	.word	0x00401a2d

00402d94 <usart_serial_putchar>:
{
  402d94:	b570      	push	{r4, r5, r6, lr}
  402d96:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402d98:	4b2a      	ldr	r3, [pc, #168]	; (402e44 <usart_serial_putchar+0xb0>)
  402d9a:	4298      	cmp	r0, r3
  402d9c:	d013      	beq.n	402dc6 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402d9e:	4b2a      	ldr	r3, [pc, #168]	; (402e48 <usart_serial_putchar+0xb4>)
  402da0:	4298      	cmp	r0, r3
  402da2:	d019      	beq.n	402dd8 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402da4:	4b29      	ldr	r3, [pc, #164]	; (402e4c <usart_serial_putchar+0xb8>)
  402da6:	4298      	cmp	r0, r3
  402da8:	d01f      	beq.n	402dea <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402daa:	4b29      	ldr	r3, [pc, #164]	; (402e50 <usart_serial_putchar+0xbc>)
  402dac:	4298      	cmp	r0, r3
  402dae:	d025      	beq.n	402dfc <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402db0:	4b28      	ldr	r3, [pc, #160]	; (402e54 <usart_serial_putchar+0xc0>)
  402db2:	4298      	cmp	r0, r3
  402db4:	d02b      	beq.n	402e0e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402db6:	4b28      	ldr	r3, [pc, #160]	; (402e58 <usart_serial_putchar+0xc4>)
  402db8:	4298      	cmp	r0, r3
  402dba:	d031      	beq.n	402e20 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402dbc:	4b27      	ldr	r3, [pc, #156]	; (402e5c <usart_serial_putchar+0xc8>)
  402dbe:	4298      	cmp	r0, r3
  402dc0:	d037      	beq.n	402e32 <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402dc2:	2000      	movs	r0, #0
}
  402dc4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402dc6:	461e      	mov	r6, r3
  402dc8:	4d25      	ldr	r5, [pc, #148]	; (402e60 <usart_serial_putchar+0xcc>)
  402dca:	4621      	mov	r1, r4
  402dcc:	4630      	mov	r0, r6
  402dce:	47a8      	blx	r5
  402dd0:	2800      	cmp	r0, #0
  402dd2:	d1fa      	bne.n	402dca <usart_serial_putchar+0x36>
		return 1;
  402dd4:	2001      	movs	r0, #1
  402dd6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402dd8:	461e      	mov	r6, r3
  402dda:	4d21      	ldr	r5, [pc, #132]	; (402e60 <usart_serial_putchar+0xcc>)
  402ddc:	4621      	mov	r1, r4
  402dde:	4630      	mov	r0, r6
  402de0:	47a8      	blx	r5
  402de2:	2800      	cmp	r0, #0
  402de4:	d1fa      	bne.n	402ddc <usart_serial_putchar+0x48>
		return 1;
  402de6:	2001      	movs	r0, #1
  402de8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402dea:	461e      	mov	r6, r3
  402dec:	4d1c      	ldr	r5, [pc, #112]	; (402e60 <usart_serial_putchar+0xcc>)
  402dee:	4621      	mov	r1, r4
  402df0:	4630      	mov	r0, r6
  402df2:	47a8      	blx	r5
  402df4:	2800      	cmp	r0, #0
  402df6:	d1fa      	bne.n	402dee <usart_serial_putchar+0x5a>
		return 1;
  402df8:	2001      	movs	r0, #1
  402dfa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402dfc:	461e      	mov	r6, r3
  402dfe:	4d18      	ldr	r5, [pc, #96]	; (402e60 <usart_serial_putchar+0xcc>)
  402e00:	4621      	mov	r1, r4
  402e02:	4630      	mov	r0, r6
  402e04:	47a8      	blx	r5
  402e06:	2800      	cmp	r0, #0
  402e08:	d1fa      	bne.n	402e00 <usart_serial_putchar+0x6c>
		return 1;
  402e0a:	2001      	movs	r0, #1
  402e0c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402e0e:	461e      	mov	r6, r3
  402e10:	4d14      	ldr	r5, [pc, #80]	; (402e64 <usart_serial_putchar+0xd0>)
  402e12:	4621      	mov	r1, r4
  402e14:	4630      	mov	r0, r6
  402e16:	47a8      	blx	r5
  402e18:	2800      	cmp	r0, #0
  402e1a:	d1fa      	bne.n	402e12 <usart_serial_putchar+0x7e>
		return 1;
  402e1c:	2001      	movs	r0, #1
  402e1e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402e20:	461e      	mov	r6, r3
  402e22:	4d10      	ldr	r5, [pc, #64]	; (402e64 <usart_serial_putchar+0xd0>)
  402e24:	4621      	mov	r1, r4
  402e26:	4630      	mov	r0, r6
  402e28:	47a8      	blx	r5
  402e2a:	2800      	cmp	r0, #0
  402e2c:	d1fa      	bne.n	402e24 <usart_serial_putchar+0x90>
		return 1;
  402e2e:	2001      	movs	r0, #1
  402e30:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402e32:	461e      	mov	r6, r3
  402e34:	4d0b      	ldr	r5, [pc, #44]	; (402e64 <usart_serial_putchar+0xd0>)
  402e36:	4621      	mov	r1, r4
  402e38:	4630      	mov	r0, r6
  402e3a:	47a8      	blx	r5
  402e3c:	2800      	cmp	r0, #0
  402e3e:	d1fa      	bne.n	402e36 <usart_serial_putchar+0xa2>
		return 1;
  402e40:	2001      	movs	r0, #1
  402e42:	bd70      	pop	{r4, r5, r6, pc}
  402e44:	400e0800 	.word	0x400e0800
  402e48:	400e0a00 	.word	0x400e0a00
  402e4c:	400e1a00 	.word	0x400e1a00
  402e50:	400e1c00 	.word	0x400e1c00
  402e54:	40024000 	.word	0x40024000
  402e58:	40028000 	.word	0x40028000
  402e5c:	4002c000 	.word	0x4002c000
  402e60:	00400c71 	.word	0x00400c71
  402e64:	00400d81 	.word	0x00400d81

00402e68 <config_ADC_TEMP_RES>:
  NVIC_SetPriority(BUTSTART_PIO_ID, 4); // Prioridade 4

	
}

static void config_ADC_TEMP_RES(void){
  402e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e6a:	b08b      	sub	sp, #44	; 0x2c
/*************************************
   * Ativa e configura AFEC
   *************************************/
  /* Ativa AFEC - 0 */
	afec_enable(AFEC0);
  402e6c:	4d2e      	ldr	r5, [pc, #184]	; (402f28 <config_ADC_TEMP_RES+0xc0>)
  402e6e:	4628      	mov	r0, r5
  402e70:	4e2e      	ldr	r6, [pc, #184]	; (402f2c <config_ADC_TEMP_RES+0xc4>)
  402e72:	47b0      	blx	r6
	afec_enable(AFEC1);
  402e74:	4c2e      	ldr	r4, [pc, #184]	; (402f30 <config_ADC_TEMP_RES+0xc8>)
  402e76:	4620      	mov	r0, r4
  402e78:	47b0      	blx	r6

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  402e7a:	a804      	add	r0, sp, #16
  402e7c:	4b2d      	ldr	r3, [pc, #180]	; (402f34 <config_ADC_TEMP_RES+0xcc>)
  402e7e:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(AFEC0, &afec_cfg);
  402e80:	a904      	add	r1, sp, #16
  402e82:	4628      	mov	r0, r5
  402e84:	4e2c      	ldr	r6, [pc, #176]	; (402f38 <config_ADC_TEMP_RES+0xd0>)
  402e86:	47b0      	blx	r6
		afec_init(AFEC1, &afec_cfg);
  402e88:	a904      	add	r1, sp, #16
  402e8a:	4620      	mov	r0, r4
  402e8c:	47b0      	blx	r6
	reg = afec->AFEC_MR;
  402e8e:	686b      	ldr	r3, [r5, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402e90:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402e94:	606b      	str	r3, [r5, #4]
	reg = afec->AFEC_MR;
  402e96:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402e98:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402e9c:	6063      	str	r3, [r4, #4]
	/* Configura trigger por software */
	afec_set_trigger(AFEC0, AFEC_TRIG_SW);
		afec_set_trigger(AFEC1, AFEC_TRIG_SW);

	/* configura call back */
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0, AFEC_Res_callback, 5);
  402e9e:	2305      	movs	r3, #5
  402ea0:	4a26      	ldr	r2, [pc, #152]	; (402f3c <config_ADC_TEMP_RES+0xd4>)
  402ea2:	2100      	movs	r1, #0
  402ea4:	4628      	mov	r0, r5
  402ea6:	4e26      	ldr	r6, [pc, #152]	; (402f40 <config_ADC_TEMP_RES+0xd8>)
  402ea8:	47b0      	blx	r6
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_8, AFEC_Res_callback1, 5);
  402eaa:	2305      	movs	r3, #5
  402eac:	4a25      	ldr	r2, [pc, #148]	; (402f44 <config_ADC_TEMP_RES+0xdc>)
  402eae:	2108      	movs	r1, #8
  402eb0:	4628      	mov	r0, r5
  402eb2:	47b0      	blx	r6
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_1, AFEC_Res_callback2, 5);
  402eb4:	2305      	movs	r3, #5
  402eb6:	4a24      	ldr	r2, [pc, #144]	; (402f48 <config_ADC_TEMP_RES+0xe0>)
  402eb8:	2101      	movs	r1, #1
  402eba:	4620      	mov	r0, r4
  402ebc:	47b0      	blx	r6
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_6, AFEC_Res_callback3, 5);
  402ebe:	2305      	movs	r3, #5
  402ec0:	4a22      	ldr	r2, [pc, #136]	; (402f4c <config_ADC_TEMP_RES+0xe4>)
  402ec2:	2106      	movs	r1, #6
  402ec4:	4620      	mov	r0, r4
  402ec6:	47b0      	blx	r6
	

	/*** Configuracao espec?fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  402ec8:	a803      	add	r0, sp, #12
  402eca:	4b21      	ldr	r3, [pc, #132]	; (402f50 <config_ADC_TEMP_RES+0xe8>)
  402ecc:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402ece:	2700      	movs	r7, #0
  402ed0:	f88d 700d 	strb.w	r7, [sp, #13]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_RES_PIN, &afec_ch_cfg);
  402ed4:	aa03      	add	r2, sp, #12
  402ed6:	4639      	mov	r1, r7
  402ed8:	4628      	mov	r0, r5
  402eda:	4e1e      	ldr	r6, [pc, #120]	; (402f54 <config_ADC_TEMP_RES+0xec>)
  402edc:	47b0      	blx	r6
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_RES_PIN1, &afec_ch_cfg);
  402ede:	aa03      	add	r2, sp, #12
  402ee0:	2108      	movs	r1, #8
  402ee2:	4628      	mov	r0, r5
  402ee4:	47b0      	blx	r6
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_CX_PIN, &afec_ch_cfg);
  402ee6:	aa03      	add	r2, sp, #12
  402ee8:	2101      	movs	r1, #1
  402eea:	4620      	mov	r0, r4
  402eec:	47b0      	blx	r6
		afec_ch_set_config(AFEC1, AFEC_CHANNEL_CY_PIN, &afec_ch_cfg);
  402eee:	aa03      	add	r2, sp, #12
  402ef0:	2106      	movs	r1, #6
  402ef2:	4620      	mov	r0, r4
  402ef4:	47b0      	blx	r6
	afec->AFEC_CSELR = afec_ch;
  402ef6:	2308      	movs	r3, #8
  402ef8:	666b      	str	r3, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402efa:	f44f 7300 	mov.w	r3, #512	; 0x200
  402efe:	66eb      	str	r3, [r5, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  402f00:	666f      	str	r7, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402f02:	66eb      	str	r3, [r5, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  402f04:	2201      	movs	r2, #1
  402f06:	6662      	str	r2, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402f08:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  402f0a:	2206      	movs	r2, #6
  402f0c:	6662      	str	r2, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402f0e:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_CY_PIN, 0x200);

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402f10:	a801      	add	r0, sp, #4
  402f12:	4b11      	ldr	r3, [pc, #68]	; (402f58 <config_ADC_TEMP_RES+0xf0>)
  402f14:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  402f16:	a901      	add	r1, sp, #4
  402f18:	4628      	mov	r0, r5
  402f1a:	4d10      	ldr	r5, [pc, #64]	; (402f5c <config_ADC_TEMP_RES+0xf4>)
  402f1c:	47a8      	blx	r5
		afec_temp_sensor_set_config(AFEC1, &afec_temp_sensor_cfg);
  402f1e:	a901      	add	r1, sp, #4
  402f20:	4620      	mov	r0, r4
  402f22:	47a8      	blx	r5

}
  402f24:	b00b      	add	sp, #44	; 0x2c
  402f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402f28:	4003c000 	.word	0x4003c000
  402f2c:	004007b5 	.word	0x004007b5
  402f30:	40064000 	.word	0x40064000
  402f34:	004005e5 	.word	0x004005e5
  402f38:	00400635 	.word	0x00400635
  402f3c:	00402ffd 	.word	0x00402ffd
  402f40:	00400735 	.word	0x00400735
  402f44:	00402fc9 	.word	0x00402fc9
  402f48:	00402f95 	.word	0x00402f95
  402f4c:	00402f61 	.word	0x00402f61
  402f50:	00400615 	.word	0x00400615
  402f54:	004005a1 	.word	0x004005a1
  402f58:	0040061f 	.word	0x0040061f
  402f5c:	004005d1 	.word	0x004005d1

00402f60 <AFEC_Res_callback3>:
{
  402f60:	b510      	push	{r4, lr}
	afec->AFEC_CSELR = afec_ch;
  402f62:	4b08      	ldr	r3, [pc, #32]	; (402f84 <AFEC_Res_callback3+0x24>)
  402f64:	2206      	movs	r2, #6
  402f66:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402f68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	g_res_value3 = afec_channel_get_value(AFEC1, AFEC_CHANNEL_CY_PIN);
  402f6a:	4907      	ldr	r1, [pc, #28]	; (402f88 <AFEC_Res_callback3+0x28>)
  402f6c:	600a      	str	r2, [r1, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402f6e:	2202      	movs	r2, #2
  402f70:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402f72:	601a      	str	r2, [r3, #0]
	xQueueSendFromISR( xQueueAnalogCY, &g_res_value3, 0);
  402f74:	2300      	movs	r3, #0
  402f76:	461a      	mov	r2, r3
  402f78:	4804      	ldr	r0, [pc, #16]	; (402f8c <AFEC_Res_callback3+0x2c>)
  402f7a:	6800      	ldr	r0, [r0, #0]
  402f7c:	4c04      	ldr	r4, [pc, #16]	; (402f90 <AFEC_Res_callback3+0x30>)
  402f7e:	47a0      	blx	r4
  402f80:	bd10      	pop	{r4, pc}
  402f82:	bf00      	nop
  402f84:	40064000 	.word	0x40064000
  402f88:	20400b9c 	.word	0x20400b9c
  402f8c:	20400ccc 	.word	0x20400ccc
  402f90:	0040192d 	.word	0x0040192d

00402f94 <AFEC_Res_callback2>:
{
  402f94:	b510      	push	{r4, lr}
	afec->AFEC_CSELR = afec_ch;
  402f96:	4b08      	ldr	r3, [pc, #32]	; (402fb8 <AFEC_Res_callback2+0x24>)
  402f98:	2201      	movs	r2, #1
  402f9a:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402f9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	g_res_value2 = afec_channel_get_value(AFEC1, AFEC_CHANNEL_CX_PIN);
  402f9e:	4907      	ldr	r1, [pc, #28]	; (402fbc <AFEC_Res_callback2+0x28>)
  402fa0:	600a      	str	r2, [r1, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402fa2:	2240      	movs	r2, #64	; 0x40
  402fa4:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402fa6:	2202      	movs	r2, #2
  402fa8:	601a      	str	r2, [r3, #0]
	xQueueSendFromISR( xQueueAnalogCX, &g_res_value2, 0);
  402faa:	2300      	movs	r3, #0
  402fac:	461a      	mov	r2, r3
  402fae:	4804      	ldr	r0, [pc, #16]	; (402fc0 <AFEC_Res_callback2+0x2c>)
  402fb0:	6800      	ldr	r0, [r0, #0]
  402fb2:	4c04      	ldr	r4, [pc, #16]	; (402fc4 <AFEC_Res_callback2+0x30>)
  402fb4:	47a0      	blx	r4
  402fb6:	bd10      	pop	{r4, pc}
  402fb8:	40064000 	.word	0x40064000
  402fbc:	20400b98 	.word	0x20400b98
  402fc0:	20400cc4 	.word	0x20400cc4
  402fc4:	0040192d 	.word	0x0040192d

00402fc8 <AFEC_Res_callback1>:
{
  402fc8:	b510      	push	{r4, lr}
	afec->AFEC_CSELR = afec_ch;
  402fca:	4b08      	ldr	r3, [pc, #32]	; (402fec <AFEC_Res_callback1+0x24>)
  402fcc:	2208      	movs	r2, #8
  402fce:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402fd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	g_res_value1 = afec_channel_get_value(AFEC0, AFEC_CHANNEL_RES_PIN1);
  402fd2:	4907      	ldr	r1, [pc, #28]	; (402ff0 <AFEC_Res_callback1+0x28>)
  402fd4:	600a      	str	r2, [r1, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402fd6:	2201      	movs	r2, #1
  402fd8:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402fda:	2202      	movs	r2, #2
  402fdc:	601a      	str	r2, [r3, #0]
	xQueueSendFromISR( xQueueAnalogY, &g_res_value1, 0);
  402fde:	2300      	movs	r3, #0
  402fe0:	461a      	mov	r2, r3
  402fe2:	4804      	ldr	r0, [pc, #16]	; (402ff4 <AFEC_Res_callback1+0x2c>)
  402fe4:	6800      	ldr	r0, [r0, #0]
  402fe6:	4c04      	ldr	r4, [pc, #16]	; (402ff8 <AFEC_Res_callback1+0x30>)
  402fe8:	47a0      	blx	r4
  402fea:	bd10      	pop	{r4, pc}
  402fec:	4003c000 	.word	0x4003c000
  402ff0:	20400b94 	.word	0x20400b94
  402ff4:	20400cbc 	.word	0x20400cbc
  402ff8:	0040192d 	.word	0x0040192d

00402ffc <AFEC_Res_callback>:
{
  402ffc:	b510      	push	{r4, lr}
	afec->AFEC_CSELR = afec_ch;
  402ffe:	4b08      	ldr	r3, [pc, #32]	; (403020 <AFEC_Res_callback+0x24>)
  403000:	2200      	movs	r2, #0
  403002:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403004:	6e98      	ldr	r0, [r3, #104]	; 0x68
	g_res_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_RES_PIN);
  403006:	4907      	ldr	r1, [pc, #28]	; (403024 <AFEC_Res_callback+0x28>)
  403008:	6008      	str	r0, [r1, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40300a:	f44f 7080 	mov.w	r0, #256	; 0x100
  40300e:	6158      	str	r0, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  403010:	2002      	movs	r0, #2
  403012:	6018      	str	r0, [r3, #0]
	xQueueSendFromISR( xQueueAnalogX, &g_res_value, 0);
  403014:	4613      	mov	r3, r2
  403016:	4804      	ldr	r0, [pc, #16]	; (403028 <AFEC_Res_callback+0x2c>)
  403018:	6800      	ldr	r0, [r0, #0]
  40301a:	4c04      	ldr	r4, [pc, #16]	; (40302c <AFEC_Res_callback+0x30>)
  40301c:	47a0      	blx	r4
  40301e:	bd10      	pop	{r4, pc}
  403020:	4003c000 	.word	0x4003c000
  403024:	20400b90 	.word	0x20400b90
  403028:	20400cd0 	.word	0x20400cd0
  40302c:	0040192d 	.word	0x0040192d

00403030 <task_buttons>:
		}
		//vTaskDelay( 10 );
	}
}
void task_buttons(void *pvParameters)
{
  403030:	b580      	push	{r7, lr}
  403032:	b082      	sub	sp, #8
	xSemaphoreA = xSemaphoreCreateBinary();
  403034:	2203      	movs	r2, #3
  403036:	2100      	movs	r1, #0
  403038:	2001      	movs	r0, #1
  40303a:	4c3c      	ldr	r4, [pc, #240]	; (40312c <task_buttons+0xfc>)
  40303c:	47a0      	blx	r4
  40303e:	4d3c      	ldr	r5, [pc, #240]	; (403130 <task_buttons+0x100>)
  403040:	6028      	str	r0, [r5, #0]
	xSemaphoreB = xSemaphoreCreateBinary();
  403042:	2203      	movs	r2, #3
  403044:	2100      	movs	r1, #0
  403046:	2001      	movs	r0, #1
  403048:	47a0      	blx	r4
  40304a:	4b3a      	ldr	r3, [pc, #232]	; (403134 <task_buttons+0x104>)
  40304c:	6018      	str	r0, [r3, #0]
	xSemaphoreZ = xSemaphoreCreateBinary();
  40304e:	2203      	movs	r2, #3
  403050:	2100      	movs	r1, #0
  403052:	2001      	movs	r0, #1
  403054:	47a0      	blx	r4
  403056:	4b38      	ldr	r3, [pc, #224]	; (403138 <task_buttons+0x108>)
  403058:	6018      	str	r0, [r3, #0]
	xSemaphoreStart = xSemaphoreCreateBinary();
  40305a:	2203      	movs	r2, #3
  40305c:	2100      	movs	r1, #0
  40305e:	2001      	movs	r0, #1
  403060:	47a0      	blx	r4
  403062:	4b36      	ldr	r3, [pc, #216]	; (40313c <task_buttons+0x10c>)
  403064:	6018      	str	r0, [r3, #0]
	
	
	char buttonA = '1';
  403066:	2331      	movs	r3, #49	; 0x31
  403068:	f88d 3007 	strb.w	r3, [sp, #7]
	char buttonB = '1'; 
  40306c:	f88d 3006 	strb.w	r3, [sp, #6]
	char buttonStart = '1';
  403070:	f88d 3005 	strb.w	r3, [sp, #5]
	char buttonZ = '1';
  403074:	f88d 3004 	strb.w	r3, [sp, #4]

	
	

	if (xSemaphoreA == NULL) {
  403078:	682b      	ldr	r3, [r5, #0]
  40307a:	b913      	cbnz	r3, 403082 <task_buttons+0x52>
		printf("falha em criar o semaforo A\n");
  40307c:	4830      	ldr	r0, [pc, #192]	; (403140 <task_buttons+0x110>)
  40307e:	4b31      	ldr	r3, [pc, #196]	; (403144 <task_buttons+0x114>)
  403080:	4798      	blx	r3
	}
	if (xSemaphoreB == NULL) {
  403082:	4b2c      	ldr	r3, [pc, #176]	; (403134 <task_buttons+0x104>)
  403084:	681b      	ldr	r3, [r3, #0]
  403086:	b913      	cbnz	r3, 40308e <task_buttons+0x5e>
		printf("falha em criar o semaforo B\n");
  403088:	482f      	ldr	r0, [pc, #188]	; (403148 <task_buttons+0x118>)
  40308a:	4b2e      	ldr	r3, [pc, #184]	; (403144 <task_buttons+0x114>)
  40308c:	4798      	blx	r3
	}
	if (xSemaphoreZ == NULL) {
  40308e:	4b2a      	ldr	r3, [pc, #168]	; (403138 <task_buttons+0x108>)
  403090:	681b      	ldr	r3, [r3, #0]
  403092:	b913      	cbnz	r3, 40309a <task_buttons+0x6a>
		printf("falha em criar o semaforo B\n");
  403094:	482c      	ldr	r0, [pc, #176]	; (403148 <task_buttons+0x118>)
  403096:	4b2b      	ldr	r3, [pc, #172]	; (403144 <task_buttons+0x114>)
  403098:	4798      	blx	r3
	}
	if (xSemaphoreStart == NULL) {
  40309a:	4b28      	ldr	r3, [pc, #160]	; (40313c <task_buttons+0x10c>)
  40309c:	681b      	ldr	r3, [r3, #0]
  40309e:	b913      	cbnz	r3, 4030a6 <task_buttons+0x76>
		printf("falha em criar o semaforo B\n");
  4030a0:	4829      	ldr	r0, [pc, #164]	; (403148 <task_buttons+0x118>)
  4030a2:	4b28      	ldr	r3, [pc, #160]	; (403144 <task_buttons+0x114>)
  4030a4:	4798      	blx	r3
	}

	while (true) {
		if( xSemaphoreTake(xSemaphoreA, ( TickType_t ) 0) == pdTRUE){
  4030a6:	4d29      	ldr	r5, [pc, #164]	; (40314c <task_buttons+0x11c>)

			xQueueSend(xQueueBUTA, &buttonA,1);
  4030a8:	4f29      	ldr	r7, [pc, #164]	; (403150 <task_buttons+0x120>)
  4030aa:	e03c      	b.n	403126 <task_buttons+0xf6>
  4030ac:	4623      	mov	r3, r4
  4030ae:	2201      	movs	r2, #1
  4030b0:	f10d 0107 	add.w	r1, sp, #7
  4030b4:	4827      	ldr	r0, [pc, #156]	; (403154 <task_buttons+0x124>)
  4030b6:	6800      	ldr	r0, [r0, #0]
  4030b8:	47b8      	blx	r7
  4030ba:	e016      	b.n	4030ea <task_buttons+0xba>
		}
		if( xSemaphoreTake(xSemaphoreB, ( TickType_t ) 0) == pdTRUE ){
			xQueueSend(xQueueBUTB, &buttonB,1);
  4030bc:	4623      	mov	r3, r4
  4030be:	2201      	movs	r2, #1
  4030c0:	f10d 0106 	add.w	r1, sp, #6
  4030c4:	4824      	ldr	r0, [pc, #144]	; (403158 <task_buttons+0x128>)
  4030c6:	6800      	ldr	r0, [r0, #0]
  4030c8:	47b8      	blx	r7
  4030ca:	e016      	b.n	4030fa <task_buttons+0xca>
		}
		if( xSemaphoreTake(xSemaphoreZ, ( TickType_t ) 0) == pdTRUE ){
			xQueueSend(xQueueBUTZ, &buttonZ,1);
		}
		if( xSemaphoreTake(xSemaphoreStart, ( TickType_t ) 0) == pdTRUE ){
  4030cc:	4623      	mov	r3, r4
  4030ce:	4622      	mov	r2, r4
  4030d0:	4621      	mov	r1, r4
  4030d2:	481a      	ldr	r0, [pc, #104]	; (40313c <task_buttons+0x10c>)
  4030d4:	6800      	ldr	r0, [r0, #0]
  4030d6:	47a8      	blx	r5
  4030d8:	2801      	cmp	r0, #1
  4030da:	d01d      	beq.n	403118 <task_buttons+0xe8>
		if( xSemaphoreTake(xSemaphoreA, ( TickType_t ) 0) == pdTRUE){
  4030dc:	4623      	mov	r3, r4
  4030de:	4622      	mov	r2, r4
  4030e0:	4621      	mov	r1, r4
  4030e2:	6830      	ldr	r0, [r6, #0]
  4030e4:	47a8      	blx	r5
  4030e6:	2801      	cmp	r0, #1
  4030e8:	d0e0      	beq.n	4030ac <task_buttons+0x7c>
		if( xSemaphoreTake(xSemaphoreB, ( TickType_t ) 0) == pdTRUE ){
  4030ea:	4623      	mov	r3, r4
  4030ec:	4622      	mov	r2, r4
  4030ee:	4621      	mov	r1, r4
  4030f0:	4810      	ldr	r0, [pc, #64]	; (403134 <task_buttons+0x104>)
  4030f2:	6800      	ldr	r0, [r0, #0]
  4030f4:	47a8      	blx	r5
  4030f6:	2801      	cmp	r0, #1
  4030f8:	d0e0      	beq.n	4030bc <task_buttons+0x8c>
		if( xSemaphoreTake(xSemaphoreZ, ( TickType_t ) 0) == pdTRUE ){
  4030fa:	4623      	mov	r3, r4
  4030fc:	4622      	mov	r2, r4
  4030fe:	4621      	mov	r1, r4
  403100:	480d      	ldr	r0, [pc, #52]	; (403138 <task_buttons+0x108>)
  403102:	6800      	ldr	r0, [r0, #0]
  403104:	47a8      	blx	r5
  403106:	2801      	cmp	r0, #1
  403108:	d1e0      	bne.n	4030cc <task_buttons+0x9c>
			xQueueSend(xQueueBUTZ, &buttonZ,1);
  40310a:	4623      	mov	r3, r4
  40310c:	2201      	movs	r2, #1
  40310e:	a901      	add	r1, sp, #4
  403110:	4812      	ldr	r0, [pc, #72]	; (40315c <task_buttons+0x12c>)
  403112:	6800      	ldr	r0, [r0, #0]
  403114:	47b8      	blx	r7
  403116:	e7d9      	b.n	4030cc <task_buttons+0x9c>
			xQueueSend(xQueueBUTSTART, &buttonStart,1);
  403118:	2300      	movs	r3, #0
  40311a:	2201      	movs	r2, #1
  40311c:	f10d 0105 	add.w	r1, sp, #5
  403120:	480f      	ldr	r0, [pc, #60]	; (403160 <task_buttons+0x130>)
  403122:	6800      	ldr	r0, [r0, #0]
  403124:	47b8      	blx	r7
		if( xSemaphoreTake(xSemaphoreA, ( TickType_t ) 0) == pdTRUE){
  403126:	4e02      	ldr	r6, [pc, #8]	; (403130 <task_buttons+0x100>)
  403128:	2400      	movs	r4, #0
  40312a:	e7d7      	b.n	4030dc <task_buttons+0xac>
  40312c:	004016cd 	.word	0x004016cd
  403130:	20400cac 	.word	0x20400cac
  403134:	20400ce4 	.word	0x20400ce4
  403138:	20400cdc 	.word	0x20400cdc
  40313c:	20400cd4 	.word	0x20400cd4
  403140:	00409e84 	.word	0x00409e84
  403144:	00403a09 	.word	0x00403a09
  403148:	00409ea4 	.word	0x00409ea4
  40314c:	00401b0d 	.word	0x00401b0d
  403150:	00401749 	.word	0x00401749
  403154:	20400cb8 	.word	0x20400cb8
  403158:	20400ca8 	.word	0x20400ca8
  40315c:	20400cd8 	.word	0x20400cd8
  403160:	20400cc8 	.word	0x20400cc8

00403164 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403164:	b5f0      	push	{r4, r5, r6, r7, lr}
  403166:	b083      	sub	sp, #12
  403168:	4605      	mov	r5, r0
  40316a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40316c:	2300      	movs	r3, #0
  40316e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403170:	4b2a      	ldr	r3, [pc, #168]	; (40321c <usart_serial_getchar+0xb8>)
  403172:	4298      	cmp	r0, r3
  403174:	d013      	beq.n	40319e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403176:	4b2a      	ldr	r3, [pc, #168]	; (403220 <usart_serial_getchar+0xbc>)
  403178:	4298      	cmp	r0, r3
  40317a:	d018      	beq.n	4031ae <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40317c:	4b29      	ldr	r3, [pc, #164]	; (403224 <usart_serial_getchar+0xc0>)
  40317e:	4298      	cmp	r0, r3
  403180:	d01d      	beq.n	4031be <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403182:	4b29      	ldr	r3, [pc, #164]	; (403228 <usart_serial_getchar+0xc4>)
  403184:	429d      	cmp	r5, r3
  403186:	d022      	beq.n	4031ce <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403188:	4b28      	ldr	r3, [pc, #160]	; (40322c <usart_serial_getchar+0xc8>)
  40318a:	429d      	cmp	r5, r3
  40318c:	d027      	beq.n	4031de <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40318e:	4b28      	ldr	r3, [pc, #160]	; (403230 <usart_serial_getchar+0xcc>)
  403190:	429d      	cmp	r5, r3
  403192:	d02e      	beq.n	4031f2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403194:	4b27      	ldr	r3, [pc, #156]	; (403234 <usart_serial_getchar+0xd0>)
  403196:	429d      	cmp	r5, r3
  403198:	d035      	beq.n	403206 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40319a:	b003      	add	sp, #12
  40319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40319e:	461f      	mov	r7, r3
  4031a0:	4e25      	ldr	r6, [pc, #148]	; (403238 <usart_serial_getchar+0xd4>)
  4031a2:	4621      	mov	r1, r4
  4031a4:	4638      	mov	r0, r7
  4031a6:	47b0      	blx	r6
  4031a8:	2800      	cmp	r0, #0
  4031aa:	d1fa      	bne.n	4031a2 <usart_serial_getchar+0x3e>
  4031ac:	e7e9      	b.n	403182 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4031ae:	461f      	mov	r7, r3
  4031b0:	4e21      	ldr	r6, [pc, #132]	; (403238 <usart_serial_getchar+0xd4>)
  4031b2:	4621      	mov	r1, r4
  4031b4:	4638      	mov	r0, r7
  4031b6:	47b0      	blx	r6
  4031b8:	2800      	cmp	r0, #0
  4031ba:	d1fa      	bne.n	4031b2 <usart_serial_getchar+0x4e>
  4031bc:	e7e4      	b.n	403188 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4031be:	461f      	mov	r7, r3
  4031c0:	4e1d      	ldr	r6, [pc, #116]	; (403238 <usart_serial_getchar+0xd4>)
  4031c2:	4621      	mov	r1, r4
  4031c4:	4638      	mov	r0, r7
  4031c6:	47b0      	blx	r6
  4031c8:	2800      	cmp	r0, #0
  4031ca:	d1fa      	bne.n	4031c2 <usart_serial_getchar+0x5e>
  4031cc:	e7df      	b.n	40318e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4031ce:	461f      	mov	r7, r3
  4031d0:	4e19      	ldr	r6, [pc, #100]	; (403238 <usart_serial_getchar+0xd4>)
  4031d2:	4621      	mov	r1, r4
  4031d4:	4638      	mov	r0, r7
  4031d6:	47b0      	blx	r6
  4031d8:	2800      	cmp	r0, #0
  4031da:	d1fa      	bne.n	4031d2 <usart_serial_getchar+0x6e>
  4031dc:	e7da      	b.n	403194 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4031de:	461e      	mov	r6, r3
  4031e0:	4d16      	ldr	r5, [pc, #88]	; (40323c <usart_serial_getchar+0xd8>)
  4031e2:	a901      	add	r1, sp, #4
  4031e4:	4630      	mov	r0, r6
  4031e6:	47a8      	blx	r5
  4031e8:	2800      	cmp	r0, #0
  4031ea:	d1fa      	bne.n	4031e2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4031ec:	9b01      	ldr	r3, [sp, #4]
  4031ee:	7023      	strb	r3, [r4, #0]
  4031f0:	e7d3      	b.n	40319a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4031f2:	461e      	mov	r6, r3
  4031f4:	4d11      	ldr	r5, [pc, #68]	; (40323c <usart_serial_getchar+0xd8>)
  4031f6:	a901      	add	r1, sp, #4
  4031f8:	4630      	mov	r0, r6
  4031fa:	47a8      	blx	r5
  4031fc:	2800      	cmp	r0, #0
  4031fe:	d1fa      	bne.n	4031f6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403200:	9b01      	ldr	r3, [sp, #4]
  403202:	7023      	strb	r3, [r4, #0]
  403204:	e7c9      	b.n	40319a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403206:	461e      	mov	r6, r3
  403208:	4d0c      	ldr	r5, [pc, #48]	; (40323c <usart_serial_getchar+0xd8>)
  40320a:	a901      	add	r1, sp, #4
  40320c:	4630      	mov	r0, r6
  40320e:	47a8      	blx	r5
  403210:	2800      	cmp	r0, #0
  403212:	d1fa      	bne.n	40320a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403214:	9b01      	ldr	r3, [sp, #4]
  403216:	7023      	strb	r3, [r4, #0]
}
  403218:	e7bf      	b.n	40319a <usart_serial_getchar+0x36>
  40321a:	bf00      	nop
  40321c:	400e0800 	.word	0x400e0800
  403220:	400e0a00 	.word	0x400e0a00
  403224:	400e1a00 	.word	0x400e1a00
  403228:	400e1c00 	.word	0x400e1c00
  40322c:	40024000 	.word	0x40024000
  403230:	40028000 	.word	0x40028000
  403234:	4002c000 	.word	0x4002c000
  403238:	00400c83 	.word	0x00400c83
  40323c:	00400d97 	.word	0x00400d97

00403240 <vApplicationStackOverflowHook>:
{
  403240:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403242:	460a      	mov	r2, r1
  403244:	4601      	mov	r1, r0
  403246:	4802      	ldr	r0, [pc, #8]	; (403250 <vApplicationStackOverflowHook+0x10>)
  403248:	4b02      	ldr	r3, [pc, #8]	; (403254 <vApplicationStackOverflowHook+0x14>)
  40324a:	4798      	blx	r3
  40324c:	e7fe      	b.n	40324c <vApplicationStackOverflowHook+0xc>
  40324e:	bf00      	nop
  403250:	00409ec4 	.word	0x00409ec4
  403254:	00403a09 	.word	0x00403a09

00403258 <vApplicationTickHook>:
{
  403258:	4770      	bx	lr

0040325a <vApplicationMallocFailedHook>:
  40325a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40325e:	b672      	cpsid	i
  403260:	f383 8811 	msr	BASEPRI, r3
  403264:	f3bf 8f6f 	isb	sy
  403268:	f3bf 8f4f 	dsb	sy
  40326c:	b662      	cpsie	i
  40326e:	e7fe      	b.n	40326e <vApplicationMallocFailedHook+0x14>

00403270 <set_analog_result_cx>:
	if (input > 3600) {
  403270:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
  403274:	d806      	bhi.n	403284 <set_analog_result_cx+0x14>
		return '0';
  403276:	f240 434b 	movw	r3, #1099	; 0x44b
  40327a:	4298      	cmp	r0, r3
  40327c:	bf94      	ite	ls
  40327e:	2036      	movls	r0, #54	; 0x36
  403280:	2030      	movhi	r0, #48	; 0x30
  403282:	4770      	bx	lr
		return '5';//d
  403284:	2035      	movs	r0, #53	; 0x35
}
  403286:	4770      	bx	lr

00403288 <set_analog_result_cy>:
	if (input > 3600) {
  403288:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
  40328c:	d806      	bhi.n	40329c <set_analog_result_cy+0x14>
		return '0';
  40328e:	f240 434b 	movw	r3, #1099	; 0x44b
  403292:	4298      	cmp	r0, r3
  403294:	bf94      	ite	ls
  403296:	2038      	movls	r0, #56	; 0x38
  403298:	2030      	movhi	r0, #48	; 0x30
  40329a:	4770      	bx	lr
		return '7';//b
  40329c:	2037      	movs	r0, #55	; 0x37
}
  40329e:	4770      	bx	lr

004032a0 <send_command>:
void send_command(char buttonStart , char buttonA, char buttonB, char buttonZ,char analog_cx,char analog_cy, char analog_x[], char analog_y[], char eof ){
  4032a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032a4:	4683      	mov	fp, r0
  4032a6:	468a      	mov	sl, r1
  4032a8:	4691      	mov	r9, r2
  4032aa:	4698      	mov	r8, r3
  4032ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	while(!usart_is_tx_ready(USART_COM));
  4032ae:	4e4d      	ldr	r6, [pc, #308]	; (4033e4 <send_command+0x144>)
  4032b0:	4c4d      	ldr	r4, [pc, #308]	; (4033e8 <send_command+0x148>)
  4032b2:	4630      	mov	r0, r6
  4032b4:	47a0      	blx	r4
  4032b6:	2800      	cmp	r0, #0
  4032b8:	d0fb      	beq.n	4032b2 <send_command+0x12>
	usart_write(USART_COM, buttonStart);
  4032ba:	4659      	mov	r1, fp
  4032bc:	4849      	ldr	r0, [pc, #292]	; (4033e4 <send_command+0x144>)
  4032be:	4b4b      	ldr	r3, [pc, #300]	; (4033ec <send_command+0x14c>)
  4032c0:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  4032c2:	4e48      	ldr	r6, [pc, #288]	; (4033e4 <send_command+0x144>)
  4032c4:	4c48      	ldr	r4, [pc, #288]	; (4033e8 <send_command+0x148>)
  4032c6:	4630      	mov	r0, r6
  4032c8:	47a0      	blx	r4
  4032ca:	2800      	cmp	r0, #0
  4032cc:	d0fb      	beq.n	4032c6 <send_command+0x26>
	usart_write(USART_COM, buttonA);
  4032ce:	4651      	mov	r1, sl
  4032d0:	4844      	ldr	r0, [pc, #272]	; (4033e4 <send_command+0x144>)
  4032d2:	4b46      	ldr	r3, [pc, #280]	; (4033ec <send_command+0x14c>)
  4032d4:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  4032d6:	4e43      	ldr	r6, [pc, #268]	; (4033e4 <send_command+0x144>)
  4032d8:	4c43      	ldr	r4, [pc, #268]	; (4033e8 <send_command+0x148>)
  4032da:	4630      	mov	r0, r6
  4032dc:	47a0      	blx	r4
  4032de:	2800      	cmp	r0, #0
  4032e0:	d0fb      	beq.n	4032da <send_command+0x3a>
	usart_write(USART_COM, buttonB);
  4032e2:	4649      	mov	r1, r9
  4032e4:	483f      	ldr	r0, [pc, #252]	; (4033e4 <send_command+0x144>)
  4032e6:	4b41      	ldr	r3, [pc, #260]	; (4033ec <send_command+0x14c>)
  4032e8:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  4032ea:	4e3e      	ldr	r6, [pc, #248]	; (4033e4 <send_command+0x144>)
  4032ec:	4c3e      	ldr	r4, [pc, #248]	; (4033e8 <send_command+0x148>)
  4032ee:	4630      	mov	r0, r6
  4032f0:	47a0      	blx	r4
  4032f2:	2800      	cmp	r0, #0
  4032f4:	d0fb      	beq.n	4032ee <send_command+0x4e>
	usart_write(USART_COM, buttonZ);
  4032f6:	4641      	mov	r1, r8
  4032f8:	483a      	ldr	r0, [pc, #232]	; (4033e4 <send_command+0x144>)
  4032fa:	4b3c      	ldr	r3, [pc, #240]	; (4033ec <send_command+0x14c>)
  4032fc:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  4032fe:	4e39      	ldr	r6, [pc, #228]	; (4033e4 <send_command+0x144>)
  403300:	4c39      	ldr	r4, [pc, #228]	; (4033e8 <send_command+0x148>)
  403302:	4630      	mov	r0, r6
  403304:	47a0      	blx	r4
  403306:	2800      	cmp	r0, #0
  403308:	d0fb      	beq.n	403302 <send_command+0x62>
	usart_write(USART_COM, analog_cx);
  40330a:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
  40330e:	4835      	ldr	r0, [pc, #212]	; (4033e4 <send_command+0x144>)
  403310:	4b36      	ldr	r3, [pc, #216]	; (4033ec <send_command+0x14c>)
  403312:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  403314:	4e33      	ldr	r6, [pc, #204]	; (4033e4 <send_command+0x144>)
  403316:	4c34      	ldr	r4, [pc, #208]	; (4033e8 <send_command+0x148>)
  403318:	4630      	mov	r0, r6
  40331a:	47a0      	blx	r4
  40331c:	2800      	cmp	r0, #0
  40331e:	d0fb      	beq.n	403318 <send_command+0x78>
	usart_write(USART_COM, analog_cy);
  403320:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
  403324:	482f      	ldr	r0, [pc, #188]	; (4033e4 <send_command+0x144>)
  403326:	4b31      	ldr	r3, [pc, #196]	; (4033ec <send_command+0x14c>)
  403328:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  40332a:	4e2e      	ldr	r6, [pc, #184]	; (4033e4 <send_command+0x144>)
  40332c:	4c2e      	ldr	r4, [pc, #184]	; (4033e8 <send_command+0x148>)
  40332e:	4630      	mov	r0, r6
  403330:	47a0      	blx	r4
  403332:	2800      	cmp	r0, #0
  403334:	d0fb      	beq.n	40332e <send_command+0x8e>
	usart_write(USART_COM, analog_x[0]);
  403336:	462e      	mov	r6, r5
  403338:	f816 1b01 	ldrb.w	r1, [r6], #1
  40333c:	4829      	ldr	r0, [pc, #164]	; (4033e4 <send_command+0x144>)
  40333e:	4b2b      	ldr	r3, [pc, #172]	; (4033ec <send_command+0x14c>)
  403340:	4798      	blx	r3
	while(analog_x[x]!= ';'){
  403342:	786b      	ldrb	r3, [r5, #1]
  403344:	2b3b      	cmp	r3, #59	; 0x3b
  403346:	d00d      	beq.n	403364 <send_command+0xc4>
		while(!usart_is_tx_ready(USART_COM));
  403348:	4c26      	ldr	r4, [pc, #152]	; (4033e4 <send_command+0x144>)
  40334a:	4d27      	ldr	r5, [pc, #156]	; (4033e8 <send_command+0x148>)
		usart_write(USART_COM, analog_x[x]);
  40334c:	4f27      	ldr	r7, [pc, #156]	; (4033ec <send_command+0x14c>)
		while(!usart_is_tx_ready(USART_COM));
  40334e:	4620      	mov	r0, r4
  403350:	47a8      	blx	r5
  403352:	2800      	cmp	r0, #0
  403354:	d0fb      	beq.n	40334e <send_command+0xae>
		usart_write(USART_COM, analog_x[x]);
  403356:	7831      	ldrb	r1, [r6, #0]
  403358:	4620      	mov	r0, r4
  40335a:	47b8      	blx	r7
	while(analog_x[x]!= ';'){
  40335c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  403360:	2b3b      	cmp	r3, #59	; 0x3b
  403362:	d1f4      	bne.n	40334e <send_command+0xae>
	while(!usart_is_tx_ready(USART_COM));
  403364:	4d1f      	ldr	r5, [pc, #124]	; (4033e4 <send_command+0x144>)
  403366:	4c20      	ldr	r4, [pc, #128]	; (4033e8 <send_command+0x148>)
  403368:	4628      	mov	r0, r5
  40336a:	47a0      	blx	r4
  40336c:	2800      	cmp	r0, #0
  40336e:	d0fb      	beq.n	403368 <send_command+0xc8>
	usart_write(USART_COM, analog_x[x]);
  403370:	7831      	ldrb	r1, [r6, #0]
  403372:	481c      	ldr	r0, [pc, #112]	; (4033e4 <send_command+0x144>)
  403374:	4b1d      	ldr	r3, [pc, #116]	; (4033ec <send_command+0x14c>)
  403376:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  403378:	4d1a      	ldr	r5, [pc, #104]	; (4033e4 <send_command+0x144>)
  40337a:	4c1b      	ldr	r4, [pc, #108]	; (4033e8 <send_command+0x148>)
  40337c:	4628      	mov	r0, r5
  40337e:	47a0      	blx	r4
  403380:	2800      	cmp	r0, #0
  403382:	d0fb      	beq.n	40337c <send_command+0xdc>
	usart_write(USART_COM, analog_y[0]);
  403384:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  403386:	f816 1b01 	ldrb.w	r1, [r6], #1
  40338a:	4816      	ldr	r0, [pc, #88]	; (4033e4 <send_command+0x144>)
  40338c:	4b17      	ldr	r3, [pc, #92]	; (4033ec <send_command+0x14c>)
  40338e:	4798      	blx	r3
	while(analog_y[y]!= ';'){
  403390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403392:	785b      	ldrb	r3, [r3, #1]
  403394:	2b3b      	cmp	r3, #59	; 0x3b
  403396:	d00d      	beq.n	4033b4 <send_command+0x114>
		while(!usart_is_tx_ready(USART_COM));
  403398:	4c12      	ldr	r4, [pc, #72]	; (4033e4 <send_command+0x144>)
  40339a:	4d13      	ldr	r5, [pc, #76]	; (4033e8 <send_command+0x148>)
		usart_write(USART_COM, analog_y[y]);
  40339c:	4f13      	ldr	r7, [pc, #76]	; (4033ec <send_command+0x14c>)
		while(!usart_is_tx_ready(USART_COM));
  40339e:	4620      	mov	r0, r4
  4033a0:	47a8      	blx	r5
  4033a2:	2800      	cmp	r0, #0
  4033a4:	d0fb      	beq.n	40339e <send_command+0xfe>
		usart_write(USART_COM, analog_y[y]);
  4033a6:	7831      	ldrb	r1, [r6, #0]
  4033a8:	4620      	mov	r0, r4
  4033aa:	47b8      	blx	r7
	while(analog_y[y]!= ';'){
  4033ac:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  4033b0:	2b3b      	cmp	r3, #59	; 0x3b
  4033b2:	d1f4      	bne.n	40339e <send_command+0xfe>
	while(!usart_is_tx_ready(USART_COM));
  4033b4:	4d0b      	ldr	r5, [pc, #44]	; (4033e4 <send_command+0x144>)
  4033b6:	4c0c      	ldr	r4, [pc, #48]	; (4033e8 <send_command+0x148>)
  4033b8:	4628      	mov	r0, r5
  4033ba:	47a0      	blx	r4
  4033bc:	2800      	cmp	r0, #0
  4033be:	d0fb      	beq.n	4033b8 <send_command+0x118>
	usart_write(USART_COM, analog_y[y]);
  4033c0:	7831      	ldrb	r1, [r6, #0]
  4033c2:	4808      	ldr	r0, [pc, #32]	; (4033e4 <send_command+0x144>)
  4033c4:	4b09      	ldr	r3, [pc, #36]	; (4033ec <send_command+0x14c>)
  4033c6:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  4033c8:	4d06      	ldr	r5, [pc, #24]	; (4033e4 <send_command+0x144>)
  4033ca:	4c07      	ldr	r4, [pc, #28]	; (4033e8 <send_command+0x148>)
  4033cc:	4628      	mov	r0, r5
  4033ce:	47a0      	blx	r4
  4033d0:	2800      	cmp	r0, #0
  4033d2:	d0fb      	beq.n	4033cc <send_command+0x12c>
	usart_write(USART_COM, eof);
  4033d4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
  4033d8:	4802      	ldr	r0, [pc, #8]	; (4033e4 <send_command+0x144>)
  4033da:	4b04      	ldr	r3, [pc, #16]	; (4033ec <send_command+0x14c>)
  4033dc:	4798      	blx	r3
  4033de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033e2:	bf00      	nop
  4033e4:	40024000 	.word	0x40024000
  4033e8:	00400d79 	.word	0x00400d79
  4033ec:	00400d81 	.word	0x00400d81

004033f0 <io_init>:
void io_init(void){
  4033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033f4:	b083      	sub	sp, #12
	WDT->WDT_MR = WDT_MR_WDDIS;
  4033f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4033fa:	4b39      	ldr	r3, [pc, #228]	; (4034e0 <io_init+0xf0>)
  4033fc:	605a      	str	r2, [r3, #4]
	pmc_enable_periph_clk(BUTA_PIO_ID);
  4033fe:	2010      	movs	r0, #16
  403400:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 403500 <io_init+0x110>
  403404:	47d0      	blx	sl
	pio_configure(BUTA_PIO, PIO_INPUT, BUTA_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403406:	4c37      	ldr	r4, [pc, #220]	; (4034e4 <io_init+0xf4>)
  403408:	2309      	movs	r3, #9
  40340a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40340e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403412:	4620      	mov	r0, r4
  403414:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 403504 <io_init+0x114>
  403418:	47c8      	blx	r9
  pio_handler_set(BUTA_PIO,
  40341a:	4b33      	ldr	r3, [pc, #204]	; (4034e8 <io_init+0xf8>)
  40341c:	9300      	str	r3, [sp, #0]
  40341e:	2350      	movs	r3, #80	; 0x50
  403420:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403424:	2110      	movs	r1, #16
  403426:	4620      	mov	r0, r4
  403428:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 403508 <io_init+0x118>
  40342c:	47c0      	blx	r8
  pio_enable_interrupt(BUTA_PIO, BUTA_PIO_IDX_MASK);
  40342e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403432:	4620      	mov	r0, r4
  403434:	4f2d      	ldr	r7, [pc, #180]	; (4034ec <io_init+0xfc>)
  403436:	47b8      	blx	r7
  403438:	4d2d      	ldr	r5, [pc, #180]	; (4034f0 <io_init+0x100>)
  40343a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40343e:	602b      	str	r3, [r5, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403440:	2680      	movs	r6, #128	; 0x80
  403442:	f885 6310 	strb.w	r6, [r5, #784]	; 0x310
	pmc_enable_periph_clk(BUTB_PIO_ID);
  403446:	200a      	movs	r0, #10
  403448:	47d0      	blx	sl
	pio_configure(BUTB_PIO, PIO_INPUT, BUTB_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  40344a:	f5a4 64c0 	sub.w	r4, r4, #1536	; 0x600
  40344e:	2309      	movs	r3, #9
  403450:	2240      	movs	r2, #64	; 0x40
  403452:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403456:	4620      	mov	r0, r4
  403458:	47c8      	blx	r9
  pio_handler_set(BUTB_PIO,
  40345a:	4b26      	ldr	r3, [pc, #152]	; (4034f4 <io_init+0x104>)
  40345c:	9300      	str	r3, [sp, #0]
  40345e:	2350      	movs	r3, #80	; 0x50
  403460:	2240      	movs	r2, #64	; 0x40
  403462:	210a      	movs	r1, #10
  403464:	4620      	mov	r0, r4
  403466:	47c0      	blx	r8
  pio_enable_interrupt(BUTB_PIO, BUTB_PIO_IDX_MASK);
  403468:	2140      	movs	r1, #64	; 0x40
  40346a:	4620      	mov	r0, r4
  40346c:	47b8      	blx	r7
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40346e:	f44f 6b80 	mov.w	fp, #1024	; 0x400
  403472:	f8c5 b000 	str.w	fp, [r5]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403476:	f885 630a 	strb.w	r6, [r5, #778]	; 0x30a
	pmc_enable_periph_clk(BUTZ_PIO_ID);
  40347a:	200a      	movs	r0, #10
  40347c:	47d0      	blx	sl
	pio_configure(BUTZ_PIO, PIO_INPUT, BUTZ_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  40347e:	2309      	movs	r3, #9
  403480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  403484:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403488:	4620      	mov	r0, r4
  40348a:	47c8      	blx	r9
  pio_handler_set(BUTZ_PIO,
  40348c:	4b1a      	ldr	r3, [pc, #104]	; (4034f8 <io_init+0x108>)
  40348e:	9300      	str	r3, [sp, #0]
  403490:	2350      	movs	r3, #80	; 0x50
  403492:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  403496:	210a      	movs	r1, #10
  403498:	4620      	mov	r0, r4
  40349a:	47c0      	blx	r8
  pio_enable_interrupt(BUTZ_PIO, BUTZ_PIO_IDX_MASK);
  40349c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  4034a0:	4620      	mov	r0, r4
  4034a2:	47b8      	blx	r7
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034a4:	f8c5 b000 	str.w	fp, [r5]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034a8:	f885 630a 	strb.w	r6, [r5, #778]	; 0x30a
	pmc_enable_periph_clk(BUTSTART_PIO_ID);
  4034ac:	200a      	movs	r0, #10
  4034ae:	47d0      	blx	sl
	pio_configure(BUTSTART_PIO, PIO_INPUT, BUTSTART_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4034b0:	2309      	movs	r3, #9
  4034b2:	2204      	movs	r2, #4
  4034b4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4034b8:	4620      	mov	r0, r4
  4034ba:	47c8      	blx	r9
  pio_handler_set(BUTSTART_PIO,
  4034bc:	4b0f      	ldr	r3, [pc, #60]	; (4034fc <io_init+0x10c>)
  4034be:	9300      	str	r3, [sp, #0]
  4034c0:	2350      	movs	r3, #80	; 0x50
  4034c2:	2204      	movs	r2, #4
  4034c4:	210a      	movs	r1, #10
  4034c6:	4620      	mov	r0, r4
  4034c8:	47c0      	blx	r8
  pio_enable_interrupt(BUTSTART_PIO, BUTSTART_PIO_IDX_MASK);
  4034ca:	2104      	movs	r1, #4
  4034cc:	4620      	mov	r0, r4
  4034ce:	47b8      	blx	r7
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034d0:	f8c5 b000 	str.w	fp, [r5]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034d4:	f885 630a 	strb.w	r6, [r5, #778]	; 0x30a
}
  4034d8:	b003      	add	sp, #12
  4034da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034de:	bf00      	nop
  4034e0:	400e1850 	.word	0x400e1850
  4034e4:	400e1400 	.word	0x400e1400
  4034e8:	00402d05 	.word	0x00402d05
  4034ec:	004009cb 	.word	0x004009cb
  4034f0:	e000e100 	.word	0xe000e100
  4034f4:	00402d29 	.word	0x00402d29
  4034f8:	00402d4d 	.word	0x00402d4d
  4034fc:	00402d71 	.word	0x00402d71
  403500:	00400c1d 	.word	0x00400c1d
  403504:	00400909 	.word	0x00400909
  403508:	00400a29 	.word	0x00400a29

0040350c <usart_put_string>:
void usart_put_string(Usart *usart, char str[]) {
  40350c:	b538      	push	{r3, r4, r5, lr}
  40350e:	4605      	mov	r5, r0
  403510:	460c      	mov	r4, r1
  usart_serial_write_packet(usart, str, strlen(str));
  403512:	4608      	mov	r0, r1
  403514:	4b03      	ldr	r3, [pc, #12]	; (403524 <usart_put_string+0x18>)
  403516:	4798      	blx	r3
  403518:	4602      	mov	r2, r0
  40351a:	4621      	mov	r1, r4
  40351c:	4628      	mov	r0, r5
  40351e:	4b02      	ldr	r3, [pc, #8]	; (403528 <usart_put_string+0x1c>)
  403520:	4798      	blx	r3
  403522:	bd38      	pop	{r3, r4, r5, pc}
  403524:	004043c1 	.word	0x004043c1
  403528:	0040021d 	.word	0x0040021d

0040352c <usart_get_string>:
int usart_get_string(Usart *usart, char buffer[], int bufferlen, uint timeout_ms) {
  40352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403530:	b085      	sub	sp, #20
  403532:	9001      	str	r0, [sp, #4]
  403534:	468b      	mov	fp, r1
  403536:	4615      	mov	r5, r2
  403538:	4698      	mov	r8, r3
  uint32_t start = xTaskGetTickCount();
  40353a:	4b10      	ldr	r3, [pc, #64]	; (40357c <usart_get_string+0x50>)
  40353c:	4798      	blx	r3
  40353e:	4607      	mov	r7, r0
  403540:	f10b 3aff 	add.w	sl, fp, #4294967295
  403544:	3d01      	subs	r5, #1
  uint32_t counter = 0;
  403546:	2400      	movs	r4, #0
  while( (xTaskGetTickCount() - start < timeout_ms) && (counter < bufferlen - 1)) {
  403548:	4e0c      	ldr	r6, [pc, #48]	; (40357c <usart_get_string+0x50>)
    if(usart_read(usart, &rx) == 0) {
  40354a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 403580 <usart_get_string+0x54>
  while( (xTaskGetTickCount() - start < timeout_ms) && (counter < bufferlen - 1)) {
  40354e:	47b0      	blx	r6
  403550:	1bc0      	subs	r0, r0, r7
  403552:	4540      	cmp	r0, r8
  403554:	d20b      	bcs.n	40356e <usart_get_string+0x42>
  403556:	42ac      	cmp	r4, r5
  403558:	d009      	beq.n	40356e <usart_get_string+0x42>
    if(usart_read(usart, &rx) == 0) {
  40355a:	a903      	add	r1, sp, #12
  40355c:	9801      	ldr	r0, [sp, #4]
  40355e:	47c8      	blx	r9
  403560:	2800      	cmp	r0, #0
  403562:	d1f4      	bne.n	40354e <usart_get_string+0x22>
      buffer[counter++] = rx;
  403564:	3401      	adds	r4, #1
  403566:	9b03      	ldr	r3, [sp, #12]
  403568:	f80a 3f01 	strb.w	r3, [sl, #1]!
  40356c:	e7ef      	b.n	40354e <usart_get_string+0x22>
  buffer[counter] = 0x00;
  40356e:	2300      	movs	r3, #0
  403570:	f80b 3004 	strb.w	r3, [fp, r4]
}
  403574:	4620      	mov	r0, r4
  403576:	b005      	add	sp, #20
  403578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40357c:	004020bd 	.word	0x004020bd
  403580:	00400d97 	.word	0x00400d97

00403584 <usart_send_command>:
void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  403584:	b570      	push	{r4, r5, r6, lr}
  403586:	4604      	mov	r4, r0
  403588:	460d      	mov	r5, r1
  40358a:	4616      	mov	r6, r2
  usart_put_string(usart, buffer_tx);
  40358c:	4619      	mov	r1, r3
  40358e:	4b04      	ldr	r3, [pc, #16]	; (4035a0 <usart_send_command+0x1c>)
  403590:	4798      	blx	r3
  usart_get_string(usart, buffer_rx, bufferlen, timeout);
  403592:	9b04      	ldr	r3, [sp, #16]
  403594:	4632      	mov	r2, r6
  403596:	4629      	mov	r1, r5
  403598:	4620      	mov	r0, r4
  40359a:	4c02      	ldr	r4, [pc, #8]	; (4035a4 <usart_send_command+0x20>)
  40359c:	47a0      	blx	r4
  40359e:	bd70      	pop	{r4, r5, r6, pc}
  4035a0:	0040350d 	.word	0x0040350d
  4035a4:	0040352d 	.word	0x0040352d

004035a8 <hc05_config_server>:
void hc05_config_server(void) {
  4035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035aa:	b087      	sub	sp, #28
  4035ac:	200d      	movs	r0, #13
  4035ae:	4c17      	ldr	r4, [pc, #92]	; (40360c <hc05_config_server+0x64>)
  4035b0:	47a0      	blx	r4
	usart_settings.baudrate = opt->baudrate;
  4035b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  4035b6:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  4035b8:	23c0      	movs	r3, #192	; 0xc0
  4035ba:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4035bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4035c0:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  4035c2:	2500      	movs	r5, #0
  4035c4:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4035c6:	9504      	str	r5, [sp, #16]
  4035c8:	200d      	movs	r0, #13
  4035ca:	47a0      	blx	r4
		usart_init_rs232(p_usart, &usart_settings,
  4035cc:	4c10      	ldr	r4, [pc, #64]	; (403610 <hc05_config_server+0x68>)
  4035ce:	4a11      	ldr	r2, [pc, #68]	; (403614 <hc05_config_server+0x6c>)
  4035d0:	4669      	mov	r1, sp
  4035d2:	4620      	mov	r0, r4
  4035d4:	4b10      	ldr	r3, [pc, #64]	; (403618 <hc05_config_server+0x70>)
  4035d6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4035d8:	4620      	mov	r0, r4
  4035da:	4f10      	ldr	r7, [pc, #64]	; (40361c <hc05_config_server+0x74>)
  4035dc:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  4035de:	4620      	mov	r0, r4
  4035e0:	4e0f      	ldr	r6, [pc, #60]	; (403620 <hc05_config_server+0x78>)
  4035e2:	47b0      	blx	r6
  usart_enable_tx(USART_COM);
  4035e4:	4620      	mov	r0, r4
  4035e6:	47b8      	blx	r7
  usart_enable_rx(USART_COM);
  4035e8:	4620      	mov	r0, r4
  4035ea:	47b0      	blx	r6
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  4035ec:	4e0d      	ldr	r6, [pc, #52]	; (403624 <hc05_config_server+0x7c>)
  4035ee:	462b      	mov	r3, r5
  4035f0:	2201      	movs	r2, #1
  4035f2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4035f6:	4630      	mov	r0, r6
  4035f8:	4c0b      	ldr	r4, [pc, #44]	; (403628 <hc05_config_server+0x80>)
  4035fa:	47a0      	blx	r4
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  4035fc:	462b      	mov	r3, r5
  4035fe:	2202      	movs	r2, #2
  403600:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403604:	4630      	mov	r0, r6
  403606:	47a0      	blx	r4
}
  403608:	b007      	add	sp, #28
  40360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40360c:	00400c1d 	.word	0x00400c1d
  403610:	40024000 	.word	0x40024000
  403614:	08f0d180 	.word	0x08f0d180
  403618:	00400d19 	.word	0x00400d19
  40361c:	00400d6d 	.word	0x00400d6d
  403620:	00400d73 	.word	0x00400d73
  403624:	400e1000 	.word	0x400e1000
  403628:	00400909 	.word	0x00400909

0040362c <hc05_server_init>:
int hc05_server_init(void) {
  40362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403630:	b0a2      	sub	sp, #136	; 0x88
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf(buffer_rx);
  403632:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4036c4 <hc05_server_init+0x98>
  403636:	4e1e      	ldr	r6, [pc, #120]	; (4036b0 <hc05_server_init+0x84>)
  403638:	2764      	movs	r7, #100	; 0x64
  40363a:	9700      	str	r7, [sp, #0]
  40363c:	4643      	mov	r3, r8
  40363e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403642:	a902      	add	r1, sp, #8
  403644:	4630      	mov	r0, r6
  403646:	4d1b      	ldr	r5, [pc, #108]	; (4036b4 <hc05_server_init+0x88>)
  403648:	47a8      	blx	r5
  40364a:	a802      	add	r0, sp, #8
  40364c:	4c1a      	ldr	r4, [pc, #104]	; (4036b8 <hc05_server_init+0x8c>)
  40364e:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf(buffer_rx);
  403650:	9700      	str	r7, [sp, #0]
  403652:	4643      	mov	r3, r8
  403654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403658:	a902      	add	r1, sp, #8
  40365a:	4630      	mov	r0, r6
  40365c:	47a8      	blx	r5
  40365e:	a802      	add	r0, sp, #8
  403660:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100);printf(buffer_rx);
  403662:	9700      	str	r7, [sp, #0]
  403664:	4643      	mov	r3, r8
  403666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40366a:	a902      	add	r1, sp, #8
  40366c:	4630      	mov	r0, r6
  40366e:	47a8      	blx	r5
  403670:	a802      	add	r0, sp, #8
  403672:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+NAMEPedro", 1000);printf(buffer_rx);
  403674:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  403678:	9700      	str	r7, [sp, #0]
  40367a:	4b10      	ldr	r3, [pc, #64]	; (4036bc <hc05_server_init+0x90>)
  40367c:	463a      	mov	r2, r7
  40367e:	a902      	add	r1, sp, #8
  403680:	4630      	mov	r0, r6
  403682:	47a8      	blx	r5
  403684:	a802      	add	r0, sp, #8
  403686:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 1000);printf(buffer_rx);
  403688:	9700      	str	r7, [sp, #0]
  40368a:	4643      	mov	r3, r8
  40368c:	463a      	mov	r2, r7
  40368e:	a902      	add	r1, sp, #8
  403690:	4630      	mov	r0, r6
  403692:	47a8      	blx	r5
  403694:	a802      	add	r0, sp, #8
  403696:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+PIN5555", 1000);printf(buffer_rx);
  403698:	9700      	str	r7, [sp, #0]
  40369a:	4b09      	ldr	r3, [pc, #36]	; (4036c0 <hc05_server_init+0x94>)
  40369c:	463a      	mov	r2, r7
  40369e:	a902      	add	r1, sp, #8
  4036a0:	4630      	mov	r0, r6
  4036a2:	47a8      	blx	r5
  4036a4:	a802      	add	r0, sp, #8
  4036a6:	47a0      	blx	r4
}
  4036a8:	b022      	add	sp, #136	; 0x88
  4036aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4036ae:	bf00      	nop
  4036b0:	40024000 	.word	0x40024000
  4036b4:	00403585 	.word	0x00403585
  4036b8:	00403a09 	.word	0x00403a09
  4036bc:	00409e24 	.word	0x00409e24
  4036c0:	00409e34 	.word	0x00409e34
  4036c4:	00409e20 	.word	0x00409e20

004036c8 <task_bluetooth>:
void task_bluetooth(void){
  4036c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036cc:	b09d      	sub	sp, #116	; 0x74
	xQueueBUTA = xQueueCreate( 10, sizeof( char ) );
  4036ce:	2200      	movs	r2, #0
  4036d0:	2101      	movs	r1, #1
  4036d2:	200a      	movs	r0, #10
  4036d4:	4c64      	ldr	r4, [pc, #400]	; (403868 <task_bluetooth+0x1a0>)
  4036d6:	47a0      	blx	r4
  4036d8:	4b64      	ldr	r3, [pc, #400]	; (40386c <task_bluetooth+0x1a4>)
  4036da:	6018      	str	r0, [r3, #0]
	xQueueBUTB = xQueueCreate( 10, sizeof( char ) );
  4036dc:	2200      	movs	r2, #0
  4036de:	2101      	movs	r1, #1
  4036e0:	200a      	movs	r0, #10
  4036e2:	47a0      	blx	r4
  4036e4:	4b62      	ldr	r3, [pc, #392]	; (403870 <task_bluetooth+0x1a8>)
  4036e6:	6018      	str	r0, [r3, #0]
	xQueueBUTZ = xQueueCreate( 10, sizeof( char ) );
  4036e8:	2200      	movs	r2, #0
  4036ea:	2101      	movs	r1, #1
  4036ec:	200a      	movs	r0, #10
  4036ee:	47a0      	blx	r4
  4036f0:	4b60      	ldr	r3, [pc, #384]	; (403874 <task_bluetooth+0x1ac>)
  4036f2:	6018      	str	r0, [r3, #0]
	xQueueBUTSTART = xQueueCreate( 10, sizeof( char ) );
  4036f4:	2200      	movs	r2, #0
  4036f6:	2101      	movs	r1, #1
  4036f8:	200a      	movs	r0, #10
  4036fa:	47a0      	blx	r4
  4036fc:	4b5e      	ldr	r3, [pc, #376]	; (403878 <task_bluetooth+0x1b0>)
  4036fe:	6018      	str	r0, [r3, #0]
	xQueueAnalogX = xQueueCreate( 10, sizeof( int32_t ) );
  403700:	2200      	movs	r2, #0
  403702:	2104      	movs	r1, #4
  403704:	200a      	movs	r0, #10
  403706:	47a0      	blx	r4
  403708:	4b5c      	ldr	r3, [pc, #368]	; (40387c <task_bluetooth+0x1b4>)
  40370a:	6018      	str	r0, [r3, #0]
	xQueueAnalogY = xQueueCreate( 10, sizeof( int32_t ) );
  40370c:	2200      	movs	r2, #0
  40370e:	2104      	movs	r1, #4
  403710:	200a      	movs	r0, #10
  403712:	47a0      	blx	r4
  403714:	4b5a      	ldr	r3, [pc, #360]	; (403880 <task_bluetooth+0x1b8>)
  403716:	6018      	str	r0, [r3, #0]
	xQueueAnalogCX = xQueueCreate( 10, sizeof( int32_t ) );
  403718:	2200      	movs	r2, #0
  40371a:	2104      	movs	r1, #4
  40371c:	200a      	movs	r0, #10
  40371e:	47a0      	blx	r4
  403720:	4b58      	ldr	r3, [pc, #352]	; (403884 <task_bluetooth+0x1bc>)
  403722:	6018      	str	r0, [r3, #0]
	xQueueAnalogCY = xQueueCreate( 10, sizeof( int32_t ) );
  403724:	2200      	movs	r2, #0
  403726:	2104      	movs	r1, #4
  403728:	200a      	movs	r0, #10
  40372a:	47a0      	blx	r4
  40372c:	4b56      	ldr	r3, [pc, #344]	; (403888 <task_bluetooth+0x1c0>)
  40372e:	6018      	str	r0, [r3, #0]
	printf("Bluetooth initializing \n");
  403730:	4856      	ldr	r0, [pc, #344]	; (40388c <task_bluetooth+0x1c4>)
  403732:	4c57      	ldr	r4, [pc, #348]	; (403890 <task_bluetooth+0x1c8>)
  403734:	47a0      	blx	r4
	hc05_config_server();
  403736:	4b57      	ldr	r3, [pc, #348]	; (403894 <task_bluetooth+0x1cc>)
  403738:	4798      	blx	r3
	hc05_server_init();
  40373a:	4b57      	ldr	r3, [pc, #348]	; (403898 <task_bluetooth+0x1d0>)
  40373c:	4798      	blx	r3
	printf("Config done \n");
  40373e:	4857      	ldr	r0, [pc, #348]	; (40389c <task_bluetooth+0x1d4>)
  403740:	47a0      	blx	r4
	config_ADC_TEMP_RES();
  403742:	4b57      	ldr	r3, [pc, #348]	; (4038a0 <task_bluetooth+0x1d8>)
  403744:	4798      	blx	r3
	io_init();
  403746:	4b57      	ldr	r3, [pc, #348]	; (4038a4 <task_bluetooth+0x1dc>)
  403748:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40374a:	4a57      	ldr	r2, [pc, #348]	; (4038a8 <task_bluetooth+0x1e0>)
  40374c:	2301      	movs	r3, #1
  40374e:	6153      	str	r3, [r2, #20]
	afec->AFEC_CR = AFEC_CR_START;
  403750:	2302      	movs	r3, #2
  403752:	6013      	str	r3, [r2, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403754:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  403758:	6153      	str	r3, [r2, #20]
	afec->AFEC_CR = AFEC_CR_START;
  40375a:	6013      	str	r3, [r2, #0]
		if (xQueueReceive( xQueueBUTA, &(buttonA), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  40375c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 40386c <task_bluetooth+0x1a4>
  403760:	f8df a160 	ldr.w	sl, [pc, #352]	; 4038c4 <task_bluetooth+0x1fc>
  403764:	e02d      	b.n	4037c2 <task_bluetooth+0xfa>
			sprintf(analog_x,";%d;",Jx);
  403766:	ac0c      	add	r4, sp, #48	; 0x30
  403768:	9a08      	ldr	r2, [sp, #32]
  40376a:	4950      	ldr	r1, [pc, #320]	; (4038ac <task_bluetooth+0x1e4>)
  40376c:	4620      	mov	r0, r4
  40376e:	4e50      	ldr	r6, [pc, #320]	; (4038b0 <task_bluetooth+0x1e8>)
  403770:	47b0      	blx	r6
			sprintf(analog_y,";%d;",Jy);
  403772:	ad14      	add	r5, sp, #80	; 0x50
  403774:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403776:	494d      	ldr	r1, [pc, #308]	; (4038ac <task_bluetooth+0x1e4>)
  403778:	4628      	mov	r0, r5
  40377a:	47b0      	blx	r6
			analogcx = set_analog_result_cx(Cx);
  40377c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40377e:	4b4d      	ldr	r3, [pc, #308]	; (4038b4 <task_bluetooth+0x1ec>)
  403780:	4798      	blx	r3
  403782:	4680      	mov	r8, r0
			analogcy = set_analog_result_cy(Cy);
  403784:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403786:	4630      	mov	r0, r6
  403788:	4b4b      	ldr	r3, [pc, #300]	; (4038b8 <task_bluetooth+0x1f0>)
  40378a:	4798      	blx	r3
  40378c:	4681      	mov	r9, r0
			printf("%d\n",Cy);
  40378e:	4f4b      	ldr	r7, [pc, #300]	; (4038bc <task_bluetooth+0x1f4>)
  403790:	4631      	mov	r1, r6
  403792:	4638      	mov	r0, r7
  403794:	4e3e      	ldr	r6, [pc, #248]	; (403890 <task_bluetooth+0x1c8>)
  403796:	47b0      	blx	r6
			printf("%d\n",Cx);
  403798:	990a      	ldr	r1, [sp, #40]	; 0x28
  40379a:	4638      	mov	r0, r7
  40379c:	47b0      	blx	r6
			send_command(buttonStart,buttonA,buttonB,buttonZ,analogcx,analogcy,analog_x,analog_y,eof);
  40379e:	f89d 301e 	ldrb.w	r3, [sp, #30]
  4037a2:	f89d 201d 	ldrb.w	r2, [sp, #29]
  4037a6:	f89d 101c 	ldrb.w	r1, [sp, #28]
  4037aa:	f89d 001f 	ldrb.w	r0, [sp, #31]
  4037ae:	2658      	movs	r6, #88	; 0x58
  4037b0:	9604      	str	r6, [sp, #16]
  4037b2:	9503      	str	r5, [sp, #12]
  4037b4:	9402      	str	r4, [sp, #8]
  4037b6:	f8cd 9004 	str.w	r9, [sp, #4]
  4037ba:	f8cd 8000 	str.w	r8, [sp]
  4037be:	4c40      	ldr	r4, [pc, #256]	; (4038c0 <task_bluetooth+0x1f8>)
  4037c0:	47a0      	blx	r4
		char buttonA = '0';
  4037c2:	2330      	movs	r3, #48	; 0x30
  4037c4:	f88d 301c 	strb.w	r3, [sp, #28]
		char buttonB = '0';
  4037c8:	f88d 301d 	strb.w	r3, [sp, #29]
		char buttonZ = '0';
  4037cc:	f88d 301e 	strb.w	r3, [sp, #30]
		char buttonStart = '0';
  4037d0:	f88d 301f 	strb.w	r3, [sp, #31]
		uint32_t Jx = 2150;
  4037d4:	f640 0366 	movw	r3, #2150	; 0x866
  4037d8:	9308      	str	r3, [sp, #32]
		uint32_t Jy = 2150;
  4037da:	9309      	str	r3, [sp, #36]	; 0x24
		uint32_t Cx = 2150;
  4037dc:	930a      	str	r3, [sp, #40]	; 0x28
		uint32_t Cy = 2150;
  4037de:	930b      	str	r3, [sp, #44]	; 0x2c
		if (xQueueReceive( xQueueBUTA, &(buttonA), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  4037e0:	2300      	movs	r3, #0
  4037e2:	461a      	mov	r2, r3
  4037e4:	a907      	add	r1, sp, #28
  4037e6:	f8db 0000 	ldr.w	r0, [fp]
  4037ea:	47d0      	blx	sl
  4037ec:	2800      	cmp	r0, #0
  4037ee:	d1ba      	bne.n	403766 <task_bluetooth+0x9e>
			xQueueReceive( xQueueBUTB, &(buttonB), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  4037f0:	2300      	movs	r3, #0
  4037f2:	461a      	mov	r2, r3
  4037f4:	f10d 011d 	add.w	r1, sp, #29
  4037f8:	481d      	ldr	r0, [pc, #116]	; (403870 <task_bluetooth+0x1a8>)
  4037fa:	6800      	ldr	r0, [r0, #0]
  4037fc:	47d0      	blx	sl
		if (xQueueReceive( xQueueBUTA, &(buttonA), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  4037fe:	2800      	cmp	r0, #0
  403800:	d1b1      	bne.n	403766 <task_bluetooth+0x9e>
			xQueueReceive( xQueueBUTZ, &(buttonZ), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  403802:	2300      	movs	r3, #0
  403804:	461a      	mov	r2, r3
  403806:	f10d 011e 	add.w	r1, sp, #30
  40380a:	481a      	ldr	r0, [pc, #104]	; (403874 <task_bluetooth+0x1ac>)
  40380c:	6800      	ldr	r0, [r0, #0]
  40380e:	47d0      	blx	sl
			xQueueReceive( xQueueBUTB, &(buttonB), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  403810:	2800      	cmp	r0, #0
  403812:	d1a8      	bne.n	403766 <task_bluetooth+0x9e>
			xQueueReceive( xQueueBUTSTART, &(buttonStart), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  403814:	2300      	movs	r3, #0
  403816:	461a      	mov	r2, r3
  403818:	f10d 011f 	add.w	r1, sp, #31
  40381c:	4816      	ldr	r0, [pc, #88]	; (403878 <task_bluetooth+0x1b0>)
  40381e:	6800      	ldr	r0, [r0, #0]
  403820:	47d0      	blx	sl
			xQueueReceive( xQueueBUTZ, &(buttonZ), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  403822:	2800      	cmp	r0, #0
  403824:	d19f      	bne.n	403766 <task_bluetooth+0x9e>
			(xQueueReceive( xQueueAnalogY, &(Jy), ( TickType_t ) 5 / portTICK_PERIOD_MS) &&
  403826:	2300      	movs	r3, #0
  403828:	2205      	movs	r2, #5
  40382a:	a909      	add	r1, sp, #36	; 0x24
  40382c:	4814      	ldr	r0, [pc, #80]	; (403880 <task_bluetooth+0x1b8>)
  40382e:	6800      	ldr	r0, [r0, #0]
  403830:	47d0      	blx	sl
			xQueueReceive( xQueueBUTSTART, &(buttonStart), ( TickType_t ) 0 / portTICK_PERIOD_MS) || 
  403832:	2800      	cmp	r0, #0
  403834:	d0c5      	beq.n	4037c2 <task_bluetooth+0xfa>
			xQueueReceive( xQueueAnalogX, &(Jx), ( TickType_t ) 5 / portTICK_PERIOD_MS) &&
  403836:	2300      	movs	r3, #0
  403838:	2205      	movs	r2, #5
  40383a:	a908      	add	r1, sp, #32
  40383c:	480f      	ldr	r0, [pc, #60]	; (40387c <task_bluetooth+0x1b4>)
  40383e:	6800      	ldr	r0, [r0, #0]
  403840:	47d0      	blx	sl
			(xQueueReceive( xQueueAnalogY, &(Jy), ( TickType_t ) 5 / portTICK_PERIOD_MS) &&
  403842:	2800      	cmp	r0, #0
  403844:	d0bd      	beq.n	4037c2 <task_bluetooth+0xfa>
			xQueueReceive( xQueueAnalogCY, &(Cy), ( TickType_t ) 5 / portTICK_PERIOD_MS) &&
  403846:	2300      	movs	r3, #0
  403848:	2205      	movs	r2, #5
  40384a:	a90b      	add	r1, sp, #44	; 0x2c
  40384c:	480e      	ldr	r0, [pc, #56]	; (403888 <task_bluetooth+0x1c0>)
  40384e:	6800      	ldr	r0, [r0, #0]
  403850:	47d0      	blx	sl
			xQueueReceive( xQueueAnalogX, &(Jx), ( TickType_t ) 5 / portTICK_PERIOD_MS) &&
  403852:	2800      	cmp	r0, #0
  403854:	d0b5      	beq.n	4037c2 <task_bluetooth+0xfa>
			xQueueReceive( xQueueAnalogCX, &(Cx), ( TickType_t ) 5 / portTICK_PERIOD_MS))
  403856:	2300      	movs	r3, #0
  403858:	2205      	movs	r2, #5
  40385a:	a90a      	add	r1, sp, #40	; 0x28
  40385c:	4809      	ldr	r0, [pc, #36]	; (403884 <task_bluetooth+0x1bc>)
  40385e:	6800      	ldr	r0, [r0, #0]
  403860:	47d0      	blx	sl
			xQueueReceive( xQueueAnalogCY, &(Cy), ( TickType_t ) 5 / portTICK_PERIOD_MS) &&
  403862:	2800      	cmp	r0, #0
  403864:	d0ad      	beq.n	4037c2 <task_bluetooth+0xfa>
  403866:	e77e      	b.n	403766 <task_bluetooth+0x9e>
  403868:	004016cd 	.word	0x004016cd
  40386c:	20400cb8 	.word	0x20400cb8
  403870:	20400ca8 	.word	0x20400ca8
  403874:	20400cd8 	.word	0x20400cd8
  403878:	20400cc8 	.word	0x20400cc8
  40387c:	20400cd0 	.word	0x20400cd0
  403880:	20400cbc 	.word	0x20400cbc
  403884:	20400cc4 	.word	0x20400cc4
  403888:	20400ccc 	.word	0x20400ccc
  40388c:	00409e4c 	.word	0x00409e4c
  403890:	00403a09 	.word	0x00403a09
  403894:	004035a9 	.word	0x004035a9
  403898:	0040362d 	.word	0x0040362d
  40389c:	00409e68 	.word	0x00409e68
  4038a0:	00402e69 	.word	0x00402e69
  4038a4:	004033f1 	.word	0x004033f1
  4038a8:	4003c000 	.word	0x4003c000
  4038ac:	00409e78 	.word	0x00409e78
  4038b0:	0040435d 	.word	0x0040435d
  4038b4:	00403271 	.word	0x00403271
  4038b8:	00403289 	.word	0x00403289
  4038bc:	00409e80 	.word	0x00409e80
  4038c0:	004032a1 	.word	0x004032a1
  4038c4:	00401b0d 	.word	0x00401b0d

004038c8 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void){
  4038c8:	b500      	push	{lr}
  4038ca:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  4038cc:	4b25      	ldr	r3, [pc, #148]	; (403964 <main+0x9c>)
  4038ce:	4798      	blx	r3
	board_init();
  4038d0:	4b25      	ldr	r3, [pc, #148]	; (403968 <main+0xa0>)
  4038d2:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4038d4:	4d25      	ldr	r5, [pc, #148]	; (40396c <main+0xa4>)
  4038d6:	4b26      	ldr	r3, [pc, #152]	; (403970 <main+0xa8>)
  4038d8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4038da:	4a26      	ldr	r2, [pc, #152]	; (403974 <main+0xac>)
  4038dc:	4b26      	ldr	r3, [pc, #152]	; (403978 <main+0xb0>)
  4038de:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4038e0:	4a26      	ldr	r2, [pc, #152]	; (40397c <main+0xb4>)
  4038e2:	4b27      	ldr	r3, [pc, #156]	; (403980 <main+0xb8>)
  4038e4:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4038e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4038ea:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4038ec:	23c0      	movs	r3, #192	; 0xc0
  4038ee:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4038f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4038f4:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4038f6:	2400      	movs	r4, #0
  4038f8:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4038fa:	9408      	str	r4, [sp, #32]
  4038fc:	200e      	movs	r0, #14
  4038fe:	4b21      	ldr	r3, [pc, #132]	; (403984 <main+0xbc>)
  403900:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403902:	4a21      	ldr	r2, [pc, #132]	; (403988 <main+0xc0>)
  403904:	a904      	add	r1, sp, #16
  403906:	4628      	mov	r0, r5
  403908:	4b20      	ldr	r3, [pc, #128]	; (40398c <main+0xc4>)
  40390a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40390c:	4628      	mov	r0, r5
  40390e:	4b20      	ldr	r3, [pc, #128]	; (403990 <main+0xc8>)
  403910:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403912:	4628      	mov	r0, r5
  403914:	4b1f      	ldr	r3, [pc, #124]	; (403994 <main+0xcc>)
  403916:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403918:	4e1f      	ldr	r6, [pc, #124]	; (403998 <main+0xd0>)
  40391a:	6833      	ldr	r3, [r6, #0]
  40391c:	4621      	mov	r1, r4
  40391e:	6898      	ldr	r0, [r3, #8]
  403920:	4d1e      	ldr	r5, [pc, #120]	; (40399c <main+0xd4>)
  403922:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403924:	6833      	ldr	r3, [r6, #0]
  403926:	4621      	mov	r1, r4
  403928:	6858      	ldr	r0, [r3, #4]
  40392a:	47a8      	blx	r5
	setbuf(stdout, NULL);
  40392c:	6833      	ldr	r3, [r6, #0]
  40392e:	4621      	mov	r1, r4
  403930:	6898      	ldr	r0, [r3, #8]
  403932:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Create task to make led blink */
	xTaskCreate(task_bluetooth, "BLT", TASK_PROCESS_STACK_SIZE, NULL,	TASK_PROCESS_STACK_PRIORITY, NULL);
  403934:	9403      	str	r4, [sp, #12]
  403936:	9402      	str	r4, [sp, #8]
  403938:	9401      	str	r4, [sp, #4]
  40393a:	9400      	str	r4, [sp, #0]
  40393c:	4623      	mov	r3, r4
  40393e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403942:	4917      	ldr	r1, [pc, #92]	; (4039a0 <main+0xd8>)
  403944:	4817      	ldr	r0, [pc, #92]	; (4039a4 <main+0xdc>)
  403946:	4d18      	ldr	r5, [pc, #96]	; (4039a8 <main+0xe0>)
  403948:	47a8      	blx	r5
	
	
	/* Create task to make buttons work */
	xTaskCreate(task_buttons, "BUTS", TASK_PROCESS_STACK_SIZE, NULL,	TASK_PROCESS_STACK_PRIORITY, NULL);
  40394a:	9403      	str	r4, [sp, #12]
  40394c:	9402      	str	r4, [sp, #8]
  40394e:	9401      	str	r4, [sp, #4]
  403950:	9400      	str	r4, [sp, #0]
  403952:	4623      	mov	r3, r4
  403954:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403958:	4914      	ldr	r1, [pc, #80]	; (4039ac <main+0xe4>)
  40395a:	4815      	ldr	r0, [pc, #84]	; (4039b0 <main+0xe8>)
  40395c:	47a8      	blx	r5
  	/* Create task to make buttons work */
  	//xTaskCreate(task_afec, "AFEC", TASK_PROCESS_STACK_SIZE, NULL,	TASK_PROCESS_STACK_PRIORITY, NULL);
  	
  
	/* Start the scheduler. */
	vTaskStartScheduler();
  40395e:	4b15      	ldr	r3, [pc, #84]	; (4039b4 <main+0xec>)
  403960:	4798      	blx	r3
  403962:	e7fe      	b.n	403962 <main+0x9a>
  403964:	004001ad 	.word	0x004001ad
  403968:	00400381 	.word	0x00400381
  40396c:	40028000 	.word	0x40028000
  403970:	20400be4 	.word	0x20400be4
  403974:	00402d95 	.word	0x00402d95
  403978:	20400be0 	.word	0x20400be0
  40397c:	00403165 	.word	0x00403165
  403980:	20400bdc 	.word	0x20400bdc
  403984:	00400c1d 	.word	0x00400c1d
  403988:	08f0d180 	.word	0x08f0d180
  40398c:	00400d19 	.word	0x00400d19
  403990:	00400d6d 	.word	0x00400d6d
  403994:	00400d73 	.word	0x00400d73
  403998:	2040000c 	.word	0x2040000c
  40399c:	004041bd 	.word	0x004041bd
  4039a0:	00409e40 	.word	0x00409e40
  4039a4:	004036c9 	.word	0x004036c9
  4039a8:	00401ded 	.word	0x00401ded
  4039ac:	00409e44 	.word	0x00409e44
  4039b0:	00403031 	.word	0x00403031
  4039b4:	00402021 	.word	0x00402021

004039b8 <__libc_init_array>:
  4039b8:	b570      	push	{r4, r5, r6, lr}
  4039ba:	4e0f      	ldr	r6, [pc, #60]	; (4039f8 <__libc_init_array+0x40>)
  4039bc:	4d0f      	ldr	r5, [pc, #60]	; (4039fc <__libc_init_array+0x44>)
  4039be:	1b76      	subs	r6, r6, r5
  4039c0:	10b6      	asrs	r6, r6, #2
  4039c2:	bf18      	it	ne
  4039c4:	2400      	movne	r4, #0
  4039c6:	d005      	beq.n	4039d4 <__libc_init_array+0x1c>
  4039c8:	3401      	adds	r4, #1
  4039ca:	f855 3b04 	ldr.w	r3, [r5], #4
  4039ce:	4798      	blx	r3
  4039d0:	42a6      	cmp	r6, r4
  4039d2:	d1f9      	bne.n	4039c8 <__libc_init_array+0x10>
  4039d4:	4e0a      	ldr	r6, [pc, #40]	; (403a00 <__libc_init_array+0x48>)
  4039d6:	4d0b      	ldr	r5, [pc, #44]	; (403a04 <__libc_init_array+0x4c>)
  4039d8:	1b76      	subs	r6, r6, r5
  4039da:	f006 fbd5 	bl	40a188 <_init>
  4039de:	10b6      	asrs	r6, r6, #2
  4039e0:	bf18      	it	ne
  4039e2:	2400      	movne	r4, #0
  4039e4:	d006      	beq.n	4039f4 <__libc_init_array+0x3c>
  4039e6:	3401      	adds	r4, #1
  4039e8:	f855 3b04 	ldr.w	r3, [r5], #4
  4039ec:	4798      	blx	r3
  4039ee:	42a6      	cmp	r6, r4
  4039f0:	d1f9      	bne.n	4039e6 <__libc_init_array+0x2e>
  4039f2:	bd70      	pop	{r4, r5, r6, pc}
  4039f4:	bd70      	pop	{r4, r5, r6, pc}
  4039f6:	bf00      	nop
  4039f8:	0040a194 	.word	0x0040a194
  4039fc:	0040a194 	.word	0x0040a194
  403a00:	0040a19c 	.word	0x0040a19c
  403a04:	0040a194 	.word	0x0040a194

00403a08 <iprintf>:
  403a08:	b40f      	push	{r0, r1, r2, r3}
  403a0a:	b500      	push	{lr}
  403a0c:	4907      	ldr	r1, [pc, #28]	; (403a2c <iprintf+0x24>)
  403a0e:	b083      	sub	sp, #12
  403a10:	ab04      	add	r3, sp, #16
  403a12:	6808      	ldr	r0, [r1, #0]
  403a14:	f853 2b04 	ldr.w	r2, [r3], #4
  403a18:	6881      	ldr	r1, [r0, #8]
  403a1a:	9301      	str	r3, [sp, #4]
  403a1c:	f001 ffac 	bl	405978 <_vfiprintf_r>
  403a20:	b003      	add	sp, #12
  403a22:	f85d eb04 	ldr.w	lr, [sp], #4
  403a26:	b004      	add	sp, #16
  403a28:	4770      	bx	lr
  403a2a:	bf00      	nop
  403a2c:	2040000c 	.word	0x2040000c

00403a30 <malloc>:
  403a30:	4b02      	ldr	r3, [pc, #8]	; (403a3c <malloc+0xc>)
  403a32:	4601      	mov	r1, r0
  403a34:	6818      	ldr	r0, [r3, #0]
  403a36:	f000 b80b 	b.w	403a50 <_malloc_r>
  403a3a:	bf00      	nop
  403a3c:	2040000c 	.word	0x2040000c

00403a40 <free>:
  403a40:	4b02      	ldr	r3, [pc, #8]	; (403a4c <free+0xc>)
  403a42:	4601      	mov	r1, r0
  403a44:	6818      	ldr	r0, [r3, #0]
  403a46:	f004 b873 	b.w	407b30 <_free_r>
  403a4a:	bf00      	nop
  403a4c:	2040000c 	.word	0x2040000c

00403a50 <_malloc_r>:
  403a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a54:	f101 060b 	add.w	r6, r1, #11
  403a58:	2e16      	cmp	r6, #22
  403a5a:	b083      	sub	sp, #12
  403a5c:	4605      	mov	r5, r0
  403a5e:	f240 809e 	bls.w	403b9e <_malloc_r+0x14e>
  403a62:	f036 0607 	bics.w	r6, r6, #7
  403a66:	f100 80bd 	bmi.w	403be4 <_malloc_r+0x194>
  403a6a:	42b1      	cmp	r1, r6
  403a6c:	f200 80ba 	bhi.w	403be4 <_malloc_r+0x194>
  403a70:	f000 fb86 	bl	404180 <__malloc_lock>
  403a74:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403a78:	f0c0 8293 	bcc.w	403fa2 <_malloc_r+0x552>
  403a7c:	0a73      	lsrs	r3, r6, #9
  403a7e:	f000 80b8 	beq.w	403bf2 <_malloc_r+0x1a2>
  403a82:	2b04      	cmp	r3, #4
  403a84:	f200 8179 	bhi.w	403d7a <_malloc_r+0x32a>
  403a88:	09b3      	lsrs	r3, r6, #6
  403a8a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403a8e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403a92:	00c3      	lsls	r3, r0, #3
  403a94:	4fbf      	ldr	r7, [pc, #764]	; (403d94 <_malloc_r+0x344>)
  403a96:	443b      	add	r3, r7
  403a98:	f1a3 0108 	sub.w	r1, r3, #8
  403a9c:	685c      	ldr	r4, [r3, #4]
  403a9e:	42a1      	cmp	r1, r4
  403aa0:	d106      	bne.n	403ab0 <_malloc_r+0x60>
  403aa2:	e00c      	b.n	403abe <_malloc_r+0x6e>
  403aa4:	2a00      	cmp	r2, #0
  403aa6:	f280 80aa 	bge.w	403bfe <_malloc_r+0x1ae>
  403aaa:	68e4      	ldr	r4, [r4, #12]
  403aac:	42a1      	cmp	r1, r4
  403aae:	d006      	beq.n	403abe <_malloc_r+0x6e>
  403ab0:	6863      	ldr	r3, [r4, #4]
  403ab2:	f023 0303 	bic.w	r3, r3, #3
  403ab6:	1b9a      	subs	r2, r3, r6
  403ab8:	2a0f      	cmp	r2, #15
  403aba:	ddf3      	ble.n	403aa4 <_malloc_r+0x54>
  403abc:	4670      	mov	r0, lr
  403abe:	693c      	ldr	r4, [r7, #16]
  403ac0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403da8 <_malloc_r+0x358>
  403ac4:	4574      	cmp	r4, lr
  403ac6:	f000 81ab 	beq.w	403e20 <_malloc_r+0x3d0>
  403aca:	6863      	ldr	r3, [r4, #4]
  403acc:	f023 0303 	bic.w	r3, r3, #3
  403ad0:	1b9a      	subs	r2, r3, r6
  403ad2:	2a0f      	cmp	r2, #15
  403ad4:	f300 8190 	bgt.w	403df8 <_malloc_r+0x3a8>
  403ad8:	2a00      	cmp	r2, #0
  403ada:	f8c7 e014 	str.w	lr, [r7, #20]
  403ade:	f8c7 e010 	str.w	lr, [r7, #16]
  403ae2:	f280 809d 	bge.w	403c20 <_malloc_r+0x1d0>
  403ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403aea:	f080 8161 	bcs.w	403db0 <_malloc_r+0x360>
  403aee:	08db      	lsrs	r3, r3, #3
  403af0:	f103 0c01 	add.w	ip, r3, #1
  403af4:	1099      	asrs	r1, r3, #2
  403af6:	687a      	ldr	r2, [r7, #4]
  403af8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403afc:	f8c4 8008 	str.w	r8, [r4, #8]
  403b00:	2301      	movs	r3, #1
  403b02:	408b      	lsls	r3, r1
  403b04:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403b08:	4313      	orrs	r3, r2
  403b0a:	3908      	subs	r1, #8
  403b0c:	60e1      	str	r1, [r4, #12]
  403b0e:	607b      	str	r3, [r7, #4]
  403b10:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403b14:	f8c8 400c 	str.w	r4, [r8, #12]
  403b18:	1082      	asrs	r2, r0, #2
  403b1a:	2401      	movs	r4, #1
  403b1c:	4094      	lsls	r4, r2
  403b1e:	429c      	cmp	r4, r3
  403b20:	f200 808b 	bhi.w	403c3a <_malloc_r+0x1ea>
  403b24:	421c      	tst	r4, r3
  403b26:	d106      	bne.n	403b36 <_malloc_r+0xe6>
  403b28:	f020 0003 	bic.w	r0, r0, #3
  403b2c:	0064      	lsls	r4, r4, #1
  403b2e:	421c      	tst	r4, r3
  403b30:	f100 0004 	add.w	r0, r0, #4
  403b34:	d0fa      	beq.n	403b2c <_malloc_r+0xdc>
  403b36:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403b3a:	46cc      	mov	ip, r9
  403b3c:	4680      	mov	r8, r0
  403b3e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403b42:	459c      	cmp	ip, r3
  403b44:	d107      	bne.n	403b56 <_malloc_r+0x106>
  403b46:	e16d      	b.n	403e24 <_malloc_r+0x3d4>
  403b48:	2a00      	cmp	r2, #0
  403b4a:	f280 817b 	bge.w	403e44 <_malloc_r+0x3f4>
  403b4e:	68db      	ldr	r3, [r3, #12]
  403b50:	459c      	cmp	ip, r3
  403b52:	f000 8167 	beq.w	403e24 <_malloc_r+0x3d4>
  403b56:	6859      	ldr	r1, [r3, #4]
  403b58:	f021 0103 	bic.w	r1, r1, #3
  403b5c:	1b8a      	subs	r2, r1, r6
  403b5e:	2a0f      	cmp	r2, #15
  403b60:	ddf2      	ble.n	403b48 <_malloc_r+0xf8>
  403b62:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403b66:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403b6a:	9300      	str	r3, [sp, #0]
  403b6c:	199c      	adds	r4, r3, r6
  403b6e:	4628      	mov	r0, r5
  403b70:	f046 0601 	orr.w	r6, r6, #1
  403b74:	f042 0501 	orr.w	r5, r2, #1
  403b78:	605e      	str	r6, [r3, #4]
  403b7a:	f8c8 c00c 	str.w	ip, [r8, #12]
  403b7e:	f8cc 8008 	str.w	r8, [ip, #8]
  403b82:	617c      	str	r4, [r7, #20]
  403b84:	613c      	str	r4, [r7, #16]
  403b86:	f8c4 e00c 	str.w	lr, [r4, #12]
  403b8a:	f8c4 e008 	str.w	lr, [r4, #8]
  403b8e:	6065      	str	r5, [r4, #4]
  403b90:	505a      	str	r2, [r3, r1]
  403b92:	f000 fafb 	bl	40418c <__malloc_unlock>
  403b96:	9b00      	ldr	r3, [sp, #0]
  403b98:	f103 0408 	add.w	r4, r3, #8
  403b9c:	e01e      	b.n	403bdc <_malloc_r+0x18c>
  403b9e:	2910      	cmp	r1, #16
  403ba0:	d820      	bhi.n	403be4 <_malloc_r+0x194>
  403ba2:	f000 faed 	bl	404180 <__malloc_lock>
  403ba6:	2610      	movs	r6, #16
  403ba8:	2318      	movs	r3, #24
  403baa:	2002      	movs	r0, #2
  403bac:	4f79      	ldr	r7, [pc, #484]	; (403d94 <_malloc_r+0x344>)
  403bae:	443b      	add	r3, r7
  403bb0:	f1a3 0208 	sub.w	r2, r3, #8
  403bb4:	685c      	ldr	r4, [r3, #4]
  403bb6:	4294      	cmp	r4, r2
  403bb8:	f000 813d 	beq.w	403e36 <_malloc_r+0x3e6>
  403bbc:	6863      	ldr	r3, [r4, #4]
  403bbe:	68e1      	ldr	r1, [r4, #12]
  403bc0:	68a6      	ldr	r6, [r4, #8]
  403bc2:	f023 0303 	bic.w	r3, r3, #3
  403bc6:	4423      	add	r3, r4
  403bc8:	4628      	mov	r0, r5
  403bca:	685a      	ldr	r2, [r3, #4]
  403bcc:	60f1      	str	r1, [r6, #12]
  403bce:	f042 0201 	orr.w	r2, r2, #1
  403bd2:	608e      	str	r6, [r1, #8]
  403bd4:	605a      	str	r2, [r3, #4]
  403bd6:	f000 fad9 	bl	40418c <__malloc_unlock>
  403bda:	3408      	adds	r4, #8
  403bdc:	4620      	mov	r0, r4
  403bde:	b003      	add	sp, #12
  403be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403be4:	2400      	movs	r4, #0
  403be6:	230c      	movs	r3, #12
  403be8:	4620      	mov	r0, r4
  403bea:	602b      	str	r3, [r5, #0]
  403bec:	b003      	add	sp, #12
  403bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bf2:	2040      	movs	r0, #64	; 0x40
  403bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
  403bf8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403bfc:	e74a      	b.n	403a94 <_malloc_r+0x44>
  403bfe:	4423      	add	r3, r4
  403c00:	68e1      	ldr	r1, [r4, #12]
  403c02:	685a      	ldr	r2, [r3, #4]
  403c04:	68a6      	ldr	r6, [r4, #8]
  403c06:	f042 0201 	orr.w	r2, r2, #1
  403c0a:	60f1      	str	r1, [r6, #12]
  403c0c:	4628      	mov	r0, r5
  403c0e:	608e      	str	r6, [r1, #8]
  403c10:	605a      	str	r2, [r3, #4]
  403c12:	f000 fabb 	bl	40418c <__malloc_unlock>
  403c16:	3408      	adds	r4, #8
  403c18:	4620      	mov	r0, r4
  403c1a:	b003      	add	sp, #12
  403c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c20:	4423      	add	r3, r4
  403c22:	4628      	mov	r0, r5
  403c24:	685a      	ldr	r2, [r3, #4]
  403c26:	f042 0201 	orr.w	r2, r2, #1
  403c2a:	605a      	str	r2, [r3, #4]
  403c2c:	f000 faae 	bl	40418c <__malloc_unlock>
  403c30:	3408      	adds	r4, #8
  403c32:	4620      	mov	r0, r4
  403c34:	b003      	add	sp, #12
  403c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c3a:	68bc      	ldr	r4, [r7, #8]
  403c3c:	6863      	ldr	r3, [r4, #4]
  403c3e:	f023 0803 	bic.w	r8, r3, #3
  403c42:	45b0      	cmp	r8, r6
  403c44:	d304      	bcc.n	403c50 <_malloc_r+0x200>
  403c46:	eba8 0306 	sub.w	r3, r8, r6
  403c4a:	2b0f      	cmp	r3, #15
  403c4c:	f300 8085 	bgt.w	403d5a <_malloc_r+0x30a>
  403c50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403dac <_malloc_r+0x35c>
  403c54:	4b50      	ldr	r3, [pc, #320]	; (403d98 <_malloc_r+0x348>)
  403c56:	f8d9 2000 	ldr.w	r2, [r9]
  403c5a:	681b      	ldr	r3, [r3, #0]
  403c5c:	3201      	adds	r2, #1
  403c5e:	4433      	add	r3, r6
  403c60:	eb04 0a08 	add.w	sl, r4, r8
  403c64:	f000 8155 	beq.w	403f12 <_malloc_r+0x4c2>
  403c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403c6c:	330f      	adds	r3, #15
  403c6e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403c72:	f02b 0b0f 	bic.w	fp, fp, #15
  403c76:	4659      	mov	r1, fp
  403c78:	4628      	mov	r0, r5
  403c7a:	f000 fa8d 	bl	404198 <_sbrk_r>
  403c7e:	1c41      	adds	r1, r0, #1
  403c80:	4602      	mov	r2, r0
  403c82:	f000 80fc 	beq.w	403e7e <_malloc_r+0x42e>
  403c86:	4582      	cmp	sl, r0
  403c88:	f200 80f7 	bhi.w	403e7a <_malloc_r+0x42a>
  403c8c:	4b43      	ldr	r3, [pc, #268]	; (403d9c <_malloc_r+0x34c>)
  403c8e:	6819      	ldr	r1, [r3, #0]
  403c90:	4459      	add	r1, fp
  403c92:	6019      	str	r1, [r3, #0]
  403c94:	f000 814d 	beq.w	403f32 <_malloc_r+0x4e2>
  403c98:	f8d9 0000 	ldr.w	r0, [r9]
  403c9c:	3001      	adds	r0, #1
  403c9e:	bf1b      	ittet	ne
  403ca0:	eba2 0a0a 	subne.w	sl, r2, sl
  403ca4:	4451      	addne	r1, sl
  403ca6:	f8c9 2000 	streq.w	r2, [r9]
  403caa:	6019      	strne	r1, [r3, #0]
  403cac:	f012 0107 	ands.w	r1, r2, #7
  403cb0:	f000 8115 	beq.w	403ede <_malloc_r+0x48e>
  403cb4:	f1c1 0008 	rsb	r0, r1, #8
  403cb8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403cbc:	4402      	add	r2, r0
  403cbe:	3108      	adds	r1, #8
  403cc0:	eb02 090b 	add.w	r9, r2, fp
  403cc4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403cc8:	eba1 0909 	sub.w	r9, r1, r9
  403ccc:	4649      	mov	r1, r9
  403cce:	4628      	mov	r0, r5
  403cd0:	9301      	str	r3, [sp, #4]
  403cd2:	9200      	str	r2, [sp, #0]
  403cd4:	f000 fa60 	bl	404198 <_sbrk_r>
  403cd8:	1c43      	adds	r3, r0, #1
  403cda:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403cde:	f000 8143 	beq.w	403f68 <_malloc_r+0x518>
  403ce2:	1a80      	subs	r0, r0, r2
  403ce4:	4448      	add	r0, r9
  403ce6:	f040 0001 	orr.w	r0, r0, #1
  403cea:	6819      	ldr	r1, [r3, #0]
  403cec:	60ba      	str	r2, [r7, #8]
  403cee:	4449      	add	r1, r9
  403cf0:	42bc      	cmp	r4, r7
  403cf2:	6050      	str	r0, [r2, #4]
  403cf4:	6019      	str	r1, [r3, #0]
  403cf6:	d017      	beq.n	403d28 <_malloc_r+0x2d8>
  403cf8:	f1b8 0f0f 	cmp.w	r8, #15
  403cfc:	f240 80fb 	bls.w	403ef6 <_malloc_r+0x4a6>
  403d00:	6860      	ldr	r0, [r4, #4]
  403d02:	f1a8 020c 	sub.w	r2, r8, #12
  403d06:	f022 0207 	bic.w	r2, r2, #7
  403d0a:	eb04 0e02 	add.w	lr, r4, r2
  403d0e:	f000 0001 	and.w	r0, r0, #1
  403d12:	f04f 0c05 	mov.w	ip, #5
  403d16:	4310      	orrs	r0, r2
  403d18:	2a0f      	cmp	r2, #15
  403d1a:	6060      	str	r0, [r4, #4]
  403d1c:	f8ce c004 	str.w	ip, [lr, #4]
  403d20:	f8ce c008 	str.w	ip, [lr, #8]
  403d24:	f200 8117 	bhi.w	403f56 <_malloc_r+0x506>
  403d28:	4b1d      	ldr	r3, [pc, #116]	; (403da0 <_malloc_r+0x350>)
  403d2a:	68bc      	ldr	r4, [r7, #8]
  403d2c:	681a      	ldr	r2, [r3, #0]
  403d2e:	4291      	cmp	r1, r2
  403d30:	bf88      	it	hi
  403d32:	6019      	strhi	r1, [r3, #0]
  403d34:	4b1b      	ldr	r3, [pc, #108]	; (403da4 <_malloc_r+0x354>)
  403d36:	681a      	ldr	r2, [r3, #0]
  403d38:	4291      	cmp	r1, r2
  403d3a:	6862      	ldr	r2, [r4, #4]
  403d3c:	bf88      	it	hi
  403d3e:	6019      	strhi	r1, [r3, #0]
  403d40:	f022 0203 	bic.w	r2, r2, #3
  403d44:	4296      	cmp	r6, r2
  403d46:	eba2 0306 	sub.w	r3, r2, r6
  403d4a:	d801      	bhi.n	403d50 <_malloc_r+0x300>
  403d4c:	2b0f      	cmp	r3, #15
  403d4e:	dc04      	bgt.n	403d5a <_malloc_r+0x30a>
  403d50:	4628      	mov	r0, r5
  403d52:	f000 fa1b 	bl	40418c <__malloc_unlock>
  403d56:	2400      	movs	r4, #0
  403d58:	e740      	b.n	403bdc <_malloc_r+0x18c>
  403d5a:	19a2      	adds	r2, r4, r6
  403d5c:	f043 0301 	orr.w	r3, r3, #1
  403d60:	f046 0601 	orr.w	r6, r6, #1
  403d64:	6066      	str	r6, [r4, #4]
  403d66:	4628      	mov	r0, r5
  403d68:	60ba      	str	r2, [r7, #8]
  403d6a:	6053      	str	r3, [r2, #4]
  403d6c:	f000 fa0e 	bl	40418c <__malloc_unlock>
  403d70:	3408      	adds	r4, #8
  403d72:	4620      	mov	r0, r4
  403d74:	b003      	add	sp, #12
  403d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d7a:	2b14      	cmp	r3, #20
  403d7c:	d971      	bls.n	403e62 <_malloc_r+0x412>
  403d7e:	2b54      	cmp	r3, #84	; 0x54
  403d80:	f200 80a3 	bhi.w	403eca <_malloc_r+0x47a>
  403d84:	0b33      	lsrs	r3, r6, #12
  403d86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403d8a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403d8e:	00c3      	lsls	r3, r0, #3
  403d90:	e680      	b.n	403a94 <_malloc_r+0x44>
  403d92:	bf00      	nop
  403d94:	20400438 	.word	0x20400438
  403d98:	20400bd0 	.word	0x20400bd0
  403d9c:	20400ba0 	.word	0x20400ba0
  403da0:	20400bc8 	.word	0x20400bc8
  403da4:	20400bcc 	.word	0x20400bcc
  403da8:	20400440 	.word	0x20400440
  403dac:	20400840 	.word	0x20400840
  403db0:	0a5a      	lsrs	r2, r3, #9
  403db2:	2a04      	cmp	r2, #4
  403db4:	d95b      	bls.n	403e6e <_malloc_r+0x41e>
  403db6:	2a14      	cmp	r2, #20
  403db8:	f200 80ae 	bhi.w	403f18 <_malloc_r+0x4c8>
  403dbc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403dc0:	00c9      	lsls	r1, r1, #3
  403dc2:	325b      	adds	r2, #91	; 0x5b
  403dc4:	eb07 0c01 	add.w	ip, r7, r1
  403dc8:	5879      	ldr	r1, [r7, r1]
  403dca:	f1ac 0c08 	sub.w	ip, ip, #8
  403dce:	458c      	cmp	ip, r1
  403dd0:	f000 8088 	beq.w	403ee4 <_malloc_r+0x494>
  403dd4:	684a      	ldr	r2, [r1, #4]
  403dd6:	f022 0203 	bic.w	r2, r2, #3
  403dda:	4293      	cmp	r3, r2
  403ddc:	d273      	bcs.n	403ec6 <_malloc_r+0x476>
  403dde:	6889      	ldr	r1, [r1, #8]
  403de0:	458c      	cmp	ip, r1
  403de2:	d1f7      	bne.n	403dd4 <_malloc_r+0x384>
  403de4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403de8:	687b      	ldr	r3, [r7, #4]
  403dea:	60e2      	str	r2, [r4, #12]
  403dec:	f8c4 c008 	str.w	ip, [r4, #8]
  403df0:	6094      	str	r4, [r2, #8]
  403df2:	f8cc 400c 	str.w	r4, [ip, #12]
  403df6:	e68f      	b.n	403b18 <_malloc_r+0xc8>
  403df8:	19a1      	adds	r1, r4, r6
  403dfa:	f046 0c01 	orr.w	ip, r6, #1
  403dfe:	f042 0601 	orr.w	r6, r2, #1
  403e02:	f8c4 c004 	str.w	ip, [r4, #4]
  403e06:	4628      	mov	r0, r5
  403e08:	6179      	str	r1, [r7, #20]
  403e0a:	6139      	str	r1, [r7, #16]
  403e0c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403e10:	f8c1 e008 	str.w	lr, [r1, #8]
  403e14:	604e      	str	r6, [r1, #4]
  403e16:	50e2      	str	r2, [r4, r3]
  403e18:	f000 f9b8 	bl	40418c <__malloc_unlock>
  403e1c:	3408      	adds	r4, #8
  403e1e:	e6dd      	b.n	403bdc <_malloc_r+0x18c>
  403e20:	687b      	ldr	r3, [r7, #4]
  403e22:	e679      	b.n	403b18 <_malloc_r+0xc8>
  403e24:	f108 0801 	add.w	r8, r8, #1
  403e28:	f018 0f03 	tst.w	r8, #3
  403e2c:	f10c 0c08 	add.w	ip, ip, #8
  403e30:	f47f ae85 	bne.w	403b3e <_malloc_r+0xee>
  403e34:	e02d      	b.n	403e92 <_malloc_r+0x442>
  403e36:	68dc      	ldr	r4, [r3, #12]
  403e38:	42a3      	cmp	r3, r4
  403e3a:	bf08      	it	eq
  403e3c:	3002      	addeq	r0, #2
  403e3e:	f43f ae3e 	beq.w	403abe <_malloc_r+0x6e>
  403e42:	e6bb      	b.n	403bbc <_malloc_r+0x16c>
  403e44:	4419      	add	r1, r3
  403e46:	461c      	mov	r4, r3
  403e48:	684a      	ldr	r2, [r1, #4]
  403e4a:	68db      	ldr	r3, [r3, #12]
  403e4c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403e50:	f042 0201 	orr.w	r2, r2, #1
  403e54:	604a      	str	r2, [r1, #4]
  403e56:	4628      	mov	r0, r5
  403e58:	60f3      	str	r3, [r6, #12]
  403e5a:	609e      	str	r6, [r3, #8]
  403e5c:	f000 f996 	bl	40418c <__malloc_unlock>
  403e60:	e6bc      	b.n	403bdc <_malloc_r+0x18c>
  403e62:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403e66:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403e6a:	00c3      	lsls	r3, r0, #3
  403e6c:	e612      	b.n	403a94 <_malloc_r+0x44>
  403e6e:	099a      	lsrs	r2, r3, #6
  403e70:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403e74:	00c9      	lsls	r1, r1, #3
  403e76:	3238      	adds	r2, #56	; 0x38
  403e78:	e7a4      	b.n	403dc4 <_malloc_r+0x374>
  403e7a:	42bc      	cmp	r4, r7
  403e7c:	d054      	beq.n	403f28 <_malloc_r+0x4d8>
  403e7e:	68bc      	ldr	r4, [r7, #8]
  403e80:	6862      	ldr	r2, [r4, #4]
  403e82:	f022 0203 	bic.w	r2, r2, #3
  403e86:	e75d      	b.n	403d44 <_malloc_r+0x2f4>
  403e88:	f859 3908 	ldr.w	r3, [r9], #-8
  403e8c:	4599      	cmp	r9, r3
  403e8e:	f040 8086 	bne.w	403f9e <_malloc_r+0x54e>
  403e92:	f010 0f03 	tst.w	r0, #3
  403e96:	f100 30ff 	add.w	r0, r0, #4294967295
  403e9a:	d1f5      	bne.n	403e88 <_malloc_r+0x438>
  403e9c:	687b      	ldr	r3, [r7, #4]
  403e9e:	ea23 0304 	bic.w	r3, r3, r4
  403ea2:	607b      	str	r3, [r7, #4]
  403ea4:	0064      	lsls	r4, r4, #1
  403ea6:	429c      	cmp	r4, r3
  403ea8:	f63f aec7 	bhi.w	403c3a <_malloc_r+0x1ea>
  403eac:	2c00      	cmp	r4, #0
  403eae:	f43f aec4 	beq.w	403c3a <_malloc_r+0x1ea>
  403eb2:	421c      	tst	r4, r3
  403eb4:	4640      	mov	r0, r8
  403eb6:	f47f ae3e 	bne.w	403b36 <_malloc_r+0xe6>
  403eba:	0064      	lsls	r4, r4, #1
  403ebc:	421c      	tst	r4, r3
  403ebe:	f100 0004 	add.w	r0, r0, #4
  403ec2:	d0fa      	beq.n	403eba <_malloc_r+0x46a>
  403ec4:	e637      	b.n	403b36 <_malloc_r+0xe6>
  403ec6:	468c      	mov	ip, r1
  403ec8:	e78c      	b.n	403de4 <_malloc_r+0x394>
  403eca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403ece:	d815      	bhi.n	403efc <_malloc_r+0x4ac>
  403ed0:	0bf3      	lsrs	r3, r6, #15
  403ed2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403ed6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403eda:	00c3      	lsls	r3, r0, #3
  403edc:	e5da      	b.n	403a94 <_malloc_r+0x44>
  403ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403ee2:	e6ed      	b.n	403cc0 <_malloc_r+0x270>
  403ee4:	687b      	ldr	r3, [r7, #4]
  403ee6:	1092      	asrs	r2, r2, #2
  403ee8:	2101      	movs	r1, #1
  403eea:	fa01 f202 	lsl.w	r2, r1, r2
  403eee:	4313      	orrs	r3, r2
  403ef0:	607b      	str	r3, [r7, #4]
  403ef2:	4662      	mov	r2, ip
  403ef4:	e779      	b.n	403dea <_malloc_r+0x39a>
  403ef6:	2301      	movs	r3, #1
  403ef8:	6053      	str	r3, [r2, #4]
  403efa:	e729      	b.n	403d50 <_malloc_r+0x300>
  403efc:	f240 5254 	movw	r2, #1364	; 0x554
  403f00:	4293      	cmp	r3, r2
  403f02:	d822      	bhi.n	403f4a <_malloc_r+0x4fa>
  403f04:	0cb3      	lsrs	r3, r6, #18
  403f06:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403f0a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403f0e:	00c3      	lsls	r3, r0, #3
  403f10:	e5c0      	b.n	403a94 <_malloc_r+0x44>
  403f12:	f103 0b10 	add.w	fp, r3, #16
  403f16:	e6ae      	b.n	403c76 <_malloc_r+0x226>
  403f18:	2a54      	cmp	r2, #84	; 0x54
  403f1a:	d829      	bhi.n	403f70 <_malloc_r+0x520>
  403f1c:	0b1a      	lsrs	r2, r3, #12
  403f1e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403f22:	00c9      	lsls	r1, r1, #3
  403f24:	326e      	adds	r2, #110	; 0x6e
  403f26:	e74d      	b.n	403dc4 <_malloc_r+0x374>
  403f28:	4b20      	ldr	r3, [pc, #128]	; (403fac <_malloc_r+0x55c>)
  403f2a:	6819      	ldr	r1, [r3, #0]
  403f2c:	4459      	add	r1, fp
  403f2e:	6019      	str	r1, [r3, #0]
  403f30:	e6b2      	b.n	403c98 <_malloc_r+0x248>
  403f32:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403f36:	2800      	cmp	r0, #0
  403f38:	f47f aeae 	bne.w	403c98 <_malloc_r+0x248>
  403f3c:	eb08 030b 	add.w	r3, r8, fp
  403f40:	68ba      	ldr	r2, [r7, #8]
  403f42:	f043 0301 	orr.w	r3, r3, #1
  403f46:	6053      	str	r3, [r2, #4]
  403f48:	e6ee      	b.n	403d28 <_malloc_r+0x2d8>
  403f4a:	207f      	movs	r0, #127	; 0x7f
  403f4c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403f50:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403f54:	e59e      	b.n	403a94 <_malloc_r+0x44>
  403f56:	f104 0108 	add.w	r1, r4, #8
  403f5a:	4628      	mov	r0, r5
  403f5c:	9300      	str	r3, [sp, #0]
  403f5e:	f003 fde7 	bl	407b30 <_free_r>
  403f62:	9b00      	ldr	r3, [sp, #0]
  403f64:	6819      	ldr	r1, [r3, #0]
  403f66:	e6df      	b.n	403d28 <_malloc_r+0x2d8>
  403f68:	2001      	movs	r0, #1
  403f6a:	f04f 0900 	mov.w	r9, #0
  403f6e:	e6bc      	b.n	403cea <_malloc_r+0x29a>
  403f70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403f74:	d805      	bhi.n	403f82 <_malloc_r+0x532>
  403f76:	0bda      	lsrs	r2, r3, #15
  403f78:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403f7c:	00c9      	lsls	r1, r1, #3
  403f7e:	3277      	adds	r2, #119	; 0x77
  403f80:	e720      	b.n	403dc4 <_malloc_r+0x374>
  403f82:	f240 5154 	movw	r1, #1364	; 0x554
  403f86:	428a      	cmp	r2, r1
  403f88:	d805      	bhi.n	403f96 <_malloc_r+0x546>
  403f8a:	0c9a      	lsrs	r2, r3, #18
  403f8c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403f90:	00c9      	lsls	r1, r1, #3
  403f92:	327c      	adds	r2, #124	; 0x7c
  403f94:	e716      	b.n	403dc4 <_malloc_r+0x374>
  403f96:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403f9a:	227e      	movs	r2, #126	; 0x7e
  403f9c:	e712      	b.n	403dc4 <_malloc_r+0x374>
  403f9e:	687b      	ldr	r3, [r7, #4]
  403fa0:	e780      	b.n	403ea4 <_malloc_r+0x454>
  403fa2:	08f0      	lsrs	r0, r6, #3
  403fa4:	f106 0308 	add.w	r3, r6, #8
  403fa8:	e600      	b.n	403bac <_malloc_r+0x15c>
  403faa:	bf00      	nop
  403fac:	20400ba0 	.word	0x20400ba0

00403fb0 <memcpy>:
  403fb0:	4684      	mov	ip, r0
  403fb2:	ea41 0300 	orr.w	r3, r1, r0
  403fb6:	f013 0303 	ands.w	r3, r3, #3
  403fba:	d16d      	bne.n	404098 <memcpy+0xe8>
  403fbc:	3a40      	subs	r2, #64	; 0x40
  403fbe:	d341      	bcc.n	404044 <memcpy+0x94>
  403fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  403fc4:	f840 3b04 	str.w	r3, [r0], #4
  403fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  403fcc:	f840 3b04 	str.w	r3, [r0], #4
  403fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  403fd4:	f840 3b04 	str.w	r3, [r0], #4
  403fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  403fdc:	f840 3b04 	str.w	r3, [r0], #4
  403fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  403fe4:	f840 3b04 	str.w	r3, [r0], #4
  403fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  403fec:	f840 3b04 	str.w	r3, [r0], #4
  403ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ff4:	f840 3b04 	str.w	r3, [r0], #4
  403ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  403ffc:	f840 3b04 	str.w	r3, [r0], #4
  404000:	f851 3b04 	ldr.w	r3, [r1], #4
  404004:	f840 3b04 	str.w	r3, [r0], #4
  404008:	f851 3b04 	ldr.w	r3, [r1], #4
  40400c:	f840 3b04 	str.w	r3, [r0], #4
  404010:	f851 3b04 	ldr.w	r3, [r1], #4
  404014:	f840 3b04 	str.w	r3, [r0], #4
  404018:	f851 3b04 	ldr.w	r3, [r1], #4
  40401c:	f840 3b04 	str.w	r3, [r0], #4
  404020:	f851 3b04 	ldr.w	r3, [r1], #4
  404024:	f840 3b04 	str.w	r3, [r0], #4
  404028:	f851 3b04 	ldr.w	r3, [r1], #4
  40402c:	f840 3b04 	str.w	r3, [r0], #4
  404030:	f851 3b04 	ldr.w	r3, [r1], #4
  404034:	f840 3b04 	str.w	r3, [r0], #4
  404038:	f851 3b04 	ldr.w	r3, [r1], #4
  40403c:	f840 3b04 	str.w	r3, [r0], #4
  404040:	3a40      	subs	r2, #64	; 0x40
  404042:	d2bd      	bcs.n	403fc0 <memcpy+0x10>
  404044:	3230      	adds	r2, #48	; 0x30
  404046:	d311      	bcc.n	40406c <memcpy+0xbc>
  404048:	f851 3b04 	ldr.w	r3, [r1], #4
  40404c:	f840 3b04 	str.w	r3, [r0], #4
  404050:	f851 3b04 	ldr.w	r3, [r1], #4
  404054:	f840 3b04 	str.w	r3, [r0], #4
  404058:	f851 3b04 	ldr.w	r3, [r1], #4
  40405c:	f840 3b04 	str.w	r3, [r0], #4
  404060:	f851 3b04 	ldr.w	r3, [r1], #4
  404064:	f840 3b04 	str.w	r3, [r0], #4
  404068:	3a10      	subs	r2, #16
  40406a:	d2ed      	bcs.n	404048 <memcpy+0x98>
  40406c:	320c      	adds	r2, #12
  40406e:	d305      	bcc.n	40407c <memcpy+0xcc>
  404070:	f851 3b04 	ldr.w	r3, [r1], #4
  404074:	f840 3b04 	str.w	r3, [r0], #4
  404078:	3a04      	subs	r2, #4
  40407a:	d2f9      	bcs.n	404070 <memcpy+0xc0>
  40407c:	3204      	adds	r2, #4
  40407e:	d008      	beq.n	404092 <memcpy+0xe2>
  404080:	07d2      	lsls	r2, r2, #31
  404082:	bf1c      	itt	ne
  404084:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404088:	f800 3b01 	strbne.w	r3, [r0], #1
  40408c:	d301      	bcc.n	404092 <memcpy+0xe2>
  40408e:	880b      	ldrh	r3, [r1, #0]
  404090:	8003      	strh	r3, [r0, #0]
  404092:	4660      	mov	r0, ip
  404094:	4770      	bx	lr
  404096:	bf00      	nop
  404098:	2a08      	cmp	r2, #8
  40409a:	d313      	bcc.n	4040c4 <memcpy+0x114>
  40409c:	078b      	lsls	r3, r1, #30
  40409e:	d08d      	beq.n	403fbc <memcpy+0xc>
  4040a0:	f010 0303 	ands.w	r3, r0, #3
  4040a4:	d08a      	beq.n	403fbc <memcpy+0xc>
  4040a6:	f1c3 0304 	rsb	r3, r3, #4
  4040aa:	1ad2      	subs	r2, r2, r3
  4040ac:	07db      	lsls	r3, r3, #31
  4040ae:	bf1c      	itt	ne
  4040b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4040b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4040b8:	d380      	bcc.n	403fbc <memcpy+0xc>
  4040ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4040be:	f820 3b02 	strh.w	r3, [r0], #2
  4040c2:	e77b      	b.n	403fbc <memcpy+0xc>
  4040c4:	3a04      	subs	r2, #4
  4040c6:	d3d9      	bcc.n	40407c <memcpy+0xcc>
  4040c8:	3a01      	subs	r2, #1
  4040ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4040ce:	f800 3b01 	strb.w	r3, [r0], #1
  4040d2:	d2f9      	bcs.n	4040c8 <memcpy+0x118>
  4040d4:	780b      	ldrb	r3, [r1, #0]
  4040d6:	7003      	strb	r3, [r0, #0]
  4040d8:	784b      	ldrb	r3, [r1, #1]
  4040da:	7043      	strb	r3, [r0, #1]
  4040dc:	788b      	ldrb	r3, [r1, #2]
  4040de:	7083      	strb	r3, [r0, #2]
  4040e0:	4660      	mov	r0, ip
  4040e2:	4770      	bx	lr

004040e4 <memset>:
  4040e4:	b470      	push	{r4, r5, r6}
  4040e6:	0786      	lsls	r6, r0, #30
  4040e8:	d046      	beq.n	404178 <memset+0x94>
  4040ea:	1e54      	subs	r4, r2, #1
  4040ec:	2a00      	cmp	r2, #0
  4040ee:	d041      	beq.n	404174 <memset+0x90>
  4040f0:	b2ca      	uxtb	r2, r1
  4040f2:	4603      	mov	r3, r0
  4040f4:	e002      	b.n	4040fc <memset+0x18>
  4040f6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4040fa:	d33b      	bcc.n	404174 <memset+0x90>
  4040fc:	f803 2b01 	strb.w	r2, [r3], #1
  404100:	079d      	lsls	r5, r3, #30
  404102:	d1f8      	bne.n	4040f6 <memset+0x12>
  404104:	2c03      	cmp	r4, #3
  404106:	d92e      	bls.n	404166 <memset+0x82>
  404108:	b2cd      	uxtb	r5, r1
  40410a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40410e:	2c0f      	cmp	r4, #15
  404110:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404114:	d919      	bls.n	40414a <memset+0x66>
  404116:	f103 0210 	add.w	r2, r3, #16
  40411a:	4626      	mov	r6, r4
  40411c:	3e10      	subs	r6, #16
  40411e:	2e0f      	cmp	r6, #15
  404120:	f842 5c10 	str.w	r5, [r2, #-16]
  404124:	f842 5c0c 	str.w	r5, [r2, #-12]
  404128:	f842 5c08 	str.w	r5, [r2, #-8]
  40412c:	f842 5c04 	str.w	r5, [r2, #-4]
  404130:	f102 0210 	add.w	r2, r2, #16
  404134:	d8f2      	bhi.n	40411c <memset+0x38>
  404136:	f1a4 0210 	sub.w	r2, r4, #16
  40413a:	f022 020f 	bic.w	r2, r2, #15
  40413e:	f004 040f 	and.w	r4, r4, #15
  404142:	3210      	adds	r2, #16
  404144:	2c03      	cmp	r4, #3
  404146:	4413      	add	r3, r2
  404148:	d90d      	bls.n	404166 <memset+0x82>
  40414a:	461e      	mov	r6, r3
  40414c:	4622      	mov	r2, r4
  40414e:	3a04      	subs	r2, #4
  404150:	2a03      	cmp	r2, #3
  404152:	f846 5b04 	str.w	r5, [r6], #4
  404156:	d8fa      	bhi.n	40414e <memset+0x6a>
  404158:	1f22      	subs	r2, r4, #4
  40415a:	f022 0203 	bic.w	r2, r2, #3
  40415e:	3204      	adds	r2, #4
  404160:	4413      	add	r3, r2
  404162:	f004 0403 	and.w	r4, r4, #3
  404166:	b12c      	cbz	r4, 404174 <memset+0x90>
  404168:	b2c9      	uxtb	r1, r1
  40416a:	441c      	add	r4, r3
  40416c:	f803 1b01 	strb.w	r1, [r3], #1
  404170:	429c      	cmp	r4, r3
  404172:	d1fb      	bne.n	40416c <memset+0x88>
  404174:	bc70      	pop	{r4, r5, r6}
  404176:	4770      	bx	lr
  404178:	4614      	mov	r4, r2
  40417a:	4603      	mov	r3, r0
  40417c:	e7c2      	b.n	404104 <memset+0x20>
  40417e:	bf00      	nop

00404180 <__malloc_lock>:
  404180:	4801      	ldr	r0, [pc, #4]	; (404188 <__malloc_lock+0x8>)
  404182:	f003 bf7d 	b.w	408080 <__retarget_lock_acquire_recursive>
  404186:	bf00      	nop
  404188:	20400cf8 	.word	0x20400cf8

0040418c <__malloc_unlock>:
  40418c:	4801      	ldr	r0, [pc, #4]	; (404194 <__malloc_unlock+0x8>)
  40418e:	f003 bf79 	b.w	408084 <__retarget_lock_release_recursive>
  404192:	bf00      	nop
  404194:	20400cf8 	.word	0x20400cf8

00404198 <_sbrk_r>:
  404198:	b538      	push	{r3, r4, r5, lr}
  40419a:	4c07      	ldr	r4, [pc, #28]	; (4041b8 <_sbrk_r+0x20>)
  40419c:	2300      	movs	r3, #0
  40419e:	4605      	mov	r5, r0
  4041a0:	4608      	mov	r0, r1
  4041a2:	6023      	str	r3, [r4, #0]
  4041a4:	f7fc ff34 	bl	401010 <_sbrk>
  4041a8:	1c43      	adds	r3, r0, #1
  4041aa:	d000      	beq.n	4041ae <_sbrk_r+0x16>
  4041ac:	bd38      	pop	{r3, r4, r5, pc}
  4041ae:	6823      	ldr	r3, [r4, #0]
  4041b0:	2b00      	cmp	r3, #0
  4041b2:	d0fb      	beq.n	4041ac <_sbrk_r+0x14>
  4041b4:	602b      	str	r3, [r5, #0]
  4041b6:	bd38      	pop	{r3, r4, r5, pc}
  4041b8:	20400d0c 	.word	0x20400d0c

004041bc <setbuf>:
  4041bc:	2900      	cmp	r1, #0
  4041be:	bf0c      	ite	eq
  4041c0:	2202      	moveq	r2, #2
  4041c2:	2200      	movne	r2, #0
  4041c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4041c8:	f000 b800 	b.w	4041cc <setvbuf>

004041cc <setvbuf>:
  4041cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4041d0:	4c61      	ldr	r4, [pc, #388]	; (404358 <setvbuf+0x18c>)
  4041d2:	6825      	ldr	r5, [r4, #0]
  4041d4:	b083      	sub	sp, #12
  4041d6:	4604      	mov	r4, r0
  4041d8:	460f      	mov	r7, r1
  4041da:	4690      	mov	r8, r2
  4041dc:	461e      	mov	r6, r3
  4041de:	b115      	cbz	r5, 4041e6 <setvbuf+0x1a>
  4041e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041e2:	2b00      	cmp	r3, #0
  4041e4:	d064      	beq.n	4042b0 <setvbuf+0xe4>
  4041e6:	f1b8 0f02 	cmp.w	r8, #2
  4041ea:	d006      	beq.n	4041fa <setvbuf+0x2e>
  4041ec:	f1b8 0f01 	cmp.w	r8, #1
  4041f0:	f200 809f 	bhi.w	404332 <setvbuf+0x166>
  4041f4:	2e00      	cmp	r6, #0
  4041f6:	f2c0 809c 	blt.w	404332 <setvbuf+0x166>
  4041fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4041fc:	07d8      	lsls	r0, r3, #31
  4041fe:	d534      	bpl.n	40426a <setvbuf+0x9e>
  404200:	4621      	mov	r1, r4
  404202:	4628      	mov	r0, r5
  404204:	f003 fb16 	bl	407834 <_fflush_r>
  404208:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40420a:	b141      	cbz	r1, 40421e <setvbuf+0x52>
  40420c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404210:	4299      	cmp	r1, r3
  404212:	d002      	beq.n	40421a <setvbuf+0x4e>
  404214:	4628      	mov	r0, r5
  404216:	f003 fc8b 	bl	407b30 <_free_r>
  40421a:	2300      	movs	r3, #0
  40421c:	6323      	str	r3, [r4, #48]	; 0x30
  40421e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404222:	2200      	movs	r2, #0
  404224:	61a2      	str	r2, [r4, #24]
  404226:	6062      	str	r2, [r4, #4]
  404228:	061a      	lsls	r2, r3, #24
  40422a:	d43a      	bmi.n	4042a2 <setvbuf+0xd6>
  40422c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404230:	f023 0303 	bic.w	r3, r3, #3
  404234:	f1b8 0f02 	cmp.w	r8, #2
  404238:	81a3      	strh	r3, [r4, #12]
  40423a:	d01d      	beq.n	404278 <setvbuf+0xac>
  40423c:	ab01      	add	r3, sp, #4
  40423e:	466a      	mov	r2, sp
  404240:	4621      	mov	r1, r4
  404242:	4628      	mov	r0, r5
  404244:	f003 ff20 	bl	408088 <__swhatbuf_r>
  404248:	89a3      	ldrh	r3, [r4, #12]
  40424a:	4318      	orrs	r0, r3
  40424c:	81a0      	strh	r0, [r4, #12]
  40424e:	2e00      	cmp	r6, #0
  404250:	d132      	bne.n	4042b8 <setvbuf+0xec>
  404252:	9e00      	ldr	r6, [sp, #0]
  404254:	4630      	mov	r0, r6
  404256:	f7ff fbeb 	bl	403a30 <malloc>
  40425a:	4607      	mov	r7, r0
  40425c:	2800      	cmp	r0, #0
  40425e:	d06b      	beq.n	404338 <setvbuf+0x16c>
  404260:	89a3      	ldrh	r3, [r4, #12]
  404262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404266:	81a3      	strh	r3, [r4, #12]
  404268:	e028      	b.n	4042bc <setvbuf+0xf0>
  40426a:	89a3      	ldrh	r3, [r4, #12]
  40426c:	0599      	lsls	r1, r3, #22
  40426e:	d4c7      	bmi.n	404200 <setvbuf+0x34>
  404270:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404272:	f003 ff05 	bl	408080 <__retarget_lock_acquire_recursive>
  404276:	e7c3      	b.n	404200 <setvbuf+0x34>
  404278:	2500      	movs	r5, #0
  40427a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40427c:	2600      	movs	r6, #0
  40427e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404282:	f043 0302 	orr.w	r3, r3, #2
  404286:	2001      	movs	r0, #1
  404288:	60a6      	str	r6, [r4, #8]
  40428a:	07ce      	lsls	r6, r1, #31
  40428c:	81a3      	strh	r3, [r4, #12]
  40428e:	6022      	str	r2, [r4, #0]
  404290:	6122      	str	r2, [r4, #16]
  404292:	6160      	str	r0, [r4, #20]
  404294:	d401      	bmi.n	40429a <setvbuf+0xce>
  404296:	0598      	lsls	r0, r3, #22
  404298:	d53e      	bpl.n	404318 <setvbuf+0x14c>
  40429a:	4628      	mov	r0, r5
  40429c:	b003      	add	sp, #12
  40429e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042a2:	6921      	ldr	r1, [r4, #16]
  4042a4:	4628      	mov	r0, r5
  4042a6:	f003 fc43 	bl	407b30 <_free_r>
  4042aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042ae:	e7bd      	b.n	40422c <setvbuf+0x60>
  4042b0:	4628      	mov	r0, r5
  4042b2:	f003 fb17 	bl	4078e4 <__sinit>
  4042b6:	e796      	b.n	4041e6 <setvbuf+0x1a>
  4042b8:	2f00      	cmp	r7, #0
  4042ba:	d0cb      	beq.n	404254 <setvbuf+0x88>
  4042bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4042be:	2b00      	cmp	r3, #0
  4042c0:	d033      	beq.n	40432a <setvbuf+0x15e>
  4042c2:	9b00      	ldr	r3, [sp, #0]
  4042c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4042c8:	6027      	str	r7, [r4, #0]
  4042ca:	429e      	cmp	r6, r3
  4042cc:	bf1c      	itt	ne
  4042ce:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4042d2:	81a2      	strhne	r2, [r4, #12]
  4042d4:	f1b8 0f01 	cmp.w	r8, #1
  4042d8:	bf04      	itt	eq
  4042da:	f042 0201 	orreq.w	r2, r2, #1
  4042de:	81a2      	strheq	r2, [r4, #12]
  4042e0:	b292      	uxth	r2, r2
  4042e2:	f012 0308 	ands.w	r3, r2, #8
  4042e6:	6127      	str	r7, [r4, #16]
  4042e8:	6166      	str	r6, [r4, #20]
  4042ea:	d00e      	beq.n	40430a <setvbuf+0x13e>
  4042ec:	07d1      	lsls	r1, r2, #31
  4042ee:	d51a      	bpl.n	404326 <setvbuf+0x15a>
  4042f0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4042f2:	4276      	negs	r6, r6
  4042f4:	2300      	movs	r3, #0
  4042f6:	f015 0501 	ands.w	r5, r5, #1
  4042fa:	61a6      	str	r6, [r4, #24]
  4042fc:	60a3      	str	r3, [r4, #8]
  4042fe:	d009      	beq.n	404314 <setvbuf+0x148>
  404300:	2500      	movs	r5, #0
  404302:	4628      	mov	r0, r5
  404304:	b003      	add	sp, #12
  404306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40430a:	60a3      	str	r3, [r4, #8]
  40430c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40430e:	f015 0501 	ands.w	r5, r5, #1
  404312:	d1f5      	bne.n	404300 <setvbuf+0x134>
  404314:	0593      	lsls	r3, r2, #22
  404316:	d4c0      	bmi.n	40429a <setvbuf+0xce>
  404318:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40431a:	f003 feb3 	bl	408084 <__retarget_lock_release_recursive>
  40431e:	4628      	mov	r0, r5
  404320:	b003      	add	sp, #12
  404322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404326:	60a6      	str	r6, [r4, #8]
  404328:	e7f0      	b.n	40430c <setvbuf+0x140>
  40432a:	4628      	mov	r0, r5
  40432c:	f003 fada 	bl	4078e4 <__sinit>
  404330:	e7c7      	b.n	4042c2 <setvbuf+0xf6>
  404332:	f04f 35ff 	mov.w	r5, #4294967295
  404336:	e7b0      	b.n	40429a <setvbuf+0xce>
  404338:	f8dd 9000 	ldr.w	r9, [sp]
  40433c:	45b1      	cmp	r9, r6
  40433e:	d004      	beq.n	40434a <setvbuf+0x17e>
  404340:	4648      	mov	r0, r9
  404342:	f7ff fb75 	bl	403a30 <malloc>
  404346:	4607      	mov	r7, r0
  404348:	b920      	cbnz	r0, 404354 <setvbuf+0x188>
  40434a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40434e:	f04f 35ff 	mov.w	r5, #4294967295
  404352:	e792      	b.n	40427a <setvbuf+0xae>
  404354:	464e      	mov	r6, r9
  404356:	e783      	b.n	404260 <setvbuf+0x94>
  404358:	2040000c 	.word	0x2040000c

0040435c <sprintf>:
  40435c:	b40e      	push	{r1, r2, r3}
  40435e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404360:	b09c      	sub	sp, #112	; 0x70
  404362:	ab21      	add	r3, sp, #132	; 0x84
  404364:	490f      	ldr	r1, [pc, #60]	; (4043a4 <sprintf+0x48>)
  404366:	f853 2b04 	ldr.w	r2, [r3], #4
  40436a:	9301      	str	r3, [sp, #4]
  40436c:	4605      	mov	r5, r0
  40436e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404372:	6808      	ldr	r0, [r1, #0]
  404374:	9502      	str	r5, [sp, #8]
  404376:	f44f 7702 	mov.w	r7, #520	; 0x208
  40437a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40437e:	a902      	add	r1, sp, #8
  404380:	9506      	str	r5, [sp, #24]
  404382:	f8ad 7014 	strh.w	r7, [sp, #20]
  404386:	9404      	str	r4, [sp, #16]
  404388:	9407      	str	r4, [sp, #28]
  40438a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40438e:	f000 f885 	bl	40449c <_svfprintf_r>
  404392:	9b02      	ldr	r3, [sp, #8]
  404394:	2200      	movs	r2, #0
  404396:	701a      	strb	r2, [r3, #0]
  404398:	b01c      	add	sp, #112	; 0x70
  40439a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40439e:	b003      	add	sp, #12
  4043a0:	4770      	bx	lr
  4043a2:	bf00      	nop
  4043a4:	2040000c 	.word	0x2040000c
	...

004043c0 <strlen>:
  4043c0:	f890 f000 	pld	[r0]
  4043c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4043c8:	f020 0107 	bic.w	r1, r0, #7
  4043cc:	f06f 0c00 	mvn.w	ip, #0
  4043d0:	f010 0407 	ands.w	r4, r0, #7
  4043d4:	f891 f020 	pld	[r1, #32]
  4043d8:	f040 8049 	bne.w	40446e <strlen+0xae>
  4043dc:	f04f 0400 	mov.w	r4, #0
  4043e0:	f06f 0007 	mvn.w	r0, #7
  4043e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4043ec:	f100 0008 	add.w	r0, r0, #8
  4043f0:	fa82 f24c 	uadd8	r2, r2, ip
  4043f4:	faa4 f28c 	sel	r2, r4, ip
  4043f8:	fa83 f34c 	uadd8	r3, r3, ip
  4043fc:	faa2 f38c 	sel	r3, r2, ip
  404400:	bb4b      	cbnz	r3, 404456 <strlen+0x96>
  404402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404406:	fa82 f24c 	uadd8	r2, r2, ip
  40440a:	f100 0008 	add.w	r0, r0, #8
  40440e:	faa4 f28c 	sel	r2, r4, ip
  404412:	fa83 f34c 	uadd8	r3, r3, ip
  404416:	faa2 f38c 	sel	r3, r2, ip
  40441a:	b9e3      	cbnz	r3, 404456 <strlen+0x96>
  40441c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404420:	fa82 f24c 	uadd8	r2, r2, ip
  404424:	f100 0008 	add.w	r0, r0, #8
  404428:	faa4 f28c 	sel	r2, r4, ip
  40442c:	fa83 f34c 	uadd8	r3, r3, ip
  404430:	faa2 f38c 	sel	r3, r2, ip
  404434:	b97b      	cbnz	r3, 404456 <strlen+0x96>
  404436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40443a:	f101 0120 	add.w	r1, r1, #32
  40443e:	fa82 f24c 	uadd8	r2, r2, ip
  404442:	f100 0008 	add.w	r0, r0, #8
  404446:	faa4 f28c 	sel	r2, r4, ip
  40444a:	fa83 f34c 	uadd8	r3, r3, ip
  40444e:	faa2 f38c 	sel	r3, r2, ip
  404452:	2b00      	cmp	r3, #0
  404454:	d0c6      	beq.n	4043e4 <strlen+0x24>
  404456:	2a00      	cmp	r2, #0
  404458:	bf04      	itt	eq
  40445a:	3004      	addeq	r0, #4
  40445c:	461a      	moveq	r2, r3
  40445e:	ba12      	rev	r2, r2
  404460:	fab2 f282 	clz	r2, r2
  404464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40446c:	4770      	bx	lr
  40446e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404472:	f004 0503 	and.w	r5, r4, #3
  404476:	f1c4 0000 	rsb	r0, r4, #0
  40447a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40447e:	f014 0f04 	tst.w	r4, #4
  404482:	f891 f040 	pld	[r1, #64]	; 0x40
  404486:	fa0c f505 	lsl.w	r5, ip, r5
  40448a:	ea62 0205 	orn	r2, r2, r5
  40448e:	bf1c      	itt	ne
  404490:	ea63 0305 	ornne	r3, r3, r5
  404494:	4662      	movne	r2, ip
  404496:	f04f 0400 	mov.w	r4, #0
  40449a:	e7a9      	b.n	4043f0 <strlen+0x30>

0040449c <_svfprintf_r>:
  40449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044a0:	b0c3      	sub	sp, #268	; 0x10c
  4044a2:	460c      	mov	r4, r1
  4044a4:	910b      	str	r1, [sp, #44]	; 0x2c
  4044a6:	4692      	mov	sl, r2
  4044a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4044aa:	900c      	str	r0, [sp, #48]	; 0x30
  4044ac:	f003 fdd6 	bl	40805c <_localeconv_r>
  4044b0:	6803      	ldr	r3, [r0, #0]
  4044b2:	931a      	str	r3, [sp, #104]	; 0x68
  4044b4:	4618      	mov	r0, r3
  4044b6:	f7ff ff83 	bl	4043c0 <strlen>
  4044ba:	89a3      	ldrh	r3, [r4, #12]
  4044bc:	9019      	str	r0, [sp, #100]	; 0x64
  4044be:	0619      	lsls	r1, r3, #24
  4044c0:	d503      	bpl.n	4044ca <_svfprintf_r+0x2e>
  4044c2:	6923      	ldr	r3, [r4, #16]
  4044c4:	2b00      	cmp	r3, #0
  4044c6:	f001 8003 	beq.w	4054d0 <_svfprintf_r+0x1034>
  4044ca:	2300      	movs	r3, #0
  4044cc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4044d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4044d2:	9315      	str	r3, [sp, #84]	; 0x54
  4044d4:	9314      	str	r3, [sp, #80]	; 0x50
  4044d6:	9327      	str	r3, [sp, #156]	; 0x9c
  4044d8:	9326      	str	r3, [sp, #152]	; 0x98
  4044da:	9318      	str	r3, [sp, #96]	; 0x60
  4044dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4044de:	9309      	str	r3, [sp, #36]	; 0x24
  4044e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4044e4:	46c8      	mov	r8, r9
  4044e6:	9316      	str	r3, [sp, #88]	; 0x58
  4044e8:	9317      	str	r3, [sp, #92]	; 0x5c
  4044ea:	f89a 3000 	ldrb.w	r3, [sl]
  4044ee:	4654      	mov	r4, sl
  4044f0:	b1e3      	cbz	r3, 40452c <_svfprintf_r+0x90>
  4044f2:	2b25      	cmp	r3, #37	; 0x25
  4044f4:	d102      	bne.n	4044fc <_svfprintf_r+0x60>
  4044f6:	e019      	b.n	40452c <_svfprintf_r+0x90>
  4044f8:	2b25      	cmp	r3, #37	; 0x25
  4044fa:	d003      	beq.n	404504 <_svfprintf_r+0x68>
  4044fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404500:	2b00      	cmp	r3, #0
  404502:	d1f9      	bne.n	4044f8 <_svfprintf_r+0x5c>
  404504:	eba4 050a 	sub.w	r5, r4, sl
  404508:	b185      	cbz	r5, 40452c <_svfprintf_r+0x90>
  40450a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40450c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40450e:	f8c8 a000 	str.w	sl, [r8]
  404512:	3301      	adds	r3, #1
  404514:	442a      	add	r2, r5
  404516:	2b07      	cmp	r3, #7
  404518:	f8c8 5004 	str.w	r5, [r8, #4]
  40451c:	9227      	str	r2, [sp, #156]	; 0x9c
  40451e:	9326      	str	r3, [sp, #152]	; 0x98
  404520:	dc7f      	bgt.n	404622 <_svfprintf_r+0x186>
  404522:	f108 0808 	add.w	r8, r8, #8
  404526:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404528:	442b      	add	r3, r5
  40452a:	9309      	str	r3, [sp, #36]	; 0x24
  40452c:	7823      	ldrb	r3, [r4, #0]
  40452e:	2b00      	cmp	r3, #0
  404530:	d07f      	beq.n	404632 <_svfprintf_r+0x196>
  404532:	2300      	movs	r3, #0
  404534:	461a      	mov	r2, r3
  404536:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40453a:	4619      	mov	r1, r3
  40453c:	930d      	str	r3, [sp, #52]	; 0x34
  40453e:	469b      	mov	fp, r3
  404540:	f04f 30ff 	mov.w	r0, #4294967295
  404544:	7863      	ldrb	r3, [r4, #1]
  404546:	900a      	str	r0, [sp, #40]	; 0x28
  404548:	f104 0a01 	add.w	sl, r4, #1
  40454c:	f10a 0a01 	add.w	sl, sl, #1
  404550:	f1a3 0020 	sub.w	r0, r3, #32
  404554:	2858      	cmp	r0, #88	; 0x58
  404556:	f200 83c1 	bhi.w	404cdc <_svfprintf_r+0x840>
  40455a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40455e:	0238      	.short	0x0238
  404560:	03bf03bf 	.word	0x03bf03bf
  404564:	03bf0240 	.word	0x03bf0240
  404568:	03bf03bf 	.word	0x03bf03bf
  40456c:	03bf03bf 	.word	0x03bf03bf
  404570:	024503bf 	.word	0x024503bf
  404574:	03bf0203 	.word	0x03bf0203
  404578:	026b005d 	.word	0x026b005d
  40457c:	028603bf 	.word	0x028603bf
  404580:	039d039d 	.word	0x039d039d
  404584:	039d039d 	.word	0x039d039d
  404588:	039d039d 	.word	0x039d039d
  40458c:	039d039d 	.word	0x039d039d
  404590:	03bf039d 	.word	0x03bf039d
  404594:	03bf03bf 	.word	0x03bf03bf
  404598:	03bf03bf 	.word	0x03bf03bf
  40459c:	03bf03bf 	.word	0x03bf03bf
  4045a0:	03bf03bf 	.word	0x03bf03bf
  4045a4:	033703bf 	.word	0x033703bf
  4045a8:	03bf0357 	.word	0x03bf0357
  4045ac:	03bf0357 	.word	0x03bf0357
  4045b0:	03bf03bf 	.word	0x03bf03bf
  4045b4:	039803bf 	.word	0x039803bf
  4045b8:	03bf03bf 	.word	0x03bf03bf
  4045bc:	03bf03ad 	.word	0x03bf03ad
  4045c0:	03bf03bf 	.word	0x03bf03bf
  4045c4:	03bf03bf 	.word	0x03bf03bf
  4045c8:	03bf0259 	.word	0x03bf0259
  4045cc:	031e03bf 	.word	0x031e03bf
  4045d0:	03bf03bf 	.word	0x03bf03bf
  4045d4:	03bf03bf 	.word	0x03bf03bf
  4045d8:	03bf03bf 	.word	0x03bf03bf
  4045dc:	03bf03bf 	.word	0x03bf03bf
  4045e0:	03bf03bf 	.word	0x03bf03bf
  4045e4:	02db02c6 	.word	0x02db02c6
  4045e8:	03570357 	.word	0x03570357
  4045ec:	028b0357 	.word	0x028b0357
  4045f0:	03bf02db 	.word	0x03bf02db
  4045f4:	029003bf 	.word	0x029003bf
  4045f8:	029d03bf 	.word	0x029d03bf
  4045fc:	02b401cc 	.word	0x02b401cc
  404600:	03bf0208 	.word	0x03bf0208
  404604:	03bf01e1 	.word	0x03bf01e1
  404608:	03bf007e 	.word	0x03bf007e
  40460c:	020d03bf 	.word	0x020d03bf
  404610:	980d      	ldr	r0, [sp, #52]	; 0x34
  404612:	930f      	str	r3, [sp, #60]	; 0x3c
  404614:	4240      	negs	r0, r0
  404616:	900d      	str	r0, [sp, #52]	; 0x34
  404618:	f04b 0b04 	orr.w	fp, fp, #4
  40461c:	f89a 3000 	ldrb.w	r3, [sl]
  404620:	e794      	b.n	40454c <_svfprintf_r+0xb0>
  404622:	aa25      	add	r2, sp, #148	; 0x94
  404624:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404626:	980c      	ldr	r0, [sp, #48]	; 0x30
  404628:	f004 fb5a 	bl	408ce0 <__ssprint_r>
  40462c:	b940      	cbnz	r0, 404640 <_svfprintf_r+0x1a4>
  40462e:	46c8      	mov	r8, r9
  404630:	e779      	b.n	404526 <_svfprintf_r+0x8a>
  404632:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404634:	b123      	cbz	r3, 404640 <_svfprintf_r+0x1a4>
  404636:	980c      	ldr	r0, [sp, #48]	; 0x30
  404638:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40463a:	aa25      	add	r2, sp, #148	; 0x94
  40463c:	f004 fb50 	bl	408ce0 <__ssprint_r>
  404640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404642:	899b      	ldrh	r3, [r3, #12]
  404644:	f013 0f40 	tst.w	r3, #64	; 0x40
  404648:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40464a:	bf18      	it	ne
  40464c:	f04f 33ff 	movne.w	r3, #4294967295
  404650:	9309      	str	r3, [sp, #36]	; 0x24
  404652:	9809      	ldr	r0, [sp, #36]	; 0x24
  404654:	b043      	add	sp, #268	; 0x10c
  404656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40465a:	f01b 0f20 	tst.w	fp, #32
  40465e:	9311      	str	r3, [sp, #68]	; 0x44
  404660:	f040 81dd 	bne.w	404a1e <_svfprintf_r+0x582>
  404664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404666:	f01b 0f10 	tst.w	fp, #16
  40466a:	4613      	mov	r3, r2
  40466c:	f040 856e 	bne.w	40514c <_svfprintf_r+0xcb0>
  404670:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404674:	f000 856a 	beq.w	40514c <_svfprintf_r+0xcb0>
  404678:	8814      	ldrh	r4, [r2, #0]
  40467a:	3204      	adds	r2, #4
  40467c:	2500      	movs	r5, #0
  40467e:	2301      	movs	r3, #1
  404680:	920f      	str	r2, [sp, #60]	; 0x3c
  404682:	2700      	movs	r7, #0
  404684:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404688:	990a      	ldr	r1, [sp, #40]	; 0x28
  40468a:	1c4a      	adds	r2, r1, #1
  40468c:	f000 8265 	beq.w	404b5a <_svfprintf_r+0x6be>
  404690:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404694:	9207      	str	r2, [sp, #28]
  404696:	ea54 0205 	orrs.w	r2, r4, r5
  40469a:	f040 8264 	bne.w	404b66 <_svfprintf_r+0x6ca>
  40469e:	2900      	cmp	r1, #0
  4046a0:	f040 843c 	bne.w	404f1c <_svfprintf_r+0xa80>
  4046a4:	2b00      	cmp	r3, #0
  4046a6:	f040 84d7 	bne.w	405058 <_svfprintf_r+0xbbc>
  4046aa:	f01b 0301 	ands.w	r3, fp, #1
  4046ae:	930e      	str	r3, [sp, #56]	; 0x38
  4046b0:	f000 8604 	beq.w	4052bc <_svfprintf_r+0xe20>
  4046b4:	ae42      	add	r6, sp, #264	; 0x108
  4046b6:	2330      	movs	r3, #48	; 0x30
  4046b8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4046bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4046c0:	4293      	cmp	r3, r2
  4046c2:	bfb8      	it	lt
  4046c4:	4613      	movlt	r3, r2
  4046c6:	9308      	str	r3, [sp, #32]
  4046c8:	2300      	movs	r3, #0
  4046ca:	9312      	str	r3, [sp, #72]	; 0x48
  4046cc:	b117      	cbz	r7, 4046d4 <_svfprintf_r+0x238>
  4046ce:	9b08      	ldr	r3, [sp, #32]
  4046d0:	3301      	adds	r3, #1
  4046d2:	9308      	str	r3, [sp, #32]
  4046d4:	9b07      	ldr	r3, [sp, #28]
  4046d6:	f013 0302 	ands.w	r3, r3, #2
  4046da:	9310      	str	r3, [sp, #64]	; 0x40
  4046dc:	d002      	beq.n	4046e4 <_svfprintf_r+0x248>
  4046de:	9b08      	ldr	r3, [sp, #32]
  4046e0:	3302      	adds	r3, #2
  4046e2:	9308      	str	r3, [sp, #32]
  4046e4:	9b07      	ldr	r3, [sp, #28]
  4046e6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4046ea:	f040 830e 	bne.w	404d0a <_svfprintf_r+0x86e>
  4046ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4046f0:	9a08      	ldr	r2, [sp, #32]
  4046f2:	eba3 0b02 	sub.w	fp, r3, r2
  4046f6:	f1bb 0f00 	cmp.w	fp, #0
  4046fa:	f340 8306 	ble.w	404d0a <_svfprintf_r+0x86e>
  4046fe:	f1bb 0f10 	cmp.w	fp, #16
  404702:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404704:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404706:	dd29      	ble.n	40475c <_svfprintf_r+0x2c0>
  404708:	4643      	mov	r3, r8
  40470a:	4621      	mov	r1, r4
  40470c:	46a8      	mov	r8, r5
  40470e:	2710      	movs	r7, #16
  404710:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404712:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404714:	e006      	b.n	404724 <_svfprintf_r+0x288>
  404716:	f1ab 0b10 	sub.w	fp, fp, #16
  40471a:	f1bb 0f10 	cmp.w	fp, #16
  40471e:	f103 0308 	add.w	r3, r3, #8
  404722:	dd18      	ble.n	404756 <_svfprintf_r+0x2ba>
  404724:	3201      	adds	r2, #1
  404726:	48b7      	ldr	r0, [pc, #732]	; (404a04 <_svfprintf_r+0x568>)
  404728:	9226      	str	r2, [sp, #152]	; 0x98
  40472a:	3110      	adds	r1, #16
  40472c:	2a07      	cmp	r2, #7
  40472e:	9127      	str	r1, [sp, #156]	; 0x9c
  404730:	e883 0081 	stmia.w	r3, {r0, r7}
  404734:	ddef      	ble.n	404716 <_svfprintf_r+0x27a>
  404736:	aa25      	add	r2, sp, #148	; 0x94
  404738:	4629      	mov	r1, r5
  40473a:	4620      	mov	r0, r4
  40473c:	f004 fad0 	bl	408ce0 <__ssprint_r>
  404740:	2800      	cmp	r0, #0
  404742:	f47f af7d 	bne.w	404640 <_svfprintf_r+0x1a4>
  404746:	f1ab 0b10 	sub.w	fp, fp, #16
  40474a:	f1bb 0f10 	cmp.w	fp, #16
  40474e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404750:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404752:	464b      	mov	r3, r9
  404754:	dce6      	bgt.n	404724 <_svfprintf_r+0x288>
  404756:	4645      	mov	r5, r8
  404758:	460c      	mov	r4, r1
  40475a:	4698      	mov	r8, r3
  40475c:	3201      	adds	r2, #1
  40475e:	4ba9      	ldr	r3, [pc, #676]	; (404a04 <_svfprintf_r+0x568>)
  404760:	9226      	str	r2, [sp, #152]	; 0x98
  404762:	445c      	add	r4, fp
  404764:	2a07      	cmp	r2, #7
  404766:	9427      	str	r4, [sp, #156]	; 0x9c
  404768:	e888 0808 	stmia.w	r8, {r3, fp}
  40476c:	f300 8498 	bgt.w	4050a0 <_svfprintf_r+0xc04>
  404770:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404774:	f108 0808 	add.w	r8, r8, #8
  404778:	b177      	cbz	r7, 404798 <_svfprintf_r+0x2fc>
  40477a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40477c:	3301      	adds	r3, #1
  40477e:	3401      	adds	r4, #1
  404780:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404784:	2201      	movs	r2, #1
  404786:	2b07      	cmp	r3, #7
  404788:	9427      	str	r4, [sp, #156]	; 0x9c
  40478a:	9326      	str	r3, [sp, #152]	; 0x98
  40478c:	e888 0006 	stmia.w	r8, {r1, r2}
  404790:	f300 83db 	bgt.w	404f4a <_svfprintf_r+0xaae>
  404794:	f108 0808 	add.w	r8, r8, #8
  404798:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40479a:	b16b      	cbz	r3, 4047b8 <_svfprintf_r+0x31c>
  40479c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40479e:	3301      	adds	r3, #1
  4047a0:	3402      	adds	r4, #2
  4047a2:	a91e      	add	r1, sp, #120	; 0x78
  4047a4:	2202      	movs	r2, #2
  4047a6:	2b07      	cmp	r3, #7
  4047a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4047aa:	9326      	str	r3, [sp, #152]	; 0x98
  4047ac:	e888 0006 	stmia.w	r8, {r1, r2}
  4047b0:	f300 83d6 	bgt.w	404f60 <_svfprintf_r+0xac4>
  4047b4:	f108 0808 	add.w	r8, r8, #8
  4047b8:	2d80      	cmp	r5, #128	; 0x80
  4047ba:	f000 8315 	beq.w	404de8 <_svfprintf_r+0x94c>
  4047be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4047c2:	1a9f      	subs	r7, r3, r2
  4047c4:	2f00      	cmp	r7, #0
  4047c6:	dd36      	ble.n	404836 <_svfprintf_r+0x39a>
  4047c8:	2f10      	cmp	r7, #16
  4047ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047cc:	4d8e      	ldr	r5, [pc, #568]	; (404a08 <_svfprintf_r+0x56c>)
  4047ce:	dd27      	ble.n	404820 <_svfprintf_r+0x384>
  4047d0:	4642      	mov	r2, r8
  4047d2:	4621      	mov	r1, r4
  4047d4:	46b0      	mov	r8, r6
  4047d6:	f04f 0b10 	mov.w	fp, #16
  4047da:	462e      	mov	r6, r5
  4047dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4047de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4047e0:	e004      	b.n	4047ec <_svfprintf_r+0x350>
  4047e2:	3f10      	subs	r7, #16
  4047e4:	2f10      	cmp	r7, #16
  4047e6:	f102 0208 	add.w	r2, r2, #8
  4047ea:	dd15      	ble.n	404818 <_svfprintf_r+0x37c>
  4047ec:	3301      	adds	r3, #1
  4047ee:	3110      	adds	r1, #16
  4047f0:	2b07      	cmp	r3, #7
  4047f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4047f4:	9326      	str	r3, [sp, #152]	; 0x98
  4047f6:	e882 0840 	stmia.w	r2, {r6, fp}
  4047fa:	ddf2      	ble.n	4047e2 <_svfprintf_r+0x346>
  4047fc:	aa25      	add	r2, sp, #148	; 0x94
  4047fe:	4629      	mov	r1, r5
  404800:	4620      	mov	r0, r4
  404802:	f004 fa6d 	bl	408ce0 <__ssprint_r>
  404806:	2800      	cmp	r0, #0
  404808:	f47f af1a 	bne.w	404640 <_svfprintf_r+0x1a4>
  40480c:	3f10      	subs	r7, #16
  40480e:	2f10      	cmp	r7, #16
  404810:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404812:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404814:	464a      	mov	r2, r9
  404816:	dce9      	bgt.n	4047ec <_svfprintf_r+0x350>
  404818:	4635      	mov	r5, r6
  40481a:	460c      	mov	r4, r1
  40481c:	4646      	mov	r6, r8
  40481e:	4690      	mov	r8, r2
  404820:	3301      	adds	r3, #1
  404822:	443c      	add	r4, r7
  404824:	2b07      	cmp	r3, #7
  404826:	9427      	str	r4, [sp, #156]	; 0x9c
  404828:	9326      	str	r3, [sp, #152]	; 0x98
  40482a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40482e:	f300 8381 	bgt.w	404f34 <_svfprintf_r+0xa98>
  404832:	f108 0808 	add.w	r8, r8, #8
  404836:	9b07      	ldr	r3, [sp, #28]
  404838:	05df      	lsls	r7, r3, #23
  40483a:	f100 8268 	bmi.w	404d0e <_svfprintf_r+0x872>
  40483e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404840:	990e      	ldr	r1, [sp, #56]	; 0x38
  404842:	f8c8 6000 	str.w	r6, [r8]
  404846:	3301      	adds	r3, #1
  404848:	440c      	add	r4, r1
  40484a:	2b07      	cmp	r3, #7
  40484c:	9427      	str	r4, [sp, #156]	; 0x9c
  40484e:	f8c8 1004 	str.w	r1, [r8, #4]
  404852:	9326      	str	r3, [sp, #152]	; 0x98
  404854:	f300 834d 	bgt.w	404ef2 <_svfprintf_r+0xa56>
  404858:	f108 0808 	add.w	r8, r8, #8
  40485c:	9b07      	ldr	r3, [sp, #28]
  40485e:	075b      	lsls	r3, r3, #29
  404860:	d53a      	bpl.n	4048d8 <_svfprintf_r+0x43c>
  404862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404864:	9a08      	ldr	r2, [sp, #32]
  404866:	1a9d      	subs	r5, r3, r2
  404868:	2d00      	cmp	r5, #0
  40486a:	dd35      	ble.n	4048d8 <_svfprintf_r+0x43c>
  40486c:	2d10      	cmp	r5, #16
  40486e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404870:	dd20      	ble.n	4048b4 <_svfprintf_r+0x418>
  404872:	2610      	movs	r6, #16
  404874:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404876:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40487a:	e004      	b.n	404886 <_svfprintf_r+0x3ea>
  40487c:	3d10      	subs	r5, #16
  40487e:	2d10      	cmp	r5, #16
  404880:	f108 0808 	add.w	r8, r8, #8
  404884:	dd16      	ble.n	4048b4 <_svfprintf_r+0x418>
  404886:	3301      	adds	r3, #1
  404888:	4a5e      	ldr	r2, [pc, #376]	; (404a04 <_svfprintf_r+0x568>)
  40488a:	9326      	str	r3, [sp, #152]	; 0x98
  40488c:	3410      	adds	r4, #16
  40488e:	2b07      	cmp	r3, #7
  404890:	9427      	str	r4, [sp, #156]	; 0x9c
  404892:	e888 0044 	stmia.w	r8, {r2, r6}
  404896:	ddf1      	ble.n	40487c <_svfprintf_r+0x3e0>
  404898:	aa25      	add	r2, sp, #148	; 0x94
  40489a:	4659      	mov	r1, fp
  40489c:	4638      	mov	r0, r7
  40489e:	f004 fa1f 	bl	408ce0 <__ssprint_r>
  4048a2:	2800      	cmp	r0, #0
  4048a4:	f47f aecc 	bne.w	404640 <_svfprintf_r+0x1a4>
  4048a8:	3d10      	subs	r5, #16
  4048aa:	2d10      	cmp	r5, #16
  4048ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048b0:	46c8      	mov	r8, r9
  4048b2:	dce8      	bgt.n	404886 <_svfprintf_r+0x3ea>
  4048b4:	3301      	adds	r3, #1
  4048b6:	4a53      	ldr	r2, [pc, #332]	; (404a04 <_svfprintf_r+0x568>)
  4048b8:	9326      	str	r3, [sp, #152]	; 0x98
  4048ba:	442c      	add	r4, r5
  4048bc:	2b07      	cmp	r3, #7
  4048be:	9427      	str	r4, [sp, #156]	; 0x9c
  4048c0:	e888 0024 	stmia.w	r8, {r2, r5}
  4048c4:	dd08      	ble.n	4048d8 <_svfprintf_r+0x43c>
  4048c6:	aa25      	add	r2, sp, #148	; 0x94
  4048c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048cc:	f004 fa08 	bl	408ce0 <__ssprint_r>
  4048d0:	2800      	cmp	r0, #0
  4048d2:	f47f aeb5 	bne.w	404640 <_svfprintf_r+0x1a4>
  4048d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4048da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4048dc:	9908      	ldr	r1, [sp, #32]
  4048de:	428a      	cmp	r2, r1
  4048e0:	bfac      	ite	ge
  4048e2:	189b      	addge	r3, r3, r2
  4048e4:	185b      	addlt	r3, r3, r1
  4048e6:	9309      	str	r3, [sp, #36]	; 0x24
  4048e8:	2c00      	cmp	r4, #0
  4048ea:	f040 830d 	bne.w	404f08 <_svfprintf_r+0xa6c>
  4048ee:	2300      	movs	r3, #0
  4048f0:	9326      	str	r3, [sp, #152]	; 0x98
  4048f2:	46c8      	mov	r8, r9
  4048f4:	e5f9      	b.n	4044ea <_svfprintf_r+0x4e>
  4048f6:	9311      	str	r3, [sp, #68]	; 0x44
  4048f8:	f01b 0320 	ands.w	r3, fp, #32
  4048fc:	f040 81e3 	bne.w	404cc6 <_svfprintf_r+0x82a>
  404900:	f01b 0210 	ands.w	r2, fp, #16
  404904:	f040 842e 	bne.w	405164 <_svfprintf_r+0xcc8>
  404908:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40490c:	f000 842a 	beq.w	405164 <_svfprintf_r+0xcc8>
  404910:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404912:	4613      	mov	r3, r2
  404914:	460a      	mov	r2, r1
  404916:	3204      	adds	r2, #4
  404918:	880c      	ldrh	r4, [r1, #0]
  40491a:	920f      	str	r2, [sp, #60]	; 0x3c
  40491c:	2500      	movs	r5, #0
  40491e:	e6b0      	b.n	404682 <_svfprintf_r+0x1e6>
  404920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404922:	9311      	str	r3, [sp, #68]	; 0x44
  404924:	6816      	ldr	r6, [r2, #0]
  404926:	2400      	movs	r4, #0
  404928:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40492c:	1d15      	adds	r5, r2, #4
  40492e:	2e00      	cmp	r6, #0
  404930:	f000 86a7 	beq.w	405682 <_svfprintf_r+0x11e6>
  404934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404936:	1c53      	adds	r3, r2, #1
  404938:	f000 8609 	beq.w	40554e <_svfprintf_r+0x10b2>
  40493c:	4621      	mov	r1, r4
  40493e:	4630      	mov	r0, r6
  404940:	f003 fc36 	bl	4081b0 <memchr>
  404944:	2800      	cmp	r0, #0
  404946:	f000 86e1 	beq.w	40570c <_svfprintf_r+0x1270>
  40494a:	1b83      	subs	r3, r0, r6
  40494c:	930e      	str	r3, [sp, #56]	; 0x38
  40494e:	940a      	str	r4, [sp, #40]	; 0x28
  404950:	950f      	str	r5, [sp, #60]	; 0x3c
  404952:	f8cd b01c 	str.w	fp, [sp, #28]
  404956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40495a:	9308      	str	r3, [sp, #32]
  40495c:	9412      	str	r4, [sp, #72]	; 0x48
  40495e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404962:	e6b3      	b.n	4046cc <_svfprintf_r+0x230>
  404964:	f89a 3000 	ldrb.w	r3, [sl]
  404968:	2201      	movs	r2, #1
  40496a:	212b      	movs	r1, #43	; 0x2b
  40496c:	e5ee      	b.n	40454c <_svfprintf_r+0xb0>
  40496e:	f04b 0b20 	orr.w	fp, fp, #32
  404972:	f89a 3000 	ldrb.w	r3, [sl]
  404976:	e5e9      	b.n	40454c <_svfprintf_r+0xb0>
  404978:	9311      	str	r3, [sp, #68]	; 0x44
  40497a:	2a00      	cmp	r2, #0
  40497c:	f040 8795 	bne.w	4058aa <_svfprintf_r+0x140e>
  404980:	4b22      	ldr	r3, [pc, #136]	; (404a0c <_svfprintf_r+0x570>)
  404982:	9318      	str	r3, [sp, #96]	; 0x60
  404984:	f01b 0f20 	tst.w	fp, #32
  404988:	f040 8111 	bne.w	404bae <_svfprintf_r+0x712>
  40498c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40498e:	f01b 0f10 	tst.w	fp, #16
  404992:	4613      	mov	r3, r2
  404994:	f040 83e1 	bne.w	40515a <_svfprintf_r+0xcbe>
  404998:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40499c:	f000 83dd 	beq.w	40515a <_svfprintf_r+0xcbe>
  4049a0:	3304      	adds	r3, #4
  4049a2:	8814      	ldrh	r4, [r2, #0]
  4049a4:	930f      	str	r3, [sp, #60]	; 0x3c
  4049a6:	2500      	movs	r5, #0
  4049a8:	f01b 0f01 	tst.w	fp, #1
  4049ac:	f000 810c 	beq.w	404bc8 <_svfprintf_r+0x72c>
  4049b0:	ea54 0305 	orrs.w	r3, r4, r5
  4049b4:	f000 8108 	beq.w	404bc8 <_svfprintf_r+0x72c>
  4049b8:	2330      	movs	r3, #48	; 0x30
  4049ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4049be:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4049c2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4049c6:	f04b 0b02 	orr.w	fp, fp, #2
  4049ca:	2302      	movs	r3, #2
  4049cc:	e659      	b.n	404682 <_svfprintf_r+0x1e6>
  4049ce:	f89a 3000 	ldrb.w	r3, [sl]
  4049d2:	2900      	cmp	r1, #0
  4049d4:	f47f adba 	bne.w	40454c <_svfprintf_r+0xb0>
  4049d8:	2201      	movs	r2, #1
  4049da:	2120      	movs	r1, #32
  4049dc:	e5b6      	b.n	40454c <_svfprintf_r+0xb0>
  4049de:	f04b 0b01 	orr.w	fp, fp, #1
  4049e2:	f89a 3000 	ldrb.w	r3, [sl]
  4049e6:	e5b1      	b.n	40454c <_svfprintf_r+0xb0>
  4049e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4049ea:	6823      	ldr	r3, [r4, #0]
  4049ec:	930d      	str	r3, [sp, #52]	; 0x34
  4049ee:	4618      	mov	r0, r3
  4049f0:	2800      	cmp	r0, #0
  4049f2:	4623      	mov	r3, r4
  4049f4:	f103 0304 	add.w	r3, r3, #4
  4049f8:	f6ff ae0a 	blt.w	404610 <_svfprintf_r+0x174>
  4049fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4049fe:	f89a 3000 	ldrb.w	r3, [sl]
  404a02:	e5a3      	b.n	40454c <_svfprintf_r+0xb0>
  404a04:	00409f24 	.word	0x00409f24
  404a08:	00409f34 	.word	0x00409f34
  404a0c:	00409f04 	.word	0x00409f04
  404a10:	f04b 0b10 	orr.w	fp, fp, #16
  404a14:	f01b 0f20 	tst.w	fp, #32
  404a18:	9311      	str	r3, [sp, #68]	; 0x44
  404a1a:	f43f ae23 	beq.w	404664 <_svfprintf_r+0x1c8>
  404a1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404a20:	3507      	adds	r5, #7
  404a22:	f025 0307 	bic.w	r3, r5, #7
  404a26:	f103 0208 	add.w	r2, r3, #8
  404a2a:	e9d3 4500 	ldrd	r4, r5, [r3]
  404a2e:	920f      	str	r2, [sp, #60]	; 0x3c
  404a30:	2301      	movs	r3, #1
  404a32:	e626      	b.n	404682 <_svfprintf_r+0x1e6>
  404a34:	f89a 3000 	ldrb.w	r3, [sl]
  404a38:	2b2a      	cmp	r3, #42	; 0x2a
  404a3a:	f10a 0401 	add.w	r4, sl, #1
  404a3e:	f000 8727 	beq.w	405890 <_svfprintf_r+0x13f4>
  404a42:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404a46:	2809      	cmp	r0, #9
  404a48:	46a2      	mov	sl, r4
  404a4a:	f200 86ad 	bhi.w	4057a8 <_svfprintf_r+0x130c>
  404a4e:	2300      	movs	r3, #0
  404a50:	461c      	mov	r4, r3
  404a52:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404a56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404a5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404a5e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404a62:	2809      	cmp	r0, #9
  404a64:	d9f5      	bls.n	404a52 <_svfprintf_r+0x5b6>
  404a66:	940a      	str	r4, [sp, #40]	; 0x28
  404a68:	e572      	b.n	404550 <_svfprintf_r+0xb4>
  404a6a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404a6e:	f89a 3000 	ldrb.w	r3, [sl]
  404a72:	e56b      	b.n	40454c <_svfprintf_r+0xb0>
  404a74:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404a78:	f89a 3000 	ldrb.w	r3, [sl]
  404a7c:	e566      	b.n	40454c <_svfprintf_r+0xb0>
  404a7e:	f89a 3000 	ldrb.w	r3, [sl]
  404a82:	2b6c      	cmp	r3, #108	; 0x6c
  404a84:	bf03      	ittte	eq
  404a86:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404a8a:	f04b 0b20 	orreq.w	fp, fp, #32
  404a8e:	f10a 0a01 	addeq.w	sl, sl, #1
  404a92:	f04b 0b10 	orrne.w	fp, fp, #16
  404a96:	e559      	b.n	40454c <_svfprintf_r+0xb0>
  404a98:	2a00      	cmp	r2, #0
  404a9a:	f040 8711 	bne.w	4058c0 <_svfprintf_r+0x1424>
  404a9e:	f01b 0f20 	tst.w	fp, #32
  404aa2:	f040 84f9 	bne.w	405498 <_svfprintf_r+0xffc>
  404aa6:	f01b 0f10 	tst.w	fp, #16
  404aaa:	f040 84ac 	bne.w	405406 <_svfprintf_r+0xf6a>
  404aae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404ab2:	f000 84a8 	beq.w	405406 <_svfprintf_r+0xf6a>
  404ab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ab8:	6813      	ldr	r3, [r2, #0]
  404aba:	3204      	adds	r2, #4
  404abc:	920f      	str	r2, [sp, #60]	; 0x3c
  404abe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404ac2:	801a      	strh	r2, [r3, #0]
  404ac4:	e511      	b.n	4044ea <_svfprintf_r+0x4e>
  404ac6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404ac8:	4bb3      	ldr	r3, [pc, #716]	; (404d98 <_svfprintf_r+0x8fc>)
  404aca:	680c      	ldr	r4, [r1, #0]
  404acc:	9318      	str	r3, [sp, #96]	; 0x60
  404ace:	2230      	movs	r2, #48	; 0x30
  404ad0:	2378      	movs	r3, #120	; 0x78
  404ad2:	3104      	adds	r1, #4
  404ad4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404ad8:	9311      	str	r3, [sp, #68]	; 0x44
  404ada:	f04b 0b02 	orr.w	fp, fp, #2
  404ade:	910f      	str	r1, [sp, #60]	; 0x3c
  404ae0:	2500      	movs	r5, #0
  404ae2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404ae6:	2302      	movs	r3, #2
  404ae8:	e5cb      	b.n	404682 <_svfprintf_r+0x1e6>
  404aea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404aec:	9311      	str	r3, [sp, #68]	; 0x44
  404aee:	680a      	ldr	r2, [r1, #0]
  404af0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404af4:	2300      	movs	r3, #0
  404af6:	460a      	mov	r2, r1
  404af8:	461f      	mov	r7, r3
  404afa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404afe:	3204      	adds	r2, #4
  404b00:	2301      	movs	r3, #1
  404b02:	9308      	str	r3, [sp, #32]
  404b04:	f8cd b01c 	str.w	fp, [sp, #28]
  404b08:	970a      	str	r7, [sp, #40]	; 0x28
  404b0a:	9712      	str	r7, [sp, #72]	; 0x48
  404b0c:	920f      	str	r2, [sp, #60]	; 0x3c
  404b0e:	930e      	str	r3, [sp, #56]	; 0x38
  404b10:	ae28      	add	r6, sp, #160	; 0xa0
  404b12:	e5df      	b.n	4046d4 <_svfprintf_r+0x238>
  404b14:	9311      	str	r3, [sp, #68]	; 0x44
  404b16:	2a00      	cmp	r2, #0
  404b18:	f040 86ea 	bne.w	4058f0 <_svfprintf_r+0x1454>
  404b1c:	f01b 0f20 	tst.w	fp, #32
  404b20:	d15d      	bne.n	404bde <_svfprintf_r+0x742>
  404b22:	f01b 0f10 	tst.w	fp, #16
  404b26:	f040 8308 	bne.w	40513a <_svfprintf_r+0xc9e>
  404b2a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404b2e:	f000 8304 	beq.w	40513a <_svfprintf_r+0xc9e>
  404b32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404b34:	f9b1 4000 	ldrsh.w	r4, [r1]
  404b38:	3104      	adds	r1, #4
  404b3a:	17e5      	asrs	r5, r4, #31
  404b3c:	4622      	mov	r2, r4
  404b3e:	462b      	mov	r3, r5
  404b40:	910f      	str	r1, [sp, #60]	; 0x3c
  404b42:	2a00      	cmp	r2, #0
  404b44:	f173 0300 	sbcs.w	r3, r3, #0
  404b48:	db58      	blt.n	404bfc <_svfprintf_r+0x760>
  404b4a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404b4c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404b50:	1c4a      	adds	r2, r1, #1
  404b52:	f04f 0301 	mov.w	r3, #1
  404b56:	f47f ad9b 	bne.w	404690 <_svfprintf_r+0x1f4>
  404b5a:	ea54 0205 	orrs.w	r2, r4, r5
  404b5e:	f000 81df 	beq.w	404f20 <_svfprintf_r+0xa84>
  404b62:	f8cd b01c 	str.w	fp, [sp, #28]
  404b66:	2b01      	cmp	r3, #1
  404b68:	f000 827b 	beq.w	405062 <_svfprintf_r+0xbc6>
  404b6c:	2b02      	cmp	r3, #2
  404b6e:	f040 8206 	bne.w	404f7e <_svfprintf_r+0xae2>
  404b72:	9818      	ldr	r0, [sp, #96]	; 0x60
  404b74:	464e      	mov	r6, r9
  404b76:	0923      	lsrs	r3, r4, #4
  404b78:	f004 010f 	and.w	r1, r4, #15
  404b7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404b80:	092a      	lsrs	r2, r5, #4
  404b82:	461c      	mov	r4, r3
  404b84:	4615      	mov	r5, r2
  404b86:	5c43      	ldrb	r3, [r0, r1]
  404b88:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404b8c:	ea54 0305 	orrs.w	r3, r4, r5
  404b90:	d1f1      	bne.n	404b76 <_svfprintf_r+0x6da>
  404b92:	eba9 0306 	sub.w	r3, r9, r6
  404b96:	930e      	str	r3, [sp, #56]	; 0x38
  404b98:	e590      	b.n	4046bc <_svfprintf_r+0x220>
  404b9a:	9311      	str	r3, [sp, #68]	; 0x44
  404b9c:	2a00      	cmp	r2, #0
  404b9e:	f040 86a3 	bne.w	4058e8 <_svfprintf_r+0x144c>
  404ba2:	4b7e      	ldr	r3, [pc, #504]	; (404d9c <_svfprintf_r+0x900>)
  404ba4:	9318      	str	r3, [sp, #96]	; 0x60
  404ba6:	f01b 0f20 	tst.w	fp, #32
  404baa:	f43f aeef 	beq.w	40498c <_svfprintf_r+0x4f0>
  404bae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404bb0:	3507      	adds	r5, #7
  404bb2:	f025 0307 	bic.w	r3, r5, #7
  404bb6:	f103 0208 	add.w	r2, r3, #8
  404bba:	f01b 0f01 	tst.w	fp, #1
  404bbe:	920f      	str	r2, [sp, #60]	; 0x3c
  404bc0:	e9d3 4500 	ldrd	r4, r5, [r3]
  404bc4:	f47f aef4 	bne.w	4049b0 <_svfprintf_r+0x514>
  404bc8:	2302      	movs	r3, #2
  404bca:	e55a      	b.n	404682 <_svfprintf_r+0x1e6>
  404bcc:	9311      	str	r3, [sp, #68]	; 0x44
  404bce:	2a00      	cmp	r2, #0
  404bd0:	f040 8686 	bne.w	4058e0 <_svfprintf_r+0x1444>
  404bd4:	f04b 0b10 	orr.w	fp, fp, #16
  404bd8:	f01b 0f20 	tst.w	fp, #32
  404bdc:	d0a1      	beq.n	404b22 <_svfprintf_r+0x686>
  404bde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404be0:	3507      	adds	r5, #7
  404be2:	f025 0507 	bic.w	r5, r5, #7
  404be6:	e9d5 2300 	ldrd	r2, r3, [r5]
  404bea:	2a00      	cmp	r2, #0
  404bec:	f105 0108 	add.w	r1, r5, #8
  404bf0:	461d      	mov	r5, r3
  404bf2:	f173 0300 	sbcs.w	r3, r3, #0
  404bf6:	910f      	str	r1, [sp, #60]	; 0x3c
  404bf8:	4614      	mov	r4, r2
  404bfa:	daa6      	bge.n	404b4a <_svfprintf_r+0x6ae>
  404bfc:	272d      	movs	r7, #45	; 0x2d
  404bfe:	4264      	negs	r4, r4
  404c00:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404c04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404c08:	2301      	movs	r3, #1
  404c0a:	e53d      	b.n	404688 <_svfprintf_r+0x1ec>
  404c0c:	9311      	str	r3, [sp, #68]	; 0x44
  404c0e:	2a00      	cmp	r2, #0
  404c10:	f040 8662 	bne.w	4058d8 <_svfprintf_r+0x143c>
  404c14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404c16:	3507      	adds	r5, #7
  404c18:	f025 0307 	bic.w	r3, r5, #7
  404c1c:	f103 0208 	add.w	r2, r3, #8
  404c20:	920f      	str	r2, [sp, #60]	; 0x3c
  404c22:	681a      	ldr	r2, [r3, #0]
  404c24:	9215      	str	r2, [sp, #84]	; 0x54
  404c26:	685b      	ldr	r3, [r3, #4]
  404c28:	9314      	str	r3, [sp, #80]	; 0x50
  404c2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404c2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404c2e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404c32:	4628      	mov	r0, r5
  404c34:	4621      	mov	r1, r4
  404c36:	f04f 32ff 	mov.w	r2, #4294967295
  404c3a:	4b59      	ldr	r3, [pc, #356]	; (404da0 <_svfprintf_r+0x904>)
  404c3c:	f004 ff1e 	bl	409a7c <__aeabi_dcmpun>
  404c40:	2800      	cmp	r0, #0
  404c42:	f040 834a 	bne.w	4052da <_svfprintf_r+0xe3e>
  404c46:	4628      	mov	r0, r5
  404c48:	4621      	mov	r1, r4
  404c4a:	f04f 32ff 	mov.w	r2, #4294967295
  404c4e:	4b54      	ldr	r3, [pc, #336]	; (404da0 <_svfprintf_r+0x904>)
  404c50:	f004 fef6 	bl	409a40 <__aeabi_dcmple>
  404c54:	2800      	cmp	r0, #0
  404c56:	f040 8340 	bne.w	4052da <_svfprintf_r+0xe3e>
  404c5a:	a815      	add	r0, sp, #84	; 0x54
  404c5c:	c80d      	ldmia	r0, {r0, r2, r3}
  404c5e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404c60:	f004 fee4 	bl	409a2c <__aeabi_dcmplt>
  404c64:	2800      	cmp	r0, #0
  404c66:	f040 8530 	bne.w	4056ca <_svfprintf_r+0x122e>
  404c6a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404c6e:	4e4d      	ldr	r6, [pc, #308]	; (404da4 <_svfprintf_r+0x908>)
  404c70:	4b4d      	ldr	r3, [pc, #308]	; (404da8 <_svfprintf_r+0x90c>)
  404c72:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404c76:	9007      	str	r0, [sp, #28]
  404c78:	9811      	ldr	r0, [sp, #68]	; 0x44
  404c7a:	2203      	movs	r2, #3
  404c7c:	2100      	movs	r1, #0
  404c7e:	9208      	str	r2, [sp, #32]
  404c80:	910a      	str	r1, [sp, #40]	; 0x28
  404c82:	2847      	cmp	r0, #71	; 0x47
  404c84:	bfd8      	it	le
  404c86:	461e      	movle	r6, r3
  404c88:	920e      	str	r2, [sp, #56]	; 0x38
  404c8a:	9112      	str	r1, [sp, #72]	; 0x48
  404c8c:	e51e      	b.n	4046cc <_svfprintf_r+0x230>
  404c8e:	f04b 0b08 	orr.w	fp, fp, #8
  404c92:	f89a 3000 	ldrb.w	r3, [sl]
  404c96:	e459      	b.n	40454c <_svfprintf_r+0xb0>
  404c98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404c9c:	2300      	movs	r3, #0
  404c9e:	461c      	mov	r4, r3
  404ca0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404ca4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404ca8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404cac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404cb0:	2809      	cmp	r0, #9
  404cb2:	d9f5      	bls.n	404ca0 <_svfprintf_r+0x804>
  404cb4:	940d      	str	r4, [sp, #52]	; 0x34
  404cb6:	e44b      	b.n	404550 <_svfprintf_r+0xb4>
  404cb8:	f04b 0b10 	orr.w	fp, fp, #16
  404cbc:	9311      	str	r3, [sp, #68]	; 0x44
  404cbe:	f01b 0320 	ands.w	r3, fp, #32
  404cc2:	f43f ae1d 	beq.w	404900 <_svfprintf_r+0x464>
  404cc6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404cc8:	3507      	adds	r5, #7
  404cca:	f025 0307 	bic.w	r3, r5, #7
  404cce:	f103 0208 	add.w	r2, r3, #8
  404cd2:	e9d3 4500 	ldrd	r4, r5, [r3]
  404cd6:	920f      	str	r2, [sp, #60]	; 0x3c
  404cd8:	2300      	movs	r3, #0
  404cda:	e4d2      	b.n	404682 <_svfprintf_r+0x1e6>
  404cdc:	9311      	str	r3, [sp, #68]	; 0x44
  404cde:	2a00      	cmp	r2, #0
  404ce0:	f040 85e7 	bne.w	4058b2 <_svfprintf_r+0x1416>
  404ce4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ce6:	2a00      	cmp	r2, #0
  404ce8:	f43f aca3 	beq.w	404632 <_svfprintf_r+0x196>
  404cec:	2300      	movs	r3, #0
  404cee:	2101      	movs	r1, #1
  404cf0:	461f      	mov	r7, r3
  404cf2:	9108      	str	r1, [sp, #32]
  404cf4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404cf8:	f8cd b01c 	str.w	fp, [sp, #28]
  404cfc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404d00:	930a      	str	r3, [sp, #40]	; 0x28
  404d02:	9312      	str	r3, [sp, #72]	; 0x48
  404d04:	910e      	str	r1, [sp, #56]	; 0x38
  404d06:	ae28      	add	r6, sp, #160	; 0xa0
  404d08:	e4e4      	b.n	4046d4 <_svfprintf_r+0x238>
  404d0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d0c:	e534      	b.n	404778 <_svfprintf_r+0x2dc>
  404d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d10:	2b65      	cmp	r3, #101	; 0x65
  404d12:	f340 80a7 	ble.w	404e64 <_svfprintf_r+0x9c8>
  404d16:	a815      	add	r0, sp, #84	; 0x54
  404d18:	c80d      	ldmia	r0, {r0, r2, r3}
  404d1a:	9914      	ldr	r1, [sp, #80]	; 0x50
  404d1c:	f004 fe7c 	bl	409a18 <__aeabi_dcmpeq>
  404d20:	2800      	cmp	r0, #0
  404d22:	f000 8150 	beq.w	404fc6 <_svfprintf_r+0xb2a>
  404d26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d28:	4a20      	ldr	r2, [pc, #128]	; (404dac <_svfprintf_r+0x910>)
  404d2a:	f8c8 2000 	str.w	r2, [r8]
  404d2e:	3301      	adds	r3, #1
  404d30:	3401      	adds	r4, #1
  404d32:	2201      	movs	r2, #1
  404d34:	2b07      	cmp	r3, #7
  404d36:	9427      	str	r4, [sp, #156]	; 0x9c
  404d38:	9326      	str	r3, [sp, #152]	; 0x98
  404d3a:	f8c8 2004 	str.w	r2, [r8, #4]
  404d3e:	f300 836a 	bgt.w	405416 <_svfprintf_r+0xf7a>
  404d42:	f108 0808 	add.w	r8, r8, #8
  404d46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404d48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404d4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d4c:	4293      	cmp	r3, r2
  404d4e:	db03      	blt.n	404d58 <_svfprintf_r+0x8bc>
  404d50:	9b07      	ldr	r3, [sp, #28]
  404d52:	07dd      	lsls	r5, r3, #31
  404d54:	f57f ad82 	bpl.w	40485c <_svfprintf_r+0x3c0>
  404d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d5a:	9919      	ldr	r1, [sp, #100]	; 0x64
  404d5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404d5e:	f8c8 2000 	str.w	r2, [r8]
  404d62:	3301      	adds	r3, #1
  404d64:	440c      	add	r4, r1
  404d66:	2b07      	cmp	r3, #7
  404d68:	f8c8 1004 	str.w	r1, [r8, #4]
  404d6c:	9427      	str	r4, [sp, #156]	; 0x9c
  404d6e:	9326      	str	r3, [sp, #152]	; 0x98
  404d70:	f300 839e 	bgt.w	4054b0 <_svfprintf_r+0x1014>
  404d74:	f108 0808 	add.w	r8, r8, #8
  404d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d7a:	1e5e      	subs	r6, r3, #1
  404d7c:	2e00      	cmp	r6, #0
  404d7e:	f77f ad6d 	ble.w	40485c <_svfprintf_r+0x3c0>
  404d82:	2e10      	cmp	r6, #16
  404d84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d86:	4d0a      	ldr	r5, [pc, #40]	; (404db0 <_svfprintf_r+0x914>)
  404d88:	f340 81f5 	ble.w	405176 <_svfprintf_r+0xcda>
  404d8c:	4622      	mov	r2, r4
  404d8e:	2710      	movs	r7, #16
  404d90:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404d94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404d96:	e013      	b.n	404dc0 <_svfprintf_r+0x924>
  404d98:	00409f04 	.word	0x00409f04
  404d9c:	00409ef0 	.word	0x00409ef0
  404da0:	7fefffff 	.word	0x7fefffff
  404da4:	00409ee4 	.word	0x00409ee4
  404da8:	00409ee0 	.word	0x00409ee0
  404dac:	00409f20 	.word	0x00409f20
  404db0:	00409f34 	.word	0x00409f34
  404db4:	f108 0808 	add.w	r8, r8, #8
  404db8:	3e10      	subs	r6, #16
  404dba:	2e10      	cmp	r6, #16
  404dbc:	f340 81da 	ble.w	405174 <_svfprintf_r+0xcd8>
  404dc0:	3301      	adds	r3, #1
  404dc2:	3210      	adds	r2, #16
  404dc4:	2b07      	cmp	r3, #7
  404dc6:	9227      	str	r2, [sp, #156]	; 0x9c
  404dc8:	9326      	str	r3, [sp, #152]	; 0x98
  404dca:	e888 00a0 	stmia.w	r8, {r5, r7}
  404dce:	ddf1      	ble.n	404db4 <_svfprintf_r+0x918>
  404dd0:	aa25      	add	r2, sp, #148	; 0x94
  404dd2:	4621      	mov	r1, r4
  404dd4:	4658      	mov	r0, fp
  404dd6:	f003 ff83 	bl	408ce0 <__ssprint_r>
  404dda:	2800      	cmp	r0, #0
  404ddc:	f47f ac30 	bne.w	404640 <_svfprintf_r+0x1a4>
  404de0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404de4:	46c8      	mov	r8, r9
  404de6:	e7e7      	b.n	404db8 <_svfprintf_r+0x91c>
  404de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404dea:	9a08      	ldr	r2, [sp, #32]
  404dec:	1a9f      	subs	r7, r3, r2
  404dee:	2f00      	cmp	r7, #0
  404df0:	f77f ace5 	ble.w	4047be <_svfprintf_r+0x322>
  404df4:	2f10      	cmp	r7, #16
  404df6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404df8:	4db6      	ldr	r5, [pc, #728]	; (4050d4 <_svfprintf_r+0xc38>)
  404dfa:	dd27      	ble.n	404e4c <_svfprintf_r+0x9b0>
  404dfc:	4642      	mov	r2, r8
  404dfe:	4621      	mov	r1, r4
  404e00:	46b0      	mov	r8, r6
  404e02:	f04f 0b10 	mov.w	fp, #16
  404e06:	462e      	mov	r6, r5
  404e08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404e0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404e0c:	e004      	b.n	404e18 <_svfprintf_r+0x97c>
  404e0e:	3f10      	subs	r7, #16
  404e10:	2f10      	cmp	r7, #16
  404e12:	f102 0208 	add.w	r2, r2, #8
  404e16:	dd15      	ble.n	404e44 <_svfprintf_r+0x9a8>
  404e18:	3301      	adds	r3, #1
  404e1a:	3110      	adds	r1, #16
  404e1c:	2b07      	cmp	r3, #7
  404e1e:	9127      	str	r1, [sp, #156]	; 0x9c
  404e20:	9326      	str	r3, [sp, #152]	; 0x98
  404e22:	e882 0840 	stmia.w	r2, {r6, fp}
  404e26:	ddf2      	ble.n	404e0e <_svfprintf_r+0x972>
  404e28:	aa25      	add	r2, sp, #148	; 0x94
  404e2a:	4629      	mov	r1, r5
  404e2c:	4620      	mov	r0, r4
  404e2e:	f003 ff57 	bl	408ce0 <__ssprint_r>
  404e32:	2800      	cmp	r0, #0
  404e34:	f47f ac04 	bne.w	404640 <_svfprintf_r+0x1a4>
  404e38:	3f10      	subs	r7, #16
  404e3a:	2f10      	cmp	r7, #16
  404e3c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404e3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e40:	464a      	mov	r2, r9
  404e42:	dce9      	bgt.n	404e18 <_svfprintf_r+0x97c>
  404e44:	4635      	mov	r5, r6
  404e46:	460c      	mov	r4, r1
  404e48:	4646      	mov	r6, r8
  404e4a:	4690      	mov	r8, r2
  404e4c:	3301      	adds	r3, #1
  404e4e:	443c      	add	r4, r7
  404e50:	2b07      	cmp	r3, #7
  404e52:	9427      	str	r4, [sp, #156]	; 0x9c
  404e54:	9326      	str	r3, [sp, #152]	; 0x98
  404e56:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e5a:	f300 8232 	bgt.w	4052c2 <_svfprintf_r+0xe26>
  404e5e:	f108 0808 	add.w	r8, r8, #8
  404e62:	e4ac      	b.n	4047be <_svfprintf_r+0x322>
  404e64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e66:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404e68:	2b01      	cmp	r3, #1
  404e6a:	f340 81fe 	ble.w	40526a <_svfprintf_r+0xdce>
  404e6e:	3701      	adds	r7, #1
  404e70:	3401      	adds	r4, #1
  404e72:	2301      	movs	r3, #1
  404e74:	2f07      	cmp	r7, #7
  404e76:	9427      	str	r4, [sp, #156]	; 0x9c
  404e78:	9726      	str	r7, [sp, #152]	; 0x98
  404e7a:	f8c8 6000 	str.w	r6, [r8]
  404e7e:	f8c8 3004 	str.w	r3, [r8, #4]
  404e82:	f300 8203 	bgt.w	40528c <_svfprintf_r+0xdf0>
  404e86:	f108 0808 	add.w	r8, r8, #8
  404e8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404e8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404e8e:	f8c8 3000 	str.w	r3, [r8]
  404e92:	3701      	adds	r7, #1
  404e94:	4414      	add	r4, r2
  404e96:	2f07      	cmp	r7, #7
  404e98:	9427      	str	r4, [sp, #156]	; 0x9c
  404e9a:	9726      	str	r7, [sp, #152]	; 0x98
  404e9c:	f8c8 2004 	str.w	r2, [r8, #4]
  404ea0:	f300 8200 	bgt.w	4052a4 <_svfprintf_r+0xe08>
  404ea4:	f108 0808 	add.w	r8, r8, #8
  404ea8:	a815      	add	r0, sp, #84	; 0x54
  404eaa:	c80d      	ldmia	r0, {r0, r2, r3}
  404eac:	9914      	ldr	r1, [sp, #80]	; 0x50
  404eae:	f004 fdb3 	bl	409a18 <__aeabi_dcmpeq>
  404eb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404eb4:	2800      	cmp	r0, #0
  404eb6:	f040 8101 	bne.w	4050bc <_svfprintf_r+0xc20>
  404eba:	3b01      	subs	r3, #1
  404ebc:	3701      	adds	r7, #1
  404ebe:	3601      	adds	r6, #1
  404ec0:	441c      	add	r4, r3
  404ec2:	2f07      	cmp	r7, #7
  404ec4:	9726      	str	r7, [sp, #152]	; 0x98
  404ec6:	9427      	str	r4, [sp, #156]	; 0x9c
  404ec8:	f8c8 6000 	str.w	r6, [r8]
  404ecc:	f8c8 3004 	str.w	r3, [r8, #4]
  404ed0:	f300 8127 	bgt.w	405122 <_svfprintf_r+0xc86>
  404ed4:	f108 0808 	add.w	r8, r8, #8
  404ed8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404eda:	f8c8 2004 	str.w	r2, [r8, #4]
  404ede:	3701      	adds	r7, #1
  404ee0:	4414      	add	r4, r2
  404ee2:	ab21      	add	r3, sp, #132	; 0x84
  404ee4:	2f07      	cmp	r7, #7
  404ee6:	9427      	str	r4, [sp, #156]	; 0x9c
  404ee8:	9726      	str	r7, [sp, #152]	; 0x98
  404eea:	f8c8 3000 	str.w	r3, [r8]
  404eee:	f77f acb3 	ble.w	404858 <_svfprintf_r+0x3bc>
  404ef2:	aa25      	add	r2, sp, #148	; 0x94
  404ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ef8:	f003 fef2 	bl	408ce0 <__ssprint_r>
  404efc:	2800      	cmp	r0, #0
  404efe:	f47f ab9f 	bne.w	404640 <_svfprintf_r+0x1a4>
  404f02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f04:	46c8      	mov	r8, r9
  404f06:	e4a9      	b.n	40485c <_svfprintf_r+0x3c0>
  404f08:	aa25      	add	r2, sp, #148	; 0x94
  404f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f0c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f0e:	f003 fee7 	bl	408ce0 <__ssprint_r>
  404f12:	2800      	cmp	r0, #0
  404f14:	f43f aceb 	beq.w	4048ee <_svfprintf_r+0x452>
  404f18:	f7ff bb92 	b.w	404640 <_svfprintf_r+0x1a4>
  404f1c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404f20:	2b01      	cmp	r3, #1
  404f22:	f000 8134 	beq.w	40518e <_svfprintf_r+0xcf2>
  404f26:	2b02      	cmp	r3, #2
  404f28:	d125      	bne.n	404f76 <_svfprintf_r+0xada>
  404f2a:	f8cd b01c 	str.w	fp, [sp, #28]
  404f2e:	2400      	movs	r4, #0
  404f30:	2500      	movs	r5, #0
  404f32:	e61e      	b.n	404b72 <_svfprintf_r+0x6d6>
  404f34:	aa25      	add	r2, sp, #148	; 0x94
  404f36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f38:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f3a:	f003 fed1 	bl	408ce0 <__ssprint_r>
  404f3e:	2800      	cmp	r0, #0
  404f40:	f47f ab7e 	bne.w	404640 <_svfprintf_r+0x1a4>
  404f44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f46:	46c8      	mov	r8, r9
  404f48:	e475      	b.n	404836 <_svfprintf_r+0x39a>
  404f4a:	aa25      	add	r2, sp, #148	; 0x94
  404f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f50:	f003 fec6 	bl	408ce0 <__ssprint_r>
  404f54:	2800      	cmp	r0, #0
  404f56:	f47f ab73 	bne.w	404640 <_svfprintf_r+0x1a4>
  404f5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f5c:	46c8      	mov	r8, r9
  404f5e:	e41b      	b.n	404798 <_svfprintf_r+0x2fc>
  404f60:	aa25      	add	r2, sp, #148	; 0x94
  404f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f64:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f66:	f003 febb 	bl	408ce0 <__ssprint_r>
  404f6a:	2800      	cmp	r0, #0
  404f6c:	f47f ab68 	bne.w	404640 <_svfprintf_r+0x1a4>
  404f70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f72:	46c8      	mov	r8, r9
  404f74:	e420      	b.n	4047b8 <_svfprintf_r+0x31c>
  404f76:	f8cd b01c 	str.w	fp, [sp, #28]
  404f7a:	2400      	movs	r4, #0
  404f7c:	2500      	movs	r5, #0
  404f7e:	4649      	mov	r1, r9
  404f80:	e000      	b.n	404f84 <_svfprintf_r+0xae8>
  404f82:	4631      	mov	r1, r6
  404f84:	08e2      	lsrs	r2, r4, #3
  404f86:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404f8a:	08e8      	lsrs	r0, r5, #3
  404f8c:	f004 0307 	and.w	r3, r4, #7
  404f90:	4605      	mov	r5, r0
  404f92:	4614      	mov	r4, r2
  404f94:	3330      	adds	r3, #48	; 0x30
  404f96:	ea54 0205 	orrs.w	r2, r4, r5
  404f9a:	f801 3c01 	strb.w	r3, [r1, #-1]
  404f9e:	f101 36ff 	add.w	r6, r1, #4294967295
  404fa2:	d1ee      	bne.n	404f82 <_svfprintf_r+0xae6>
  404fa4:	9a07      	ldr	r2, [sp, #28]
  404fa6:	07d2      	lsls	r2, r2, #31
  404fa8:	f57f adf3 	bpl.w	404b92 <_svfprintf_r+0x6f6>
  404fac:	2b30      	cmp	r3, #48	; 0x30
  404fae:	f43f adf0 	beq.w	404b92 <_svfprintf_r+0x6f6>
  404fb2:	3902      	subs	r1, #2
  404fb4:	2330      	movs	r3, #48	; 0x30
  404fb6:	f806 3c01 	strb.w	r3, [r6, #-1]
  404fba:	eba9 0301 	sub.w	r3, r9, r1
  404fbe:	930e      	str	r3, [sp, #56]	; 0x38
  404fc0:	460e      	mov	r6, r1
  404fc2:	f7ff bb7b 	b.w	4046bc <_svfprintf_r+0x220>
  404fc6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404fc8:	2900      	cmp	r1, #0
  404fca:	f340 822e 	ble.w	40542a <_svfprintf_r+0xf8e>
  404fce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404fd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404fd2:	4293      	cmp	r3, r2
  404fd4:	bfa8      	it	ge
  404fd6:	4613      	movge	r3, r2
  404fd8:	2b00      	cmp	r3, #0
  404fda:	461f      	mov	r7, r3
  404fdc:	dd0d      	ble.n	404ffa <_svfprintf_r+0xb5e>
  404fde:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404fe0:	f8c8 6000 	str.w	r6, [r8]
  404fe4:	3301      	adds	r3, #1
  404fe6:	443c      	add	r4, r7
  404fe8:	2b07      	cmp	r3, #7
  404fea:	9427      	str	r4, [sp, #156]	; 0x9c
  404fec:	f8c8 7004 	str.w	r7, [r8, #4]
  404ff0:	9326      	str	r3, [sp, #152]	; 0x98
  404ff2:	f300 831f 	bgt.w	405634 <_svfprintf_r+0x1198>
  404ff6:	f108 0808 	add.w	r8, r8, #8
  404ffa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ffc:	2f00      	cmp	r7, #0
  404ffe:	bfa8      	it	ge
  405000:	1bdb      	subge	r3, r3, r7
  405002:	2b00      	cmp	r3, #0
  405004:	461f      	mov	r7, r3
  405006:	f340 80d6 	ble.w	4051b6 <_svfprintf_r+0xd1a>
  40500a:	2f10      	cmp	r7, #16
  40500c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40500e:	4d31      	ldr	r5, [pc, #196]	; (4050d4 <_svfprintf_r+0xc38>)
  405010:	f340 81ed 	ble.w	4053ee <_svfprintf_r+0xf52>
  405014:	4642      	mov	r2, r8
  405016:	4621      	mov	r1, r4
  405018:	46b0      	mov	r8, r6
  40501a:	f04f 0b10 	mov.w	fp, #16
  40501e:	462e      	mov	r6, r5
  405020:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405022:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405024:	e004      	b.n	405030 <_svfprintf_r+0xb94>
  405026:	3208      	adds	r2, #8
  405028:	3f10      	subs	r7, #16
  40502a:	2f10      	cmp	r7, #16
  40502c:	f340 81db 	ble.w	4053e6 <_svfprintf_r+0xf4a>
  405030:	3301      	adds	r3, #1
  405032:	3110      	adds	r1, #16
  405034:	2b07      	cmp	r3, #7
  405036:	9127      	str	r1, [sp, #156]	; 0x9c
  405038:	9326      	str	r3, [sp, #152]	; 0x98
  40503a:	e882 0840 	stmia.w	r2, {r6, fp}
  40503e:	ddf2      	ble.n	405026 <_svfprintf_r+0xb8a>
  405040:	aa25      	add	r2, sp, #148	; 0x94
  405042:	4629      	mov	r1, r5
  405044:	4620      	mov	r0, r4
  405046:	f003 fe4b 	bl	408ce0 <__ssprint_r>
  40504a:	2800      	cmp	r0, #0
  40504c:	f47f aaf8 	bne.w	404640 <_svfprintf_r+0x1a4>
  405050:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405052:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405054:	464a      	mov	r2, r9
  405056:	e7e7      	b.n	405028 <_svfprintf_r+0xb8c>
  405058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40505a:	930e      	str	r3, [sp, #56]	; 0x38
  40505c:	464e      	mov	r6, r9
  40505e:	f7ff bb2d 	b.w	4046bc <_svfprintf_r+0x220>
  405062:	2d00      	cmp	r5, #0
  405064:	bf08      	it	eq
  405066:	2c0a      	cmpeq	r4, #10
  405068:	f0c0 808f 	bcc.w	40518a <_svfprintf_r+0xcee>
  40506c:	464e      	mov	r6, r9
  40506e:	4620      	mov	r0, r4
  405070:	4629      	mov	r1, r5
  405072:	220a      	movs	r2, #10
  405074:	2300      	movs	r3, #0
  405076:	f004 fd3f 	bl	409af8 <__aeabi_uldivmod>
  40507a:	3230      	adds	r2, #48	; 0x30
  40507c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405080:	4620      	mov	r0, r4
  405082:	4629      	mov	r1, r5
  405084:	2300      	movs	r3, #0
  405086:	220a      	movs	r2, #10
  405088:	f004 fd36 	bl	409af8 <__aeabi_uldivmod>
  40508c:	4604      	mov	r4, r0
  40508e:	460d      	mov	r5, r1
  405090:	ea54 0305 	orrs.w	r3, r4, r5
  405094:	d1eb      	bne.n	40506e <_svfprintf_r+0xbd2>
  405096:	eba9 0306 	sub.w	r3, r9, r6
  40509a:	930e      	str	r3, [sp, #56]	; 0x38
  40509c:	f7ff bb0e 	b.w	4046bc <_svfprintf_r+0x220>
  4050a0:	aa25      	add	r2, sp, #148	; 0x94
  4050a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050a6:	f003 fe1b 	bl	408ce0 <__ssprint_r>
  4050aa:	2800      	cmp	r0, #0
  4050ac:	f47f aac8 	bne.w	404640 <_svfprintf_r+0x1a4>
  4050b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4050b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4050b6:	46c8      	mov	r8, r9
  4050b8:	f7ff bb5e 	b.w	404778 <_svfprintf_r+0x2dc>
  4050bc:	1e5e      	subs	r6, r3, #1
  4050be:	2e00      	cmp	r6, #0
  4050c0:	f77f af0a 	ble.w	404ed8 <_svfprintf_r+0xa3c>
  4050c4:	2e10      	cmp	r6, #16
  4050c6:	4d03      	ldr	r5, [pc, #12]	; (4050d4 <_svfprintf_r+0xc38>)
  4050c8:	dd22      	ble.n	405110 <_svfprintf_r+0xc74>
  4050ca:	4622      	mov	r2, r4
  4050cc:	f04f 0b10 	mov.w	fp, #16
  4050d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4050d2:	e006      	b.n	4050e2 <_svfprintf_r+0xc46>
  4050d4:	00409f34 	.word	0x00409f34
  4050d8:	3e10      	subs	r6, #16
  4050da:	2e10      	cmp	r6, #16
  4050dc:	f108 0808 	add.w	r8, r8, #8
  4050e0:	dd15      	ble.n	40510e <_svfprintf_r+0xc72>
  4050e2:	3701      	adds	r7, #1
  4050e4:	3210      	adds	r2, #16
  4050e6:	2f07      	cmp	r7, #7
  4050e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4050ea:	9726      	str	r7, [sp, #152]	; 0x98
  4050ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4050f0:	ddf2      	ble.n	4050d8 <_svfprintf_r+0xc3c>
  4050f2:	aa25      	add	r2, sp, #148	; 0x94
  4050f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050f6:	4620      	mov	r0, r4
  4050f8:	f003 fdf2 	bl	408ce0 <__ssprint_r>
  4050fc:	2800      	cmp	r0, #0
  4050fe:	f47f aa9f 	bne.w	404640 <_svfprintf_r+0x1a4>
  405102:	3e10      	subs	r6, #16
  405104:	2e10      	cmp	r6, #16
  405106:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405108:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40510a:	46c8      	mov	r8, r9
  40510c:	dce9      	bgt.n	4050e2 <_svfprintf_r+0xc46>
  40510e:	4614      	mov	r4, r2
  405110:	3701      	adds	r7, #1
  405112:	4434      	add	r4, r6
  405114:	2f07      	cmp	r7, #7
  405116:	9427      	str	r4, [sp, #156]	; 0x9c
  405118:	9726      	str	r7, [sp, #152]	; 0x98
  40511a:	e888 0060 	stmia.w	r8, {r5, r6}
  40511e:	f77f aed9 	ble.w	404ed4 <_svfprintf_r+0xa38>
  405122:	aa25      	add	r2, sp, #148	; 0x94
  405124:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405126:	980c      	ldr	r0, [sp, #48]	; 0x30
  405128:	f003 fdda 	bl	408ce0 <__ssprint_r>
  40512c:	2800      	cmp	r0, #0
  40512e:	f47f aa87 	bne.w	404640 <_svfprintf_r+0x1a4>
  405132:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405134:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405136:	46c8      	mov	r8, r9
  405138:	e6ce      	b.n	404ed8 <_svfprintf_r+0xa3c>
  40513a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40513c:	6814      	ldr	r4, [r2, #0]
  40513e:	4613      	mov	r3, r2
  405140:	3304      	adds	r3, #4
  405142:	17e5      	asrs	r5, r4, #31
  405144:	930f      	str	r3, [sp, #60]	; 0x3c
  405146:	4622      	mov	r2, r4
  405148:	462b      	mov	r3, r5
  40514a:	e4fa      	b.n	404b42 <_svfprintf_r+0x6a6>
  40514c:	3204      	adds	r2, #4
  40514e:	681c      	ldr	r4, [r3, #0]
  405150:	920f      	str	r2, [sp, #60]	; 0x3c
  405152:	2301      	movs	r3, #1
  405154:	2500      	movs	r5, #0
  405156:	f7ff ba94 	b.w	404682 <_svfprintf_r+0x1e6>
  40515a:	681c      	ldr	r4, [r3, #0]
  40515c:	3304      	adds	r3, #4
  40515e:	930f      	str	r3, [sp, #60]	; 0x3c
  405160:	2500      	movs	r5, #0
  405162:	e421      	b.n	4049a8 <_svfprintf_r+0x50c>
  405164:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405166:	460a      	mov	r2, r1
  405168:	3204      	adds	r2, #4
  40516a:	680c      	ldr	r4, [r1, #0]
  40516c:	920f      	str	r2, [sp, #60]	; 0x3c
  40516e:	2500      	movs	r5, #0
  405170:	f7ff ba87 	b.w	404682 <_svfprintf_r+0x1e6>
  405174:	4614      	mov	r4, r2
  405176:	3301      	adds	r3, #1
  405178:	4434      	add	r4, r6
  40517a:	2b07      	cmp	r3, #7
  40517c:	9427      	str	r4, [sp, #156]	; 0x9c
  40517e:	9326      	str	r3, [sp, #152]	; 0x98
  405180:	e888 0060 	stmia.w	r8, {r5, r6}
  405184:	f77f ab68 	ble.w	404858 <_svfprintf_r+0x3bc>
  405188:	e6b3      	b.n	404ef2 <_svfprintf_r+0xa56>
  40518a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40518e:	f8cd b01c 	str.w	fp, [sp, #28]
  405192:	ae42      	add	r6, sp, #264	; 0x108
  405194:	3430      	adds	r4, #48	; 0x30
  405196:	2301      	movs	r3, #1
  405198:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40519c:	930e      	str	r3, [sp, #56]	; 0x38
  40519e:	f7ff ba8d 	b.w	4046bc <_svfprintf_r+0x220>
  4051a2:	aa25      	add	r2, sp, #148	; 0x94
  4051a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051a8:	f003 fd9a 	bl	408ce0 <__ssprint_r>
  4051ac:	2800      	cmp	r0, #0
  4051ae:	f47f aa47 	bne.w	404640 <_svfprintf_r+0x1a4>
  4051b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4051b4:	46c8      	mov	r8, r9
  4051b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4051b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4051ba:	429a      	cmp	r2, r3
  4051bc:	db44      	blt.n	405248 <_svfprintf_r+0xdac>
  4051be:	9b07      	ldr	r3, [sp, #28]
  4051c0:	07d9      	lsls	r1, r3, #31
  4051c2:	d441      	bmi.n	405248 <_svfprintf_r+0xdac>
  4051c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4051c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4051c8:	1a9a      	subs	r2, r3, r2
  4051ca:	1a1d      	subs	r5, r3, r0
  4051cc:	4295      	cmp	r5, r2
  4051ce:	bfa8      	it	ge
  4051d0:	4615      	movge	r5, r2
  4051d2:	2d00      	cmp	r5, #0
  4051d4:	dd0e      	ble.n	4051f4 <_svfprintf_r+0xd58>
  4051d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4051d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4051dc:	3101      	adds	r1, #1
  4051de:	4406      	add	r6, r0
  4051e0:	442c      	add	r4, r5
  4051e2:	2907      	cmp	r1, #7
  4051e4:	f8c8 6000 	str.w	r6, [r8]
  4051e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4051ea:	9126      	str	r1, [sp, #152]	; 0x98
  4051ec:	f300 823b 	bgt.w	405666 <_svfprintf_r+0x11ca>
  4051f0:	f108 0808 	add.w	r8, r8, #8
  4051f4:	2d00      	cmp	r5, #0
  4051f6:	bfac      	ite	ge
  4051f8:	1b56      	subge	r6, r2, r5
  4051fa:	4616      	movlt	r6, r2
  4051fc:	2e00      	cmp	r6, #0
  4051fe:	f77f ab2d 	ble.w	40485c <_svfprintf_r+0x3c0>
  405202:	2e10      	cmp	r6, #16
  405204:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405206:	4db0      	ldr	r5, [pc, #704]	; (4054c8 <_svfprintf_r+0x102c>)
  405208:	ddb5      	ble.n	405176 <_svfprintf_r+0xcda>
  40520a:	4622      	mov	r2, r4
  40520c:	2710      	movs	r7, #16
  40520e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405212:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405214:	e004      	b.n	405220 <_svfprintf_r+0xd84>
  405216:	f108 0808 	add.w	r8, r8, #8
  40521a:	3e10      	subs	r6, #16
  40521c:	2e10      	cmp	r6, #16
  40521e:	dda9      	ble.n	405174 <_svfprintf_r+0xcd8>
  405220:	3301      	adds	r3, #1
  405222:	3210      	adds	r2, #16
  405224:	2b07      	cmp	r3, #7
  405226:	9227      	str	r2, [sp, #156]	; 0x9c
  405228:	9326      	str	r3, [sp, #152]	; 0x98
  40522a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40522e:	ddf2      	ble.n	405216 <_svfprintf_r+0xd7a>
  405230:	aa25      	add	r2, sp, #148	; 0x94
  405232:	4621      	mov	r1, r4
  405234:	4658      	mov	r0, fp
  405236:	f003 fd53 	bl	408ce0 <__ssprint_r>
  40523a:	2800      	cmp	r0, #0
  40523c:	f47f aa00 	bne.w	404640 <_svfprintf_r+0x1a4>
  405240:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405242:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405244:	46c8      	mov	r8, r9
  405246:	e7e8      	b.n	40521a <_svfprintf_r+0xd7e>
  405248:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40524a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40524c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40524e:	f8c8 1000 	str.w	r1, [r8]
  405252:	3301      	adds	r3, #1
  405254:	4404      	add	r4, r0
  405256:	2b07      	cmp	r3, #7
  405258:	9427      	str	r4, [sp, #156]	; 0x9c
  40525a:	f8c8 0004 	str.w	r0, [r8, #4]
  40525e:	9326      	str	r3, [sp, #152]	; 0x98
  405260:	f300 81f5 	bgt.w	40564e <_svfprintf_r+0x11b2>
  405264:	f108 0808 	add.w	r8, r8, #8
  405268:	e7ac      	b.n	4051c4 <_svfprintf_r+0xd28>
  40526a:	9b07      	ldr	r3, [sp, #28]
  40526c:	07da      	lsls	r2, r3, #31
  40526e:	f53f adfe 	bmi.w	404e6e <_svfprintf_r+0x9d2>
  405272:	3701      	adds	r7, #1
  405274:	3401      	adds	r4, #1
  405276:	2301      	movs	r3, #1
  405278:	2f07      	cmp	r7, #7
  40527a:	9427      	str	r4, [sp, #156]	; 0x9c
  40527c:	9726      	str	r7, [sp, #152]	; 0x98
  40527e:	f8c8 6000 	str.w	r6, [r8]
  405282:	f8c8 3004 	str.w	r3, [r8, #4]
  405286:	f77f ae25 	ble.w	404ed4 <_svfprintf_r+0xa38>
  40528a:	e74a      	b.n	405122 <_svfprintf_r+0xc86>
  40528c:	aa25      	add	r2, sp, #148	; 0x94
  40528e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405290:	980c      	ldr	r0, [sp, #48]	; 0x30
  405292:	f003 fd25 	bl	408ce0 <__ssprint_r>
  405296:	2800      	cmp	r0, #0
  405298:	f47f a9d2 	bne.w	404640 <_svfprintf_r+0x1a4>
  40529c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40529e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4052a0:	46c8      	mov	r8, r9
  4052a2:	e5f2      	b.n	404e8a <_svfprintf_r+0x9ee>
  4052a4:	aa25      	add	r2, sp, #148	; 0x94
  4052a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4052a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4052aa:	f003 fd19 	bl	408ce0 <__ssprint_r>
  4052ae:	2800      	cmp	r0, #0
  4052b0:	f47f a9c6 	bne.w	404640 <_svfprintf_r+0x1a4>
  4052b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4052b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4052b8:	46c8      	mov	r8, r9
  4052ba:	e5f5      	b.n	404ea8 <_svfprintf_r+0xa0c>
  4052bc:	464e      	mov	r6, r9
  4052be:	f7ff b9fd 	b.w	4046bc <_svfprintf_r+0x220>
  4052c2:	aa25      	add	r2, sp, #148	; 0x94
  4052c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4052c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4052c8:	f003 fd0a 	bl	408ce0 <__ssprint_r>
  4052cc:	2800      	cmp	r0, #0
  4052ce:	f47f a9b7 	bne.w	404640 <_svfprintf_r+0x1a4>
  4052d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4052d4:	46c8      	mov	r8, r9
  4052d6:	f7ff ba72 	b.w	4047be <_svfprintf_r+0x322>
  4052da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4052dc:	4622      	mov	r2, r4
  4052de:	4620      	mov	r0, r4
  4052e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4052e2:	4623      	mov	r3, r4
  4052e4:	4621      	mov	r1, r4
  4052e6:	f004 fbc9 	bl	409a7c <__aeabi_dcmpun>
  4052ea:	2800      	cmp	r0, #0
  4052ec:	f040 8286 	bne.w	4057fc <_svfprintf_r+0x1360>
  4052f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052f2:	3301      	adds	r3, #1
  4052f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4052f6:	f023 0320 	bic.w	r3, r3, #32
  4052fa:	930e      	str	r3, [sp, #56]	; 0x38
  4052fc:	f000 81e2 	beq.w	4056c4 <_svfprintf_r+0x1228>
  405300:	2b47      	cmp	r3, #71	; 0x47
  405302:	f000 811e 	beq.w	405542 <_svfprintf_r+0x10a6>
  405306:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40530a:	9307      	str	r3, [sp, #28]
  40530c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40530e:	1e1f      	subs	r7, r3, #0
  405310:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405312:	9308      	str	r3, [sp, #32]
  405314:	bfbb      	ittet	lt
  405316:	463b      	movlt	r3, r7
  405318:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40531c:	2300      	movge	r3, #0
  40531e:	232d      	movlt	r3, #45	; 0x2d
  405320:	9310      	str	r3, [sp, #64]	; 0x40
  405322:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405324:	2b66      	cmp	r3, #102	; 0x66
  405326:	f000 81bb 	beq.w	4056a0 <_svfprintf_r+0x1204>
  40532a:	2b46      	cmp	r3, #70	; 0x46
  40532c:	f000 80df 	beq.w	4054ee <_svfprintf_r+0x1052>
  405330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405332:	9a08      	ldr	r2, [sp, #32]
  405334:	2b45      	cmp	r3, #69	; 0x45
  405336:	bf0c      	ite	eq
  405338:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40533a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40533c:	a823      	add	r0, sp, #140	; 0x8c
  40533e:	a920      	add	r1, sp, #128	; 0x80
  405340:	bf08      	it	eq
  405342:	1c5d      	addeq	r5, r3, #1
  405344:	9004      	str	r0, [sp, #16]
  405346:	9103      	str	r1, [sp, #12]
  405348:	a81f      	add	r0, sp, #124	; 0x7c
  40534a:	2102      	movs	r1, #2
  40534c:	463b      	mov	r3, r7
  40534e:	9002      	str	r0, [sp, #8]
  405350:	9501      	str	r5, [sp, #4]
  405352:	9100      	str	r1, [sp, #0]
  405354:	980c      	ldr	r0, [sp, #48]	; 0x30
  405356:	f001 faa3 	bl	4068a0 <_dtoa_r>
  40535a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40535c:	2b67      	cmp	r3, #103	; 0x67
  40535e:	4606      	mov	r6, r0
  405360:	f040 81e0 	bne.w	405724 <_svfprintf_r+0x1288>
  405364:	f01b 0f01 	tst.w	fp, #1
  405368:	f000 8246 	beq.w	4057f8 <_svfprintf_r+0x135c>
  40536c:	1974      	adds	r4, r6, r5
  40536e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405370:	9808      	ldr	r0, [sp, #32]
  405372:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405374:	4639      	mov	r1, r7
  405376:	f004 fb4f 	bl	409a18 <__aeabi_dcmpeq>
  40537a:	2800      	cmp	r0, #0
  40537c:	f040 8165 	bne.w	40564a <_svfprintf_r+0x11ae>
  405380:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405382:	42a3      	cmp	r3, r4
  405384:	d206      	bcs.n	405394 <_svfprintf_r+0xef8>
  405386:	2130      	movs	r1, #48	; 0x30
  405388:	1c5a      	adds	r2, r3, #1
  40538a:	9223      	str	r2, [sp, #140]	; 0x8c
  40538c:	7019      	strb	r1, [r3, #0]
  40538e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405390:	429c      	cmp	r4, r3
  405392:	d8f9      	bhi.n	405388 <_svfprintf_r+0xeec>
  405394:	1b9b      	subs	r3, r3, r6
  405396:	9313      	str	r3, [sp, #76]	; 0x4c
  405398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40539a:	2b47      	cmp	r3, #71	; 0x47
  40539c:	f000 80e9 	beq.w	405572 <_svfprintf_r+0x10d6>
  4053a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053a2:	2b65      	cmp	r3, #101	; 0x65
  4053a4:	f340 81cd 	ble.w	405742 <_svfprintf_r+0x12a6>
  4053a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053aa:	2b66      	cmp	r3, #102	; 0x66
  4053ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4053ae:	9312      	str	r3, [sp, #72]	; 0x48
  4053b0:	f000 819e 	beq.w	4056f0 <_svfprintf_r+0x1254>
  4053b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4053b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4053b8:	4619      	mov	r1, r3
  4053ba:	4291      	cmp	r1, r2
  4053bc:	f300 818a 	bgt.w	4056d4 <_svfprintf_r+0x1238>
  4053c0:	f01b 0f01 	tst.w	fp, #1
  4053c4:	f040 8213 	bne.w	4057ee <_svfprintf_r+0x1352>
  4053c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4053cc:	9308      	str	r3, [sp, #32]
  4053ce:	2367      	movs	r3, #103	; 0x67
  4053d0:	920e      	str	r2, [sp, #56]	; 0x38
  4053d2:	9311      	str	r3, [sp, #68]	; 0x44
  4053d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4053d6:	2b00      	cmp	r3, #0
  4053d8:	f040 80c4 	bne.w	405564 <_svfprintf_r+0x10c8>
  4053dc:	930a      	str	r3, [sp, #40]	; 0x28
  4053de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4053e2:	f7ff b973 	b.w	4046cc <_svfprintf_r+0x230>
  4053e6:	4635      	mov	r5, r6
  4053e8:	460c      	mov	r4, r1
  4053ea:	4646      	mov	r6, r8
  4053ec:	4690      	mov	r8, r2
  4053ee:	3301      	adds	r3, #1
  4053f0:	443c      	add	r4, r7
  4053f2:	2b07      	cmp	r3, #7
  4053f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4053f6:	9326      	str	r3, [sp, #152]	; 0x98
  4053f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4053fc:	f73f aed1 	bgt.w	4051a2 <_svfprintf_r+0xd06>
  405400:	f108 0808 	add.w	r8, r8, #8
  405404:	e6d7      	b.n	4051b6 <_svfprintf_r+0xd1a>
  405406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405408:	6813      	ldr	r3, [r2, #0]
  40540a:	3204      	adds	r2, #4
  40540c:	920f      	str	r2, [sp, #60]	; 0x3c
  40540e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405410:	601a      	str	r2, [r3, #0]
  405412:	f7ff b86a 	b.w	4044ea <_svfprintf_r+0x4e>
  405416:	aa25      	add	r2, sp, #148	; 0x94
  405418:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40541a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40541c:	f003 fc60 	bl	408ce0 <__ssprint_r>
  405420:	2800      	cmp	r0, #0
  405422:	f47f a90d 	bne.w	404640 <_svfprintf_r+0x1a4>
  405426:	46c8      	mov	r8, r9
  405428:	e48d      	b.n	404d46 <_svfprintf_r+0x8aa>
  40542a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40542c:	4a27      	ldr	r2, [pc, #156]	; (4054cc <_svfprintf_r+0x1030>)
  40542e:	f8c8 2000 	str.w	r2, [r8]
  405432:	3301      	adds	r3, #1
  405434:	3401      	adds	r4, #1
  405436:	2201      	movs	r2, #1
  405438:	2b07      	cmp	r3, #7
  40543a:	9427      	str	r4, [sp, #156]	; 0x9c
  40543c:	9326      	str	r3, [sp, #152]	; 0x98
  40543e:	f8c8 2004 	str.w	r2, [r8, #4]
  405442:	dc72      	bgt.n	40552a <_svfprintf_r+0x108e>
  405444:	f108 0808 	add.w	r8, r8, #8
  405448:	b929      	cbnz	r1, 405456 <_svfprintf_r+0xfba>
  40544a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40544c:	b91b      	cbnz	r3, 405456 <_svfprintf_r+0xfba>
  40544e:	9b07      	ldr	r3, [sp, #28]
  405450:	07d8      	lsls	r0, r3, #31
  405452:	f57f aa03 	bpl.w	40485c <_svfprintf_r+0x3c0>
  405456:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405458:	9819      	ldr	r0, [sp, #100]	; 0x64
  40545a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40545c:	f8c8 2000 	str.w	r2, [r8]
  405460:	3301      	adds	r3, #1
  405462:	4602      	mov	r2, r0
  405464:	4422      	add	r2, r4
  405466:	2b07      	cmp	r3, #7
  405468:	9227      	str	r2, [sp, #156]	; 0x9c
  40546a:	f8c8 0004 	str.w	r0, [r8, #4]
  40546e:	9326      	str	r3, [sp, #152]	; 0x98
  405470:	f300 818d 	bgt.w	40578e <_svfprintf_r+0x12f2>
  405474:	f108 0808 	add.w	r8, r8, #8
  405478:	2900      	cmp	r1, #0
  40547a:	f2c0 8165 	blt.w	405748 <_svfprintf_r+0x12ac>
  40547e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405480:	f8c8 6000 	str.w	r6, [r8]
  405484:	3301      	adds	r3, #1
  405486:	188c      	adds	r4, r1, r2
  405488:	2b07      	cmp	r3, #7
  40548a:	9427      	str	r4, [sp, #156]	; 0x9c
  40548c:	9326      	str	r3, [sp, #152]	; 0x98
  40548e:	f8c8 1004 	str.w	r1, [r8, #4]
  405492:	f77f a9e1 	ble.w	404858 <_svfprintf_r+0x3bc>
  405496:	e52c      	b.n	404ef2 <_svfprintf_r+0xa56>
  405498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40549a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40549c:	6813      	ldr	r3, [r2, #0]
  40549e:	17cd      	asrs	r5, r1, #31
  4054a0:	4608      	mov	r0, r1
  4054a2:	3204      	adds	r2, #4
  4054a4:	4629      	mov	r1, r5
  4054a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4054a8:	e9c3 0100 	strd	r0, r1, [r3]
  4054ac:	f7ff b81d 	b.w	4044ea <_svfprintf_r+0x4e>
  4054b0:	aa25      	add	r2, sp, #148	; 0x94
  4054b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054b6:	f003 fc13 	bl	408ce0 <__ssprint_r>
  4054ba:	2800      	cmp	r0, #0
  4054bc:	f47f a8c0 	bne.w	404640 <_svfprintf_r+0x1a4>
  4054c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054c2:	46c8      	mov	r8, r9
  4054c4:	e458      	b.n	404d78 <_svfprintf_r+0x8dc>
  4054c6:	bf00      	nop
  4054c8:	00409f34 	.word	0x00409f34
  4054cc:	00409f20 	.word	0x00409f20
  4054d0:	2140      	movs	r1, #64	; 0x40
  4054d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054d4:	f7fe fabc 	bl	403a50 <_malloc_r>
  4054d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4054da:	6010      	str	r0, [r2, #0]
  4054dc:	6110      	str	r0, [r2, #16]
  4054de:	2800      	cmp	r0, #0
  4054e0:	f000 81f2 	beq.w	4058c8 <_svfprintf_r+0x142c>
  4054e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4054e6:	2340      	movs	r3, #64	; 0x40
  4054e8:	6153      	str	r3, [r2, #20]
  4054ea:	f7fe bfee 	b.w	4044ca <_svfprintf_r+0x2e>
  4054ee:	a823      	add	r0, sp, #140	; 0x8c
  4054f0:	a920      	add	r1, sp, #128	; 0x80
  4054f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4054f4:	9004      	str	r0, [sp, #16]
  4054f6:	9103      	str	r1, [sp, #12]
  4054f8:	a81f      	add	r0, sp, #124	; 0x7c
  4054fa:	2103      	movs	r1, #3
  4054fc:	9002      	str	r0, [sp, #8]
  4054fe:	9a08      	ldr	r2, [sp, #32]
  405500:	9401      	str	r4, [sp, #4]
  405502:	463b      	mov	r3, r7
  405504:	9100      	str	r1, [sp, #0]
  405506:	980c      	ldr	r0, [sp, #48]	; 0x30
  405508:	f001 f9ca 	bl	4068a0 <_dtoa_r>
  40550c:	4625      	mov	r5, r4
  40550e:	4606      	mov	r6, r0
  405510:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405512:	2b46      	cmp	r3, #70	; 0x46
  405514:	eb06 0405 	add.w	r4, r6, r5
  405518:	f47f af29 	bne.w	40536e <_svfprintf_r+0xed2>
  40551c:	7833      	ldrb	r3, [r6, #0]
  40551e:	2b30      	cmp	r3, #48	; 0x30
  405520:	f000 8178 	beq.w	405814 <_svfprintf_r+0x1378>
  405524:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405526:	442c      	add	r4, r5
  405528:	e721      	b.n	40536e <_svfprintf_r+0xed2>
  40552a:	aa25      	add	r2, sp, #148	; 0x94
  40552c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40552e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405530:	f003 fbd6 	bl	408ce0 <__ssprint_r>
  405534:	2800      	cmp	r0, #0
  405536:	f47f a883 	bne.w	404640 <_svfprintf_r+0x1a4>
  40553a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40553c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40553e:	46c8      	mov	r8, r9
  405540:	e782      	b.n	405448 <_svfprintf_r+0xfac>
  405542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405544:	2b00      	cmp	r3, #0
  405546:	bf08      	it	eq
  405548:	2301      	moveq	r3, #1
  40554a:	930a      	str	r3, [sp, #40]	; 0x28
  40554c:	e6db      	b.n	405306 <_svfprintf_r+0xe6a>
  40554e:	4630      	mov	r0, r6
  405550:	940a      	str	r4, [sp, #40]	; 0x28
  405552:	f7fe ff35 	bl	4043c0 <strlen>
  405556:	950f      	str	r5, [sp, #60]	; 0x3c
  405558:	900e      	str	r0, [sp, #56]	; 0x38
  40555a:	f8cd b01c 	str.w	fp, [sp, #28]
  40555e:	4603      	mov	r3, r0
  405560:	f7ff b9f9 	b.w	404956 <_svfprintf_r+0x4ba>
  405564:	272d      	movs	r7, #45	; 0x2d
  405566:	2300      	movs	r3, #0
  405568:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40556c:	930a      	str	r3, [sp, #40]	; 0x28
  40556e:	f7ff b8ae 	b.w	4046ce <_svfprintf_r+0x232>
  405572:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405574:	9312      	str	r3, [sp, #72]	; 0x48
  405576:	461a      	mov	r2, r3
  405578:	3303      	adds	r3, #3
  40557a:	db04      	blt.n	405586 <_svfprintf_r+0x10ea>
  40557c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40557e:	4619      	mov	r1, r3
  405580:	4291      	cmp	r1, r2
  405582:	f6bf af17 	bge.w	4053b4 <_svfprintf_r+0xf18>
  405586:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405588:	3b02      	subs	r3, #2
  40558a:	9311      	str	r3, [sp, #68]	; 0x44
  40558c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405590:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405594:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405596:	3b01      	subs	r3, #1
  405598:	2b00      	cmp	r3, #0
  40559a:	931f      	str	r3, [sp, #124]	; 0x7c
  40559c:	bfbd      	ittte	lt
  40559e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4055a0:	f1c3 0301 	rsblt	r3, r3, #1
  4055a4:	222d      	movlt	r2, #45	; 0x2d
  4055a6:	222b      	movge	r2, #43	; 0x2b
  4055a8:	2b09      	cmp	r3, #9
  4055aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4055ae:	f340 8116 	ble.w	4057de <_svfprintf_r+0x1342>
  4055b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4055b6:	4620      	mov	r0, r4
  4055b8:	4dab      	ldr	r5, [pc, #684]	; (405868 <_svfprintf_r+0x13cc>)
  4055ba:	e000      	b.n	4055be <_svfprintf_r+0x1122>
  4055bc:	4610      	mov	r0, r2
  4055be:	fb85 1203 	smull	r1, r2, r5, r3
  4055c2:	17d9      	asrs	r1, r3, #31
  4055c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4055c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4055cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4055d0:	3230      	adds	r2, #48	; 0x30
  4055d2:	2909      	cmp	r1, #9
  4055d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  4055d8:	460b      	mov	r3, r1
  4055da:	f100 32ff 	add.w	r2, r0, #4294967295
  4055de:	dced      	bgt.n	4055bc <_svfprintf_r+0x1120>
  4055e0:	3330      	adds	r3, #48	; 0x30
  4055e2:	3802      	subs	r0, #2
  4055e4:	b2d9      	uxtb	r1, r3
  4055e6:	4284      	cmp	r4, r0
  4055e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4055ec:	f240 8165 	bls.w	4058ba <_svfprintf_r+0x141e>
  4055f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4055f4:	4613      	mov	r3, r2
  4055f6:	e001      	b.n	4055fc <_svfprintf_r+0x1160>
  4055f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4055fc:	f800 1b01 	strb.w	r1, [r0], #1
  405600:	42a3      	cmp	r3, r4
  405602:	d1f9      	bne.n	4055f8 <_svfprintf_r+0x115c>
  405604:	3301      	adds	r3, #1
  405606:	1a9b      	subs	r3, r3, r2
  405608:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40560c:	4413      	add	r3, r2
  40560e:	aa21      	add	r2, sp, #132	; 0x84
  405610:	1a9b      	subs	r3, r3, r2
  405612:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405614:	931b      	str	r3, [sp, #108]	; 0x6c
  405616:	2a01      	cmp	r2, #1
  405618:	4413      	add	r3, r2
  40561a:	930e      	str	r3, [sp, #56]	; 0x38
  40561c:	f340 8119 	ble.w	405852 <_svfprintf_r+0x13b6>
  405620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405622:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405624:	4413      	add	r3, r2
  405626:	930e      	str	r3, [sp, #56]	; 0x38
  405628:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40562c:	9308      	str	r3, [sp, #32]
  40562e:	2300      	movs	r3, #0
  405630:	9312      	str	r3, [sp, #72]	; 0x48
  405632:	e6cf      	b.n	4053d4 <_svfprintf_r+0xf38>
  405634:	aa25      	add	r2, sp, #148	; 0x94
  405636:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405638:	980c      	ldr	r0, [sp, #48]	; 0x30
  40563a:	f003 fb51 	bl	408ce0 <__ssprint_r>
  40563e:	2800      	cmp	r0, #0
  405640:	f47e affe 	bne.w	404640 <_svfprintf_r+0x1a4>
  405644:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405646:	46c8      	mov	r8, r9
  405648:	e4d7      	b.n	404ffa <_svfprintf_r+0xb5e>
  40564a:	4623      	mov	r3, r4
  40564c:	e6a2      	b.n	405394 <_svfprintf_r+0xef8>
  40564e:	aa25      	add	r2, sp, #148	; 0x94
  405650:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405652:	980c      	ldr	r0, [sp, #48]	; 0x30
  405654:	f003 fb44 	bl	408ce0 <__ssprint_r>
  405658:	2800      	cmp	r0, #0
  40565a:	f47e aff1 	bne.w	404640 <_svfprintf_r+0x1a4>
  40565e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405660:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405662:	46c8      	mov	r8, r9
  405664:	e5ae      	b.n	4051c4 <_svfprintf_r+0xd28>
  405666:	aa25      	add	r2, sp, #148	; 0x94
  405668:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40566a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40566c:	f003 fb38 	bl	408ce0 <__ssprint_r>
  405670:	2800      	cmp	r0, #0
  405672:	f47e afe5 	bne.w	404640 <_svfprintf_r+0x1a4>
  405676:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40567a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40567c:	1a9a      	subs	r2, r3, r2
  40567e:	46c8      	mov	r8, r9
  405680:	e5b8      	b.n	4051f4 <_svfprintf_r+0xd58>
  405682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405684:	9612      	str	r6, [sp, #72]	; 0x48
  405686:	2b06      	cmp	r3, #6
  405688:	bf28      	it	cs
  40568a:	2306      	movcs	r3, #6
  40568c:	960a      	str	r6, [sp, #40]	; 0x28
  40568e:	4637      	mov	r7, r6
  405690:	9308      	str	r3, [sp, #32]
  405692:	950f      	str	r5, [sp, #60]	; 0x3c
  405694:	f8cd b01c 	str.w	fp, [sp, #28]
  405698:	930e      	str	r3, [sp, #56]	; 0x38
  40569a:	4e74      	ldr	r6, [pc, #464]	; (40586c <_svfprintf_r+0x13d0>)
  40569c:	f7ff b816 	b.w	4046cc <_svfprintf_r+0x230>
  4056a0:	a823      	add	r0, sp, #140	; 0x8c
  4056a2:	a920      	add	r1, sp, #128	; 0x80
  4056a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4056a6:	9004      	str	r0, [sp, #16]
  4056a8:	9103      	str	r1, [sp, #12]
  4056aa:	a81f      	add	r0, sp, #124	; 0x7c
  4056ac:	2103      	movs	r1, #3
  4056ae:	9002      	str	r0, [sp, #8]
  4056b0:	9a08      	ldr	r2, [sp, #32]
  4056b2:	9501      	str	r5, [sp, #4]
  4056b4:	463b      	mov	r3, r7
  4056b6:	9100      	str	r1, [sp, #0]
  4056b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056ba:	f001 f8f1 	bl	4068a0 <_dtoa_r>
  4056be:	4606      	mov	r6, r0
  4056c0:	1944      	adds	r4, r0, r5
  4056c2:	e72b      	b.n	40551c <_svfprintf_r+0x1080>
  4056c4:	2306      	movs	r3, #6
  4056c6:	930a      	str	r3, [sp, #40]	; 0x28
  4056c8:	e61d      	b.n	405306 <_svfprintf_r+0xe6a>
  4056ca:	272d      	movs	r7, #45	; 0x2d
  4056cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4056d0:	f7ff bacd 	b.w	404c6e <_svfprintf_r+0x7d2>
  4056d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4056d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4056d8:	4413      	add	r3, r2
  4056da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4056dc:	930e      	str	r3, [sp, #56]	; 0x38
  4056de:	2a00      	cmp	r2, #0
  4056e0:	f340 80b0 	ble.w	405844 <_svfprintf_r+0x13a8>
  4056e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4056e8:	9308      	str	r3, [sp, #32]
  4056ea:	2367      	movs	r3, #103	; 0x67
  4056ec:	9311      	str	r3, [sp, #68]	; 0x44
  4056ee:	e671      	b.n	4053d4 <_svfprintf_r+0xf38>
  4056f0:	2b00      	cmp	r3, #0
  4056f2:	f340 80c3 	ble.w	40587c <_svfprintf_r+0x13e0>
  4056f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4056f8:	2a00      	cmp	r2, #0
  4056fa:	f040 8099 	bne.w	405830 <_svfprintf_r+0x1394>
  4056fe:	f01b 0f01 	tst.w	fp, #1
  405702:	f040 8095 	bne.w	405830 <_svfprintf_r+0x1394>
  405706:	9308      	str	r3, [sp, #32]
  405708:	930e      	str	r3, [sp, #56]	; 0x38
  40570a:	e663      	b.n	4053d4 <_svfprintf_r+0xf38>
  40570c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40570e:	9308      	str	r3, [sp, #32]
  405710:	930e      	str	r3, [sp, #56]	; 0x38
  405712:	900a      	str	r0, [sp, #40]	; 0x28
  405714:	950f      	str	r5, [sp, #60]	; 0x3c
  405716:	f8cd b01c 	str.w	fp, [sp, #28]
  40571a:	9012      	str	r0, [sp, #72]	; 0x48
  40571c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405720:	f7fe bfd4 	b.w	4046cc <_svfprintf_r+0x230>
  405724:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405726:	2b47      	cmp	r3, #71	; 0x47
  405728:	f47f ae20 	bne.w	40536c <_svfprintf_r+0xed0>
  40572c:	f01b 0f01 	tst.w	fp, #1
  405730:	f47f aeee 	bne.w	405510 <_svfprintf_r+0x1074>
  405734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405736:	1b9b      	subs	r3, r3, r6
  405738:	9313      	str	r3, [sp, #76]	; 0x4c
  40573a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40573c:	2b47      	cmp	r3, #71	; 0x47
  40573e:	f43f af18 	beq.w	405572 <_svfprintf_r+0x10d6>
  405742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405744:	9312      	str	r3, [sp, #72]	; 0x48
  405746:	e721      	b.n	40558c <_svfprintf_r+0x10f0>
  405748:	424f      	negs	r7, r1
  40574a:	3110      	adds	r1, #16
  40574c:	4d48      	ldr	r5, [pc, #288]	; (405870 <_svfprintf_r+0x13d4>)
  40574e:	da2f      	bge.n	4057b0 <_svfprintf_r+0x1314>
  405750:	2410      	movs	r4, #16
  405752:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405756:	e004      	b.n	405762 <_svfprintf_r+0x12c6>
  405758:	f108 0808 	add.w	r8, r8, #8
  40575c:	3f10      	subs	r7, #16
  40575e:	2f10      	cmp	r7, #16
  405760:	dd26      	ble.n	4057b0 <_svfprintf_r+0x1314>
  405762:	3301      	adds	r3, #1
  405764:	3210      	adds	r2, #16
  405766:	2b07      	cmp	r3, #7
  405768:	9227      	str	r2, [sp, #156]	; 0x9c
  40576a:	9326      	str	r3, [sp, #152]	; 0x98
  40576c:	f8c8 5000 	str.w	r5, [r8]
  405770:	f8c8 4004 	str.w	r4, [r8, #4]
  405774:	ddf0      	ble.n	405758 <_svfprintf_r+0x12bc>
  405776:	aa25      	add	r2, sp, #148	; 0x94
  405778:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40577a:	4658      	mov	r0, fp
  40577c:	f003 fab0 	bl	408ce0 <__ssprint_r>
  405780:	2800      	cmp	r0, #0
  405782:	f47e af5d 	bne.w	404640 <_svfprintf_r+0x1a4>
  405786:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405788:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40578a:	46c8      	mov	r8, r9
  40578c:	e7e6      	b.n	40575c <_svfprintf_r+0x12c0>
  40578e:	aa25      	add	r2, sp, #148	; 0x94
  405790:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405792:	980c      	ldr	r0, [sp, #48]	; 0x30
  405794:	f003 faa4 	bl	408ce0 <__ssprint_r>
  405798:	2800      	cmp	r0, #0
  40579a:	f47e af51 	bne.w	404640 <_svfprintf_r+0x1a4>
  40579e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4057a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4057a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057a4:	46c8      	mov	r8, r9
  4057a6:	e667      	b.n	405478 <_svfprintf_r+0xfdc>
  4057a8:	2000      	movs	r0, #0
  4057aa:	900a      	str	r0, [sp, #40]	; 0x28
  4057ac:	f7fe bed0 	b.w	404550 <_svfprintf_r+0xb4>
  4057b0:	3301      	adds	r3, #1
  4057b2:	443a      	add	r2, r7
  4057b4:	2b07      	cmp	r3, #7
  4057b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4057ba:	9227      	str	r2, [sp, #156]	; 0x9c
  4057bc:	9326      	str	r3, [sp, #152]	; 0x98
  4057be:	f108 0808 	add.w	r8, r8, #8
  4057c2:	f77f ae5c 	ble.w	40547e <_svfprintf_r+0xfe2>
  4057c6:	aa25      	add	r2, sp, #148	; 0x94
  4057c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057cc:	f003 fa88 	bl	408ce0 <__ssprint_r>
  4057d0:	2800      	cmp	r0, #0
  4057d2:	f47e af35 	bne.w	404640 <_svfprintf_r+0x1a4>
  4057d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4057d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057da:	46c8      	mov	r8, r9
  4057dc:	e64f      	b.n	40547e <_svfprintf_r+0xfe2>
  4057de:	3330      	adds	r3, #48	; 0x30
  4057e0:	2230      	movs	r2, #48	; 0x30
  4057e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4057e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4057ea:	ab22      	add	r3, sp, #136	; 0x88
  4057ec:	e70f      	b.n	40560e <_svfprintf_r+0x1172>
  4057ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4057f2:	4413      	add	r3, r2
  4057f4:	930e      	str	r3, [sp, #56]	; 0x38
  4057f6:	e775      	b.n	4056e4 <_svfprintf_r+0x1248>
  4057f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4057fa:	e5cb      	b.n	405394 <_svfprintf_r+0xef8>
  4057fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4057fe:	4e1d      	ldr	r6, [pc, #116]	; (405874 <_svfprintf_r+0x13d8>)
  405800:	2b00      	cmp	r3, #0
  405802:	bfb6      	itet	lt
  405804:	272d      	movlt	r7, #45	; 0x2d
  405806:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40580a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40580e:	4b1a      	ldr	r3, [pc, #104]	; (405878 <_svfprintf_r+0x13dc>)
  405810:	f7ff ba2f 	b.w	404c72 <_svfprintf_r+0x7d6>
  405814:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405816:	9808      	ldr	r0, [sp, #32]
  405818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40581a:	4639      	mov	r1, r7
  40581c:	f004 f8fc 	bl	409a18 <__aeabi_dcmpeq>
  405820:	2800      	cmp	r0, #0
  405822:	f47f ae7f 	bne.w	405524 <_svfprintf_r+0x1088>
  405826:	f1c5 0501 	rsb	r5, r5, #1
  40582a:	951f      	str	r5, [sp, #124]	; 0x7c
  40582c:	442c      	add	r4, r5
  40582e:	e59e      	b.n	40536e <_svfprintf_r+0xed2>
  405830:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405832:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405834:	4413      	add	r3, r2
  405836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405838:	441a      	add	r2, r3
  40583a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40583e:	920e      	str	r2, [sp, #56]	; 0x38
  405840:	9308      	str	r3, [sp, #32]
  405842:	e5c7      	b.n	4053d4 <_svfprintf_r+0xf38>
  405844:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405848:	f1c3 0301 	rsb	r3, r3, #1
  40584c:	441a      	add	r2, r3
  40584e:	4613      	mov	r3, r2
  405850:	e7d0      	b.n	4057f4 <_svfprintf_r+0x1358>
  405852:	f01b 0301 	ands.w	r3, fp, #1
  405856:	9312      	str	r3, [sp, #72]	; 0x48
  405858:	f47f aee2 	bne.w	405620 <_svfprintf_r+0x1184>
  40585c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40585e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405862:	9308      	str	r3, [sp, #32]
  405864:	e5b6      	b.n	4053d4 <_svfprintf_r+0xf38>
  405866:	bf00      	nop
  405868:	66666667 	.word	0x66666667
  40586c:	00409f18 	.word	0x00409f18
  405870:	00409f34 	.word	0x00409f34
  405874:	00409eec 	.word	0x00409eec
  405878:	00409ee8 	.word	0x00409ee8
  40587c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40587e:	b913      	cbnz	r3, 405886 <_svfprintf_r+0x13ea>
  405880:	f01b 0f01 	tst.w	fp, #1
  405884:	d002      	beq.n	40588c <_svfprintf_r+0x13f0>
  405886:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405888:	3301      	adds	r3, #1
  40588a:	e7d4      	b.n	405836 <_svfprintf_r+0x139a>
  40588c:	2301      	movs	r3, #1
  40588e:	e73a      	b.n	405706 <_svfprintf_r+0x126a>
  405890:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405892:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405896:	6828      	ldr	r0, [r5, #0]
  405898:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40589c:	900a      	str	r0, [sp, #40]	; 0x28
  40589e:	4628      	mov	r0, r5
  4058a0:	3004      	adds	r0, #4
  4058a2:	46a2      	mov	sl, r4
  4058a4:	900f      	str	r0, [sp, #60]	; 0x3c
  4058a6:	f7fe be51 	b.w	40454c <_svfprintf_r+0xb0>
  4058aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4058ae:	f7ff b867 	b.w	404980 <_svfprintf_r+0x4e4>
  4058b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4058b6:	f7ff ba15 	b.w	404ce4 <_svfprintf_r+0x848>
  4058ba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4058be:	e6a6      	b.n	40560e <_svfprintf_r+0x1172>
  4058c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4058c4:	f7ff b8eb 	b.w	404a9e <_svfprintf_r+0x602>
  4058c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4058ca:	230c      	movs	r3, #12
  4058cc:	6013      	str	r3, [r2, #0]
  4058ce:	f04f 33ff 	mov.w	r3, #4294967295
  4058d2:	9309      	str	r3, [sp, #36]	; 0x24
  4058d4:	f7fe bebd 	b.w	404652 <_svfprintf_r+0x1b6>
  4058d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4058dc:	f7ff b99a 	b.w	404c14 <_svfprintf_r+0x778>
  4058e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4058e4:	f7ff b976 	b.w	404bd4 <_svfprintf_r+0x738>
  4058e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4058ec:	f7ff b959 	b.w	404ba2 <_svfprintf_r+0x706>
  4058f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4058f4:	f7ff b912 	b.w	404b1c <_svfprintf_r+0x680>

004058f8 <__sprint_r.part.0>:
  4058f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4058fe:	049c      	lsls	r4, r3, #18
  405900:	4693      	mov	fp, r2
  405902:	d52f      	bpl.n	405964 <__sprint_r.part.0+0x6c>
  405904:	6893      	ldr	r3, [r2, #8]
  405906:	6812      	ldr	r2, [r2, #0]
  405908:	b353      	cbz	r3, 405960 <__sprint_r.part.0+0x68>
  40590a:	460e      	mov	r6, r1
  40590c:	4607      	mov	r7, r0
  40590e:	f102 0908 	add.w	r9, r2, #8
  405912:	e919 0420 	ldmdb	r9, {r5, sl}
  405916:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40591a:	d017      	beq.n	40594c <__sprint_r.part.0+0x54>
  40591c:	3d04      	subs	r5, #4
  40591e:	2400      	movs	r4, #0
  405920:	e001      	b.n	405926 <__sprint_r.part.0+0x2e>
  405922:	45a0      	cmp	r8, r4
  405924:	d010      	beq.n	405948 <__sprint_r.part.0+0x50>
  405926:	4632      	mov	r2, r6
  405928:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40592c:	4638      	mov	r0, r7
  40592e:	f002 f87b 	bl	407a28 <_fputwc_r>
  405932:	1c43      	adds	r3, r0, #1
  405934:	f104 0401 	add.w	r4, r4, #1
  405938:	d1f3      	bne.n	405922 <__sprint_r.part.0+0x2a>
  40593a:	2300      	movs	r3, #0
  40593c:	f8cb 3008 	str.w	r3, [fp, #8]
  405940:	f8cb 3004 	str.w	r3, [fp, #4]
  405944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405948:	f8db 3008 	ldr.w	r3, [fp, #8]
  40594c:	f02a 0a03 	bic.w	sl, sl, #3
  405950:	eba3 030a 	sub.w	r3, r3, sl
  405954:	f8cb 3008 	str.w	r3, [fp, #8]
  405958:	f109 0908 	add.w	r9, r9, #8
  40595c:	2b00      	cmp	r3, #0
  40595e:	d1d8      	bne.n	405912 <__sprint_r.part.0+0x1a>
  405960:	2000      	movs	r0, #0
  405962:	e7ea      	b.n	40593a <__sprint_r.part.0+0x42>
  405964:	f002 f9ca 	bl	407cfc <__sfvwrite_r>
  405968:	2300      	movs	r3, #0
  40596a:	f8cb 3008 	str.w	r3, [fp, #8]
  40596e:	f8cb 3004 	str.w	r3, [fp, #4]
  405972:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405976:	bf00      	nop

00405978 <_vfiprintf_r>:
  405978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40597c:	b0ad      	sub	sp, #180	; 0xb4
  40597e:	461d      	mov	r5, r3
  405980:	468b      	mov	fp, r1
  405982:	4690      	mov	r8, r2
  405984:	9307      	str	r3, [sp, #28]
  405986:	9006      	str	r0, [sp, #24]
  405988:	b118      	cbz	r0, 405992 <_vfiprintf_r+0x1a>
  40598a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40598c:	2b00      	cmp	r3, #0
  40598e:	f000 80f3 	beq.w	405b78 <_vfiprintf_r+0x200>
  405992:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405996:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40599a:	07df      	lsls	r7, r3, #31
  40599c:	b281      	uxth	r1, r0
  40599e:	d402      	bmi.n	4059a6 <_vfiprintf_r+0x2e>
  4059a0:	058e      	lsls	r6, r1, #22
  4059a2:	f140 80fc 	bpl.w	405b9e <_vfiprintf_r+0x226>
  4059a6:	048c      	lsls	r4, r1, #18
  4059a8:	d40a      	bmi.n	4059c0 <_vfiprintf_r+0x48>
  4059aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4059ae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4059b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4059b6:	f8ab 100c 	strh.w	r1, [fp, #12]
  4059ba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4059be:	b289      	uxth	r1, r1
  4059c0:	0708      	lsls	r0, r1, #28
  4059c2:	f140 80b3 	bpl.w	405b2c <_vfiprintf_r+0x1b4>
  4059c6:	f8db 3010 	ldr.w	r3, [fp, #16]
  4059ca:	2b00      	cmp	r3, #0
  4059cc:	f000 80ae 	beq.w	405b2c <_vfiprintf_r+0x1b4>
  4059d0:	f001 031a 	and.w	r3, r1, #26
  4059d4:	2b0a      	cmp	r3, #10
  4059d6:	f000 80b5 	beq.w	405b44 <_vfiprintf_r+0x1cc>
  4059da:	2300      	movs	r3, #0
  4059dc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4059e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4059e2:	9311      	str	r3, [sp, #68]	; 0x44
  4059e4:	9310      	str	r3, [sp, #64]	; 0x40
  4059e6:	9303      	str	r3, [sp, #12]
  4059e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4059ec:	46ca      	mov	sl, r9
  4059ee:	f8cd b010 	str.w	fp, [sp, #16]
  4059f2:	f898 3000 	ldrb.w	r3, [r8]
  4059f6:	4644      	mov	r4, r8
  4059f8:	b1fb      	cbz	r3, 405a3a <_vfiprintf_r+0xc2>
  4059fa:	2b25      	cmp	r3, #37	; 0x25
  4059fc:	d102      	bne.n	405a04 <_vfiprintf_r+0x8c>
  4059fe:	e01c      	b.n	405a3a <_vfiprintf_r+0xc2>
  405a00:	2b25      	cmp	r3, #37	; 0x25
  405a02:	d003      	beq.n	405a0c <_vfiprintf_r+0x94>
  405a04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405a08:	2b00      	cmp	r3, #0
  405a0a:	d1f9      	bne.n	405a00 <_vfiprintf_r+0x88>
  405a0c:	eba4 0508 	sub.w	r5, r4, r8
  405a10:	b19d      	cbz	r5, 405a3a <_vfiprintf_r+0xc2>
  405a12:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405a14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a16:	f8ca 8000 	str.w	r8, [sl]
  405a1a:	3301      	adds	r3, #1
  405a1c:	442a      	add	r2, r5
  405a1e:	2b07      	cmp	r3, #7
  405a20:	f8ca 5004 	str.w	r5, [sl, #4]
  405a24:	9211      	str	r2, [sp, #68]	; 0x44
  405a26:	9310      	str	r3, [sp, #64]	; 0x40
  405a28:	dd7a      	ble.n	405b20 <_vfiprintf_r+0x1a8>
  405a2a:	2a00      	cmp	r2, #0
  405a2c:	f040 84b0 	bne.w	406390 <_vfiprintf_r+0xa18>
  405a30:	9b03      	ldr	r3, [sp, #12]
  405a32:	9210      	str	r2, [sp, #64]	; 0x40
  405a34:	442b      	add	r3, r5
  405a36:	46ca      	mov	sl, r9
  405a38:	9303      	str	r3, [sp, #12]
  405a3a:	7823      	ldrb	r3, [r4, #0]
  405a3c:	2b00      	cmp	r3, #0
  405a3e:	f000 83e0 	beq.w	406202 <_vfiprintf_r+0x88a>
  405a42:	2000      	movs	r0, #0
  405a44:	f04f 0300 	mov.w	r3, #0
  405a48:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405a4c:	f104 0801 	add.w	r8, r4, #1
  405a50:	7862      	ldrb	r2, [r4, #1]
  405a52:	4605      	mov	r5, r0
  405a54:	4606      	mov	r6, r0
  405a56:	4603      	mov	r3, r0
  405a58:	f04f 34ff 	mov.w	r4, #4294967295
  405a5c:	f108 0801 	add.w	r8, r8, #1
  405a60:	f1a2 0120 	sub.w	r1, r2, #32
  405a64:	2958      	cmp	r1, #88	; 0x58
  405a66:	f200 82de 	bhi.w	406026 <_vfiprintf_r+0x6ae>
  405a6a:	e8df f011 	tbh	[pc, r1, lsl #1]
  405a6e:	0221      	.short	0x0221
  405a70:	02dc02dc 	.word	0x02dc02dc
  405a74:	02dc0229 	.word	0x02dc0229
  405a78:	02dc02dc 	.word	0x02dc02dc
  405a7c:	02dc02dc 	.word	0x02dc02dc
  405a80:	028902dc 	.word	0x028902dc
  405a84:	02dc0295 	.word	0x02dc0295
  405a88:	02bd00a2 	.word	0x02bd00a2
  405a8c:	019f02dc 	.word	0x019f02dc
  405a90:	01a401a4 	.word	0x01a401a4
  405a94:	01a401a4 	.word	0x01a401a4
  405a98:	01a401a4 	.word	0x01a401a4
  405a9c:	01a401a4 	.word	0x01a401a4
  405aa0:	02dc01a4 	.word	0x02dc01a4
  405aa4:	02dc02dc 	.word	0x02dc02dc
  405aa8:	02dc02dc 	.word	0x02dc02dc
  405aac:	02dc02dc 	.word	0x02dc02dc
  405ab0:	02dc02dc 	.word	0x02dc02dc
  405ab4:	01b202dc 	.word	0x01b202dc
  405ab8:	02dc02dc 	.word	0x02dc02dc
  405abc:	02dc02dc 	.word	0x02dc02dc
  405ac0:	02dc02dc 	.word	0x02dc02dc
  405ac4:	02dc02dc 	.word	0x02dc02dc
  405ac8:	02dc02dc 	.word	0x02dc02dc
  405acc:	02dc0197 	.word	0x02dc0197
  405ad0:	02dc02dc 	.word	0x02dc02dc
  405ad4:	02dc02dc 	.word	0x02dc02dc
  405ad8:	02dc019b 	.word	0x02dc019b
  405adc:	025302dc 	.word	0x025302dc
  405ae0:	02dc02dc 	.word	0x02dc02dc
  405ae4:	02dc02dc 	.word	0x02dc02dc
  405ae8:	02dc02dc 	.word	0x02dc02dc
  405aec:	02dc02dc 	.word	0x02dc02dc
  405af0:	02dc02dc 	.word	0x02dc02dc
  405af4:	021b025a 	.word	0x021b025a
  405af8:	02dc02dc 	.word	0x02dc02dc
  405afc:	026e02dc 	.word	0x026e02dc
  405b00:	02dc021b 	.word	0x02dc021b
  405b04:	027302dc 	.word	0x027302dc
  405b08:	01f502dc 	.word	0x01f502dc
  405b0c:	02090182 	.word	0x02090182
  405b10:	02dc02d7 	.word	0x02dc02d7
  405b14:	02dc029a 	.word	0x02dc029a
  405b18:	02dc00a7 	.word	0x02dc00a7
  405b1c:	022e02dc 	.word	0x022e02dc
  405b20:	f10a 0a08 	add.w	sl, sl, #8
  405b24:	9b03      	ldr	r3, [sp, #12]
  405b26:	442b      	add	r3, r5
  405b28:	9303      	str	r3, [sp, #12]
  405b2a:	e786      	b.n	405a3a <_vfiprintf_r+0xc2>
  405b2c:	4659      	mov	r1, fp
  405b2e:	9806      	ldr	r0, [sp, #24]
  405b30:	f000 fdac 	bl	40668c <__swsetup_r>
  405b34:	bb18      	cbnz	r0, 405b7e <_vfiprintf_r+0x206>
  405b36:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405b3a:	f001 031a 	and.w	r3, r1, #26
  405b3e:	2b0a      	cmp	r3, #10
  405b40:	f47f af4b 	bne.w	4059da <_vfiprintf_r+0x62>
  405b44:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405b48:	2b00      	cmp	r3, #0
  405b4a:	f6ff af46 	blt.w	4059da <_vfiprintf_r+0x62>
  405b4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405b52:	07db      	lsls	r3, r3, #31
  405b54:	d405      	bmi.n	405b62 <_vfiprintf_r+0x1ea>
  405b56:	058f      	lsls	r7, r1, #22
  405b58:	d403      	bmi.n	405b62 <_vfiprintf_r+0x1ea>
  405b5a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405b5e:	f002 fa91 	bl	408084 <__retarget_lock_release_recursive>
  405b62:	462b      	mov	r3, r5
  405b64:	4642      	mov	r2, r8
  405b66:	4659      	mov	r1, fp
  405b68:	9806      	ldr	r0, [sp, #24]
  405b6a:	f000 fd4d 	bl	406608 <__sbprintf>
  405b6e:	9003      	str	r0, [sp, #12]
  405b70:	9803      	ldr	r0, [sp, #12]
  405b72:	b02d      	add	sp, #180	; 0xb4
  405b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b78:	f001 feb4 	bl	4078e4 <__sinit>
  405b7c:	e709      	b.n	405992 <_vfiprintf_r+0x1a>
  405b7e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405b82:	07d9      	lsls	r1, r3, #31
  405b84:	d404      	bmi.n	405b90 <_vfiprintf_r+0x218>
  405b86:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405b8a:	059a      	lsls	r2, r3, #22
  405b8c:	f140 84aa 	bpl.w	4064e4 <_vfiprintf_r+0xb6c>
  405b90:	f04f 33ff 	mov.w	r3, #4294967295
  405b94:	9303      	str	r3, [sp, #12]
  405b96:	9803      	ldr	r0, [sp, #12]
  405b98:	b02d      	add	sp, #180	; 0xb4
  405b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b9e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405ba2:	f002 fa6d 	bl	408080 <__retarget_lock_acquire_recursive>
  405ba6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405baa:	b281      	uxth	r1, r0
  405bac:	e6fb      	b.n	4059a6 <_vfiprintf_r+0x2e>
  405bae:	4276      	negs	r6, r6
  405bb0:	9207      	str	r2, [sp, #28]
  405bb2:	f043 0304 	orr.w	r3, r3, #4
  405bb6:	f898 2000 	ldrb.w	r2, [r8]
  405bba:	e74f      	b.n	405a5c <_vfiprintf_r+0xe4>
  405bbc:	9608      	str	r6, [sp, #32]
  405bbe:	069e      	lsls	r6, r3, #26
  405bc0:	f100 8450 	bmi.w	406464 <_vfiprintf_r+0xaec>
  405bc4:	9907      	ldr	r1, [sp, #28]
  405bc6:	06dd      	lsls	r5, r3, #27
  405bc8:	460a      	mov	r2, r1
  405bca:	f100 83ef 	bmi.w	4063ac <_vfiprintf_r+0xa34>
  405bce:	0658      	lsls	r0, r3, #25
  405bd0:	f140 83ec 	bpl.w	4063ac <_vfiprintf_r+0xa34>
  405bd4:	880e      	ldrh	r6, [r1, #0]
  405bd6:	3104      	adds	r1, #4
  405bd8:	2700      	movs	r7, #0
  405bda:	2201      	movs	r2, #1
  405bdc:	9107      	str	r1, [sp, #28]
  405bde:	f04f 0100 	mov.w	r1, #0
  405be2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405be6:	2500      	movs	r5, #0
  405be8:	1c61      	adds	r1, r4, #1
  405bea:	f000 8116 	beq.w	405e1a <_vfiprintf_r+0x4a2>
  405bee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405bf2:	9102      	str	r1, [sp, #8]
  405bf4:	ea56 0107 	orrs.w	r1, r6, r7
  405bf8:	f040 8114 	bne.w	405e24 <_vfiprintf_r+0x4ac>
  405bfc:	2c00      	cmp	r4, #0
  405bfe:	f040 835c 	bne.w	4062ba <_vfiprintf_r+0x942>
  405c02:	2a00      	cmp	r2, #0
  405c04:	f040 83b7 	bne.w	406376 <_vfiprintf_r+0x9fe>
  405c08:	f013 0301 	ands.w	r3, r3, #1
  405c0c:	9305      	str	r3, [sp, #20]
  405c0e:	f000 8457 	beq.w	4064c0 <_vfiprintf_r+0xb48>
  405c12:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405c16:	2330      	movs	r3, #48	; 0x30
  405c18:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405c1c:	9b05      	ldr	r3, [sp, #20]
  405c1e:	42a3      	cmp	r3, r4
  405c20:	bfb8      	it	lt
  405c22:	4623      	movlt	r3, r4
  405c24:	9301      	str	r3, [sp, #4]
  405c26:	b10d      	cbz	r5, 405c2c <_vfiprintf_r+0x2b4>
  405c28:	3301      	adds	r3, #1
  405c2a:	9301      	str	r3, [sp, #4]
  405c2c:	9b02      	ldr	r3, [sp, #8]
  405c2e:	f013 0302 	ands.w	r3, r3, #2
  405c32:	9309      	str	r3, [sp, #36]	; 0x24
  405c34:	d002      	beq.n	405c3c <_vfiprintf_r+0x2c4>
  405c36:	9b01      	ldr	r3, [sp, #4]
  405c38:	3302      	adds	r3, #2
  405c3a:	9301      	str	r3, [sp, #4]
  405c3c:	9b02      	ldr	r3, [sp, #8]
  405c3e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405c42:	930a      	str	r3, [sp, #40]	; 0x28
  405c44:	f040 8217 	bne.w	406076 <_vfiprintf_r+0x6fe>
  405c48:	9b08      	ldr	r3, [sp, #32]
  405c4a:	9a01      	ldr	r2, [sp, #4]
  405c4c:	1a9d      	subs	r5, r3, r2
  405c4e:	2d00      	cmp	r5, #0
  405c50:	f340 8211 	ble.w	406076 <_vfiprintf_r+0x6fe>
  405c54:	2d10      	cmp	r5, #16
  405c56:	f340 8490 	ble.w	40657a <_vfiprintf_r+0xc02>
  405c5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405c5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c5e:	4ec4      	ldr	r6, [pc, #784]	; (405f70 <_vfiprintf_r+0x5f8>)
  405c60:	46d6      	mov	lr, sl
  405c62:	2710      	movs	r7, #16
  405c64:	46a2      	mov	sl, r4
  405c66:	4619      	mov	r1, r3
  405c68:	9c06      	ldr	r4, [sp, #24]
  405c6a:	e007      	b.n	405c7c <_vfiprintf_r+0x304>
  405c6c:	f101 0c02 	add.w	ip, r1, #2
  405c70:	f10e 0e08 	add.w	lr, lr, #8
  405c74:	4601      	mov	r1, r0
  405c76:	3d10      	subs	r5, #16
  405c78:	2d10      	cmp	r5, #16
  405c7a:	dd11      	ble.n	405ca0 <_vfiprintf_r+0x328>
  405c7c:	1c48      	adds	r0, r1, #1
  405c7e:	3210      	adds	r2, #16
  405c80:	2807      	cmp	r0, #7
  405c82:	9211      	str	r2, [sp, #68]	; 0x44
  405c84:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405c88:	9010      	str	r0, [sp, #64]	; 0x40
  405c8a:	ddef      	ble.n	405c6c <_vfiprintf_r+0x2f4>
  405c8c:	2a00      	cmp	r2, #0
  405c8e:	f040 81e4 	bne.w	40605a <_vfiprintf_r+0x6e2>
  405c92:	3d10      	subs	r5, #16
  405c94:	2d10      	cmp	r5, #16
  405c96:	4611      	mov	r1, r2
  405c98:	f04f 0c01 	mov.w	ip, #1
  405c9c:	46ce      	mov	lr, r9
  405c9e:	dced      	bgt.n	405c7c <_vfiprintf_r+0x304>
  405ca0:	4654      	mov	r4, sl
  405ca2:	4661      	mov	r1, ip
  405ca4:	46f2      	mov	sl, lr
  405ca6:	442a      	add	r2, r5
  405ca8:	2907      	cmp	r1, #7
  405caa:	9211      	str	r2, [sp, #68]	; 0x44
  405cac:	f8ca 6000 	str.w	r6, [sl]
  405cb0:	f8ca 5004 	str.w	r5, [sl, #4]
  405cb4:	9110      	str	r1, [sp, #64]	; 0x40
  405cb6:	f300 82ec 	bgt.w	406292 <_vfiprintf_r+0x91a>
  405cba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405cbe:	f10a 0a08 	add.w	sl, sl, #8
  405cc2:	1c48      	adds	r0, r1, #1
  405cc4:	2d00      	cmp	r5, #0
  405cc6:	f040 81de 	bne.w	406086 <_vfiprintf_r+0x70e>
  405cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405ccc:	2b00      	cmp	r3, #0
  405cce:	f000 81f8 	beq.w	4060c2 <_vfiprintf_r+0x74a>
  405cd2:	3202      	adds	r2, #2
  405cd4:	a90e      	add	r1, sp, #56	; 0x38
  405cd6:	2302      	movs	r3, #2
  405cd8:	2807      	cmp	r0, #7
  405cda:	9211      	str	r2, [sp, #68]	; 0x44
  405cdc:	9010      	str	r0, [sp, #64]	; 0x40
  405cde:	e88a 000a 	stmia.w	sl, {r1, r3}
  405ce2:	f340 81ea 	ble.w	4060ba <_vfiprintf_r+0x742>
  405ce6:	2a00      	cmp	r2, #0
  405ce8:	f040 838c 	bne.w	406404 <_vfiprintf_r+0xa8c>
  405cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cee:	2b80      	cmp	r3, #128	; 0x80
  405cf0:	f04f 0001 	mov.w	r0, #1
  405cf4:	4611      	mov	r1, r2
  405cf6:	46ca      	mov	sl, r9
  405cf8:	f040 81e7 	bne.w	4060ca <_vfiprintf_r+0x752>
  405cfc:	9b08      	ldr	r3, [sp, #32]
  405cfe:	9d01      	ldr	r5, [sp, #4]
  405d00:	1b5e      	subs	r6, r3, r5
  405d02:	2e00      	cmp	r6, #0
  405d04:	f340 81e1 	ble.w	4060ca <_vfiprintf_r+0x752>
  405d08:	2e10      	cmp	r6, #16
  405d0a:	4d9a      	ldr	r5, [pc, #616]	; (405f74 <_vfiprintf_r+0x5fc>)
  405d0c:	f340 8450 	ble.w	4065b0 <_vfiprintf_r+0xc38>
  405d10:	46d4      	mov	ip, sl
  405d12:	2710      	movs	r7, #16
  405d14:	46a2      	mov	sl, r4
  405d16:	9c06      	ldr	r4, [sp, #24]
  405d18:	e007      	b.n	405d2a <_vfiprintf_r+0x3b2>
  405d1a:	f101 0e02 	add.w	lr, r1, #2
  405d1e:	f10c 0c08 	add.w	ip, ip, #8
  405d22:	4601      	mov	r1, r0
  405d24:	3e10      	subs	r6, #16
  405d26:	2e10      	cmp	r6, #16
  405d28:	dd11      	ble.n	405d4e <_vfiprintf_r+0x3d6>
  405d2a:	1c48      	adds	r0, r1, #1
  405d2c:	3210      	adds	r2, #16
  405d2e:	2807      	cmp	r0, #7
  405d30:	9211      	str	r2, [sp, #68]	; 0x44
  405d32:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405d36:	9010      	str	r0, [sp, #64]	; 0x40
  405d38:	ddef      	ble.n	405d1a <_vfiprintf_r+0x3a2>
  405d3a:	2a00      	cmp	r2, #0
  405d3c:	f040 829d 	bne.w	40627a <_vfiprintf_r+0x902>
  405d40:	3e10      	subs	r6, #16
  405d42:	2e10      	cmp	r6, #16
  405d44:	f04f 0e01 	mov.w	lr, #1
  405d48:	4611      	mov	r1, r2
  405d4a:	46cc      	mov	ip, r9
  405d4c:	dced      	bgt.n	405d2a <_vfiprintf_r+0x3b2>
  405d4e:	4654      	mov	r4, sl
  405d50:	46e2      	mov	sl, ip
  405d52:	4432      	add	r2, r6
  405d54:	f1be 0f07 	cmp.w	lr, #7
  405d58:	9211      	str	r2, [sp, #68]	; 0x44
  405d5a:	e88a 0060 	stmia.w	sl, {r5, r6}
  405d5e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405d62:	f300 8369 	bgt.w	406438 <_vfiprintf_r+0xac0>
  405d66:	f10a 0a08 	add.w	sl, sl, #8
  405d6a:	f10e 0001 	add.w	r0, lr, #1
  405d6e:	4671      	mov	r1, lr
  405d70:	e1ab      	b.n	4060ca <_vfiprintf_r+0x752>
  405d72:	9608      	str	r6, [sp, #32]
  405d74:	f013 0220 	ands.w	r2, r3, #32
  405d78:	f040 838c 	bne.w	406494 <_vfiprintf_r+0xb1c>
  405d7c:	f013 0110 	ands.w	r1, r3, #16
  405d80:	f040 831a 	bne.w	4063b8 <_vfiprintf_r+0xa40>
  405d84:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405d88:	f000 8316 	beq.w	4063b8 <_vfiprintf_r+0xa40>
  405d8c:	9807      	ldr	r0, [sp, #28]
  405d8e:	460a      	mov	r2, r1
  405d90:	4601      	mov	r1, r0
  405d92:	3104      	adds	r1, #4
  405d94:	8806      	ldrh	r6, [r0, #0]
  405d96:	9107      	str	r1, [sp, #28]
  405d98:	2700      	movs	r7, #0
  405d9a:	e720      	b.n	405bde <_vfiprintf_r+0x266>
  405d9c:	9608      	str	r6, [sp, #32]
  405d9e:	f043 0310 	orr.w	r3, r3, #16
  405da2:	e7e7      	b.n	405d74 <_vfiprintf_r+0x3fc>
  405da4:	9608      	str	r6, [sp, #32]
  405da6:	f043 0310 	orr.w	r3, r3, #16
  405daa:	e708      	b.n	405bbe <_vfiprintf_r+0x246>
  405dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405db0:	f898 2000 	ldrb.w	r2, [r8]
  405db4:	e652      	b.n	405a5c <_vfiprintf_r+0xe4>
  405db6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405dba:	2600      	movs	r6, #0
  405dbc:	f818 2b01 	ldrb.w	r2, [r8], #1
  405dc0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405dc4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405dc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405dcc:	2909      	cmp	r1, #9
  405dce:	d9f5      	bls.n	405dbc <_vfiprintf_r+0x444>
  405dd0:	e646      	b.n	405a60 <_vfiprintf_r+0xe8>
  405dd2:	9608      	str	r6, [sp, #32]
  405dd4:	2800      	cmp	r0, #0
  405dd6:	f040 8408 	bne.w	4065ea <_vfiprintf_r+0xc72>
  405dda:	f043 0310 	orr.w	r3, r3, #16
  405dde:	069e      	lsls	r6, r3, #26
  405de0:	f100 834c 	bmi.w	40647c <_vfiprintf_r+0xb04>
  405de4:	06dd      	lsls	r5, r3, #27
  405de6:	f100 82f3 	bmi.w	4063d0 <_vfiprintf_r+0xa58>
  405dea:	0658      	lsls	r0, r3, #25
  405dec:	f140 82f0 	bpl.w	4063d0 <_vfiprintf_r+0xa58>
  405df0:	9d07      	ldr	r5, [sp, #28]
  405df2:	f9b5 6000 	ldrsh.w	r6, [r5]
  405df6:	462a      	mov	r2, r5
  405df8:	17f7      	asrs	r7, r6, #31
  405dfa:	3204      	adds	r2, #4
  405dfc:	4630      	mov	r0, r6
  405dfe:	4639      	mov	r1, r7
  405e00:	9207      	str	r2, [sp, #28]
  405e02:	2800      	cmp	r0, #0
  405e04:	f171 0200 	sbcs.w	r2, r1, #0
  405e08:	f2c0 835d 	blt.w	4064c6 <_vfiprintf_r+0xb4e>
  405e0c:	1c61      	adds	r1, r4, #1
  405e0e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405e12:	f04f 0201 	mov.w	r2, #1
  405e16:	f47f aeea 	bne.w	405bee <_vfiprintf_r+0x276>
  405e1a:	ea56 0107 	orrs.w	r1, r6, r7
  405e1e:	f000 824d 	beq.w	4062bc <_vfiprintf_r+0x944>
  405e22:	9302      	str	r3, [sp, #8]
  405e24:	2a01      	cmp	r2, #1
  405e26:	f000 828c 	beq.w	406342 <_vfiprintf_r+0x9ca>
  405e2a:	2a02      	cmp	r2, #2
  405e2c:	f040 825c 	bne.w	4062e8 <_vfiprintf_r+0x970>
  405e30:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405e32:	46cb      	mov	fp, r9
  405e34:	0933      	lsrs	r3, r6, #4
  405e36:	f006 010f 	and.w	r1, r6, #15
  405e3a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405e3e:	093a      	lsrs	r2, r7, #4
  405e40:	461e      	mov	r6, r3
  405e42:	4617      	mov	r7, r2
  405e44:	5c43      	ldrb	r3, [r0, r1]
  405e46:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405e4a:	ea56 0307 	orrs.w	r3, r6, r7
  405e4e:	d1f1      	bne.n	405e34 <_vfiprintf_r+0x4bc>
  405e50:	eba9 030b 	sub.w	r3, r9, fp
  405e54:	9305      	str	r3, [sp, #20]
  405e56:	e6e1      	b.n	405c1c <_vfiprintf_r+0x2a4>
  405e58:	2800      	cmp	r0, #0
  405e5a:	f040 83c0 	bne.w	4065de <_vfiprintf_r+0xc66>
  405e5e:	0699      	lsls	r1, r3, #26
  405e60:	f100 8367 	bmi.w	406532 <_vfiprintf_r+0xbba>
  405e64:	06da      	lsls	r2, r3, #27
  405e66:	f100 80f1 	bmi.w	40604c <_vfiprintf_r+0x6d4>
  405e6a:	065b      	lsls	r3, r3, #25
  405e6c:	f140 80ee 	bpl.w	40604c <_vfiprintf_r+0x6d4>
  405e70:	9a07      	ldr	r2, [sp, #28]
  405e72:	6813      	ldr	r3, [r2, #0]
  405e74:	3204      	adds	r2, #4
  405e76:	9207      	str	r2, [sp, #28]
  405e78:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405e7c:	801a      	strh	r2, [r3, #0]
  405e7e:	e5b8      	b.n	4059f2 <_vfiprintf_r+0x7a>
  405e80:	9807      	ldr	r0, [sp, #28]
  405e82:	4a3d      	ldr	r2, [pc, #244]	; (405f78 <_vfiprintf_r+0x600>)
  405e84:	9608      	str	r6, [sp, #32]
  405e86:	920b      	str	r2, [sp, #44]	; 0x2c
  405e88:	6806      	ldr	r6, [r0, #0]
  405e8a:	2278      	movs	r2, #120	; 0x78
  405e8c:	2130      	movs	r1, #48	; 0x30
  405e8e:	3004      	adds	r0, #4
  405e90:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405e94:	f043 0302 	orr.w	r3, r3, #2
  405e98:	9007      	str	r0, [sp, #28]
  405e9a:	2700      	movs	r7, #0
  405e9c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405ea0:	2202      	movs	r2, #2
  405ea2:	e69c      	b.n	405bde <_vfiprintf_r+0x266>
  405ea4:	9608      	str	r6, [sp, #32]
  405ea6:	2800      	cmp	r0, #0
  405ea8:	d099      	beq.n	405dde <_vfiprintf_r+0x466>
  405eaa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405eae:	e796      	b.n	405dde <_vfiprintf_r+0x466>
  405eb0:	f898 2000 	ldrb.w	r2, [r8]
  405eb4:	2d00      	cmp	r5, #0
  405eb6:	f47f add1 	bne.w	405a5c <_vfiprintf_r+0xe4>
  405eba:	2001      	movs	r0, #1
  405ebc:	2520      	movs	r5, #32
  405ebe:	e5cd      	b.n	405a5c <_vfiprintf_r+0xe4>
  405ec0:	f043 0301 	orr.w	r3, r3, #1
  405ec4:	f898 2000 	ldrb.w	r2, [r8]
  405ec8:	e5c8      	b.n	405a5c <_vfiprintf_r+0xe4>
  405eca:	9608      	str	r6, [sp, #32]
  405ecc:	2800      	cmp	r0, #0
  405ece:	f040 8393 	bne.w	4065f8 <_vfiprintf_r+0xc80>
  405ed2:	4929      	ldr	r1, [pc, #164]	; (405f78 <_vfiprintf_r+0x600>)
  405ed4:	910b      	str	r1, [sp, #44]	; 0x2c
  405ed6:	069f      	lsls	r7, r3, #26
  405ed8:	f100 82e8 	bmi.w	4064ac <_vfiprintf_r+0xb34>
  405edc:	9807      	ldr	r0, [sp, #28]
  405ede:	06de      	lsls	r6, r3, #27
  405ee0:	4601      	mov	r1, r0
  405ee2:	f100 8270 	bmi.w	4063c6 <_vfiprintf_r+0xa4e>
  405ee6:	065d      	lsls	r5, r3, #25
  405ee8:	f140 826d 	bpl.w	4063c6 <_vfiprintf_r+0xa4e>
  405eec:	3104      	adds	r1, #4
  405eee:	8806      	ldrh	r6, [r0, #0]
  405ef0:	9107      	str	r1, [sp, #28]
  405ef2:	2700      	movs	r7, #0
  405ef4:	07d8      	lsls	r0, r3, #31
  405ef6:	f140 8222 	bpl.w	40633e <_vfiprintf_r+0x9c6>
  405efa:	ea56 0107 	orrs.w	r1, r6, r7
  405efe:	f000 821e 	beq.w	40633e <_vfiprintf_r+0x9c6>
  405f02:	2130      	movs	r1, #48	; 0x30
  405f04:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405f08:	f043 0302 	orr.w	r3, r3, #2
  405f0c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405f10:	2202      	movs	r2, #2
  405f12:	e664      	b.n	405bde <_vfiprintf_r+0x266>
  405f14:	9608      	str	r6, [sp, #32]
  405f16:	2800      	cmp	r0, #0
  405f18:	f040 836b 	bne.w	4065f2 <_vfiprintf_r+0xc7a>
  405f1c:	4917      	ldr	r1, [pc, #92]	; (405f7c <_vfiprintf_r+0x604>)
  405f1e:	910b      	str	r1, [sp, #44]	; 0x2c
  405f20:	e7d9      	b.n	405ed6 <_vfiprintf_r+0x55e>
  405f22:	9907      	ldr	r1, [sp, #28]
  405f24:	9608      	str	r6, [sp, #32]
  405f26:	680a      	ldr	r2, [r1, #0]
  405f28:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405f2c:	f04f 0000 	mov.w	r0, #0
  405f30:	460a      	mov	r2, r1
  405f32:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405f36:	3204      	adds	r2, #4
  405f38:	2001      	movs	r0, #1
  405f3a:	9001      	str	r0, [sp, #4]
  405f3c:	9207      	str	r2, [sp, #28]
  405f3e:	9005      	str	r0, [sp, #20]
  405f40:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405f44:	9302      	str	r3, [sp, #8]
  405f46:	2400      	movs	r4, #0
  405f48:	e670      	b.n	405c2c <_vfiprintf_r+0x2b4>
  405f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405f4e:	f898 2000 	ldrb.w	r2, [r8]
  405f52:	e583      	b.n	405a5c <_vfiprintf_r+0xe4>
  405f54:	f898 2000 	ldrb.w	r2, [r8]
  405f58:	2a6c      	cmp	r2, #108	; 0x6c
  405f5a:	bf03      	ittte	eq
  405f5c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405f60:	f043 0320 	orreq.w	r3, r3, #32
  405f64:	f108 0801 	addeq.w	r8, r8, #1
  405f68:	f043 0310 	orrne.w	r3, r3, #16
  405f6c:	e576      	b.n	405a5c <_vfiprintf_r+0xe4>
  405f6e:	bf00      	nop
  405f70:	00409f44 	.word	0x00409f44
  405f74:	00409f54 	.word	0x00409f54
  405f78:	00409f04 	.word	0x00409f04
  405f7c:	00409ef0 	.word	0x00409ef0
  405f80:	9907      	ldr	r1, [sp, #28]
  405f82:	680e      	ldr	r6, [r1, #0]
  405f84:	460a      	mov	r2, r1
  405f86:	2e00      	cmp	r6, #0
  405f88:	f102 0204 	add.w	r2, r2, #4
  405f8c:	f6ff ae0f 	blt.w	405bae <_vfiprintf_r+0x236>
  405f90:	9207      	str	r2, [sp, #28]
  405f92:	f898 2000 	ldrb.w	r2, [r8]
  405f96:	e561      	b.n	405a5c <_vfiprintf_r+0xe4>
  405f98:	f898 2000 	ldrb.w	r2, [r8]
  405f9c:	2001      	movs	r0, #1
  405f9e:	252b      	movs	r5, #43	; 0x2b
  405fa0:	e55c      	b.n	405a5c <_vfiprintf_r+0xe4>
  405fa2:	9907      	ldr	r1, [sp, #28]
  405fa4:	9608      	str	r6, [sp, #32]
  405fa6:	f8d1 b000 	ldr.w	fp, [r1]
  405faa:	f04f 0200 	mov.w	r2, #0
  405fae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405fb2:	1d0e      	adds	r6, r1, #4
  405fb4:	f1bb 0f00 	cmp.w	fp, #0
  405fb8:	f000 82e5 	beq.w	406586 <_vfiprintf_r+0xc0e>
  405fbc:	1c67      	adds	r7, r4, #1
  405fbe:	f000 82c4 	beq.w	40654a <_vfiprintf_r+0xbd2>
  405fc2:	4622      	mov	r2, r4
  405fc4:	2100      	movs	r1, #0
  405fc6:	4658      	mov	r0, fp
  405fc8:	9301      	str	r3, [sp, #4]
  405fca:	f002 f8f1 	bl	4081b0 <memchr>
  405fce:	9b01      	ldr	r3, [sp, #4]
  405fd0:	2800      	cmp	r0, #0
  405fd2:	f000 82e5 	beq.w	4065a0 <_vfiprintf_r+0xc28>
  405fd6:	eba0 020b 	sub.w	r2, r0, fp
  405fda:	9205      	str	r2, [sp, #20]
  405fdc:	9607      	str	r6, [sp, #28]
  405fde:	9302      	str	r3, [sp, #8]
  405fe0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405fe4:	2400      	movs	r4, #0
  405fe6:	e619      	b.n	405c1c <_vfiprintf_r+0x2a4>
  405fe8:	f898 2000 	ldrb.w	r2, [r8]
  405fec:	2a2a      	cmp	r2, #42	; 0x2a
  405fee:	f108 0701 	add.w	r7, r8, #1
  405ff2:	f000 82e9 	beq.w	4065c8 <_vfiprintf_r+0xc50>
  405ff6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405ffa:	2909      	cmp	r1, #9
  405ffc:	46b8      	mov	r8, r7
  405ffe:	f04f 0400 	mov.w	r4, #0
  406002:	f63f ad2d 	bhi.w	405a60 <_vfiprintf_r+0xe8>
  406006:	f818 2b01 	ldrb.w	r2, [r8], #1
  40600a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40600e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406012:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406016:	2909      	cmp	r1, #9
  406018:	d9f5      	bls.n	406006 <_vfiprintf_r+0x68e>
  40601a:	e521      	b.n	405a60 <_vfiprintf_r+0xe8>
  40601c:	f043 0320 	orr.w	r3, r3, #32
  406020:	f898 2000 	ldrb.w	r2, [r8]
  406024:	e51a      	b.n	405a5c <_vfiprintf_r+0xe4>
  406026:	9608      	str	r6, [sp, #32]
  406028:	2800      	cmp	r0, #0
  40602a:	f040 82db 	bne.w	4065e4 <_vfiprintf_r+0xc6c>
  40602e:	2a00      	cmp	r2, #0
  406030:	f000 80e7 	beq.w	406202 <_vfiprintf_r+0x88a>
  406034:	2101      	movs	r1, #1
  406036:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40603a:	f04f 0200 	mov.w	r2, #0
  40603e:	9101      	str	r1, [sp, #4]
  406040:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406044:	9105      	str	r1, [sp, #20]
  406046:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40604a:	e77b      	b.n	405f44 <_vfiprintf_r+0x5cc>
  40604c:	9a07      	ldr	r2, [sp, #28]
  40604e:	6813      	ldr	r3, [r2, #0]
  406050:	3204      	adds	r2, #4
  406052:	9207      	str	r2, [sp, #28]
  406054:	9a03      	ldr	r2, [sp, #12]
  406056:	601a      	str	r2, [r3, #0]
  406058:	e4cb      	b.n	4059f2 <_vfiprintf_r+0x7a>
  40605a:	aa0f      	add	r2, sp, #60	; 0x3c
  40605c:	9904      	ldr	r1, [sp, #16]
  40605e:	4620      	mov	r0, r4
  406060:	f7ff fc4a 	bl	4058f8 <__sprint_r.part.0>
  406064:	2800      	cmp	r0, #0
  406066:	f040 8139 	bne.w	4062dc <_vfiprintf_r+0x964>
  40606a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40606c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40606e:	f101 0c01 	add.w	ip, r1, #1
  406072:	46ce      	mov	lr, r9
  406074:	e5ff      	b.n	405c76 <_vfiprintf_r+0x2fe>
  406076:	9910      	ldr	r1, [sp, #64]	; 0x40
  406078:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40607a:	1c48      	adds	r0, r1, #1
  40607c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406080:	2d00      	cmp	r5, #0
  406082:	f43f ae22 	beq.w	405cca <_vfiprintf_r+0x352>
  406086:	3201      	adds	r2, #1
  406088:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40608c:	2101      	movs	r1, #1
  40608e:	2807      	cmp	r0, #7
  406090:	9211      	str	r2, [sp, #68]	; 0x44
  406092:	9010      	str	r0, [sp, #64]	; 0x40
  406094:	f8ca 5000 	str.w	r5, [sl]
  406098:	f8ca 1004 	str.w	r1, [sl, #4]
  40609c:	f340 8108 	ble.w	4062b0 <_vfiprintf_r+0x938>
  4060a0:	2a00      	cmp	r2, #0
  4060a2:	f040 81bc 	bne.w	40641e <_vfiprintf_r+0xaa6>
  4060a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4060a8:	2b00      	cmp	r3, #0
  4060aa:	f43f ae1f 	beq.w	405cec <_vfiprintf_r+0x374>
  4060ae:	ab0e      	add	r3, sp, #56	; 0x38
  4060b0:	2202      	movs	r2, #2
  4060b2:	4608      	mov	r0, r1
  4060b4:	931c      	str	r3, [sp, #112]	; 0x70
  4060b6:	921d      	str	r2, [sp, #116]	; 0x74
  4060b8:	46ca      	mov	sl, r9
  4060ba:	4601      	mov	r1, r0
  4060bc:	f10a 0a08 	add.w	sl, sl, #8
  4060c0:	3001      	adds	r0, #1
  4060c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060c4:	2b80      	cmp	r3, #128	; 0x80
  4060c6:	f43f ae19 	beq.w	405cfc <_vfiprintf_r+0x384>
  4060ca:	9b05      	ldr	r3, [sp, #20]
  4060cc:	1ae4      	subs	r4, r4, r3
  4060ce:	2c00      	cmp	r4, #0
  4060d0:	dd2e      	ble.n	406130 <_vfiprintf_r+0x7b8>
  4060d2:	2c10      	cmp	r4, #16
  4060d4:	4db3      	ldr	r5, [pc, #716]	; (4063a4 <_vfiprintf_r+0xa2c>)
  4060d6:	dd1e      	ble.n	406116 <_vfiprintf_r+0x79e>
  4060d8:	46d6      	mov	lr, sl
  4060da:	2610      	movs	r6, #16
  4060dc:	9f06      	ldr	r7, [sp, #24]
  4060de:	f8dd a010 	ldr.w	sl, [sp, #16]
  4060e2:	e006      	b.n	4060f2 <_vfiprintf_r+0x77a>
  4060e4:	1c88      	adds	r0, r1, #2
  4060e6:	f10e 0e08 	add.w	lr, lr, #8
  4060ea:	4619      	mov	r1, r3
  4060ec:	3c10      	subs	r4, #16
  4060ee:	2c10      	cmp	r4, #16
  4060f0:	dd10      	ble.n	406114 <_vfiprintf_r+0x79c>
  4060f2:	1c4b      	adds	r3, r1, #1
  4060f4:	3210      	adds	r2, #16
  4060f6:	2b07      	cmp	r3, #7
  4060f8:	9211      	str	r2, [sp, #68]	; 0x44
  4060fa:	e88e 0060 	stmia.w	lr, {r5, r6}
  4060fe:	9310      	str	r3, [sp, #64]	; 0x40
  406100:	ddf0      	ble.n	4060e4 <_vfiprintf_r+0x76c>
  406102:	2a00      	cmp	r2, #0
  406104:	d165      	bne.n	4061d2 <_vfiprintf_r+0x85a>
  406106:	3c10      	subs	r4, #16
  406108:	2c10      	cmp	r4, #16
  40610a:	f04f 0001 	mov.w	r0, #1
  40610e:	4611      	mov	r1, r2
  406110:	46ce      	mov	lr, r9
  406112:	dcee      	bgt.n	4060f2 <_vfiprintf_r+0x77a>
  406114:	46f2      	mov	sl, lr
  406116:	4422      	add	r2, r4
  406118:	2807      	cmp	r0, #7
  40611a:	9211      	str	r2, [sp, #68]	; 0x44
  40611c:	f8ca 5000 	str.w	r5, [sl]
  406120:	f8ca 4004 	str.w	r4, [sl, #4]
  406124:	9010      	str	r0, [sp, #64]	; 0x40
  406126:	f300 8085 	bgt.w	406234 <_vfiprintf_r+0x8bc>
  40612a:	f10a 0a08 	add.w	sl, sl, #8
  40612e:	3001      	adds	r0, #1
  406130:	9905      	ldr	r1, [sp, #20]
  406132:	f8ca b000 	str.w	fp, [sl]
  406136:	440a      	add	r2, r1
  406138:	2807      	cmp	r0, #7
  40613a:	9211      	str	r2, [sp, #68]	; 0x44
  40613c:	f8ca 1004 	str.w	r1, [sl, #4]
  406140:	9010      	str	r0, [sp, #64]	; 0x40
  406142:	f340 8082 	ble.w	40624a <_vfiprintf_r+0x8d2>
  406146:	2a00      	cmp	r2, #0
  406148:	f040 8118 	bne.w	40637c <_vfiprintf_r+0xa04>
  40614c:	9b02      	ldr	r3, [sp, #8]
  40614e:	9210      	str	r2, [sp, #64]	; 0x40
  406150:	0758      	lsls	r0, r3, #29
  406152:	d535      	bpl.n	4061c0 <_vfiprintf_r+0x848>
  406154:	9b08      	ldr	r3, [sp, #32]
  406156:	9901      	ldr	r1, [sp, #4]
  406158:	1a5c      	subs	r4, r3, r1
  40615a:	2c00      	cmp	r4, #0
  40615c:	f340 80e7 	ble.w	40632e <_vfiprintf_r+0x9b6>
  406160:	46ca      	mov	sl, r9
  406162:	2c10      	cmp	r4, #16
  406164:	f340 8218 	ble.w	406598 <_vfiprintf_r+0xc20>
  406168:	9910      	ldr	r1, [sp, #64]	; 0x40
  40616a:	4e8f      	ldr	r6, [pc, #572]	; (4063a8 <_vfiprintf_r+0xa30>)
  40616c:	9f06      	ldr	r7, [sp, #24]
  40616e:	f8dd b010 	ldr.w	fp, [sp, #16]
  406172:	2510      	movs	r5, #16
  406174:	e006      	b.n	406184 <_vfiprintf_r+0x80c>
  406176:	1c88      	adds	r0, r1, #2
  406178:	f10a 0a08 	add.w	sl, sl, #8
  40617c:	4619      	mov	r1, r3
  40617e:	3c10      	subs	r4, #16
  406180:	2c10      	cmp	r4, #16
  406182:	dd11      	ble.n	4061a8 <_vfiprintf_r+0x830>
  406184:	1c4b      	adds	r3, r1, #1
  406186:	3210      	adds	r2, #16
  406188:	2b07      	cmp	r3, #7
  40618a:	9211      	str	r2, [sp, #68]	; 0x44
  40618c:	f8ca 6000 	str.w	r6, [sl]
  406190:	f8ca 5004 	str.w	r5, [sl, #4]
  406194:	9310      	str	r3, [sp, #64]	; 0x40
  406196:	ddee      	ble.n	406176 <_vfiprintf_r+0x7fe>
  406198:	bb42      	cbnz	r2, 4061ec <_vfiprintf_r+0x874>
  40619a:	3c10      	subs	r4, #16
  40619c:	2c10      	cmp	r4, #16
  40619e:	f04f 0001 	mov.w	r0, #1
  4061a2:	4611      	mov	r1, r2
  4061a4:	46ca      	mov	sl, r9
  4061a6:	dced      	bgt.n	406184 <_vfiprintf_r+0x80c>
  4061a8:	4422      	add	r2, r4
  4061aa:	2807      	cmp	r0, #7
  4061ac:	9211      	str	r2, [sp, #68]	; 0x44
  4061ae:	f8ca 6000 	str.w	r6, [sl]
  4061b2:	f8ca 4004 	str.w	r4, [sl, #4]
  4061b6:	9010      	str	r0, [sp, #64]	; 0x40
  4061b8:	dd51      	ble.n	40625e <_vfiprintf_r+0x8e6>
  4061ba:	2a00      	cmp	r2, #0
  4061bc:	f040 819b 	bne.w	4064f6 <_vfiprintf_r+0xb7e>
  4061c0:	9b03      	ldr	r3, [sp, #12]
  4061c2:	9a08      	ldr	r2, [sp, #32]
  4061c4:	9901      	ldr	r1, [sp, #4]
  4061c6:	428a      	cmp	r2, r1
  4061c8:	bfac      	ite	ge
  4061ca:	189b      	addge	r3, r3, r2
  4061cc:	185b      	addlt	r3, r3, r1
  4061ce:	9303      	str	r3, [sp, #12]
  4061d0:	e04e      	b.n	406270 <_vfiprintf_r+0x8f8>
  4061d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4061d4:	4651      	mov	r1, sl
  4061d6:	4638      	mov	r0, r7
  4061d8:	f7ff fb8e 	bl	4058f8 <__sprint_r.part.0>
  4061dc:	2800      	cmp	r0, #0
  4061de:	f040 813f 	bne.w	406460 <_vfiprintf_r+0xae8>
  4061e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4061e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4061e6:	1c48      	adds	r0, r1, #1
  4061e8:	46ce      	mov	lr, r9
  4061ea:	e77f      	b.n	4060ec <_vfiprintf_r+0x774>
  4061ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4061ee:	4659      	mov	r1, fp
  4061f0:	4638      	mov	r0, r7
  4061f2:	f7ff fb81 	bl	4058f8 <__sprint_r.part.0>
  4061f6:	b960      	cbnz	r0, 406212 <_vfiprintf_r+0x89a>
  4061f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4061fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4061fc:	1c48      	adds	r0, r1, #1
  4061fe:	46ca      	mov	sl, r9
  406200:	e7bd      	b.n	40617e <_vfiprintf_r+0x806>
  406202:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406204:	f8dd b010 	ldr.w	fp, [sp, #16]
  406208:	2b00      	cmp	r3, #0
  40620a:	f040 81d4 	bne.w	4065b6 <_vfiprintf_r+0xc3e>
  40620e:	2300      	movs	r3, #0
  406210:	9310      	str	r3, [sp, #64]	; 0x40
  406212:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406216:	f013 0f01 	tst.w	r3, #1
  40621a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40621e:	d102      	bne.n	406226 <_vfiprintf_r+0x8ae>
  406220:	059a      	lsls	r2, r3, #22
  406222:	f140 80de 	bpl.w	4063e2 <_vfiprintf_r+0xa6a>
  406226:	065b      	lsls	r3, r3, #25
  406228:	f53f acb2 	bmi.w	405b90 <_vfiprintf_r+0x218>
  40622c:	9803      	ldr	r0, [sp, #12]
  40622e:	b02d      	add	sp, #180	; 0xb4
  406230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406234:	2a00      	cmp	r2, #0
  406236:	f040 8106 	bne.w	406446 <_vfiprintf_r+0xace>
  40623a:	9a05      	ldr	r2, [sp, #20]
  40623c:	921d      	str	r2, [sp, #116]	; 0x74
  40623e:	2301      	movs	r3, #1
  406240:	9211      	str	r2, [sp, #68]	; 0x44
  406242:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406246:	9310      	str	r3, [sp, #64]	; 0x40
  406248:	46ca      	mov	sl, r9
  40624a:	f10a 0a08 	add.w	sl, sl, #8
  40624e:	9b02      	ldr	r3, [sp, #8]
  406250:	0759      	lsls	r1, r3, #29
  406252:	d504      	bpl.n	40625e <_vfiprintf_r+0x8e6>
  406254:	9b08      	ldr	r3, [sp, #32]
  406256:	9901      	ldr	r1, [sp, #4]
  406258:	1a5c      	subs	r4, r3, r1
  40625a:	2c00      	cmp	r4, #0
  40625c:	dc81      	bgt.n	406162 <_vfiprintf_r+0x7ea>
  40625e:	9b03      	ldr	r3, [sp, #12]
  406260:	9908      	ldr	r1, [sp, #32]
  406262:	9801      	ldr	r0, [sp, #4]
  406264:	4281      	cmp	r1, r0
  406266:	bfac      	ite	ge
  406268:	185b      	addge	r3, r3, r1
  40626a:	181b      	addlt	r3, r3, r0
  40626c:	9303      	str	r3, [sp, #12]
  40626e:	bb72      	cbnz	r2, 4062ce <_vfiprintf_r+0x956>
  406270:	2300      	movs	r3, #0
  406272:	9310      	str	r3, [sp, #64]	; 0x40
  406274:	46ca      	mov	sl, r9
  406276:	f7ff bbbc 	b.w	4059f2 <_vfiprintf_r+0x7a>
  40627a:	aa0f      	add	r2, sp, #60	; 0x3c
  40627c:	9904      	ldr	r1, [sp, #16]
  40627e:	4620      	mov	r0, r4
  406280:	f7ff fb3a 	bl	4058f8 <__sprint_r.part.0>
  406284:	bb50      	cbnz	r0, 4062dc <_vfiprintf_r+0x964>
  406286:	9910      	ldr	r1, [sp, #64]	; 0x40
  406288:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40628a:	f101 0e01 	add.w	lr, r1, #1
  40628e:	46cc      	mov	ip, r9
  406290:	e548      	b.n	405d24 <_vfiprintf_r+0x3ac>
  406292:	2a00      	cmp	r2, #0
  406294:	f040 8140 	bne.w	406518 <_vfiprintf_r+0xba0>
  406298:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40629c:	2900      	cmp	r1, #0
  40629e:	f000 811b 	beq.w	4064d8 <_vfiprintf_r+0xb60>
  4062a2:	2201      	movs	r2, #1
  4062a4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4062a8:	4610      	mov	r0, r2
  4062aa:	921d      	str	r2, [sp, #116]	; 0x74
  4062ac:	911c      	str	r1, [sp, #112]	; 0x70
  4062ae:	46ca      	mov	sl, r9
  4062b0:	4601      	mov	r1, r0
  4062b2:	f10a 0a08 	add.w	sl, sl, #8
  4062b6:	3001      	adds	r0, #1
  4062b8:	e507      	b.n	405cca <_vfiprintf_r+0x352>
  4062ba:	9b02      	ldr	r3, [sp, #8]
  4062bc:	2a01      	cmp	r2, #1
  4062be:	f000 8098 	beq.w	4063f2 <_vfiprintf_r+0xa7a>
  4062c2:	2a02      	cmp	r2, #2
  4062c4:	d10d      	bne.n	4062e2 <_vfiprintf_r+0x96a>
  4062c6:	9302      	str	r3, [sp, #8]
  4062c8:	2600      	movs	r6, #0
  4062ca:	2700      	movs	r7, #0
  4062cc:	e5b0      	b.n	405e30 <_vfiprintf_r+0x4b8>
  4062ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4062d0:	9904      	ldr	r1, [sp, #16]
  4062d2:	9806      	ldr	r0, [sp, #24]
  4062d4:	f7ff fb10 	bl	4058f8 <__sprint_r.part.0>
  4062d8:	2800      	cmp	r0, #0
  4062da:	d0c9      	beq.n	406270 <_vfiprintf_r+0x8f8>
  4062dc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4062e0:	e797      	b.n	406212 <_vfiprintf_r+0x89a>
  4062e2:	9302      	str	r3, [sp, #8]
  4062e4:	2600      	movs	r6, #0
  4062e6:	2700      	movs	r7, #0
  4062e8:	4649      	mov	r1, r9
  4062ea:	e000      	b.n	4062ee <_vfiprintf_r+0x976>
  4062ec:	4659      	mov	r1, fp
  4062ee:	08f2      	lsrs	r2, r6, #3
  4062f0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4062f4:	08f8      	lsrs	r0, r7, #3
  4062f6:	f006 0307 	and.w	r3, r6, #7
  4062fa:	4607      	mov	r7, r0
  4062fc:	4616      	mov	r6, r2
  4062fe:	3330      	adds	r3, #48	; 0x30
  406300:	ea56 0207 	orrs.w	r2, r6, r7
  406304:	f801 3c01 	strb.w	r3, [r1, #-1]
  406308:	f101 3bff 	add.w	fp, r1, #4294967295
  40630c:	d1ee      	bne.n	4062ec <_vfiprintf_r+0x974>
  40630e:	9a02      	ldr	r2, [sp, #8]
  406310:	07d6      	lsls	r6, r2, #31
  406312:	f57f ad9d 	bpl.w	405e50 <_vfiprintf_r+0x4d8>
  406316:	2b30      	cmp	r3, #48	; 0x30
  406318:	f43f ad9a 	beq.w	405e50 <_vfiprintf_r+0x4d8>
  40631c:	3902      	subs	r1, #2
  40631e:	2330      	movs	r3, #48	; 0x30
  406320:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406324:	eba9 0301 	sub.w	r3, r9, r1
  406328:	9305      	str	r3, [sp, #20]
  40632a:	468b      	mov	fp, r1
  40632c:	e476      	b.n	405c1c <_vfiprintf_r+0x2a4>
  40632e:	9b03      	ldr	r3, [sp, #12]
  406330:	9a08      	ldr	r2, [sp, #32]
  406332:	428a      	cmp	r2, r1
  406334:	bfac      	ite	ge
  406336:	189b      	addge	r3, r3, r2
  406338:	185b      	addlt	r3, r3, r1
  40633a:	9303      	str	r3, [sp, #12]
  40633c:	e798      	b.n	406270 <_vfiprintf_r+0x8f8>
  40633e:	2202      	movs	r2, #2
  406340:	e44d      	b.n	405bde <_vfiprintf_r+0x266>
  406342:	2f00      	cmp	r7, #0
  406344:	bf08      	it	eq
  406346:	2e0a      	cmpeq	r6, #10
  406348:	d352      	bcc.n	4063f0 <_vfiprintf_r+0xa78>
  40634a:	46cb      	mov	fp, r9
  40634c:	4630      	mov	r0, r6
  40634e:	4639      	mov	r1, r7
  406350:	220a      	movs	r2, #10
  406352:	2300      	movs	r3, #0
  406354:	f003 fbd0 	bl	409af8 <__aeabi_uldivmod>
  406358:	3230      	adds	r2, #48	; 0x30
  40635a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40635e:	4630      	mov	r0, r6
  406360:	4639      	mov	r1, r7
  406362:	2300      	movs	r3, #0
  406364:	220a      	movs	r2, #10
  406366:	f003 fbc7 	bl	409af8 <__aeabi_uldivmod>
  40636a:	4606      	mov	r6, r0
  40636c:	460f      	mov	r7, r1
  40636e:	ea56 0307 	orrs.w	r3, r6, r7
  406372:	d1eb      	bne.n	40634c <_vfiprintf_r+0x9d4>
  406374:	e56c      	b.n	405e50 <_vfiprintf_r+0x4d8>
  406376:	9405      	str	r4, [sp, #20]
  406378:	46cb      	mov	fp, r9
  40637a:	e44f      	b.n	405c1c <_vfiprintf_r+0x2a4>
  40637c:	aa0f      	add	r2, sp, #60	; 0x3c
  40637e:	9904      	ldr	r1, [sp, #16]
  406380:	9806      	ldr	r0, [sp, #24]
  406382:	f7ff fab9 	bl	4058f8 <__sprint_r.part.0>
  406386:	2800      	cmp	r0, #0
  406388:	d1a8      	bne.n	4062dc <_vfiprintf_r+0x964>
  40638a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40638c:	46ca      	mov	sl, r9
  40638e:	e75e      	b.n	40624e <_vfiprintf_r+0x8d6>
  406390:	aa0f      	add	r2, sp, #60	; 0x3c
  406392:	9904      	ldr	r1, [sp, #16]
  406394:	9806      	ldr	r0, [sp, #24]
  406396:	f7ff faaf 	bl	4058f8 <__sprint_r.part.0>
  40639a:	2800      	cmp	r0, #0
  40639c:	d19e      	bne.n	4062dc <_vfiprintf_r+0x964>
  40639e:	46ca      	mov	sl, r9
  4063a0:	f7ff bbc0 	b.w	405b24 <_vfiprintf_r+0x1ac>
  4063a4:	00409f54 	.word	0x00409f54
  4063a8:	00409f44 	.word	0x00409f44
  4063ac:	3104      	adds	r1, #4
  4063ae:	6816      	ldr	r6, [r2, #0]
  4063b0:	9107      	str	r1, [sp, #28]
  4063b2:	2201      	movs	r2, #1
  4063b4:	2700      	movs	r7, #0
  4063b6:	e412      	b.n	405bde <_vfiprintf_r+0x266>
  4063b8:	9807      	ldr	r0, [sp, #28]
  4063ba:	4601      	mov	r1, r0
  4063bc:	3104      	adds	r1, #4
  4063be:	6806      	ldr	r6, [r0, #0]
  4063c0:	9107      	str	r1, [sp, #28]
  4063c2:	2700      	movs	r7, #0
  4063c4:	e40b      	b.n	405bde <_vfiprintf_r+0x266>
  4063c6:	680e      	ldr	r6, [r1, #0]
  4063c8:	3104      	adds	r1, #4
  4063ca:	9107      	str	r1, [sp, #28]
  4063cc:	2700      	movs	r7, #0
  4063ce:	e591      	b.n	405ef4 <_vfiprintf_r+0x57c>
  4063d0:	9907      	ldr	r1, [sp, #28]
  4063d2:	680e      	ldr	r6, [r1, #0]
  4063d4:	460a      	mov	r2, r1
  4063d6:	17f7      	asrs	r7, r6, #31
  4063d8:	3204      	adds	r2, #4
  4063da:	9207      	str	r2, [sp, #28]
  4063dc:	4630      	mov	r0, r6
  4063de:	4639      	mov	r1, r7
  4063e0:	e50f      	b.n	405e02 <_vfiprintf_r+0x48a>
  4063e2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4063e6:	f001 fe4d 	bl	408084 <__retarget_lock_release_recursive>
  4063ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4063ee:	e71a      	b.n	406226 <_vfiprintf_r+0x8ae>
  4063f0:	9b02      	ldr	r3, [sp, #8]
  4063f2:	9302      	str	r3, [sp, #8]
  4063f4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4063f8:	3630      	adds	r6, #48	; 0x30
  4063fa:	2301      	movs	r3, #1
  4063fc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406400:	9305      	str	r3, [sp, #20]
  406402:	e40b      	b.n	405c1c <_vfiprintf_r+0x2a4>
  406404:	aa0f      	add	r2, sp, #60	; 0x3c
  406406:	9904      	ldr	r1, [sp, #16]
  406408:	9806      	ldr	r0, [sp, #24]
  40640a:	f7ff fa75 	bl	4058f8 <__sprint_r.part.0>
  40640e:	2800      	cmp	r0, #0
  406410:	f47f af64 	bne.w	4062dc <_vfiprintf_r+0x964>
  406414:	9910      	ldr	r1, [sp, #64]	; 0x40
  406416:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406418:	1c48      	adds	r0, r1, #1
  40641a:	46ca      	mov	sl, r9
  40641c:	e651      	b.n	4060c2 <_vfiprintf_r+0x74a>
  40641e:	aa0f      	add	r2, sp, #60	; 0x3c
  406420:	9904      	ldr	r1, [sp, #16]
  406422:	9806      	ldr	r0, [sp, #24]
  406424:	f7ff fa68 	bl	4058f8 <__sprint_r.part.0>
  406428:	2800      	cmp	r0, #0
  40642a:	f47f af57 	bne.w	4062dc <_vfiprintf_r+0x964>
  40642e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406430:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406432:	1c48      	adds	r0, r1, #1
  406434:	46ca      	mov	sl, r9
  406436:	e448      	b.n	405cca <_vfiprintf_r+0x352>
  406438:	2a00      	cmp	r2, #0
  40643a:	f040 8091 	bne.w	406560 <_vfiprintf_r+0xbe8>
  40643e:	2001      	movs	r0, #1
  406440:	4611      	mov	r1, r2
  406442:	46ca      	mov	sl, r9
  406444:	e641      	b.n	4060ca <_vfiprintf_r+0x752>
  406446:	aa0f      	add	r2, sp, #60	; 0x3c
  406448:	9904      	ldr	r1, [sp, #16]
  40644a:	9806      	ldr	r0, [sp, #24]
  40644c:	f7ff fa54 	bl	4058f8 <__sprint_r.part.0>
  406450:	2800      	cmp	r0, #0
  406452:	f47f af43 	bne.w	4062dc <_vfiprintf_r+0x964>
  406456:	9810      	ldr	r0, [sp, #64]	; 0x40
  406458:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40645a:	3001      	adds	r0, #1
  40645c:	46ca      	mov	sl, r9
  40645e:	e667      	b.n	406130 <_vfiprintf_r+0x7b8>
  406460:	46d3      	mov	fp, sl
  406462:	e6d6      	b.n	406212 <_vfiprintf_r+0x89a>
  406464:	9e07      	ldr	r6, [sp, #28]
  406466:	3607      	adds	r6, #7
  406468:	f026 0207 	bic.w	r2, r6, #7
  40646c:	f102 0108 	add.w	r1, r2, #8
  406470:	e9d2 6700 	ldrd	r6, r7, [r2]
  406474:	9107      	str	r1, [sp, #28]
  406476:	2201      	movs	r2, #1
  406478:	f7ff bbb1 	b.w	405bde <_vfiprintf_r+0x266>
  40647c:	9e07      	ldr	r6, [sp, #28]
  40647e:	3607      	adds	r6, #7
  406480:	f026 0607 	bic.w	r6, r6, #7
  406484:	e9d6 0100 	ldrd	r0, r1, [r6]
  406488:	f106 0208 	add.w	r2, r6, #8
  40648c:	9207      	str	r2, [sp, #28]
  40648e:	4606      	mov	r6, r0
  406490:	460f      	mov	r7, r1
  406492:	e4b6      	b.n	405e02 <_vfiprintf_r+0x48a>
  406494:	9e07      	ldr	r6, [sp, #28]
  406496:	3607      	adds	r6, #7
  406498:	f026 0207 	bic.w	r2, r6, #7
  40649c:	f102 0108 	add.w	r1, r2, #8
  4064a0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4064a4:	9107      	str	r1, [sp, #28]
  4064a6:	2200      	movs	r2, #0
  4064a8:	f7ff bb99 	b.w	405bde <_vfiprintf_r+0x266>
  4064ac:	9e07      	ldr	r6, [sp, #28]
  4064ae:	3607      	adds	r6, #7
  4064b0:	f026 0107 	bic.w	r1, r6, #7
  4064b4:	f101 0008 	add.w	r0, r1, #8
  4064b8:	9007      	str	r0, [sp, #28]
  4064ba:	e9d1 6700 	ldrd	r6, r7, [r1]
  4064be:	e519      	b.n	405ef4 <_vfiprintf_r+0x57c>
  4064c0:	46cb      	mov	fp, r9
  4064c2:	f7ff bbab 	b.w	405c1c <_vfiprintf_r+0x2a4>
  4064c6:	252d      	movs	r5, #45	; 0x2d
  4064c8:	4276      	negs	r6, r6
  4064ca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4064ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4064d2:	2201      	movs	r2, #1
  4064d4:	f7ff bb88 	b.w	405be8 <_vfiprintf_r+0x270>
  4064d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4064da:	b9b3      	cbnz	r3, 40650a <_vfiprintf_r+0xb92>
  4064dc:	4611      	mov	r1, r2
  4064de:	2001      	movs	r0, #1
  4064e0:	46ca      	mov	sl, r9
  4064e2:	e5f2      	b.n	4060ca <_vfiprintf_r+0x752>
  4064e4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4064e8:	f001 fdcc 	bl	408084 <__retarget_lock_release_recursive>
  4064ec:	f04f 33ff 	mov.w	r3, #4294967295
  4064f0:	9303      	str	r3, [sp, #12]
  4064f2:	f7ff bb50 	b.w	405b96 <_vfiprintf_r+0x21e>
  4064f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4064f8:	9904      	ldr	r1, [sp, #16]
  4064fa:	9806      	ldr	r0, [sp, #24]
  4064fc:	f7ff f9fc 	bl	4058f8 <__sprint_r.part.0>
  406500:	2800      	cmp	r0, #0
  406502:	f47f aeeb 	bne.w	4062dc <_vfiprintf_r+0x964>
  406506:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406508:	e6a9      	b.n	40625e <_vfiprintf_r+0x8e6>
  40650a:	ab0e      	add	r3, sp, #56	; 0x38
  40650c:	2202      	movs	r2, #2
  40650e:	931c      	str	r3, [sp, #112]	; 0x70
  406510:	921d      	str	r2, [sp, #116]	; 0x74
  406512:	2001      	movs	r0, #1
  406514:	46ca      	mov	sl, r9
  406516:	e5d0      	b.n	4060ba <_vfiprintf_r+0x742>
  406518:	aa0f      	add	r2, sp, #60	; 0x3c
  40651a:	9904      	ldr	r1, [sp, #16]
  40651c:	9806      	ldr	r0, [sp, #24]
  40651e:	f7ff f9eb 	bl	4058f8 <__sprint_r.part.0>
  406522:	2800      	cmp	r0, #0
  406524:	f47f aeda 	bne.w	4062dc <_vfiprintf_r+0x964>
  406528:	9910      	ldr	r1, [sp, #64]	; 0x40
  40652a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40652c:	1c48      	adds	r0, r1, #1
  40652e:	46ca      	mov	sl, r9
  406530:	e5a4      	b.n	40607c <_vfiprintf_r+0x704>
  406532:	9a07      	ldr	r2, [sp, #28]
  406534:	9903      	ldr	r1, [sp, #12]
  406536:	6813      	ldr	r3, [r2, #0]
  406538:	17cd      	asrs	r5, r1, #31
  40653a:	4608      	mov	r0, r1
  40653c:	3204      	adds	r2, #4
  40653e:	4629      	mov	r1, r5
  406540:	9207      	str	r2, [sp, #28]
  406542:	e9c3 0100 	strd	r0, r1, [r3]
  406546:	f7ff ba54 	b.w	4059f2 <_vfiprintf_r+0x7a>
  40654a:	4658      	mov	r0, fp
  40654c:	9607      	str	r6, [sp, #28]
  40654e:	9302      	str	r3, [sp, #8]
  406550:	f7fd ff36 	bl	4043c0 <strlen>
  406554:	2400      	movs	r4, #0
  406556:	9005      	str	r0, [sp, #20]
  406558:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40655c:	f7ff bb5e 	b.w	405c1c <_vfiprintf_r+0x2a4>
  406560:	aa0f      	add	r2, sp, #60	; 0x3c
  406562:	9904      	ldr	r1, [sp, #16]
  406564:	9806      	ldr	r0, [sp, #24]
  406566:	f7ff f9c7 	bl	4058f8 <__sprint_r.part.0>
  40656a:	2800      	cmp	r0, #0
  40656c:	f47f aeb6 	bne.w	4062dc <_vfiprintf_r+0x964>
  406570:	9910      	ldr	r1, [sp, #64]	; 0x40
  406572:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406574:	1c48      	adds	r0, r1, #1
  406576:	46ca      	mov	sl, r9
  406578:	e5a7      	b.n	4060ca <_vfiprintf_r+0x752>
  40657a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40657c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40657e:	4e20      	ldr	r6, [pc, #128]	; (406600 <_vfiprintf_r+0xc88>)
  406580:	3101      	adds	r1, #1
  406582:	f7ff bb90 	b.w	405ca6 <_vfiprintf_r+0x32e>
  406586:	2c06      	cmp	r4, #6
  406588:	bf28      	it	cs
  40658a:	2406      	movcs	r4, #6
  40658c:	9405      	str	r4, [sp, #20]
  40658e:	9607      	str	r6, [sp, #28]
  406590:	9401      	str	r4, [sp, #4]
  406592:	f8df b070 	ldr.w	fp, [pc, #112]	; 406604 <_vfiprintf_r+0xc8c>
  406596:	e4d5      	b.n	405f44 <_vfiprintf_r+0x5cc>
  406598:	9810      	ldr	r0, [sp, #64]	; 0x40
  40659a:	4e19      	ldr	r6, [pc, #100]	; (406600 <_vfiprintf_r+0xc88>)
  40659c:	3001      	adds	r0, #1
  40659e:	e603      	b.n	4061a8 <_vfiprintf_r+0x830>
  4065a0:	9405      	str	r4, [sp, #20]
  4065a2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4065a6:	9607      	str	r6, [sp, #28]
  4065a8:	9302      	str	r3, [sp, #8]
  4065aa:	4604      	mov	r4, r0
  4065ac:	f7ff bb36 	b.w	405c1c <_vfiprintf_r+0x2a4>
  4065b0:	4686      	mov	lr, r0
  4065b2:	f7ff bbce 	b.w	405d52 <_vfiprintf_r+0x3da>
  4065b6:	9806      	ldr	r0, [sp, #24]
  4065b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4065ba:	4659      	mov	r1, fp
  4065bc:	f7ff f99c 	bl	4058f8 <__sprint_r.part.0>
  4065c0:	2800      	cmp	r0, #0
  4065c2:	f43f ae24 	beq.w	40620e <_vfiprintf_r+0x896>
  4065c6:	e624      	b.n	406212 <_vfiprintf_r+0x89a>
  4065c8:	9907      	ldr	r1, [sp, #28]
  4065ca:	f898 2001 	ldrb.w	r2, [r8, #1]
  4065ce:	680c      	ldr	r4, [r1, #0]
  4065d0:	3104      	adds	r1, #4
  4065d2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4065d6:	46b8      	mov	r8, r7
  4065d8:	9107      	str	r1, [sp, #28]
  4065da:	f7ff ba3f 	b.w	405a5c <_vfiprintf_r+0xe4>
  4065de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4065e2:	e43c      	b.n	405e5e <_vfiprintf_r+0x4e6>
  4065e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4065e8:	e521      	b.n	40602e <_vfiprintf_r+0x6b6>
  4065ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4065ee:	f7ff bbf4 	b.w	405dda <_vfiprintf_r+0x462>
  4065f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4065f6:	e491      	b.n	405f1c <_vfiprintf_r+0x5a4>
  4065f8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4065fc:	e469      	b.n	405ed2 <_vfiprintf_r+0x55a>
  4065fe:	bf00      	nop
  406600:	00409f44 	.word	0x00409f44
  406604:	00409f18 	.word	0x00409f18

00406608 <__sbprintf>:
  406608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40660c:	460c      	mov	r4, r1
  40660e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406612:	8989      	ldrh	r1, [r1, #12]
  406614:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406616:	89e5      	ldrh	r5, [r4, #14]
  406618:	9619      	str	r6, [sp, #100]	; 0x64
  40661a:	f021 0102 	bic.w	r1, r1, #2
  40661e:	4606      	mov	r6, r0
  406620:	69e0      	ldr	r0, [r4, #28]
  406622:	f8ad 100c 	strh.w	r1, [sp, #12]
  406626:	4617      	mov	r7, r2
  406628:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40662c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40662e:	f8ad 500e 	strh.w	r5, [sp, #14]
  406632:	4698      	mov	r8, r3
  406634:	ad1a      	add	r5, sp, #104	; 0x68
  406636:	2300      	movs	r3, #0
  406638:	9007      	str	r0, [sp, #28]
  40663a:	a816      	add	r0, sp, #88	; 0x58
  40663c:	9209      	str	r2, [sp, #36]	; 0x24
  40663e:	9306      	str	r3, [sp, #24]
  406640:	9500      	str	r5, [sp, #0]
  406642:	9504      	str	r5, [sp, #16]
  406644:	9102      	str	r1, [sp, #8]
  406646:	9105      	str	r1, [sp, #20]
  406648:	f001 fd16 	bl	408078 <__retarget_lock_init_recursive>
  40664c:	4643      	mov	r3, r8
  40664e:	463a      	mov	r2, r7
  406650:	4669      	mov	r1, sp
  406652:	4630      	mov	r0, r6
  406654:	f7ff f990 	bl	405978 <_vfiprintf_r>
  406658:	1e05      	subs	r5, r0, #0
  40665a:	db07      	blt.n	40666c <__sbprintf+0x64>
  40665c:	4630      	mov	r0, r6
  40665e:	4669      	mov	r1, sp
  406660:	f001 f8e8 	bl	407834 <_fflush_r>
  406664:	2800      	cmp	r0, #0
  406666:	bf18      	it	ne
  406668:	f04f 35ff 	movne.w	r5, #4294967295
  40666c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406670:	065b      	lsls	r3, r3, #25
  406672:	d503      	bpl.n	40667c <__sbprintf+0x74>
  406674:	89a3      	ldrh	r3, [r4, #12]
  406676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40667a:	81a3      	strh	r3, [r4, #12]
  40667c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40667e:	f001 fcfd 	bl	40807c <__retarget_lock_close_recursive>
  406682:	4628      	mov	r0, r5
  406684:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040668c <__swsetup_r>:
  40668c:	b538      	push	{r3, r4, r5, lr}
  40668e:	4b30      	ldr	r3, [pc, #192]	; (406750 <__swsetup_r+0xc4>)
  406690:	681b      	ldr	r3, [r3, #0]
  406692:	4605      	mov	r5, r0
  406694:	460c      	mov	r4, r1
  406696:	b113      	cbz	r3, 40669e <__swsetup_r+0x12>
  406698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40669a:	2a00      	cmp	r2, #0
  40669c:	d038      	beq.n	406710 <__swsetup_r+0x84>
  40669e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4066a2:	b293      	uxth	r3, r2
  4066a4:	0718      	lsls	r0, r3, #28
  4066a6:	d50c      	bpl.n	4066c2 <__swsetup_r+0x36>
  4066a8:	6920      	ldr	r0, [r4, #16]
  4066aa:	b1a8      	cbz	r0, 4066d8 <__swsetup_r+0x4c>
  4066ac:	f013 0201 	ands.w	r2, r3, #1
  4066b0:	d01e      	beq.n	4066f0 <__swsetup_r+0x64>
  4066b2:	6963      	ldr	r3, [r4, #20]
  4066b4:	2200      	movs	r2, #0
  4066b6:	425b      	negs	r3, r3
  4066b8:	61a3      	str	r3, [r4, #24]
  4066ba:	60a2      	str	r2, [r4, #8]
  4066bc:	b1f0      	cbz	r0, 4066fc <__swsetup_r+0x70>
  4066be:	2000      	movs	r0, #0
  4066c0:	bd38      	pop	{r3, r4, r5, pc}
  4066c2:	06d9      	lsls	r1, r3, #27
  4066c4:	d53c      	bpl.n	406740 <__swsetup_r+0xb4>
  4066c6:	0758      	lsls	r0, r3, #29
  4066c8:	d426      	bmi.n	406718 <__swsetup_r+0x8c>
  4066ca:	6920      	ldr	r0, [r4, #16]
  4066cc:	f042 0308 	orr.w	r3, r2, #8
  4066d0:	81a3      	strh	r3, [r4, #12]
  4066d2:	b29b      	uxth	r3, r3
  4066d4:	2800      	cmp	r0, #0
  4066d6:	d1e9      	bne.n	4066ac <__swsetup_r+0x20>
  4066d8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4066dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4066e0:	d0e4      	beq.n	4066ac <__swsetup_r+0x20>
  4066e2:	4628      	mov	r0, r5
  4066e4:	4621      	mov	r1, r4
  4066e6:	f001 fcfd 	bl	4080e4 <__smakebuf_r>
  4066ea:	89a3      	ldrh	r3, [r4, #12]
  4066ec:	6920      	ldr	r0, [r4, #16]
  4066ee:	e7dd      	b.n	4066ac <__swsetup_r+0x20>
  4066f0:	0799      	lsls	r1, r3, #30
  4066f2:	bf58      	it	pl
  4066f4:	6962      	ldrpl	r2, [r4, #20]
  4066f6:	60a2      	str	r2, [r4, #8]
  4066f8:	2800      	cmp	r0, #0
  4066fa:	d1e0      	bne.n	4066be <__swsetup_r+0x32>
  4066fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406700:	061a      	lsls	r2, r3, #24
  406702:	d5dd      	bpl.n	4066c0 <__swsetup_r+0x34>
  406704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406708:	81a3      	strh	r3, [r4, #12]
  40670a:	f04f 30ff 	mov.w	r0, #4294967295
  40670e:	bd38      	pop	{r3, r4, r5, pc}
  406710:	4618      	mov	r0, r3
  406712:	f001 f8e7 	bl	4078e4 <__sinit>
  406716:	e7c2      	b.n	40669e <__swsetup_r+0x12>
  406718:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40671a:	b151      	cbz	r1, 406732 <__swsetup_r+0xa6>
  40671c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406720:	4299      	cmp	r1, r3
  406722:	d004      	beq.n	40672e <__swsetup_r+0xa2>
  406724:	4628      	mov	r0, r5
  406726:	f001 fa03 	bl	407b30 <_free_r>
  40672a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40672e:	2300      	movs	r3, #0
  406730:	6323      	str	r3, [r4, #48]	; 0x30
  406732:	2300      	movs	r3, #0
  406734:	6920      	ldr	r0, [r4, #16]
  406736:	6063      	str	r3, [r4, #4]
  406738:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40673c:	6020      	str	r0, [r4, #0]
  40673e:	e7c5      	b.n	4066cc <__swsetup_r+0x40>
  406740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406744:	2309      	movs	r3, #9
  406746:	602b      	str	r3, [r5, #0]
  406748:	f04f 30ff 	mov.w	r0, #4294967295
  40674c:	81a2      	strh	r2, [r4, #12]
  40674e:	bd38      	pop	{r3, r4, r5, pc}
  406750:	2040000c 	.word	0x2040000c

00406754 <register_fini>:
  406754:	4b02      	ldr	r3, [pc, #8]	; (406760 <register_fini+0xc>)
  406756:	b113      	cbz	r3, 40675e <register_fini+0xa>
  406758:	4802      	ldr	r0, [pc, #8]	; (406764 <register_fini+0x10>)
  40675a:	f000 b805 	b.w	406768 <atexit>
  40675e:	4770      	bx	lr
  406760:	00000000 	.word	0x00000000
  406764:	00407955 	.word	0x00407955

00406768 <atexit>:
  406768:	2300      	movs	r3, #0
  40676a:	4601      	mov	r1, r0
  40676c:	461a      	mov	r2, r3
  40676e:	4618      	mov	r0, r3
  406770:	f002 bbda 	b.w	408f28 <__register_exitproc>

00406774 <quorem>:
  406774:	6902      	ldr	r2, [r0, #16]
  406776:	690b      	ldr	r3, [r1, #16]
  406778:	4293      	cmp	r3, r2
  40677a:	f300 808d 	bgt.w	406898 <quorem+0x124>
  40677e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406782:	f103 38ff 	add.w	r8, r3, #4294967295
  406786:	f101 0714 	add.w	r7, r1, #20
  40678a:	f100 0b14 	add.w	fp, r0, #20
  40678e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  406792:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406796:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40679a:	b083      	sub	sp, #12
  40679c:	3201      	adds	r2, #1
  40679e:	fbb3 f9f2 	udiv	r9, r3, r2
  4067a2:	eb0b 0304 	add.w	r3, fp, r4
  4067a6:	9400      	str	r4, [sp, #0]
  4067a8:	eb07 0a04 	add.w	sl, r7, r4
  4067ac:	9301      	str	r3, [sp, #4]
  4067ae:	f1b9 0f00 	cmp.w	r9, #0
  4067b2:	d039      	beq.n	406828 <quorem+0xb4>
  4067b4:	2500      	movs	r5, #0
  4067b6:	462e      	mov	r6, r5
  4067b8:	46bc      	mov	ip, r7
  4067ba:	46de      	mov	lr, fp
  4067bc:	f85c 4b04 	ldr.w	r4, [ip], #4
  4067c0:	f8de 3000 	ldr.w	r3, [lr]
  4067c4:	b2a2      	uxth	r2, r4
  4067c6:	fb09 5502 	mla	r5, r9, r2, r5
  4067ca:	0c22      	lsrs	r2, r4, #16
  4067cc:	0c2c      	lsrs	r4, r5, #16
  4067ce:	fb09 4202 	mla	r2, r9, r2, r4
  4067d2:	b2ad      	uxth	r5, r5
  4067d4:	1b75      	subs	r5, r6, r5
  4067d6:	b296      	uxth	r6, r2
  4067d8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4067dc:	fa15 f383 	uxtah	r3, r5, r3
  4067e0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4067e4:	b29b      	uxth	r3, r3
  4067e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4067ea:	45e2      	cmp	sl, ip
  4067ec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4067f0:	f84e 3b04 	str.w	r3, [lr], #4
  4067f4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4067f8:	d2e0      	bcs.n	4067bc <quorem+0x48>
  4067fa:	9b00      	ldr	r3, [sp, #0]
  4067fc:	f85b 3003 	ldr.w	r3, [fp, r3]
  406800:	b993      	cbnz	r3, 406828 <quorem+0xb4>
  406802:	9c01      	ldr	r4, [sp, #4]
  406804:	1f23      	subs	r3, r4, #4
  406806:	459b      	cmp	fp, r3
  406808:	d20c      	bcs.n	406824 <quorem+0xb0>
  40680a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40680e:	b94b      	cbnz	r3, 406824 <quorem+0xb0>
  406810:	f1a4 0308 	sub.w	r3, r4, #8
  406814:	e002      	b.n	40681c <quorem+0xa8>
  406816:	681a      	ldr	r2, [r3, #0]
  406818:	3b04      	subs	r3, #4
  40681a:	b91a      	cbnz	r2, 406824 <quorem+0xb0>
  40681c:	459b      	cmp	fp, r3
  40681e:	f108 38ff 	add.w	r8, r8, #4294967295
  406822:	d3f8      	bcc.n	406816 <quorem+0xa2>
  406824:	f8c0 8010 	str.w	r8, [r0, #16]
  406828:	4604      	mov	r4, r0
  40682a:	f001 ff73 	bl	408714 <__mcmp>
  40682e:	2800      	cmp	r0, #0
  406830:	db2e      	blt.n	406890 <quorem+0x11c>
  406832:	f109 0901 	add.w	r9, r9, #1
  406836:	465d      	mov	r5, fp
  406838:	2300      	movs	r3, #0
  40683a:	f857 1b04 	ldr.w	r1, [r7], #4
  40683e:	6828      	ldr	r0, [r5, #0]
  406840:	b28a      	uxth	r2, r1
  406842:	1a9a      	subs	r2, r3, r2
  406844:	0c0b      	lsrs	r3, r1, #16
  406846:	fa12 f280 	uxtah	r2, r2, r0
  40684a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40684e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406852:	b292      	uxth	r2, r2
  406854:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406858:	45ba      	cmp	sl, r7
  40685a:	f845 2b04 	str.w	r2, [r5], #4
  40685e:	ea4f 4323 	mov.w	r3, r3, asr #16
  406862:	d2ea      	bcs.n	40683a <quorem+0xc6>
  406864:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  406868:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40686c:	b982      	cbnz	r2, 406890 <quorem+0x11c>
  40686e:	1f1a      	subs	r2, r3, #4
  406870:	4593      	cmp	fp, r2
  406872:	d20b      	bcs.n	40688c <quorem+0x118>
  406874:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406878:	b942      	cbnz	r2, 40688c <quorem+0x118>
  40687a:	3b08      	subs	r3, #8
  40687c:	e002      	b.n	406884 <quorem+0x110>
  40687e:	681a      	ldr	r2, [r3, #0]
  406880:	3b04      	subs	r3, #4
  406882:	b91a      	cbnz	r2, 40688c <quorem+0x118>
  406884:	459b      	cmp	fp, r3
  406886:	f108 38ff 	add.w	r8, r8, #4294967295
  40688a:	d3f8      	bcc.n	40687e <quorem+0x10a>
  40688c:	f8c4 8010 	str.w	r8, [r4, #16]
  406890:	4648      	mov	r0, r9
  406892:	b003      	add	sp, #12
  406894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406898:	2000      	movs	r0, #0
  40689a:	4770      	bx	lr
  40689c:	0000      	movs	r0, r0
	...

004068a0 <_dtoa_r>:
  4068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4068a6:	b09b      	sub	sp, #108	; 0x6c
  4068a8:	4604      	mov	r4, r0
  4068aa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4068ac:	4692      	mov	sl, r2
  4068ae:	469b      	mov	fp, r3
  4068b0:	b141      	cbz	r1, 4068c4 <_dtoa_r+0x24>
  4068b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4068b4:	604a      	str	r2, [r1, #4]
  4068b6:	2301      	movs	r3, #1
  4068b8:	4093      	lsls	r3, r2
  4068ba:	608b      	str	r3, [r1, #8]
  4068bc:	f001 fd52 	bl	408364 <_Bfree>
  4068c0:	2300      	movs	r3, #0
  4068c2:	6423      	str	r3, [r4, #64]	; 0x40
  4068c4:	f1bb 0f00 	cmp.w	fp, #0
  4068c8:	465d      	mov	r5, fp
  4068ca:	db35      	blt.n	406938 <_dtoa_r+0x98>
  4068cc:	2300      	movs	r3, #0
  4068ce:	6033      	str	r3, [r6, #0]
  4068d0:	4b9d      	ldr	r3, [pc, #628]	; (406b48 <_dtoa_r+0x2a8>)
  4068d2:	43ab      	bics	r3, r5
  4068d4:	d015      	beq.n	406902 <_dtoa_r+0x62>
  4068d6:	4650      	mov	r0, sl
  4068d8:	4659      	mov	r1, fp
  4068da:	2200      	movs	r2, #0
  4068dc:	2300      	movs	r3, #0
  4068de:	f003 f89b 	bl	409a18 <__aeabi_dcmpeq>
  4068e2:	4680      	mov	r8, r0
  4068e4:	2800      	cmp	r0, #0
  4068e6:	d02d      	beq.n	406944 <_dtoa_r+0xa4>
  4068e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4068ea:	2301      	movs	r3, #1
  4068ec:	6013      	str	r3, [r2, #0]
  4068ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4068f0:	2b00      	cmp	r3, #0
  4068f2:	f000 80bd 	beq.w	406a70 <_dtoa_r+0x1d0>
  4068f6:	4895      	ldr	r0, [pc, #596]	; (406b4c <_dtoa_r+0x2ac>)
  4068f8:	6018      	str	r0, [r3, #0]
  4068fa:	3801      	subs	r0, #1
  4068fc:	b01b      	add	sp, #108	; 0x6c
  4068fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406902:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406904:	f242 730f 	movw	r3, #9999	; 0x270f
  406908:	6013      	str	r3, [r2, #0]
  40690a:	f1ba 0f00 	cmp.w	sl, #0
  40690e:	d10d      	bne.n	40692c <_dtoa_r+0x8c>
  406910:	f3c5 0513 	ubfx	r5, r5, #0, #20
  406914:	b955      	cbnz	r5, 40692c <_dtoa_r+0x8c>
  406916:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406918:	488d      	ldr	r0, [pc, #564]	; (406b50 <_dtoa_r+0x2b0>)
  40691a:	2b00      	cmp	r3, #0
  40691c:	d0ee      	beq.n	4068fc <_dtoa_r+0x5c>
  40691e:	f100 0308 	add.w	r3, r0, #8
  406922:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  406924:	6013      	str	r3, [r2, #0]
  406926:	b01b      	add	sp, #108	; 0x6c
  406928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40692c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40692e:	4889      	ldr	r0, [pc, #548]	; (406b54 <_dtoa_r+0x2b4>)
  406930:	2b00      	cmp	r3, #0
  406932:	d0e3      	beq.n	4068fc <_dtoa_r+0x5c>
  406934:	1cc3      	adds	r3, r0, #3
  406936:	e7f4      	b.n	406922 <_dtoa_r+0x82>
  406938:	2301      	movs	r3, #1
  40693a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40693e:	6033      	str	r3, [r6, #0]
  406940:	46ab      	mov	fp, r5
  406942:	e7c5      	b.n	4068d0 <_dtoa_r+0x30>
  406944:	aa18      	add	r2, sp, #96	; 0x60
  406946:	ab19      	add	r3, sp, #100	; 0x64
  406948:	9201      	str	r2, [sp, #4]
  40694a:	9300      	str	r3, [sp, #0]
  40694c:	4652      	mov	r2, sl
  40694e:	465b      	mov	r3, fp
  406950:	4620      	mov	r0, r4
  406952:	f001 ff7f 	bl	408854 <__d2b>
  406956:	0d2b      	lsrs	r3, r5, #20
  406958:	4681      	mov	r9, r0
  40695a:	d071      	beq.n	406a40 <_dtoa_r+0x1a0>
  40695c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  406960:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  406964:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406966:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40696a:	4650      	mov	r0, sl
  40696c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  406970:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406974:	2200      	movs	r2, #0
  406976:	4b78      	ldr	r3, [pc, #480]	; (406b58 <_dtoa_r+0x2b8>)
  406978:	f002 fc32 	bl	4091e0 <__aeabi_dsub>
  40697c:	a36c      	add	r3, pc, #432	; (adr r3, 406b30 <_dtoa_r+0x290>)
  40697e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406982:	f002 fde1 	bl	409548 <__aeabi_dmul>
  406986:	a36c      	add	r3, pc, #432	; (adr r3, 406b38 <_dtoa_r+0x298>)
  406988:	e9d3 2300 	ldrd	r2, r3, [r3]
  40698c:	f002 fc2a 	bl	4091e4 <__adddf3>
  406990:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406994:	4630      	mov	r0, r6
  406996:	f002 fd71 	bl	40947c <__aeabi_i2d>
  40699a:	a369      	add	r3, pc, #420	; (adr r3, 406b40 <_dtoa_r+0x2a0>)
  40699c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069a0:	f002 fdd2 	bl	409548 <__aeabi_dmul>
  4069a4:	4602      	mov	r2, r0
  4069a6:	460b      	mov	r3, r1
  4069a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4069ac:	f002 fc1a 	bl	4091e4 <__adddf3>
  4069b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4069b4:	f003 f878 	bl	409aa8 <__aeabi_d2iz>
  4069b8:	2200      	movs	r2, #0
  4069ba:	9002      	str	r0, [sp, #8]
  4069bc:	2300      	movs	r3, #0
  4069be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4069c2:	f003 f833 	bl	409a2c <__aeabi_dcmplt>
  4069c6:	2800      	cmp	r0, #0
  4069c8:	f040 8173 	bne.w	406cb2 <_dtoa_r+0x412>
  4069cc:	9d02      	ldr	r5, [sp, #8]
  4069ce:	2d16      	cmp	r5, #22
  4069d0:	f200 815d 	bhi.w	406c8e <_dtoa_r+0x3ee>
  4069d4:	4b61      	ldr	r3, [pc, #388]	; (406b5c <_dtoa_r+0x2bc>)
  4069d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4069da:	e9d3 0100 	ldrd	r0, r1, [r3]
  4069de:	4652      	mov	r2, sl
  4069e0:	465b      	mov	r3, fp
  4069e2:	f003 f841 	bl	409a68 <__aeabi_dcmpgt>
  4069e6:	2800      	cmp	r0, #0
  4069e8:	f000 81c5 	beq.w	406d76 <_dtoa_r+0x4d6>
  4069ec:	1e6b      	subs	r3, r5, #1
  4069ee:	9302      	str	r3, [sp, #8]
  4069f0:	2300      	movs	r3, #0
  4069f2:	930e      	str	r3, [sp, #56]	; 0x38
  4069f4:	1bbf      	subs	r7, r7, r6
  4069f6:	1e7b      	subs	r3, r7, #1
  4069f8:	9306      	str	r3, [sp, #24]
  4069fa:	f100 8154 	bmi.w	406ca6 <_dtoa_r+0x406>
  4069fe:	2300      	movs	r3, #0
  406a00:	9308      	str	r3, [sp, #32]
  406a02:	9b02      	ldr	r3, [sp, #8]
  406a04:	2b00      	cmp	r3, #0
  406a06:	f2c0 8145 	blt.w	406c94 <_dtoa_r+0x3f4>
  406a0a:	9a06      	ldr	r2, [sp, #24]
  406a0c:	930d      	str	r3, [sp, #52]	; 0x34
  406a0e:	4611      	mov	r1, r2
  406a10:	4419      	add	r1, r3
  406a12:	2300      	movs	r3, #0
  406a14:	9106      	str	r1, [sp, #24]
  406a16:	930c      	str	r3, [sp, #48]	; 0x30
  406a18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a1a:	2b09      	cmp	r3, #9
  406a1c:	d82a      	bhi.n	406a74 <_dtoa_r+0x1d4>
  406a1e:	2b05      	cmp	r3, #5
  406a20:	f340 865b 	ble.w	4076da <_dtoa_r+0xe3a>
  406a24:	3b04      	subs	r3, #4
  406a26:	9324      	str	r3, [sp, #144]	; 0x90
  406a28:	2500      	movs	r5, #0
  406a2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a2c:	3b02      	subs	r3, #2
  406a2e:	2b03      	cmp	r3, #3
  406a30:	f200 8642 	bhi.w	4076b8 <_dtoa_r+0xe18>
  406a34:	e8df f013 	tbh	[pc, r3, lsl #1]
  406a38:	02c903d4 	.word	0x02c903d4
  406a3c:	046103df 	.word	0x046103df
  406a40:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406a42:	9e19      	ldr	r6, [sp, #100]	; 0x64
  406a44:	443e      	add	r6, r7
  406a46:	f206 4332 	addw	r3, r6, #1074	; 0x432
  406a4a:	2b20      	cmp	r3, #32
  406a4c:	f340 818e 	ble.w	406d6c <_dtoa_r+0x4cc>
  406a50:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  406a54:	f206 4012 	addw	r0, r6, #1042	; 0x412
  406a58:	409d      	lsls	r5, r3
  406a5a:	fa2a f000 	lsr.w	r0, sl, r0
  406a5e:	4328      	orrs	r0, r5
  406a60:	f002 fcfc 	bl	40945c <__aeabi_ui2d>
  406a64:	2301      	movs	r3, #1
  406a66:	3e01      	subs	r6, #1
  406a68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406a6c:	9314      	str	r3, [sp, #80]	; 0x50
  406a6e:	e781      	b.n	406974 <_dtoa_r+0xd4>
  406a70:	483b      	ldr	r0, [pc, #236]	; (406b60 <_dtoa_r+0x2c0>)
  406a72:	e743      	b.n	4068fc <_dtoa_r+0x5c>
  406a74:	2100      	movs	r1, #0
  406a76:	6461      	str	r1, [r4, #68]	; 0x44
  406a78:	4620      	mov	r0, r4
  406a7a:	9125      	str	r1, [sp, #148]	; 0x94
  406a7c:	f001 fc4c 	bl	408318 <_Balloc>
  406a80:	f04f 33ff 	mov.w	r3, #4294967295
  406a84:	930a      	str	r3, [sp, #40]	; 0x28
  406a86:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406a88:	930f      	str	r3, [sp, #60]	; 0x3c
  406a8a:	2301      	movs	r3, #1
  406a8c:	9004      	str	r0, [sp, #16]
  406a8e:	6420      	str	r0, [r4, #64]	; 0x40
  406a90:	9224      	str	r2, [sp, #144]	; 0x90
  406a92:	930b      	str	r3, [sp, #44]	; 0x2c
  406a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406a96:	2b00      	cmp	r3, #0
  406a98:	f2c0 80d9 	blt.w	406c4e <_dtoa_r+0x3ae>
  406a9c:	9a02      	ldr	r2, [sp, #8]
  406a9e:	2a0e      	cmp	r2, #14
  406aa0:	f300 80d5 	bgt.w	406c4e <_dtoa_r+0x3ae>
  406aa4:	4b2d      	ldr	r3, [pc, #180]	; (406b5c <_dtoa_r+0x2bc>)
  406aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
  406aae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406ab2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406ab4:	2b00      	cmp	r3, #0
  406ab6:	f2c0 83ba 	blt.w	40722e <_dtoa_r+0x98e>
  406aba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406abe:	4650      	mov	r0, sl
  406ac0:	462a      	mov	r2, r5
  406ac2:	4633      	mov	r3, r6
  406ac4:	4659      	mov	r1, fp
  406ac6:	f002 fe69 	bl	40979c <__aeabi_ddiv>
  406aca:	f002 ffed 	bl	409aa8 <__aeabi_d2iz>
  406ace:	4680      	mov	r8, r0
  406ad0:	f002 fcd4 	bl	40947c <__aeabi_i2d>
  406ad4:	462a      	mov	r2, r5
  406ad6:	4633      	mov	r3, r6
  406ad8:	f002 fd36 	bl	409548 <__aeabi_dmul>
  406adc:	460b      	mov	r3, r1
  406ade:	4602      	mov	r2, r0
  406ae0:	4659      	mov	r1, fp
  406ae2:	4650      	mov	r0, sl
  406ae4:	f002 fb7c 	bl	4091e0 <__aeabi_dsub>
  406ae8:	9d04      	ldr	r5, [sp, #16]
  406aea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406aee:	702b      	strb	r3, [r5, #0]
  406af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406af2:	2b01      	cmp	r3, #1
  406af4:	4606      	mov	r6, r0
  406af6:	460f      	mov	r7, r1
  406af8:	f105 0501 	add.w	r5, r5, #1
  406afc:	d068      	beq.n	406bd0 <_dtoa_r+0x330>
  406afe:	2200      	movs	r2, #0
  406b00:	4b18      	ldr	r3, [pc, #96]	; (406b64 <_dtoa_r+0x2c4>)
  406b02:	f002 fd21 	bl	409548 <__aeabi_dmul>
  406b06:	2200      	movs	r2, #0
  406b08:	2300      	movs	r3, #0
  406b0a:	4606      	mov	r6, r0
  406b0c:	460f      	mov	r7, r1
  406b0e:	f002 ff83 	bl	409a18 <__aeabi_dcmpeq>
  406b12:	2800      	cmp	r0, #0
  406b14:	f040 8088 	bne.w	406c28 <_dtoa_r+0x388>
  406b18:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406b1c:	f04f 0a00 	mov.w	sl, #0
  406b20:	f8df b040 	ldr.w	fp, [pc, #64]	; 406b64 <_dtoa_r+0x2c4>
  406b24:	940c      	str	r4, [sp, #48]	; 0x30
  406b26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406b2a:	e028      	b.n	406b7e <_dtoa_r+0x2de>
  406b2c:	f3af 8000 	nop.w
  406b30:	636f4361 	.word	0x636f4361
  406b34:	3fd287a7 	.word	0x3fd287a7
  406b38:	8b60c8b3 	.word	0x8b60c8b3
  406b3c:	3fc68a28 	.word	0x3fc68a28
  406b40:	509f79fb 	.word	0x509f79fb
  406b44:	3fd34413 	.word	0x3fd34413
  406b48:	7ff00000 	.word	0x7ff00000
  406b4c:	00409f21 	.word	0x00409f21
  406b50:	00409f64 	.word	0x00409f64
  406b54:	00409f70 	.word	0x00409f70
  406b58:	3ff80000 	.word	0x3ff80000
  406b5c:	00409fb0 	.word	0x00409fb0
  406b60:	00409f20 	.word	0x00409f20
  406b64:	40240000 	.word	0x40240000
  406b68:	f002 fcee 	bl	409548 <__aeabi_dmul>
  406b6c:	2200      	movs	r2, #0
  406b6e:	2300      	movs	r3, #0
  406b70:	4606      	mov	r6, r0
  406b72:	460f      	mov	r7, r1
  406b74:	f002 ff50 	bl	409a18 <__aeabi_dcmpeq>
  406b78:	2800      	cmp	r0, #0
  406b7a:	f040 83c1 	bne.w	407300 <_dtoa_r+0xa60>
  406b7e:	4642      	mov	r2, r8
  406b80:	464b      	mov	r3, r9
  406b82:	4630      	mov	r0, r6
  406b84:	4639      	mov	r1, r7
  406b86:	f002 fe09 	bl	40979c <__aeabi_ddiv>
  406b8a:	f002 ff8d 	bl	409aa8 <__aeabi_d2iz>
  406b8e:	4604      	mov	r4, r0
  406b90:	f002 fc74 	bl	40947c <__aeabi_i2d>
  406b94:	4642      	mov	r2, r8
  406b96:	464b      	mov	r3, r9
  406b98:	f002 fcd6 	bl	409548 <__aeabi_dmul>
  406b9c:	4602      	mov	r2, r0
  406b9e:	460b      	mov	r3, r1
  406ba0:	4630      	mov	r0, r6
  406ba2:	4639      	mov	r1, r7
  406ba4:	f002 fb1c 	bl	4091e0 <__aeabi_dsub>
  406ba8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406bac:	9e04      	ldr	r6, [sp, #16]
  406bae:	f805 eb01 	strb.w	lr, [r5], #1
  406bb2:	eba5 0e06 	sub.w	lr, r5, r6
  406bb6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406bb8:	45b6      	cmp	lr, r6
  406bba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406bbe:	4652      	mov	r2, sl
  406bc0:	465b      	mov	r3, fp
  406bc2:	d1d1      	bne.n	406b68 <_dtoa_r+0x2c8>
  406bc4:	46a0      	mov	r8, r4
  406bc6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406bca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406bcc:	4606      	mov	r6, r0
  406bce:	460f      	mov	r7, r1
  406bd0:	4632      	mov	r2, r6
  406bd2:	463b      	mov	r3, r7
  406bd4:	4630      	mov	r0, r6
  406bd6:	4639      	mov	r1, r7
  406bd8:	f002 fb04 	bl	4091e4 <__adddf3>
  406bdc:	4606      	mov	r6, r0
  406bde:	460f      	mov	r7, r1
  406be0:	4602      	mov	r2, r0
  406be2:	460b      	mov	r3, r1
  406be4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406be8:	f002 ff20 	bl	409a2c <__aeabi_dcmplt>
  406bec:	b948      	cbnz	r0, 406c02 <_dtoa_r+0x362>
  406bee:	4632      	mov	r2, r6
  406bf0:	463b      	mov	r3, r7
  406bf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406bf6:	f002 ff0f 	bl	409a18 <__aeabi_dcmpeq>
  406bfa:	b1a8      	cbz	r0, 406c28 <_dtoa_r+0x388>
  406bfc:	f018 0f01 	tst.w	r8, #1
  406c00:	d012      	beq.n	406c28 <_dtoa_r+0x388>
  406c02:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406c06:	9a04      	ldr	r2, [sp, #16]
  406c08:	1e6b      	subs	r3, r5, #1
  406c0a:	e004      	b.n	406c16 <_dtoa_r+0x376>
  406c0c:	429a      	cmp	r2, r3
  406c0e:	f000 8401 	beq.w	407414 <_dtoa_r+0xb74>
  406c12:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  406c16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406c1a:	f103 0501 	add.w	r5, r3, #1
  406c1e:	d0f5      	beq.n	406c0c <_dtoa_r+0x36c>
  406c20:	f108 0801 	add.w	r8, r8, #1
  406c24:	f883 8000 	strb.w	r8, [r3]
  406c28:	4649      	mov	r1, r9
  406c2a:	4620      	mov	r0, r4
  406c2c:	f001 fb9a 	bl	408364 <_Bfree>
  406c30:	2200      	movs	r2, #0
  406c32:	9b02      	ldr	r3, [sp, #8]
  406c34:	702a      	strb	r2, [r5, #0]
  406c36:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406c38:	3301      	adds	r3, #1
  406c3a:	6013      	str	r3, [r2, #0]
  406c3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406c3e:	2b00      	cmp	r3, #0
  406c40:	f000 839e 	beq.w	407380 <_dtoa_r+0xae0>
  406c44:	9804      	ldr	r0, [sp, #16]
  406c46:	601d      	str	r5, [r3, #0]
  406c48:	b01b      	add	sp, #108	; 0x6c
  406c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406c50:	2a00      	cmp	r2, #0
  406c52:	d03e      	beq.n	406cd2 <_dtoa_r+0x432>
  406c54:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406c56:	2a01      	cmp	r2, #1
  406c58:	f340 8311 	ble.w	40727e <_dtoa_r+0x9de>
  406c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406c60:	1e5f      	subs	r7, r3, #1
  406c62:	42ba      	cmp	r2, r7
  406c64:	f2c0 838f 	blt.w	407386 <_dtoa_r+0xae6>
  406c68:	1bd7      	subs	r7, r2, r7
  406c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c6c:	2b00      	cmp	r3, #0
  406c6e:	f2c0 848b 	blt.w	407588 <_dtoa_r+0xce8>
  406c72:	9d08      	ldr	r5, [sp, #32]
  406c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c76:	9a08      	ldr	r2, [sp, #32]
  406c78:	441a      	add	r2, r3
  406c7a:	9208      	str	r2, [sp, #32]
  406c7c:	9a06      	ldr	r2, [sp, #24]
  406c7e:	2101      	movs	r1, #1
  406c80:	441a      	add	r2, r3
  406c82:	4620      	mov	r0, r4
  406c84:	9206      	str	r2, [sp, #24]
  406c86:	f001 fc07 	bl	408498 <__i2b>
  406c8a:	4606      	mov	r6, r0
  406c8c:	e024      	b.n	406cd8 <_dtoa_r+0x438>
  406c8e:	2301      	movs	r3, #1
  406c90:	930e      	str	r3, [sp, #56]	; 0x38
  406c92:	e6af      	b.n	4069f4 <_dtoa_r+0x154>
  406c94:	9a08      	ldr	r2, [sp, #32]
  406c96:	9b02      	ldr	r3, [sp, #8]
  406c98:	1ad2      	subs	r2, r2, r3
  406c9a:	425b      	negs	r3, r3
  406c9c:	930c      	str	r3, [sp, #48]	; 0x30
  406c9e:	2300      	movs	r3, #0
  406ca0:	9208      	str	r2, [sp, #32]
  406ca2:	930d      	str	r3, [sp, #52]	; 0x34
  406ca4:	e6b8      	b.n	406a18 <_dtoa_r+0x178>
  406ca6:	f1c7 0301 	rsb	r3, r7, #1
  406caa:	9308      	str	r3, [sp, #32]
  406cac:	2300      	movs	r3, #0
  406cae:	9306      	str	r3, [sp, #24]
  406cb0:	e6a7      	b.n	406a02 <_dtoa_r+0x162>
  406cb2:	9d02      	ldr	r5, [sp, #8]
  406cb4:	4628      	mov	r0, r5
  406cb6:	f002 fbe1 	bl	40947c <__aeabi_i2d>
  406cba:	4602      	mov	r2, r0
  406cbc:	460b      	mov	r3, r1
  406cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406cc2:	f002 fea9 	bl	409a18 <__aeabi_dcmpeq>
  406cc6:	2800      	cmp	r0, #0
  406cc8:	f47f ae80 	bne.w	4069cc <_dtoa_r+0x12c>
  406ccc:	1e6b      	subs	r3, r5, #1
  406cce:	9302      	str	r3, [sp, #8]
  406cd0:	e67c      	b.n	4069cc <_dtoa_r+0x12c>
  406cd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406cd4:	9d08      	ldr	r5, [sp, #32]
  406cd6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406cd8:	2d00      	cmp	r5, #0
  406cda:	dd0c      	ble.n	406cf6 <_dtoa_r+0x456>
  406cdc:	9906      	ldr	r1, [sp, #24]
  406cde:	2900      	cmp	r1, #0
  406ce0:	460b      	mov	r3, r1
  406ce2:	dd08      	ble.n	406cf6 <_dtoa_r+0x456>
  406ce4:	42a9      	cmp	r1, r5
  406ce6:	9a08      	ldr	r2, [sp, #32]
  406ce8:	bfa8      	it	ge
  406cea:	462b      	movge	r3, r5
  406cec:	1ad2      	subs	r2, r2, r3
  406cee:	1aed      	subs	r5, r5, r3
  406cf0:	1acb      	subs	r3, r1, r3
  406cf2:	9208      	str	r2, [sp, #32]
  406cf4:	9306      	str	r3, [sp, #24]
  406cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406cf8:	b1d3      	cbz	r3, 406d30 <_dtoa_r+0x490>
  406cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406cfc:	2b00      	cmp	r3, #0
  406cfe:	f000 82b7 	beq.w	407270 <_dtoa_r+0x9d0>
  406d02:	2f00      	cmp	r7, #0
  406d04:	dd10      	ble.n	406d28 <_dtoa_r+0x488>
  406d06:	4631      	mov	r1, r6
  406d08:	463a      	mov	r2, r7
  406d0a:	4620      	mov	r0, r4
  406d0c:	f001 fc60 	bl	4085d0 <__pow5mult>
  406d10:	464a      	mov	r2, r9
  406d12:	4601      	mov	r1, r0
  406d14:	4606      	mov	r6, r0
  406d16:	4620      	mov	r0, r4
  406d18:	f001 fbc8 	bl	4084ac <__multiply>
  406d1c:	4649      	mov	r1, r9
  406d1e:	4680      	mov	r8, r0
  406d20:	4620      	mov	r0, r4
  406d22:	f001 fb1f 	bl	408364 <_Bfree>
  406d26:	46c1      	mov	r9, r8
  406d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406d2a:	1bda      	subs	r2, r3, r7
  406d2c:	f040 82a1 	bne.w	407272 <_dtoa_r+0x9d2>
  406d30:	2101      	movs	r1, #1
  406d32:	4620      	mov	r0, r4
  406d34:	f001 fbb0 	bl	408498 <__i2b>
  406d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406d3a:	2b00      	cmp	r3, #0
  406d3c:	4680      	mov	r8, r0
  406d3e:	dd1c      	ble.n	406d7a <_dtoa_r+0x4da>
  406d40:	4601      	mov	r1, r0
  406d42:	461a      	mov	r2, r3
  406d44:	4620      	mov	r0, r4
  406d46:	f001 fc43 	bl	4085d0 <__pow5mult>
  406d4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406d4c:	2b01      	cmp	r3, #1
  406d4e:	4680      	mov	r8, r0
  406d50:	f340 8254 	ble.w	4071fc <_dtoa_r+0x95c>
  406d54:	2300      	movs	r3, #0
  406d56:	930c      	str	r3, [sp, #48]	; 0x30
  406d58:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406d5c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406d60:	6918      	ldr	r0, [r3, #16]
  406d62:	f001 fb49 	bl	4083f8 <__hi0bits>
  406d66:	f1c0 0020 	rsb	r0, r0, #32
  406d6a:	e010      	b.n	406d8e <_dtoa_r+0x4ee>
  406d6c:	f1c3 0520 	rsb	r5, r3, #32
  406d70:	fa0a f005 	lsl.w	r0, sl, r5
  406d74:	e674      	b.n	406a60 <_dtoa_r+0x1c0>
  406d76:	900e      	str	r0, [sp, #56]	; 0x38
  406d78:	e63c      	b.n	4069f4 <_dtoa_r+0x154>
  406d7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406d7c:	2b01      	cmp	r3, #1
  406d7e:	f340 8287 	ble.w	407290 <_dtoa_r+0x9f0>
  406d82:	2300      	movs	r3, #0
  406d84:	930c      	str	r3, [sp, #48]	; 0x30
  406d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406d88:	2001      	movs	r0, #1
  406d8a:	2b00      	cmp	r3, #0
  406d8c:	d1e4      	bne.n	406d58 <_dtoa_r+0x4b8>
  406d8e:	9a06      	ldr	r2, [sp, #24]
  406d90:	4410      	add	r0, r2
  406d92:	f010 001f 	ands.w	r0, r0, #31
  406d96:	f000 80a1 	beq.w	406edc <_dtoa_r+0x63c>
  406d9a:	f1c0 0320 	rsb	r3, r0, #32
  406d9e:	2b04      	cmp	r3, #4
  406da0:	f340 849e 	ble.w	4076e0 <_dtoa_r+0xe40>
  406da4:	9b08      	ldr	r3, [sp, #32]
  406da6:	f1c0 001c 	rsb	r0, r0, #28
  406daa:	4403      	add	r3, r0
  406dac:	9308      	str	r3, [sp, #32]
  406dae:	4613      	mov	r3, r2
  406db0:	4403      	add	r3, r0
  406db2:	4405      	add	r5, r0
  406db4:	9306      	str	r3, [sp, #24]
  406db6:	9b08      	ldr	r3, [sp, #32]
  406db8:	2b00      	cmp	r3, #0
  406dba:	dd05      	ble.n	406dc8 <_dtoa_r+0x528>
  406dbc:	4649      	mov	r1, r9
  406dbe:	461a      	mov	r2, r3
  406dc0:	4620      	mov	r0, r4
  406dc2:	f001 fc55 	bl	408670 <__lshift>
  406dc6:	4681      	mov	r9, r0
  406dc8:	9b06      	ldr	r3, [sp, #24]
  406dca:	2b00      	cmp	r3, #0
  406dcc:	dd05      	ble.n	406dda <_dtoa_r+0x53a>
  406dce:	4641      	mov	r1, r8
  406dd0:	461a      	mov	r2, r3
  406dd2:	4620      	mov	r0, r4
  406dd4:	f001 fc4c 	bl	408670 <__lshift>
  406dd8:	4680      	mov	r8, r0
  406dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406ddc:	2b00      	cmp	r3, #0
  406dde:	f040 8086 	bne.w	406eee <_dtoa_r+0x64e>
  406de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406de4:	2b00      	cmp	r3, #0
  406de6:	f340 8266 	ble.w	4072b6 <_dtoa_r+0xa16>
  406dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406dec:	2b00      	cmp	r3, #0
  406dee:	f000 8098 	beq.w	406f22 <_dtoa_r+0x682>
  406df2:	2d00      	cmp	r5, #0
  406df4:	dd05      	ble.n	406e02 <_dtoa_r+0x562>
  406df6:	4631      	mov	r1, r6
  406df8:	462a      	mov	r2, r5
  406dfa:	4620      	mov	r0, r4
  406dfc:	f001 fc38 	bl	408670 <__lshift>
  406e00:	4606      	mov	r6, r0
  406e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406e04:	2b00      	cmp	r3, #0
  406e06:	f040 8337 	bne.w	407478 <_dtoa_r+0xbd8>
  406e0a:	9606      	str	r6, [sp, #24]
  406e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e0e:	9a04      	ldr	r2, [sp, #16]
  406e10:	f8dd b018 	ldr.w	fp, [sp, #24]
  406e14:	3b01      	subs	r3, #1
  406e16:	18d3      	adds	r3, r2, r3
  406e18:	930b      	str	r3, [sp, #44]	; 0x2c
  406e1a:	f00a 0301 	and.w	r3, sl, #1
  406e1e:	930c      	str	r3, [sp, #48]	; 0x30
  406e20:	4617      	mov	r7, r2
  406e22:	46c2      	mov	sl, r8
  406e24:	4651      	mov	r1, sl
  406e26:	4648      	mov	r0, r9
  406e28:	f7ff fca4 	bl	406774 <quorem>
  406e2c:	4631      	mov	r1, r6
  406e2e:	4605      	mov	r5, r0
  406e30:	4648      	mov	r0, r9
  406e32:	f001 fc6f 	bl	408714 <__mcmp>
  406e36:	465a      	mov	r2, fp
  406e38:	900a      	str	r0, [sp, #40]	; 0x28
  406e3a:	4651      	mov	r1, sl
  406e3c:	4620      	mov	r0, r4
  406e3e:	f001 fc85 	bl	40874c <__mdiff>
  406e42:	68c2      	ldr	r2, [r0, #12]
  406e44:	4680      	mov	r8, r0
  406e46:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406e4a:	2a00      	cmp	r2, #0
  406e4c:	f040 822b 	bne.w	4072a6 <_dtoa_r+0xa06>
  406e50:	4601      	mov	r1, r0
  406e52:	4648      	mov	r0, r9
  406e54:	9308      	str	r3, [sp, #32]
  406e56:	f001 fc5d 	bl	408714 <__mcmp>
  406e5a:	4641      	mov	r1, r8
  406e5c:	9006      	str	r0, [sp, #24]
  406e5e:	4620      	mov	r0, r4
  406e60:	f001 fa80 	bl	408364 <_Bfree>
  406e64:	9a06      	ldr	r2, [sp, #24]
  406e66:	9b08      	ldr	r3, [sp, #32]
  406e68:	b932      	cbnz	r2, 406e78 <_dtoa_r+0x5d8>
  406e6a:	9924      	ldr	r1, [sp, #144]	; 0x90
  406e6c:	b921      	cbnz	r1, 406e78 <_dtoa_r+0x5d8>
  406e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406e70:	2a00      	cmp	r2, #0
  406e72:	f000 83ef 	beq.w	407654 <_dtoa_r+0xdb4>
  406e76:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406e78:	990a      	ldr	r1, [sp, #40]	; 0x28
  406e7a:	2900      	cmp	r1, #0
  406e7c:	f2c0 829f 	blt.w	4073be <_dtoa_r+0xb1e>
  406e80:	d105      	bne.n	406e8e <_dtoa_r+0x5ee>
  406e82:	9924      	ldr	r1, [sp, #144]	; 0x90
  406e84:	b919      	cbnz	r1, 406e8e <_dtoa_r+0x5ee>
  406e86:	990c      	ldr	r1, [sp, #48]	; 0x30
  406e88:	2900      	cmp	r1, #0
  406e8a:	f000 8298 	beq.w	4073be <_dtoa_r+0xb1e>
  406e8e:	2a00      	cmp	r2, #0
  406e90:	f300 8306 	bgt.w	4074a0 <_dtoa_r+0xc00>
  406e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406e96:	703b      	strb	r3, [r7, #0]
  406e98:	f107 0801 	add.w	r8, r7, #1
  406e9c:	4297      	cmp	r7, r2
  406e9e:	4645      	mov	r5, r8
  406ea0:	f000 830c 	beq.w	4074bc <_dtoa_r+0xc1c>
  406ea4:	4649      	mov	r1, r9
  406ea6:	2300      	movs	r3, #0
  406ea8:	220a      	movs	r2, #10
  406eaa:	4620      	mov	r0, r4
  406eac:	f001 fa64 	bl	408378 <__multadd>
  406eb0:	455e      	cmp	r6, fp
  406eb2:	4681      	mov	r9, r0
  406eb4:	4631      	mov	r1, r6
  406eb6:	f04f 0300 	mov.w	r3, #0
  406eba:	f04f 020a 	mov.w	r2, #10
  406ebe:	4620      	mov	r0, r4
  406ec0:	f000 81eb 	beq.w	40729a <_dtoa_r+0x9fa>
  406ec4:	f001 fa58 	bl	408378 <__multadd>
  406ec8:	4659      	mov	r1, fp
  406eca:	4606      	mov	r6, r0
  406ecc:	2300      	movs	r3, #0
  406ece:	220a      	movs	r2, #10
  406ed0:	4620      	mov	r0, r4
  406ed2:	f001 fa51 	bl	408378 <__multadd>
  406ed6:	4647      	mov	r7, r8
  406ed8:	4683      	mov	fp, r0
  406eda:	e7a3      	b.n	406e24 <_dtoa_r+0x584>
  406edc:	201c      	movs	r0, #28
  406ede:	9b08      	ldr	r3, [sp, #32]
  406ee0:	4403      	add	r3, r0
  406ee2:	9308      	str	r3, [sp, #32]
  406ee4:	9b06      	ldr	r3, [sp, #24]
  406ee6:	4403      	add	r3, r0
  406ee8:	4405      	add	r5, r0
  406eea:	9306      	str	r3, [sp, #24]
  406eec:	e763      	b.n	406db6 <_dtoa_r+0x516>
  406eee:	4641      	mov	r1, r8
  406ef0:	4648      	mov	r0, r9
  406ef2:	f001 fc0f 	bl	408714 <__mcmp>
  406ef6:	2800      	cmp	r0, #0
  406ef8:	f6bf af73 	bge.w	406de2 <_dtoa_r+0x542>
  406efc:	9f02      	ldr	r7, [sp, #8]
  406efe:	4649      	mov	r1, r9
  406f00:	2300      	movs	r3, #0
  406f02:	220a      	movs	r2, #10
  406f04:	4620      	mov	r0, r4
  406f06:	3f01      	subs	r7, #1
  406f08:	9702      	str	r7, [sp, #8]
  406f0a:	f001 fa35 	bl	408378 <__multadd>
  406f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406f10:	4681      	mov	r9, r0
  406f12:	2b00      	cmp	r3, #0
  406f14:	f040 83b6 	bne.w	407684 <_dtoa_r+0xde4>
  406f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406f1a:	2b00      	cmp	r3, #0
  406f1c:	f340 83bf 	ble.w	40769e <_dtoa_r+0xdfe>
  406f20:	930a      	str	r3, [sp, #40]	; 0x28
  406f22:	f8dd b010 	ldr.w	fp, [sp, #16]
  406f26:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406f28:	465d      	mov	r5, fp
  406f2a:	e002      	b.n	406f32 <_dtoa_r+0x692>
  406f2c:	f001 fa24 	bl	408378 <__multadd>
  406f30:	4681      	mov	r9, r0
  406f32:	4641      	mov	r1, r8
  406f34:	4648      	mov	r0, r9
  406f36:	f7ff fc1d 	bl	406774 <quorem>
  406f3a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406f3e:	f805 ab01 	strb.w	sl, [r5], #1
  406f42:	eba5 030b 	sub.w	r3, r5, fp
  406f46:	42bb      	cmp	r3, r7
  406f48:	f04f 020a 	mov.w	r2, #10
  406f4c:	f04f 0300 	mov.w	r3, #0
  406f50:	4649      	mov	r1, r9
  406f52:	4620      	mov	r0, r4
  406f54:	dbea      	blt.n	406f2c <_dtoa_r+0x68c>
  406f56:	9b04      	ldr	r3, [sp, #16]
  406f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406f5a:	2a01      	cmp	r2, #1
  406f5c:	bfac      	ite	ge
  406f5e:	189b      	addge	r3, r3, r2
  406f60:	3301      	addlt	r3, #1
  406f62:	461d      	mov	r5, r3
  406f64:	f04f 0b00 	mov.w	fp, #0
  406f68:	4649      	mov	r1, r9
  406f6a:	2201      	movs	r2, #1
  406f6c:	4620      	mov	r0, r4
  406f6e:	f001 fb7f 	bl	408670 <__lshift>
  406f72:	4641      	mov	r1, r8
  406f74:	4681      	mov	r9, r0
  406f76:	f001 fbcd 	bl	408714 <__mcmp>
  406f7a:	2800      	cmp	r0, #0
  406f7c:	f340 823d 	ble.w	4073fa <_dtoa_r+0xb5a>
  406f80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406f84:	9904      	ldr	r1, [sp, #16]
  406f86:	1e6b      	subs	r3, r5, #1
  406f88:	e004      	b.n	406f94 <_dtoa_r+0x6f4>
  406f8a:	428b      	cmp	r3, r1
  406f8c:	f000 81ae 	beq.w	4072ec <_dtoa_r+0xa4c>
  406f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406f94:	2a39      	cmp	r2, #57	; 0x39
  406f96:	f103 0501 	add.w	r5, r3, #1
  406f9a:	d0f6      	beq.n	406f8a <_dtoa_r+0x6ea>
  406f9c:	3201      	adds	r2, #1
  406f9e:	701a      	strb	r2, [r3, #0]
  406fa0:	4641      	mov	r1, r8
  406fa2:	4620      	mov	r0, r4
  406fa4:	f001 f9de 	bl	408364 <_Bfree>
  406fa8:	2e00      	cmp	r6, #0
  406faa:	f43f ae3d 	beq.w	406c28 <_dtoa_r+0x388>
  406fae:	f1bb 0f00 	cmp.w	fp, #0
  406fb2:	d005      	beq.n	406fc0 <_dtoa_r+0x720>
  406fb4:	45b3      	cmp	fp, r6
  406fb6:	d003      	beq.n	406fc0 <_dtoa_r+0x720>
  406fb8:	4659      	mov	r1, fp
  406fba:	4620      	mov	r0, r4
  406fbc:	f001 f9d2 	bl	408364 <_Bfree>
  406fc0:	4631      	mov	r1, r6
  406fc2:	4620      	mov	r0, r4
  406fc4:	f001 f9ce 	bl	408364 <_Bfree>
  406fc8:	e62e      	b.n	406c28 <_dtoa_r+0x388>
  406fca:	2300      	movs	r3, #0
  406fcc:	930b      	str	r3, [sp, #44]	; 0x2c
  406fce:	9b02      	ldr	r3, [sp, #8]
  406fd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406fd2:	4413      	add	r3, r2
  406fd4:	930f      	str	r3, [sp, #60]	; 0x3c
  406fd6:	3301      	adds	r3, #1
  406fd8:	2b01      	cmp	r3, #1
  406fda:	461f      	mov	r7, r3
  406fdc:	461e      	mov	r6, r3
  406fde:	930a      	str	r3, [sp, #40]	; 0x28
  406fe0:	bfb8      	it	lt
  406fe2:	2701      	movlt	r7, #1
  406fe4:	2100      	movs	r1, #0
  406fe6:	2f17      	cmp	r7, #23
  406fe8:	6461      	str	r1, [r4, #68]	; 0x44
  406fea:	d90a      	bls.n	407002 <_dtoa_r+0x762>
  406fec:	2201      	movs	r2, #1
  406fee:	2304      	movs	r3, #4
  406ff0:	005b      	lsls	r3, r3, #1
  406ff2:	f103 0014 	add.w	r0, r3, #20
  406ff6:	4287      	cmp	r7, r0
  406ff8:	4611      	mov	r1, r2
  406ffa:	f102 0201 	add.w	r2, r2, #1
  406ffe:	d2f7      	bcs.n	406ff0 <_dtoa_r+0x750>
  407000:	6461      	str	r1, [r4, #68]	; 0x44
  407002:	4620      	mov	r0, r4
  407004:	f001 f988 	bl	408318 <_Balloc>
  407008:	2e0e      	cmp	r6, #14
  40700a:	9004      	str	r0, [sp, #16]
  40700c:	6420      	str	r0, [r4, #64]	; 0x40
  40700e:	f63f ad41 	bhi.w	406a94 <_dtoa_r+0x1f4>
  407012:	2d00      	cmp	r5, #0
  407014:	f43f ad3e 	beq.w	406a94 <_dtoa_r+0x1f4>
  407018:	9902      	ldr	r1, [sp, #8]
  40701a:	2900      	cmp	r1, #0
  40701c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407020:	f340 8202 	ble.w	407428 <_dtoa_r+0xb88>
  407024:	4bb8      	ldr	r3, [pc, #736]	; (407308 <_dtoa_r+0xa68>)
  407026:	f001 020f 	and.w	r2, r1, #15
  40702a:	110d      	asrs	r5, r1, #4
  40702c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407030:	06e9      	lsls	r1, r5, #27
  407032:	e9d3 6700 	ldrd	r6, r7, [r3]
  407036:	f140 81ae 	bpl.w	407396 <_dtoa_r+0xaf6>
  40703a:	4bb4      	ldr	r3, [pc, #720]	; (40730c <_dtoa_r+0xa6c>)
  40703c:	4650      	mov	r0, sl
  40703e:	4659      	mov	r1, fp
  407040:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407044:	f002 fbaa 	bl	40979c <__aeabi_ddiv>
  407048:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40704c:	f005 050f 	and.w	r5, r5, #15
  407050:	f04f 0a03 	mov.w	sl, #3
  407054:	b18d      	cbz	r5, 40707a <_dtoa_r+0x7da>
  407056:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40730c <_dtoa_r+0xa6c>
  40705a:	07ea      	lsls	r2, r5, #31
  40705c:	d509      	bpl.n	407072 <_dtoa_r+0x7d2>
  40705e:	4630      	mov	r0, r6
  407060:	4639      	mov	r1, r7
  407062:	e9d8 2300 	ldrd	r2, r3, [r8]
  407066:	f002 fa6f 	bl	409548 <__aeabi_dmul>
  40706a:	f10a 0a01 	add.w	sl, sl, #1
  40706e:	4606      	mov	r6, r0
  407070:	460f      	mov	r7, r1
  407072:	106d      	asrs	r5, r5, #1
  407074:	f108 0808 	add.w	r8, r8, #8
  407078:	d1ef      	bne.n	40705a <_dtoa_r+0x7ba>
  40707a:	463b      	mov	r3, r7
  40707c:	4632      	mov	r2, r6
  40707e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407082:	f002 fb8b 	bl	40979c <__aeabi_ddiv>
  407086:	4607      	mov	r7, r0
  407088:	4688      	mov	r8, r1
  40708a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40708c:	b143      	cbz	r3, 4070a0 <_dtoa_r+0x800>
  40708e:	2200      	movs	r2, #0
  407090:	4b9f      	ldr	r3, [pc, #636]	; (407310 <_dtoa_r+0xa70>)
  407092:	4638      	mov	r0, r7
  407094:	4641      	mov	r1, r8
  407096:	f002 fcc9 	bl	409a2c <__aeabi_dcmplt>
  40709a:	2800      	cmp	r0, #0
  40709c:	f040 8286 	bne.w	4075ac <_dtoa_r+0xd0c>
  4070a0:	4650      	mov	r0, sl
  4070a2:	f002 f9eb 	bl	40947c <__aeabi_i2d>
  4070a6:	463a      	mov	r2, r7
  4070a8:	4643      	mov	r3, r8
  4070aa:	f002 fa4d 	bl	409548 <__aeabi_dmul>
  4070ae:	4b99      	ldr	r3, [pc, #612]	; (407314 <_dtoa_r+0xa74>)
  4070b0:	2200      	movs	r2, #0
  4070b2:	f002 f897 	bl	4091e4 <__adddf3>
  4070b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4070b8:	4605      	mov	r5, r0
  4070ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4070be:	2b00      	cmp	r3, #0
  4070c0:	f000 813e 	beq.w	407340 <_dtoa_r+0xaa0>
  4070c4:	9b02      	ldr	r3, [sp, #8]
  4070c6:	9315      	str	r3, [sp, #84]	; 0x54
  4070c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4070ca:	9312      	str	r3, [sp, #72]	; 0x48
  4070cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4070ce:	2b00      	cmp	r3, #0
  4070d0:	f000 81fa 	beq.w	4074c8 <_dtoa_r+0xc28>
  4070d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4070d6:	4b8c      	ldr	r3, [pc, #560]	; (407308 <_dtoa_r+0xa68>)
  4070d8:	498f      	ldr	r1, [pc, #572]	; (407318 <_dtoa_r+0xa78>)
  4070da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4070de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4070e2:	2000      	movs	r0, #0
  4070e4:	f002 fb5a 	bl	40979c <__aeabi_ddiv>
  4070e8:	462a      	mov	r2, r5
  4070ea:	4633      	mov	r3, r6
  4070ec:	f002 f878 	bl	4091e0 <__aeabi_dsub>
  4070f0:	4682      	mov	sl, r0
  4070f2:	468b      	mov	fp, r1
  4070f4:	4638      	mov	r0, r7
  4070f6:	4641      	mov	r1, r8
  4070f8:	f002 fcd6 	bl	409aa8 <__aeabi_d2iz>
  4070fc:	4605      	mov	r5, r0
  4070fe:	f002 f9bd 	bl	40947c <__aeabi_i2d>
  407102:	4602      	mov	r2, r0
  407104:	460b      	mov	r3, r1
  407106:	4638      	mov	r0, r7
  407108:	4641      	mov	r1, r8
  40710a:	f002 f869 	bl	4091e0 <__aeabi_dsub>
  40710e:	3530      	adds	r5, #48	; 0x30
  407110:	fa5f f885 	uxtb.w	r8, r5
  407114:	9d04      	ldr	r5, [sp, #16]
  407116:	4606      	mov	r6, r0
  407118:	460f      	mov	r7, r1
  40711a:	f885 8000 	strb.w	r8, [r5]
  40711e:	4602      	mov	r2, r0
  407120:	460b      	mov	r3, r1
  407122:	4650      	mov	r0, sl
  407124:	4659      	mov	r1, fp
  407126:	3501      	adds	r5, #1
  407128:	f002 fc9e 	bl	409a68 <__aeabi_dcmpgt>
  40712c:	2800      	cmp	r0, #0
  40712e:	d154      	bne.n	4071da <_dtoa_r+0x93a>
  407130:	4632      	mov	r2, r6
  407132:	463b      	mov	r3, r7
  407134:	2000      	movs	r0, #0
  407136:	4976      	ldr	r1, [pc, #472]	; (407310 <_dtoa_r+0xa70>)
  407138:	f002 f852 	bl	4091e0 <__aeabi_dsub>
  40713c:	4602      	mov	r2, r0
  40713e:	460b      	mov	r3, r1
  407140:	4650      	mov	r0, sl
  407142:	4659      	mov	r1, fp
  407144:	f002 fc90 	bl	409a68 <__aeabi_dcmpgt>
  407148:	2800      	cmp	r0, #0
  40714a:	f040 8270 	bne.w	40762e <_dtoa_r+0xd8e>
  40714e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407150:	2a01      	cmp	r2, #1
  407152:	f000 8111 	beq.w	407378 <_dtoa_r+0xad8>
  407156:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407158:	9a04      	ldr	r2, [sp, #16]
  40715a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40715e:	4413      	add	r3, r2
  407160:	4699      	mov	r9, r3
  407162:	e00d      	b.n	407180 <_dtoa_r+0x8e0>
  407164:	2000      	movs	r0, #0
  407166:	496a      	ldr	r1, [pc, #424]	; (407310 <_dtoa_r+0xa70>)
  407168:	f002 f83a 	bl	4091e0 <__aeabi_dsub>
  40716c:	4652      	mov	r2, sl
  40716e:	465b      	mov	r3, fp
  407170:	f002 fc5c 	bl	409a2c <__aeabi_dcmplt>
  407174:	2800      	cmp	r0, #0
  407176:	f040 8258 	bne.w	40762a <_dtoa_r+0xd8a>
  40717a:	454d      	cmp	r5, r9
  40717c:	f000 80fa 	beq.w	407374 <_dtoa_r+0xad4>
  407180:	4650      	mov	r0, sl
  407182:	4659      	mov	r1, fp
  407184:	2200      	movs	r2, #0
  407186:	4b65      	ldr	r3, [pc, #404]	; (40731c <_dtoa_r+0xa7c>)
  407188:	f002 f9de 	bl	409548 <__aeabi_dmul>
  40718c:	2200      	movs	r2, #0
  40718e:	4b63      	ldr	r3, [pc, #396]	; (40731c <_dtoa_r+0xa7c>)
  407190:	4682      	mov	sl, r0
  407192:	468b      	mov	fp, r1
  407194:	4630      	mov	r0, r6
  407196:	4639      	mov	r1, r7
  407198:	f002 f9d6 	bl	409548 <__aeabi_dmul>
  40719c:	460f      	mov	r7, r1
  40719e:	4606      	mov	r6, r0
  4071a0:	f002 fc82 	bl	409aa8 <__aeabi_d2iz>
  4071a4:	4680      	mov	r8, r0
  4071a6:	f002 f969 	bl	40947c <__aeabi_i2d>
  4071aa:	4602      	mov	r2, r0
  4071ac:	460b      	mov	r3, r1
  4071ae:	4630      	mov	r0, r6
  4071b0:	4639      	mov	r1, r7
  4071b2:	f002 f815 	bl	4091e0 <__aeabi_dsub>
  4071b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4071ba:	fa5f f888 	uxtb.w	r8, r8
  4071be:	4652      	mov	r2, sl
  4071c0:	465b      	mov	r3, fp
  4071c2:	f805 8b01 	strb.w	r8, [r5], #1
  4071c6:	4606      	mov	r6, r0
  4071c8:	460f      	mov	r7, r1
  4071ca:	f002 fc2f 	bl	409a2c <__aeabi_dcmplt>
  4071ce:	4632      	mov	r2, r6
  4071d0:	463b      	mov	r3, r7
  4071d2:	2800      	cmp	r0, #0
  4071d4:	d0c6      	beq.n	407164 <_dtoa_r+0x8c4>
  4071d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4071da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4071dc:	9302      	str	r3, [sp, #8]
  4071de:	e523      	b.n	406c28 <_dtoa_r+0x388>
  4071e0:	2300      	movs	r3, #0
  4071e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4071e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4071e6:	2b00      	cmp	r3, #0
  4071e8:	f340 80dc 	ble.w	4073a4 <_dtoa_r+0xb04>
  4071ec:	461f      	mov	r7, r3
  4071ee:	461e      	mov	r6, r3
  4071f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4071f2:	930a      	str	r3, [sp, #40]	; 0x28
  4071f4:	e6f6      	b.n	406fe4 <_dtoa_r+0x744>
  4071f6:	2301      	movs	r3, #1
  4071f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4071fa:	e7f3      	b.n	4071e4 <_dtoa_r+0x944>
  4071fc:	f1ba 0f00 	cmp.w	sl, #0
  407200:	f47f ada8 	bne.w	406d54 <_dtoa_r+0x4b4>
  407204:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407208:	2b00      	cmp	r3, #0
  40720a:	f47f adba 	bne.w	406d82 <_dtoa_r+0x4e2>
  40720e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407212:	0d3f      	lsrs	r7, r7, #20
  407214:	053f      	lsls	r7, r7, #20
  407216:	2f00      	cmp	r7, #0
  407218:	f000 820d 	beq.w	407636 <_dtoa_r+0xd96>
  40721c:	9b08      	ldr	r3, [sp, #32]
  40721e:	3301      	adds	r3, #1
  407220:	9308      	str	r3, [sp, #32]
  407222:	9b06      	ldr	r3, [sp, #24]
  407224:	3301      	adds	r3, #1
  407226:	9306      	str	r3, [sp, #24]
  407228:	2301      	movs	r3, #1
  40722a:	930c      	str	r3, [sp, #48]	; 0x30
  40722c:	e5ab      	b.n	406d86 <_dtoa_r+0x4e6>
  40722e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407230:	2b00      	cmp	r3, #0
  407232:	f73f ac42 	bgt.w	406aba <_dtoa_r+0x21a>
  407236:	f040 8221 	bne.w	40767c <_dtoa_r+0xddc>
  40723a:	2200      	movs	r2, #0
  40723c:	4b38      	ldr	r3, [pc, #224]	; (407320 <_dtoa_r+0xa80>)
  40723e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407242:	f002 f981 	bl	409548 <__aeabi_dmul>
  407246:	4652      	mov	r2, sl
  407248:	465b      	mov	r3, fp
  40724a:	f002 fc03 	bl	409a54 <__aeabi_dcmpge>
  40724e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407252:	4646      	mov	r6, r8
  407254:	2800      	cmp	r0, #0
  407256:	d041      	beq.n	4072dc <_dtoa_r+0xa3c>
  407258:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40725a:	9d04      	ldr	r5, [sp, #16]
  40725c:	43db      	mvns	r3, r3
  40725e:	9302      	str	r3, [sp, #8]
  407260:	4641      	mov	r1, r8
  407262:	4620      	mov	r0, r4
  407264:	f001 f87e 	bl	408364 <_Bfree>
  407268:	2e00      	cmp	r6, #0
  40726a:	f43f acdd 	beq.w	406c28 <_dtoa_r+0x388>
  40726e:	e6a7      	b.n	406fc0 <_dtoa_r+0x720>
  407270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407272:	4649      	mov	r1, r9
  407274:	4620      	mov	r0, r4
  407276:	f001 f9ab 	bl	4085d0 <__pow5mult>
  40727a:	4681      	mov	r9, r0
  40727c:	e558      	b.n	406d30 <_dtoa_r+0x490>
  40727e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407280:	2a00      	cmp	r2, #0
  407282:	f000 8187 	beq.w	407594 <_dtoa_r+0xcf4>
  407286:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40728a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40728c:	9d08      	ldr	r5, [sp, #32]
  40728e:	e4f2      	b.n	406c76 <_dtoa_r+0x3d6>
  407290:	f1ba 0f00 	cmp.w	sl, #0
  407294:	f47f ad75 	bne.w	406d82 <_dtoa_r+0x4e2>
  407298:	e7b4      	b.n	407204 <_dtoa_r+0x964>
  40729a:	f001 f86d 	bl	408378 <__multadd>
  40729e:	4647      	mov	r7, r8
  4072a0:	4606      	mov	r6, r0
  4072a2:	4683      	mov	fp, r0
  4072a4:	e5be      	b.n	406e24 <_dtoa_r+0x584>
  4072a6:	4601      	mov	r1, r0
  4072a8:	4620      	mov	r0, r4
  4072aa:	9306      	str	r3, [sp, #24]
  4072ac:	f001 f85a 	bl	408364 <_Bfree>
  4072b0:	2201      	movs	r2, #1
  4072b2:	9b06      	ldr	r3, [sp, #24]
  4072b4:	e5e0      	b.n	406e78 <_dtoa_r+0x5d8>
  4072b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4072b8:	2b02      	cmp	r3, #2
  4072ba:	f77f ad96 	ble.w	406dea <_dtoa_r+0x54a>
  4072be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4072c0:	2b00      	cmp	r3, #0
  4072c2:	d1c9      	bne.n	407258 <_dtoa_r+0x9b8>
  4072c4:	4641      	mov	r1, r8
  4072c6:	2205      	movs	r2, #5
  4072c8:	4620      	mov	r0, r4
  4072ca:	f001 f855 	bl	408378 <__multadd>
  4072ce:	4601      	mov	r1, r0
  4072d0:	4680      	mov	r8, r0
  4072d2:	4648      	mov	r0, r9
  4072d4:	f001 fa1e 	bl	408714 <__mcmp>
  4072d8:	2800      	cmp	r0, #0
  4072da:	ddbd      	ble.n	407258 <_dtoa_r+0x9b8>
  4072dc:	9a02      	ldr	r2, [sp, #8]
  4072de:	9904      	ldr	r1, [sp, #16]
  4072e0:	2331      	movs	r3, #49	; 0x31
  4072e2:	3201      	adds	r2, #1
  4072e4:	9202      	str	r2, [sp, #8]
  4072e6:	700b      	strb	r3, [r1, #0]
  4072e8:	1c4d      	adds	r5, r1, #1
  4072ea:	e7b9      	b.n	407260 <_dtoa_r+0x9c0>
  4072ec:	9a02      	ldr	r2, [sp, #8]
  4072ee:	3201      	adds	r2, #1
  4072f0:	9202      	str	r2, [sp, #8]
  4072f2:	9a04      	ldr	r2, [sp, #16]
  4072f4:	2331      	movs	r3, #49	; 0x31
  4072f6:	7013      	strb	r3, [r2, #0]
  4072f8:	e652      	b.n	406fa0 <_dtoa_r+0x700>
  4072fa:	2301      	movs	r3, #1
  4072fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4072fe:	e666      	b.n	406fce <_dtoa_r+0x72e>
  407300:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407304:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407306:	e48f      	b.n	406c28 <_dtoa_r+0x388>
  407308:	00409fb0 	.word	0x00409fb0
  40730c:	00409f88 	.word	0x00409f88
  407310:	3ff00000 	.word	0x3ff00000
  407314:	401c0000 	.word	0x401c0000
  407318:	3fe00000 	.word	0x3fe00000
  40731c:	40240000 	.word	0x40240000
  407320:	40140000 	.word	0x40140000
  407324:	4650      	mov	r0, sl
  407326:	f002 f8a9 	bl	40947c <__aeabi_i2d>
  40732a:	463a      	mov	r2, r7
  40732c:	4643      	mov	r3, r8
  40732e:	f002 f90b 	bl	409548 <__aeabi_dmul>
  407332:	2200      	movs	r2, #0
  407334:	4bc1      	ldr	r3, [pc, #772]	; (40763c <_dtoa_r+0xd9c>)
  407336:	f001 ff55 	bl	4091e4 <__adddf3>
  40733a:	4605      	mov	r5, r0
  40733c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407340:	4641      	mov	r1, r8
  407342:	2200      	movs	r2, #0
  407344:	4bbe      	ldr	r3, [pc, #760]	; (407640 <_dtoa_r+0xda0>)
  407346:	4638      	mov	r0, r7
  407348:	f001 ff4a 	bl	4091e0 <__aeabi_dsub>
  40734c:	462a      	mov	r2, r5
  40734e:	4633      	mov	r3, r6
  407350:	4682      	mov	sl, r0
  407352:	468b      	mov	fp, r1
  407354:	f002 fb88 	bl	409a68 <__aeabi_dcmpgt>
  407358:	4680      	mov	r8, r0
  40735a:	2800      	cmp	r0, #0
  40735c:	f040 8110 	bne.w	407580 <_dtoa_r+0xce0>
  407360:	462a      	mov	r2, r5
  407362:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  407366:	4650      	mov	r0, sl
  407368:	4659      	mov	r1, fp
  40736a:	f002 fb5f 	bl	409a2c <__aeabi_dcmplt>
  40736e:	b118      	cbz	r0, 407378 <_dtoa_r+0xad8>
  407370:	4646      	mov	r6, r8
  407372:	e771      	b.n	407258 <_dtoa_r+0x9b8>
  407374:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407378:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40737c:	f7ff bb8a 	b.w	406a94 <_dtoa_r+0x1f4>
  407380:	9804      	ldr	r0, [sp, #16]
  407382:	f7ff babb 	b.w	4068fc <_dtoa_r+0x5c>
  407386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40738a:	970c      	str	r7, [sp, #48]	; 0x30
  40738c:	1afb      	subs	r3, r7, r3
  40738e:	441a      	add	r2, r3
  407390:	920d      	str	r2, [sp, #52]	; 0x34
  407392:	2700      	movs	r7, #0
  407394:	e469      	b.n	406c6a <_dtoa_r+0x3ca>
  407396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40739a:	f04f 0a02 	mov.w	sl, #2
  40739e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4073a2:	e657      	b.n	407054 <_dtoa_r+0x7b4>
  4073a4:	2100      	movs	r1, #0
  4073a6:	2301      	movs	r3, #1
  4073a8:	6461      	str	r1, [r4, #68]	; 0x44
  4073aa:	4620      	mov	r0, r4
  4073ac:	9325      	str	r3, [sp, #148]	; 0x94
  4073ae:	f000 ffb3 	bl	408318 <_Balloc>
  4073b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4073b4:	9004      	str	r0, [sp, #16]
  4073b6:	6420      	str	r0, [r4, #64]	; 0x40
  4073b8:	930a      	str	r3, [sp, #40]	; 0x28
  4073ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4073bc:	e629      	b.n	407012 <_dtoa_r+0x772>
  4073be:	2a00      	cmp	r2, #0
  4073c0:	46d0      	mov	r8, sl
  4073c2:	f8cd b018 	str.w	fp, [sp, #24]
  4073c6:	469a      	mov	sl, r3
  4073c8:	dd11      	ble.n	4073ee <_dtoa_r+0xb4e>
  4073ca:	4649      	mov	r1, r9
  4073cc:	2201      	movs	r2, #1
  4073ce:	4620      	mov	r0, r4
  4073d0:	f001 f94e 	bl	408670 <__lshift>
  4073d4:	4641      	mov	r1, r8
  4073d6:	4681      	mov	r9, r0
  4073d8:	f001 f99c 	bl	408714 <__mcmp>
  4073dc:	2800      	cmp	r0, #0
  4073de:	f340 8146 	ble.w	40766e <_dtoa_r+0xdce>
  4073e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4073e6:	f000 8106 	beq.w	4075f6 <_dtoa_r+0xd56>
  4073ea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4073ee:	46b3      	mov	fp, r6
  4073f0:	f887 a000 	strb.w	sl, [r7]
  4073f4:	1c7d      	adds	r5, r7, #1
  4073f6:	9e06      	ldr	r6, [sp, #24]
  4073f8:	e5d2      	b.n	406fa0 <_dtoa_r+0x700>
  4073fa:	d104      	bne.n	407406 <_dtoa_r+0xb66>
  4073fc:	f01a 0f01 	tst.w	sl, #1
  407400:	d001      	beq.n	407406 <_dtoa_r+0xb66>
  407402:	e5bd      	b.n	406f80 <_dtoa_r+0x6e0>
  407404:	4615      	mov	r5, r2
  407406:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40740a:	2b30      	cmp	r3, #48	; 0x30
  40740c:	f105 32ff 	add.w	r2, r5, #4294967295
  407410:	d0f8      	beq.n	407404 <_dtoa_r+0xb64>
  407412:	e5c5      	b.n	406fa0 <_dtoa_r+0x700>
  407414:	9904      	ldr	r1, [sp, #16]
  407416:	2230      	movs	r2, #48	; 0x30
  407418:	700a      	strb	r2, [r1, #0]
  40741a:	9a02      	ldr	r2, [sp, #8]
  40741c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407420:	3201      	adds	r2, #1
  407422:	9202      	str	r2, [sp, #8]
  407424:	f7ff bbfc 	b.w	406c20 <_dtoa_r+0x380>
  407428:	f000 80bb 	beq.w	4075a2 <_dtoa_r+0xd02>
  40742c:	9b02      	ldr	r3, [sp, #8]
  40742e:	425d      	negs	r5, r3
  407430:	4b84      	ldr	r3, [pc, #528]	; (407644 <_dtoa_r+0xda4>)
  407432:	f005 020f 	and.w	r2, r5, #15
  407436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40743a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40743e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407442:	f002 f881 	bl	409548 <__aeabi_dmul>
  407446:	112d      	asrs	r5, r5, #4
  407448:	4607      	mov	r7, r0
  40744a:	4688      	mov	r8, r1
  40744c:	f000 812c 	beq.w	4076a8 <_dtoa_r+0xe08>
  407450:	4e7d      	ldr	r6, [pc, #500]	; (407648 <_dtoa_r+0xda8>)
  407452:	f04f 0a02 	mov.w	sl, #2
  407456:	07eb      	lsls	r3, r5, #31
  407458:	d509      	bpl.n	40746e <_dtoa_r+0xbce>
  40745a:	4638      	mov	r0, r7
  40745c:	4641      	mov	r1, r8
  40745e:	e9d6 2300 	ldrd	r2, r3, [r6]
  407462:	f002 f871 	bl	409548 <__aeabi_dmul>
  407466:	f10a 0a01 	add.w	sl, sl, #1
  40746a:	4607      	mov	r7, r0
  40746c:	4688      	mov	r8, r1
  40746e:	106d      	asrs	r5, r5, #1
  407470:	f106 0608 	add.w	r6, r6, #8
  407474:	d1ef      	bne.n	407456 <_dtoa_r+0xbb6>
  407476:	e608      	b.n	40708a <_dtoa_r+0x7ea>
  407478:	6871      	ldr	r1, [r6, #4]
  40747a:	4620      	mov	r0, r4
  40747c:	f000 ff4c 	bl	408318 <_Balloc>
  407480:	6933      	ldr	r3, [r6, #16]
  407482:	3302      	adds	r3, #2
  407484:	009a      	lsls	r2, r3, #2
  407486:	4605      	mov	r5, r0
  407488:	f106 010c 	add.w	r1, r6, #12
  40748c:	300c      	adds	r0, #12
  40748e:	f7fc fd8f 	bl	403fb0 <memcpy>
  407492:	4629      	mov	r1, r5
  407494:	2201      	movs	r2, #1
  407496:	4620      	mov	r0, r4
  407498:	f001 f8ea 	bl	408670 <__lshift>
  40749c:	9006      	str	r0, [sp, #24]
  40749e:	e4b5      	b.n	406e0c <_dtoa_r+0x56c>
  4074a0:	2b39      	cmp	r3, #57	; 0x39
  4074a2:	f8cd b018 	str.w	fp, [sp, #24]
  4074a6:	46d0      	mov	r8, sl
  4074a8:	f000 80a5 	beq.w	4075f6 <_dtoa_r+0xd56>
  4074ac:	f103 0a01 	add.w	sl, r3, #1
  4074b0:	46b3      	mov	fp, r6
  4074b2:	f887 a000 	strb.w	sl, [r7]
  4074b6:	1c7d      	adds	r5, r7, #1
  4074b8:	9e06      	ldr	r6, [sp, #24]
  4074ba:	e571      	b.n	406fa0 <_dtoa_r+0x700>
  4074bc:	465a      	mov	r2, fp
  4074be:	46d0      	mov	r8, sl
  4074c0:	46b3      	mov	fp, r6
  4074c2:	469a      	mov	sl, r3
  4074c4:	4616      	mov	r6, r2
  4074c6:	e54f      	b.n	406f68 <_dtoa_r+0x6c8>
  4074c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4074ca:	495e      	ldr	r1, [pc, #376]	; (407644 <_dtoa_r+0xda4>)
  4074cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4074d0:	462a      	mov	r2, r5
  4074d2:	4633      	mov	r3, r6
  4074d4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4074d8:	f002 f836 	bl	409548 <__aeabi_dmul>
  4074dc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4074e0:	4638      	mov	r0, r7
  4074e2:	4641      	mov	r1, r8
  4074e4:	f002 fae0 	bl	409aa8 <__aeabi_d2iz>
  4074e8:	4605      	mov	r5, r0
  4074ea:	f001 ffc7 	bl	40947c <__aeabi_i2d>
  4074ee:	460b      	mov	r3, r1
  4074f0:	4602      	mov	r2, r0
  4074f2:	4641      	mov	r1, r8
  4074f4:	4638      	mov	r0, r7
  4074f6:	f001 fe73 	bl	4091e0 <__aeabi_dsub>
  4074fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4074fc:	460f      	mov	r7, r1
  4074fe:	9904      	ldr	r1, [sp, #16]
  407500:	3530      	adds	r5, #48	; 0x30
  407502:	2b01      	cmp	r3, #1
  407504:	700d      	strb	r5, [r1, #0]
  407506:	4606      	mov	r6, r0
  407508:	f101 0501 	add.w	r5, r1, #1
  40750c:	d026      	beq.n	40755c <_dtoa_r+0xcbc>
  40750e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407510:	9a04      	ldr	r2, [sp, #16]
  407512:	f8df b13c 	ldr.w	fp, [pc, #316]	; 407650 <_dtoa_r+0xdb0>
  407516:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40751a:	4413      	add	r3, r2
  40751c:	f04f 0a00 	mov.w	sl, #0
  407520:	4699      	mov	r9, r3
  407522:	4652      	mov	r2, sl
  407524:	465b      	mov	r3, fp
  407526:	4630      	mov	r0, r6
  407528:	4639      	mov	r1, r7
  40752a:	f002 f80d 	bl	409548 <__aeabi_dmul>
  40752e:	460f      	mov	r7, r1
  407530:	4606      	mov	r6, r0
  407532:	f002 fab9 	bl	409aa8 <__aeabi_d2iz>
  407536:	4680      	mov	r8, r0
  407538:	f001 ffa0 	bl	40947c <__aeabi_i2d>
  40753c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407540:	4602      	mov	r2, r0
  407542:	460b      	mov	r3, r1
  407544:	4630      	mov	r0, r6
  407546:	4639      	mov	r1, r7
  407548:	f001 fe4a 	bl	4091e0 <__aeabi_dsub>
  40754c:	f805 8b01 	strb.w	r8, [r5], #1
  407550:	454d      	cmp	r5, r9
  407552:	4606      	mov	r6, r0
  407554:	460f      	mov	r7, r1
  407556:	d1e4      	bne.n	407522 <_dtoa_r+0xc82>
  407558:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40755c:	4b3b      	ldr	r3, [pc, #236]	; (40764c <_dtoa_r+0xdac>)
  40755e:	2200      	movs	r2, #0
  407560:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  407564:	f001 fe3e 	bl	4091e4 <__adddf3>
  407568:	4632      	mov	r2, r6
  40756a:	463b      	mov	r3, r7
  40756c:	f002 fa5e 	bl	409a2c <__aeabi_dcmplt>
  407570:	2800      	cmp	r0, #0
  407572:	d046      	beq.n	407602 <_dtoa_r+0xd62>
  407574:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407576:	9302      	str	r3, [sp, #8]
  407578:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40757c:	f7ff bb43 	b.w	406c06 <_dtoa_r+0x366>
  407580:	f04f 0800 	mov.w	r8, #0
  407584:	4646      	mov	r6, r8
  407586:	e6a9      	b.n	4072dc <_dtoa_r+0xa3c>
  407588:	9b08      	ldr	r3, [sp, #32]
  40758a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40758c:	1a9d      	subs	r5, r3, r2
  40758e:	2300      	movs	r3, #0
  407590:	f7ff bb71 	b.w	406c76 <_dtoa_r+0x3d6>
  407594:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407596:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407598:	9d08      	ldr	r5, [sp, #32]
  40759a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40759e:	f7ff bb6a 	b.w	406c76 <_dtoa_r+0x3d6>
  4075a2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4075a6:	f04f 0a02 	mov.w	sl, #2
  4075aa:	e56e      	b.n	40708a <_dtoa_r+0x7ea>
  4075ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4075ae:	2b00      	cmp	r3, #0
  4075b0:	f43f aeb8 	beq.w	407324 <_dtoa_r+0xa84>
  4075b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4075b6:	2b00      	cmp	r3, #0
  4075b8:	f77f aede 	ble.w	407378 <_dtoa_r+0xad8>
  4075bc:	2200      	movs	r2, #0
  4075be:	4b24      	ldr	r3, [pc, #144]	; (407650 <_dtoa_r+0xdb0>)
  4075c0:	4638      	mov	r0, r7
  4075c2:	4641      	mov	r1, r8
  4075c4:	f001 ffc0 	bl	409548 <__aeabi_dmul>
  4075c8:	4607      	mov	r7, r0
  4075ca:	4688      	mov	r8, r1
  4075cc:	f10a 0001 	add.w	r0, sl, #1
  4075d0:	f001 ff54 	bl	40947c <__aeabi_i2d>
  4075d4:	463a      	mov	r2, r7
  4075d6:	4643      	mov	r3, r8
  4075d8:	f001 ffb6 	bl	409548 <__aeabi_dmul>
  4075dc:	2200      	movs	r2, #0
  4075de:	4b17      	ldr	r3, [pc, #92]	; (40763c <_dtoa_r+0xd9c>)
  4075e0:	f001 fe00 	bl	4091e4 <__adddf3>
  4075e4:	9a02      	ldr	r2, [sp, #8]
  4075e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4075e8:	9312      	str	r3, [sp, #72]	; 0x48
  4075ea:	3a01      	subs	r2, #1
  4075ec:	4605      	mov	r5, r0
  4075ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4075f2:	9215      	str	r2, [sp, #84]	; 0x54
  4075f4:	e56a      	b.n	4070cc <_dtoa_r+0x82c>
  4075f6:	2239      	movs	r2, #57	; 0x39
  4075f8:	46b3      	mov	fp, r6
  4075fa:	703a      	strb	r2, [r7, #0]
  4075fc:	9e06      	ldr	r6, [sp, #24]
  4075fe:	1c7d      	adds	r5, r7, #1
  407600:	e4c0      	b.n	406f84 <_dtoa_r+0x6e4>
  407602:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407606:	2000      	movs	r0, #0
  407608:	4910      	ldr	r1, [pc, #64]	; (40764c <_dtoa_r+0xdac>)
  40760a:	f001 fde9 	bl	4091e0 <__aeabi_dsub>
  40760e:	4632      	mov	r2, r6
  407610:	463b      	mov	r3, r7
  407612:	f002 fa29 	bl	409a68 <__aeabi_dcmpgt>
  407616:	b908      	cbnz	r0, 40761c <_dtoa_r+0xd7c>
  407618:	e6ae      	b.n	407378 <_dtoa_r+0xad8>
  40761a:	4615      	mov	r5, r2
  40761c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407620:	2b30      	cmp	r3, #48	; 0x30
  407622:	f105 32ff 	add.w	r2, r5, #4294967295
  407626:	d0f8      	beq.n	40761a <_dtoa_r+0xd7a>
  407628:	e5d7      	b.n	4071da <_dtoa_r+0x93a>
  40762a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40762e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407630:	9302      	str	r3, [sp, #8]
  407632:	f7ff bae8 	b.w	406c06 <_dtoa_r+0x366>
  407636:	970c      	str	r7, [sp, #48]	; 0x30
  407638:	f7ff bba5 	b.w	406d86 <_dtoa_r+0x4e6>
  40763c:	401c0000 	.word	0x401c0000
  407640:	40140000 	.word	0x40140000
  407644:	00409fb0 	.word	0x00409fb0
  407648:	00409f88 	.word	0x00409f88
  40764c:	3fe00000 	.word	0x3fe00000
  407650:	40240000 	.word	0x40240000
  407654:	2b39      	cmp	r3, #57	; 0x39
  407656:	f8cd b018 	str.w	fp, [sp, #24]
  40765a:	46d0      	mov	r8, sl
  40765c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407660:	469a      	mov	sl, r3
  407662:	d0c8      	beq.n	4075f6 <_dtoa_r+0xd56>
  407664:	f1bb 0f00 	cmp.w	fp, #0
  407668:	f73f aebf 	bgt.w	4073ea <_dtoa_r+0xb4a>
  40766c:	e6bf      	b.n	4073ee <_dtoa_r+0xb4e>
  40766e:	f47f aebe 	bne.w	4073ee <_dtoa_r+0xb4e>
  407672:	f01a 0f01 	tst.w	sl, #1
  407676:	f43f aeba 	beq.w	4073ee <_dtoa_r+0xb4e>
  40767a:	e6b2      	b.n	4073e2 <_dtoa_r+0xb42>
  40767c:	f04f 0800 	mov.w	r8, #0
  407680:	4646      	mov	r6, r8
  407682:	e5e9      	b.n	407258 <_dtoa_r+0x9b8>
  407684:	4631      	mov	r1, r6
  407686:	2300      	movs	r3, #0
  407688:	220a      	movs	r2, #10
  40768a:	4620      	mov	r0, r4
  40768c:	f000 fe74 	bl	408378 <__multadd>
  407690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407692:	2b00      	cmp	r3, #0
  407694:	4606      	mov	r6, r0
  407696:	dd0a      	ble.n	4076ae <_dtoa_r+0xe0e>
  407698:	930a      	str	r3, [sp, #40]	; 0x28
  40769a:	f7ff bbaa 	b.w	406df2 <_dtoa_r+0x552>
  40769e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076a0:	2b02      	cmp	r3, #2
  4076a2:	dc23      	bgt.n	4076ec <_dtoa_r+0xe4c>
  4076a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4076a6:	e43b      	b.n	406f20 <_dtoa_r+0x680>
  4076a8:	f04f 0a02 	mov.w	sl, #2
  4076ac:	e4ed      	b.n	40708a <_dtoa_r+0x7ea>
  4076ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076b0:	2b02      	cmp	r3, #2
  4076b2:	dc1b      	bgt.n	4076ec <_dtoa_r+0xe4c>
  4076b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4076b6:	e7ef      	b.n	407698 <_dtoa_r+0xdf8>
  4076b8:	2500      	movs	r5, #0
  4076ba:	6465      	str	r5, [r4, #68]	; 0x44
  4076bc:	4629      	mov	r1, r5
  4076be:	4620      	mov	r0, r4
  4076c0:	f000 fe2a 	bl	408318 <_Balloc>
  4076c4:	f04f 33ff 	mov.w	r3, #4294967295
  4076c8:	930a      	str	r3, [sp, #40]	; 0x28
  4076ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4076cc:	2301      	movs	r3, #1
  4076ce:	9004      	str	r0, [sp, #16]
  4076d0:	9525      	str	r5, [sp, #148]	; 0x94
  4076d2:	6420      	str	r0, [r4, #64]	; 0x40
  4076d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4076d6:	f7ff b9dd 	b.w	406a94 <_dtoa_r+0x1f4>
  4076da:	2501      	movs	r5, #1
  4076dc:	f7ff b9a5 	b.w	406a2a <_dtoa_r+0x18a>
  4076e0:	f43f ab69 	beq.w	406db6 <_dtoa_r+0x516>
  4076e4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4076e8:	f7ff bbf9 	b.w	406ede <_dtoa_r+0x63e>
  4076ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4076ee:	930a      	str	r3, [sp, #40]	; 0x28
  4076f0:	e5e5      	b.n	4072be <_dtoa_r+0xa1e>
  4076f2:	bf00      	nop

004076f4 <__sflush_r>:
  4076f4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4076f8:	b29a      	uxth	r2, r3
  4076fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4076fe:	460d      	mov	r5, r1
  407700:	0711      	lsls	r1, r2, #28
  407702:	4680      	mov	r8, r0
  407704:	d43a      	bmi.n	40777c <__sflush_r+0x88>
  407706:	686a      	ldr	r2, [r5, #4]
  407708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40770c:	2a00      	cmp	r2, #0
  40770e:	81ab      	strh	r3, [r5, #12]
  407710:	dd6f      	ble.n	4077f2 <__sflush_r+0xfe>
  407712:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407714:	2c00      	cmp	r4, #0
  407716:	d049      	beq.n	4077ac <__sflush_r+0xb8>
  407718:	2200      	movs	r2, #0
  40771a:	b29b      	uxth	r3, r3
  40771c:	f8d8 6000 	ldr.w	r6, [r8]
  407720:	f8c8 2000 	str.w	r2, [r8]
  407724:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407728:	d067      	beq.n	4077fa <__sflush_r+0x106>
  40772a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40772c:	075f      	lsls	r7, r3, #29
  40772e:	d505      	bpl.n	40773c <__sflush_r+0x48>
  407730:	6869      	ldr	r1, [r5, #4]
  407732:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407734:	1a52      	subs	r2, r2, r1
  407736:	b10b      	cbz	r3, 40773c <__sflush_r+0x48>
  407738:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40773a:	1ad2      	subs	r2, r2, r3
  40773c:	2300      	movs	r3, #0
  40773e:	69e9      	ldr	r1, [r5, #28]
  407740:	4640      	mov	r0, r8
  407742:	47a0      	blx	r4
  407744:	1c44      	adds	r4, r0, #1
  407746:	d03c      	beq.n	4077c2 <__sflush_r+0xce>
  407748:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40774c:	692a      	ldr	r2, [r5, #16]
  40774e:	602a      	str	r2, [r5, #0]
  407750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407754:	2200      	movs	r2, #0
  407756:	81ab      	strh	r3, [r5, #12]
  407758:	04db      	lsls	r3, r3, #19
  40775a:	606a      	str	r2, [r5, #4]
  40775c:	d447      	bmi.n	4077ee <__sflush_r+0xfa>
  40775e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407760:	f8c8 6000 	str.w	r6, [r8]
  407764:	b311      	cbz	r1, 4077ac <__sflush_r+0xb8>
  407766:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40776a:	4299      	cmp	r1, r3
  40776c:	d002      	beq.n	407774 <__sflush_r+0x80>
  40776e:	4640      	mov	r0, r8
  407770:	f000 f9de 	bl	407b30 <_free_r>
  407774:	2000      	movs	r0, #0
  407776:	6328      	str	r0, [r5, #48]	; 0x30
  407778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40777c:	692e      	ldr	r6, [r5, #16]
  40777e:	b1ae      	cbz	r6, 4077ac <__sflush_r+0xb8>
  407780:	682c      	ldr	r4, [r5, #0]
  407782:	602e      	str	r6, [r5, #0]
  407784:	0791      	lsls	r1, r2, #30
  407786:	bf0c      	ite	eq
  407788:	696b      	ldreq	r3, [r5, #20]
  40778a:	2300      	movne	r3, #0
  40778c:	1ba4      	subs	r4, r4, r6
  40778e:	60ab      	str	r3, [r5, #8]
  407790:	e00a      	b.n	4077a8 <__sflush_r+0xb4>
  407792:	4623      	mov	r3, r4
  407794:	4632      	mov	r2, r6
  407796:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407798:	69e9      	ldr	r1, [r5, #28]
  40779a:	4640      	mov	r0, r8
  40779c:	47b8      	blx	r7
  40779e:	2800      	cmp	r0, #0
  4077a0:	eba4 0400 	sub.w	r4, r4, r0
  4077a4:	4406      	add	r6, r0
  4077a6:	dd04      	ble.n	4077b2 <__sflush_r+0xbe>
  4077a8:	2c00      	cmp	r4, #0
  4077aa:	dcf2      	bgt.n	407792 <__sflush_r+0x9e>
  4077ac:	2000      	movs	r0, #0
  4077ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4077b2:	89ab      	ldrh	r3, [r5, #12]
  4077b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4077b8:	81ab      	strh	r3, [r5, #12]
  4077ba:	f04f 30ff 	mov.w	r0, #4294967295
  4077be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4077c2:	f8d8 4000 	ldr.w	r4, [r8]
  4077c6:	2c1d      	cmp	r4, #29
  4077c8:	d8f3      	bhi.n	4077b2 <__sflush_r+0xbe>
  4077ca:	4b19      	ldr	r3, [pc, #100]	; (407830 <__sflush_r+0x13c>)
  4077cc:	40e3      	lsrs	r3, r4
  4077ce:	43db      	mvns	r3, r3
  4077d0:	f013 0301 	ands.w	r3, r3, #1
  4077d4:	d1ed      	bne.n	4077b2 <__sflush_r+0xbe>
  4077d6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4077da:	606b      	str	r3, [r5, #4]
  4077dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4077e0:	6929      	ldr	r1, [r5, #16]
  4077e2:	81ab      	strh	r3, [r5, #12]
  4077e4:	04da      	lsls	r2, r3, #19
  4077e6:	6029      	str	r1, [r5, #0]
  4077e8:	d5b9      	bpl.n	40775e <__sflush_r+0x6a>
  4077ea:	2c00      	cmp	r4, #0
  4077ec:	d1b7      	bne.n	40775e <__sflush_r+0x6a>
  4077ee:	6528      	str	r0, [r5, #80]	; 0x50
  4077f0:	e7b5      	b.n	40775e <__sflush_r+0x6a>
  4077f2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4077f4:	2a00      	cmp	r2, #0
  4077f6:	dc8c      	bgt.n	407712 <__sflush_r+0x1e>
  4077f8:	e7d8      	b.n	4077ac <__sflush_r+0xb8>
  4077fa:	2301      	movs	r3, #1
  4077fc:	69e9      	ldr	r1, [r5, #28]
  4077fe:	4640      	mov	r0, r8
  407800:	47a0      	blx	r4
  407802:	1c43      	adds	r3, r0, #1
  407804:	4602      	mov	r2, r0
  407806:	d002      	beq.n	40780e <__sflush_r+0x11a>
  407808:	89ab      	ldrh	r3, [r5, #12]
  40780a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40780c:	e78e      	b.n	40772c <__sflush_r+0x38>
  40780e:	f8d8 3000 	ldr.w	r3, [r8]
  407812:	2b00      	cmp	r3, #0
  407814:	d0f8      	beq.n	407808 <__sflush_r+0x114>
  407816:	2b1d      	cmp	r3, #29
  407818:	d001      	beq.n	40781e <__sflush_r+0x12a>
  40781a:	2b16      	cmp	r3, #22
  40781c:	d102      	bne.n	407824 <__sflush_r+0x130>
  40781e:	f8c8 6000 	str.w	r6, [r8]
  407822:	e7c3      	b.n	4077ac <__sflush_r+0xb8>
  407824:	89ab      	ldrh	r3, [r5, #12]
  407826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40782a:	81ab      	strh	r3, [r5, #12]
  40782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407830:	20400001 	.word	0x20400001

00407834 <_fflush_r>:
  407834:	b538      	push	{r3, r4, r5, lr}
  407836:	460d      	mov	r5, r1
  407838:	4604      	mov	r4, r0
  40783a:	b108      	cbz	r0, 407840 <_fflush_r+0xc>
  40783c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40783e:	b1bb      	cbz	r3, 407870 <_fflush_r+0x3c>
  407840:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407844:	b188      	cbz	r0, 40786a <_fflush_r+0x36>
  407846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407848:	07db      	lsls	r3, r3, #31
  40784a:	d401      	bmi.n	407850 <_fflush_r+0x1c>
  40784c:	0581      	lsls	r1, r0, #22
  40784e:	d517      	bpl.n	407880 <_fflush_r+0x4c>
  407850:	4620      	mov	r0, r4
  407852:	4629      	mov	r1, r5
  407854:	f7ff ff4e 	bl	4076f4 <__sflush_r>
  407858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40785a:	07da      	lsls	r2, r3, #31
  40785c:	4604      	mov	r4, r0
  40785e:	d402      	bmi.n	407866 <_fflush_r+0x32>
  407860:	89ab      	ldrh	r3, [r5, #12]
  407862:	059b      	lsls	r3, r3, #22
  407864:	d507      	bpl.n	407876 <_fflush_r+0x42>
  407866:	4620      	mov	r0, r4
  407868:	bd38      	pop	{r3, r4, r5, pc}
  40786a:	4604      	mov	r4, r0
  40786c:	4620      	mov	r0, r4
  40786e:	bd38      	pop	{r3, r4, r5, pc}
  407870:	f000 f838 	bl	4078e4 <__sinit>
  407874:	e7e4      	b.n	407840 <_fflush_r+0xc>
  407876:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407878:	f000 fc04 	bl	408084 <__retarget_lock_release_recursive>
  40787c:	4620      	mov	r0, r4
  40787e:	bd38      	pop	{r3, r4, r5, pc}
  407880:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407882:	f000 fbfd 	bl	408080 <__retarget_lock_acquire_recursive>
  407886:	e7e3      	b.n	407850 <_fflush_r+0x1c>

00407888 <_cleanup_r>:
  407888:	4901      	ldr	r1, [pc, #4]	; (407890 <_cleanup_r+0x8>)
  40788a:	f000 bbaf 	b.w	407fec <_fwalk_reent>
  40788e:	bf00      	nop
  407890:	00409071 	.word	0x00409071

00407894 <std.isra.0>:
  407894:	b510      	push	{r4, lr}
  407896:	2300      	movs	r3, #0
  407898:	4604      	mov	r4, r0
  40789a:	8181      	strh	r1, [r0, #12]
  40789c:	81c2      	strh	r2, [r0, #14]
  40789e:	6003      	str	r3, [r0, #0]
  4078a0:	6043      	str	r3, [r0, #4]
  4078a2:	6083      	str	r3, [r0, #8]
  4078a4:	6643      	str	r3, [r0, #100]	; 0x64
  4078a6:	6103      	str	r3, [r0, #16]
  4078a8:	6143      	str	r3, [r0, #20]
  4078aa:	6183      	str	r3, [r0, #24]
  4078ac:	4619      	mov	r1, r3
  4078ae:	2208      	movs	r2, #8
  4078b0:	305c      	adds	r0, #92	; 0x5c
  4078b2:	f7fc fc17 	bl	4040e4 <memset>
  4078b6:	4807      	ldr	r0, [pc, #28]	; (4078d4 <std.isra.0+0x40>)
  4078b8:	4907      	ldr	r1, [pc, #28]	; (4078d8 <std.isra.0+0x44>)
  4078ba:	4a08      	ldr	r2, [pc, #32]	; (4078dc <std.isra.0+0x48>)
  4078bc:	4b08      	ldr	r3, [pc, #32]	; (4078e0 <std.isra.0+0x4c>)
  4078be:	6220      	str	r0, [r4, #32]
  4078c0:	61e4      	str	r4, [r4, #28]
  4078c2:	6261      	str	r1, [r4, #36]	; 0x24
  4078c4:	62a2      	str	r2, [r4, #40]	; 0x28
  4078c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4078c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4078cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4078d0:	f000 bbd2 	b.w	408078 <__retarget_lock_init_recursive>
  4078d4:	00408c59 	.word	0x00408c59
  4078d8:	00408c7d 	.word	0x00408c7d
  4078dc:	00408cb9 	.word	0x00408cb9
  4078e0:	00408cd9 	.word	0x00408cd9

004078e4 <__sinit>:
  4078e4:	b510      	push	{r4, lr}
  4078e6:	4604      	mov	r4, r0
  4078e8:	4812      	ldr	r0, [pc, #72]	; (407934 <__sinit+0x50>)
  4078ea:	f000 fbc9 	bl	408080 <__retarget_lock_acquire_recursive>
  4078ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4078f0:	b9d2      	cbnz	r2, 407928 <__sinit+0x44>
  4078f2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4078f6:	4810      	ldr	r0, [pc, #64]	; (407938 <__sinit+0x54>)
  4078f8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4078fc:	2103      	movs	r1, #3
  4078fe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407902:	63e0      	str	r0, [r4, #60]	; 0x3c
  407904:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407908:	6860      	ldr	r0, [r4, #4]
  40790a:	2104      	movs	r1, #4
  40790c:	f7ff ffc2 	bl	407894 <std.isra.0>
  407910:	2201      	movs	r2, #1
  407912:	2109      	movs	r1, #9
  407914:	68a0      	ldr	r0, [r4, #8]
  407916:	f7ff ffbd 	bl	407894 <std.isra.0>
  40791a:	2202      	movs	r2, #2
  40791c:	2112      	movs	r1, #18
  40791e:	68e0      	ldr	r0, [r4, #12]
  407920:	f7ff ffb8 	bl	407894 <std.isra.0>
  407924:	2301      	movs	r3, #1
  407926:	63a3      	str	r3, [r4, #56]	; 0x38
  407928:	4802      	ldr	r0, [pc, #8]	; (407934 <__sinit+0x50>)
  40792a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40792e:	f000 bba9 	b.w	408084 <__retarget_lock_release_recursive>
  407932:	bf00      	nop
  407934:	20400cf4 	.word	0x20400cf4
  407938:	00407889 	.word	0x00407889

0040793c <__sfp_lock_acquire>:
  40793c:	4801      	ldr	r0, [pc, #4]	; (407944 <__sfp_lock_acquire+0x8>)
  40793e:	f000 bb9f 	b.w	408080 <__retarget_lock_acquire_recursive>
  407942:	bf00      	nop
  407944:	20400d08 	.word	0x20400d08

00407948 <__sfp_lock_release>:
  407948:	4801      	ldr	r0, [pc, #4]	; (407950 <__sfp_lock_release+0x8>)
  40794a:	f000 bb9b 	b.w	408084 <__retarget_lock_release_recursive>
  40794e:	bf00      	nop
  407950:	20400d08 	.word	0x20400d08

00407954 <__libc_fini_array>:
  407954:	b538      	push	{r3, r4, r5, lr}
  407956:	4c0a      	ldr	r4, [pc, #40]	; (407980 <__libc_fini_array+0x2c>)
  407958:	4d0a      	ldr	r5, [pc, #40]	; (407984 <__libc_fini_array+0x30>)
  40795a:	1b64      	subs	r4, r4, r5
  40795c:	10a4      	asrs	r4, r4, #2
  40795e:	d00a      	beq.n	407976 <__libc_fini_array+0x22>
  407960:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407964:	3b01      	subs	r3, #1
  407966:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40796a:	3c01      	subs	r4, #1
  40796c:	f855 3904 	ldr.w	r3, [r5], #-4
  407970:	4798      	blx	r3
  407972:	2c00      	cmp	r4, #0
  407974:	d1f9      	bne.n	40796a <__libc_fini_array+0x16>
  407976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40797a:	f002 bc0f 	b.w	40a19c <_fini>
  40797e:	bf00      	nop
  407980:	0040a1ac 	.word	0x0040a1ac
  407984:	0040a1a8 	.word	0x0040a1a8

00407988 <__fputwc>:
  407988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40798c:	b082      	sub	sp, #8
  40798e:	4680      	mov	r8, r0
  407990:	4689      	mov	r9, r1
  407992:	4614      	mov	r4, r2
  407994:	f000 fb54 	bl	408040 <__locale_mb_cur_max>
  407998:	2801      	cmp	r0, #1
  40799a:	d036      	beq.n	407a0a <__fputwc+0x82>
  40799c:	464a      	mov	r2, r9
  40799e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4079a2:	a901      	add	r1, sp, #4
  4079a4:	4640      	mov	r0, r8
  4079a6:	f001 fa71 	bl	408e8c <_wcrtomb_r>
  4079aa:	1c42      	adds	r2, r0, #1
  4079ac:	4606      	mov	r6, r0
  4079ae:	d025      	beq.n	4079fc <__fputwc+0x74>
  4079b0:	b3a8      	cbz	r0, 407a1e <__fputwc+0x96>
  4079b2:	f89d e004 	ldrb.w	lr, [sp, #4]
  4079b6:	2500      	movs	r5, #0
  4079b8:	f10d 0a04 	add.w	sl, sp, #4
  4079bc:	e009      	b.n	4079d2 <__fputwc+0x4a>
  4079be:	6823      	ldr	r3, [r4, #0]
  4079c0:	1c5a      	adds	r2, r3, #1
  4079c2:	6022      	str	r2, [r4, #0]
  4079c4:	f883 e000 	strb.w	lr, [r3]
  4079c8:	3501      	adds	r5, #1
  4079ca:	42b5      	cmp	r5, r6
  4079cc:	d227      	bcs.n	407a1e <__fputwc+0x96>
  4079ce:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4079d2:	68a3      	ldr	r3, [r4, #8]
  4079d4:	3b01      	subs	r3, #1
  4079d6:	2b00      	cmp	r3, #0
  4079d8:	60a3      	str	r3, [r4, #8]
  4079da:	daf0      	bge.n	4079be <__fputwc+0x36>
  4079dc:	69a7      	ldr	r7, [r4, #24]
  4079de:	42bb      	cmp	r3, r7
  4079e0:	4671      	mov	r1, lr
  4079e2:	4622      	mov	r2, r4
  4079e4:	4640      	mov	r0, r8
  4079e6:	db02      	blt.n	4079ee <__fputwc+0x66>
  4079e8:	f1be 0f0a 	cmp.w	lr, #10
  4079ec:	d1e7      	bne.n	4079be <__fputwc+0x36>
  4079ee:	f001 f9f5 	bl	408ddc <__swbuf_r>
  4079f2:	1c43      	adds	r3, r0, #1
  4079f4:	d1e8      	bne.n	4079c8 <__fputwc+0x40>
  4079f6:	b002      	add	sp, #8
  4079f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4079fc:	89a3      	ldrh	r3, [r4, #12]
  4079fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a02:	81a3      	strh	r3, [r4, #12]
  407a04:	b002      	add	sp, #8
  407a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a0a:	f109 33ff 	add.w	r3, r9, #4294967295
  407a0e:	2bfe      	cmp	r3, #254	; 0xfe
  407a10:	d8c4      	bhi.n	40799c <__fputwc+0x14>
  407a12:	fa5f fe89 	uxtb.w	lr, r9
  407a16:	4606      	mov	r6, r0
  407a18:	f88d e004 	strb.w	lr, [sp, #4]
  407a1c:	e7cb      	b.n	4079b6 <__fputwc+0x2e>
  407a1e:	4648      	mov	r0, r9
  407a20:	b002      	add	sp, #8
  407a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a26:	bf00      	nop

00407a28 <_fputwc_r>:
  407a28:	b530      	push	{r4, r5, lr}
  407a2a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407a2c:	f013 0f01 	tst.w	r3, #1
  407a30:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407a34:	4614      	mov	r4, r2
  407a36:	b083      	sub	sp, #12
  407a38:	4605      	mov	r5, r0
  407a3a:	b29a      	uxth	r2, r3
  407a3c:	d101      	bne.n	407a42 <_fputwc_r+0x1a>
  407a3e:	0590      	lsls	r0, r2, #22
  407a40:	d51c      	bpl.n	407a7c <_fputwc_r+0x54>
  407a42:	0490      	lsls	r0, r2, #18
  407a44:	d406      	bmi.n	407a54 <_fputwc_r+0x2c>
  407a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407a50:	81a3      	strh	r3, [r4, #12]
  407a52:	6662      	str	r2, [r4, #100]	; 0x64
  407a54:	4628      	mov	r0, r5
  407a56:	4622      	mov	r2, r4
  407a58:	f7ff ff96 	bl	407988 <__fputwc>
  407a5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407a5e:	07da      	lsls	r2, r3, #31
  407a60:	4605      	mov	r5, r0
  407a62:	d402      	bmi.n	407a6a <_fputwc_r+0x42>
  407a64:	89a3      	ldrh	r3, [r4, #12]
  407a66:	059b      	lsls	r3, r3, #22
  407a68:	d502      	bpl.n	407a70 <_fputwc_r+0x48>
  407a6a:	4628      	mov	r0, r5
  407a6c:	b003      	add	sp, #12
  407a6e:	bd30      	pop	{r4, r5, pc}
  407a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a72:	f000 fb07 	bl	408084 <__retarget_lock_release_recursive>
  407a76:	4628      	mov	r0, r5
  407a78:	b003      	add	sp, #12
  407a7a:	bd30      	pop	{r4, r5, pc}
  407a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a7e:	9101      	str	r1, [sp, #4]
  407a80:	f000 fafe 	bl	408080 <__retarget_lock_acquire_recursive>
  407a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a88:	9901      	ldr	r1, [sp, #4]
  407a8a:	b29a      	uxth	r2, r3
  407a8c:	e7d9      	b.n	407a42 <_fputwc_r+0x1a>
  407a8e:	bf00      	nop

00407a90 <_malloc_trim_r>:
  407a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a92:	4f24      	ldr	r7, [pc, #144]	; (407b24 <_malloc_trim_r+0x94>)
  407a94:	460c      	mov	r4, r1
  407a96:	4606      	mov	r6, r0
  407a98:	f7fc fb72 	bl	404180 <__malloc_lock>
  407a9c:	68bb      	ldr	r3, [r7, #8]
  407a9e:	685d      	ldr	r5, [r3, #4]
  407aa0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407aa4:	310f      	adds	r1, #15
  407aa6:	f025 0503 	bic.w	r5, r5, #3
  407aaa:	4429      	add	r1, r5
  407aac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407ab0:	f021 010f 	bic.w	r1, r1, #15
  407ab4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407ab8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407abc:	db07      	blt.n	407ace <_malloc_trim_r+0x3e>
  407abe:	2100      	movs	r1, #0
  407ac0:	4630      	mov	r0, r6
  407ac2:	f7fc fb69 	bl	404198 <_sbrk_r>
  407ac6:	68bb      	ldr	r3, [r7, #8]
  407ac8:	442b      	add	r3, r5
  407aca:	4298      	cmp	r0, r3
  407acc:	d004      	beq.n	407ad8 <_malloc_trim_r+0x48>
  407ace:	4630      	mov	r0, r6
  407ad0:	f7fc fb5c 	bl	40418c <__malloc_unlock>
  407ad4:	2000      	movs	r0, #0
  407ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407ad8:	4261      	negs	r1, r4
  407ada:	4630      	mov	r0, r6
  407adc:	f7fc fb5c 	bl	404198 <_sbrk_r>
  407ae0:	3001      	adds	r0, #1
  407ae2:	d00d      	beq.n	407b00 <_malloc_trim_r+0x70>
  407ae4:	4b10      	ldr	r3, [pc, #64]	; (407b28 <_malloc_trim_r+0x98>)
  407ae6:	68ba      	ldr	r2, [r7, #8]
  407ae8:	6819      	ldr	r1, [r3, #0]
  407aea:	1b2d      	subs	r5, r5, r4
  407aec:	f045 0501 	orr.w	r5, r5, #1
  407af0:	4630      	mov	r0, r6
  407af2:	1b09      	subs	r1, r1, r4
  407af4:	6055      	str	r5, [r2, #4]
  407af6:	6019      	str	r1, [r3, #0]
  407af8:	f7fc fb48 	bl	40418c <__malloc_unlock>
  407afc:	2001      	movs	r0, #1
  407afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407b00:	2100      	movs	r1, #0
  407b02:	4630      	mov	r0, r6
  407b04:	f7fc fb48 	bl	404198 <_sbrk_r>
  407b08:	68ba      	ldr	r2, [r7, #8]
  407b0a:	1a83      	subs	r3, r0, r2
  407b0c:	2b0f      	cmp	r3, #15
  407b0e:	ddde      	ble.n	407ace <_malloc_trim_r+0x3e>
  407b10:	4c06      	ldr	r4, [pc, #24]	; (407b2c <_malloc_trim_r+0x9c>)
  407b12:	4905      	ldr	r1, [pc, #20]	; (407b28 <_malloc_trim_r+0x98>)
  407b14:	6824      	ldr	r4, [r4, #0]
  407b16:	f043 0301 	orr.w	r3, r3, #1
  407b1a:	1b00      	subs	r0, r0, r4
  407b1c:	6053      	str	r3, [r2, #4]
  407b1e:	6008      	str	r0, [r1, #0]
  407b20:	e7d5      	b.n	407ace <_malloc_trim_r+0x3e>
  407b22:	bf00      	nop
  407b24:	20400438 	.word	0x20400438
  407b28:	20400ba0 	.word	0x20400ba0
  407b2c:	20400840 	.word	0x20400840

00407b30 <_free_r>:
  407b30:	2900      	cmp	r1, #0
  407b32:	d044      	beq.n	407bbe <_free_r+0x8e>
  407b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407b38:	460d      	mov	r5, r1
  407b3a:	4680      	mov	r8, r0
  407b3c:	f7fc fb20 	bl	404180 <__malloc_lock>
  407b40:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407b44:	4969      	ldr	r1, [pc, #420]	; (407cec <_free_r+0x1bc>)
  407b46:	f027 0301 	bic.w	r3, r7, #1
  407b4a:	f1a5 0408 	sub.w	r4, r5, #8
  407b4e:	18e2      	adds	r2, r4, r3
  407b50:	688e      	ldr	r6, [r1, #8]
  407b52:	6850      	ldr	r0, [r2, #4]
  407b54:	42b2      	cmp	r2, r6
  407b56:	f020 0003 	bic.w	r0, r0, #3
  407b5a:	d05e      	beq.n	407c1a <_free_r+0xea>
  407b5c:	07fe      	lsls	r6, r7, #31
  407b5e:	6050      	str	r0, [r2, #4]
  407b60:	d40b      	bmi.n	407b7a <_free_r+0x4a>
  407b62:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407b66:	1be4      	subs	r4, r4, r7
  407b68:	f101 0e08 	add.w	lr, r1, #8
  407b6c:	68a5      	ldr	r5, [r4, #8]
  407b6e:	4575      	cmp	r5, lr
  407b70:	443b      	add	r3, r7
  407b72:	d06d      	beq.n	407c50 <_free_r+0x120>
  407b74:	68e7      	ldr	r7, [r4, #12]
  407b76:	60ef      	str	r7, [r5, #12]
  407b78:	60bd      	str	r5, [r7, #8]
  407b7a:	1815      	adds	r5, r2, r0
  407b7c:	686d      	ldr	r5, [r5, #4]
  407b7e:	07ed      	lsls	r5, r5, #31
  407b80:	d53e      	bpl.n	407c00 <_free_r+0xd0>
  407b82:	f043 0201 	orr.w	r2, r3, #1
  407b86:	6062      	str	r2, [r4, #4]
  407b88:	50e3      	str	r3, [r4, r3]
  407b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407b8e:	d217      	bcs.n	407bc0 <_free_r+0x90>
  407b90:	08db      	lsrs	r3, r3, #3
  407b92:	1c58      	adds	r0, r3, #1
  407b94:	109a      	asrs	r2, r3, #2
  407b96:	684d      	ldr	r5, [r1, #4]
  407b98:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407b9c:	60a7      	str	r7, [r4, #8]
  407b9e:	2301      	movs	r3, #1
  407ba0:	4093      	lsls	r3, r2
  407ba2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407ba6:	432b      	orrs	r3, r5
  407ba8:	3a08      	subs	r2, #8
  407baa:	60e2      	str	r2, [r4, #12]
  407bac:	604b      	str	r3, [r1, #4]
  407bae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407bb2:	60fc      	str	r4, [r7, #12]
  407bb4:	4640      	mov	r0, r8
  407bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407bba:	f7fc bae7 	b.w	40418c <__malloc_unlock>
  407bbe:	4770      	bx	lr
  407bc0:	0a5a      	lsrs	r2, r3, #9
  407bc2:	2a04      	cmp	r2, #4
  407bc4:	d852      	bhi.n	407c6c <_free_r+0x13c>
  407bc6:	099a      	lsrs	r2, r3, #6
  407bc8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407bcc:	00ff      	lsls	r7, r7, #3
  407bce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407bd2:	19c8      	adds	r0, r1, r7
  407bd4:	59ca      	ldr	r2, [r1, r7]
  407bd6:	3808      	subs	r0, #8
  407bd8:	4290      	cmp	r0, r2
  407bda:	d04f      	beq.n	407c7c <_free_r+0x14c>
  407bdc:	6851      	ldr	r1, [r2, #4]
  407bde:	f021 0103 	bic.w	r1, r1, #3
  407be2:	428b      	cmp	r3, r1
  407be4:	d232      	bcs.n	407c4c <_free_r+0x11c>
  407be6:	6892      	ldr	r2, [r2, #8]
  407be8:	4290      	cmp	r0, r2
  407bea:	d1f7      	bne.n	407bdc <_free_r+0xac>
  407bec:	68c3      	ldr	r3, [r0, #12]
  407bee:	60a0      	str	r0, [r4, #8]
  407bf0:	60e3      	str	r3, [r4, #12]
  407bf2:	609c      	str	r4, [r3, #8]
  407bf4:	60c4      	str	r4, [r0, #12]
  407bf6:	4640      	mov	r0, r8
  407bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407bfc:	f7fc bac6 	b.w	40418c <__malloc_unlock>
  407c00:	6895      	ldr	r5, [r2, #8]
  407c02:	4f3b      	ldr	r7, [pc, #236]	; (407cf0 <_free_r+0x1c0>)
  407c04:	42bd      	cmp	r5, r7
  407c06:	4403      	add	r3, r0
  407c08:	d040      	beq.n	407c8c <_free_r+0x15c>
  407c0a:	68d0      	ldr	r0, [r2, #12]
  407c0c:	60e8      	str	r0, [r5, #12]
  407c0e:	f043 0201 	orr.w	r2, r3, #1
  407c12:	6085      	str	r5, [r0, #8]
  407c14:	6062      	str	r2, [r4, #4]
  407c16:	50e3      	str	r3, [r4, r3]
  407c18:	e7b7      	b.n	407b8a <_free_r+0x5a>
  407c1a:	07ff      	lsls	r7, r7, #31
  407c1c:	4403      	add	r3, r0
  407c1e:	d407      	bmi.n	407c30 <_free_r+0x100>
  407c20:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407c24:	1aa4      	subs	r4, r4, r2
  407c26:	4413      	add	r3, r2
  407c28:	68a0      	ldr	r0, [r4, #8]
  407c2a:	68e2      	ldr	r2, [r4, #12]
  407c2c:	60c2      	str	r2, [r0, #12]
  407c2e:	6090      	str	r0, [r2, #8]
  407c30:	4a30      	ldr	r2, [pc, #192]	; (407cf4 <_free_r+0x1c4>)
  407c32:	6812      	ldr	r2, [r2, #0]
  407c34:	f043 0001 	orr.w	r0, r3, #1
  407c38:	4293      	cmp	r3, r2
  407c3a:	6060      	str	r0, [r4, #4]
  407c3c:	608c      	str	r4, [r1, #8]
  407c3e:	d3b9      	bcc.n	407bb4 <_free_r+0x84>
  407c40:	4b2d      	ldr	r3, [pc, #180]	; (407cf8 <_free_r+0x1c8>)
  407c42:	4640      	mov	r0, r8
  407c44:	6819      	ldr	r1, [r3, #0]
  407c46:	f7ff ff23 	bl	407a90 <_malloc_trim_r>
  407c4a:	e7b3      	b.n	407bb4 <_free_r+0x84>
  407c4c:	4610      	mov	r0, r2
  407c4e:	e7cd      	b.n	407bec <_free_r+0xbc>
  407c50:	1811      	adds	r1, r2, r0
  407c52:	6849      	ldr	r1, [r1, #4]
  407c54:	07c9      	lsls	r1, r1, #31
  407c56:	d444      	bmi.n	407ce2 <_free_r+0x1b2>
  407c58:	6891      	ldr	r1, [r2, #8]
  407c5a:	68d2      	ldr	r2, [r2, #12]
  407c5c:	60ca      	str	r2, [r1, #12]
  407c5e:	4403      	add	r3, r0
  407c60:	f043 0001 	orr.w	r0, r3, #1
  407c64:	6091      	str	r1, [r2, #8]
  407c66:	6060      	str	r0, [r4, #4]
  407c68:	50e3      	str	r3, [r4, r3]
  407c6a:	e7a3      	b.n	407bb4 <_free_r+0x84>
  407c6c:	2a14      	cmp	r2, #20
  407c6e:	d816      	bhi.n	407c9e <_free_r+0x16e>
  407c70:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407c74:	00ff      	lsls	r7, r7, #3
  407c76:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407c7a:	e7aa      	b.n	407bd2 <_free_r+0xa2>
  407c7c:	10aa      	asrs	r2, r5, #2
  407c7e:	2301      	movs	r3, #1
  407c80:	684d      	ldr	r5, [r1, #4]
  407c82:	4093      	lsls	r3, r2
  407c84:	432b      	orrs	r3, r5
  407c86:	604b      	str	r3, [r1, #4]
  407c88:	4603      	mov	r3, r0
  407c8a:	e7b0      	b.n	407bee <_free_r+0xbe>
  407c8c:	f043 0201 	orr.w	r2, r3, #1
  407c90:	614c      	str	r4, [r1, #20]
  407c92:	610c      	str	r4, [r1, #16]
  407c94:	60e5      	str	r5, [r4, #12]
  407c96:	60a5      	str	r5, [r4, #8]
  407c98:	6062      	str	r2, [r4, #4]
  407c9a:	50e3      	str	r3, [r4, r3]
  407c9c:	e78a      	b.n	407bb4 <_free_r+0x84>
  407c9e:	2a54      	cmp	r2, #84	; 0x54
  407ca0:	d806      	bhi.n	407cb0 <_free_r+0x180>
  407ca2:	0b1a      	lsrs	r2, r3, #12
  407ca4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407ca8:	00ff      	lsls	r7, r7, #3
  407caa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407cae:	e790      	b.n	407bd2 <_free_r+0xa2>
  407cb0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407cb4:	d806      	bhi.n	407cc4 <_free_r+0x194>
  407cb6:	0bda      	lsrs	r2, r3, #15
  407cb8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407cbc:	00ff      	lsls	r7, r7, #3
  407cbe:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407cc2:	e786      	b.n	407bd2 <_free_r+0xa2>
  407cc4:	f240 5054 	movw	r0, #1364	; 0x554
  407cc8:	4282      	cmp	r2, r0
  407cca:	d806      	bhi.n	407cda <_free_r+0x1aa>
  407ccc:	0c9a      	lsrs	r2, r3, #18
  407cce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407cd2:	00ff      	lsls	r7, r7, #3
  407cd4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407cd8:	e77b      	b.n	407bd2 <_free_r+0xa2>
  407cda:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407cde:	257e      	movs	r5, #126	; 0x7e
  407ce0:	e777      	b.n	407bd2 <_free_r+0xa2>
  407ce2:	f043 0101 	orr.w	r1, r3, #1
  407ce6:	6061      	str	r1, [r4, #4]
  407ce8:	6013      	str	r3, [r2, #0]
  407cea:	e763      	b.n	407bb4 <_free_r+0x84>
  407cec:	20400438 	.word	0x20400438
  407cf0:	20400440 	.word	0x20400440
  407cf4:	20400844 	.word	0x20400844
  407cf8:	20400bd0 	.word	0x20400bd0

00407cfc <__sfvwrite_r>:
  407cfc:	6893      	ldr	r3, [r2, #8]
  407cfe:	2b00      	cmp	r3, #0
  407d00:	d073      	beq.n	407dea <__sfvwrite_r+0xee>
  407d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d06:	898b      	ldrh	r3, [r1, #12]
  407d08:	b083      	sub	sp, #12
  407d0a:	460c      	mov	r4, r1
  407d0c:	0719      	lsls	r1, r3, #28
  407d0e:	9000      	str	r0, [sp, #0]
  407d10:	4616      	mov	r6, r2
  407d12:	d526      	bpl.n	407d62 <__sfvwrite_r+0x66>
  407d14:	6922      	ldr	r2, [r4, #16]
  407d16:	b322      	cbz	r2, 407d62 <__sfvwrite_r+0x66>
  407d18:	f013 0002 	ands.w	r0, r3, #2
  407d1c:	6835      	ldr	r5, [r6, #0]
  407d1e:	d02c      	beq.n	407d7a <__sfvwrite_r+0x7e>
  407d20:	f04f 0900 	mov.w	r9, #0
  407d24:	4fb0      	ldr	r7, [pc, #704]	; (407fe8 <__sfvwrite_r+0x2ec>)
  407d26:	46c8      	mov	r8, r9
  407d28:	46b2      	mov	sl, r6
  407d2a:	45b8      	cmp	r8, r7
  407d2c:	4643      	mov	r3, r8
  407d2e:	464a      	mov	r2, r9
  407d30:	bf28      	it	cs
  407d32:	463b      	movcs	r3, r7
  407d34:	9800      	ldr	r0, [sp, #0]
  407d36:	f1b8 0f00 	cmp.w	r8, #0
  407d3a:	d050      	beq.n	407dde <__sfvwrite_r+0xe2>
  407d3c:	69e1      	ldr	r1, [r4, #28]
  407d3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407d40:	47b0      	blx	r6
  407d42:	2800      	cmp	r0, #0
  407d44:	dd58      	ble.n	407df8 <__sfvwrite_r+0xfc>
  407d46:	f8da 3008 	ldr.w	r3, [sl, #8]
  407d4a:	1a1b      	subs	r3, r3, r0
  407d4c:	4481      	add	r9, r0
  407d4e:	eba8 0800 	sub.w	r8, r8, r0
  407d52:	f8ca 3008 	str.w	r3, [sl, #8]
  407d56:	2b00      	cmp	r3, #0
  407d58:	d1e7      	bne.n	407d2a <__sfvwrite_r+0x2e>
  407d5a:	2000      	movs	r0, #0
  407d5c:	b003      	add	sp, #12
  407d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d62:	4621      	mov	r1, r4
  407d64:	9800      	ldr	r0, [sp, #0]
  407d66:	f7fe fc91 	bl	40668c <__swsetup_r>
  407d6a:	2800      	cmp	r0, #0
  407d6c:	f040 8133 	bne.w	407fd6 <__sfvwrite_r+0x2da>
  407d70:	89a3      	ldrh	r3, [r4, #12]
  407d72:	6835      	ldr	r5, [r6, #0]
  407d74:	f013 0002 	ands.w	r0, r3, #2
  407d78:	d1d2      	bne.n	407d20 <__sfvwrite_r+0x24>
  407d7a:	f013 0901 	ands.w	r9, r3, #1
  407d7e:	d145      	bne.n	407e0c <__sfvwrite_r+0x110>
  407d80:	464f      	mov	r7, r9
  407d82:	9601      	str	r6, [sp, #4]
  407d84:	b337      	cbz	r7, 407dd4 <__sfvwrite_r+0xd8>
  407d86:	059a      	lsls	r2, r3, #22
  407d88:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407d8c:	f140 8083 	bpl.w	407e96 <__sfvwrite_r+0x19a>
  407d90:	4547      	cmp	r7, r8
  407d92:	46c3      	mov	fp, r8
  407d94:	f0c0 80ab 	bcc.w	407eee <__sfvwrite_r+0x1f2>
  407d98:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407d9c:	f040 80ac 	bne.w	407ef8 <__sfvwrite_r+0x1fc>
  407da0:	6820      	ldr	r0, [r4, #0]
  407da2:	46ba      	mov	sl, r7
  407da4:	465a      	mov	r2, fp
  407da6:	4649      	mov	r1, r9
  407da8:	f000 fa52 	bl	408250 <memmove>
  407dac:	68a2      	ldr	r2, [r4, #8]
  407dae:	6823      	ldr	r3, [r4, #0]
  407db0:	eba2 0208 	sub.w	r2, r2, r8
  407db4:	445b      	add	r3, fp
  407db6:	60a2      	str	r2, [r4, #8]
  407db8:	6023      	str	r3, [r4, #0]
  407dba:	9a01      	ldr	r2, [sp, #4]
  407dbc:	6893      	ldr	r3, [r2, #8]
  407dbe:	eba3 030a 	sub.w	r3, r3, sl
  407dc2:	44d1      	add	r9, sl
  407dc4:	eba7 070a 	sub.w	r7, r7, sl
  407dc8:	6093      	str	r3, [r2, #8]
  407dca:	2b00      	cmp	r3, #0
  407dcc:	d0c5      	beq.n	407d5a <__sfvwrite_r+0x5e>
  407dce:	89a3      	ldrh	r3, [r4, #12]
  407dd0:	2f00      	cmp	r7, #0
  407dd2:	d1d8      	bne.n	407d86 <__sfvwrite_r+0x8a>
  407dd4:	f8d5 9000 	ldr.w	r9, [r5]
  407dd8:	686f      	ldr	r7, [r5, #4]
  407dda:	3508      	adds	r5, #8
  407ddc:	e7d2      	b.n	407d84 <__sfvwrite_r+0x88>
  407dde:	f8d5 9000 	ldr.w	r9, [r5]
  407de2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407de6:	3508      	adds	r5, #8
  407de8:	e79f      	b.n	407d2a <__sfvwrite_r+0x2e>
  407dea:	2000      	movs	r0, #0
  407dec:	4770      	bx	lr
  407dee:	4621      	mov	r1, r4
  407df0:	9800      	ldr	r0, [sp, #0]
  407df2:	f7ff fd1f 	bl	407834 <_fflush_r>
  407df6:	b370      	cbz	r0, 407e56 <__sfvwrite_r+0x15a>
  407df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e00:	f04f 30ff 	mov.w	r0, #4294967295
  407e04:	81a3      	strh	r3, [r4, #12]
  407e06:	b003      	add	sp, #12
  407e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e0c:	4681      	mov	r9, r0
  407e0e:	4633      	mov	r3, r6
  407e10:	464e      	mov	r6, r9
  407e12:	46a8      	mov	r8, r5
  407e14:	469a      	mov	sl, r3
  407e16:	464d      	mov	r5, r9
  407e18:	b34e      	cbz	r6, 407e6e <__sfvwrite_r+0x172>
  407e1a:	b380      	cbz	r0, 407e7e <__sfvwrite_r+0x182>
  407e1c:	6820      	ldr	r0, [r4, #0]
  407e1e:	6923      	ldr	r3, [r4, #16]
  407e20:	6962      	ldr	r2, [r4, #20]
  407e22:	45b1      	cmp	r9, r6
  407e24:	46cb      	mov	fp, r9
  407e26:	bf28      	it	cs
  407e28:	46b3      	movcs	fp, r6
  407e2a:	4298      	cmp	r0, r3
  407e2c:	465f      	mov	r7, fp
  407e2e:	d904      	bls.n	407e3a <__sfvwrite_r+0x13e>
  407e30:	68a3      	ldr	r3, [r4, #8]
  407e32:	4413      	add	r3, r2
  407e34:	459b      	cmp	fp, r3
  407e36:	f300 80a6 	bgt.w	407f86 <__sfvwrite_r+0x28a>
  407e3a:	4593      	cmp	fp, r2
  407e3c:	db4b      	blt.n	407ed6 <__sfvwrite_r+0x1da>
  407e3e:	4613      	mov	r3, r2
  407e40:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407e42:	69e1      	ldr	r1, [r4, #28]
  407e44:	9800      	ldr	r0, [sp, #0]
  407e46:	462a      	mov	r2, r5
  407e48:	47b8      	blx	r7
  407e4a:	1e07      	subs	r7, r0, #0
  407e4c:	ddd4      	ble.n	407df8 <__sfvwrite_r+0xfc>
  407e4e:	ebb9 0907 	subs.w	r9, r9, r7
  407e52:	d0cc      	beq.n	407dee <__sfvwrite_r+0xf2>
  407e54:	2001      	movs	r0, #1
  407e56:	f8da 3008 	ldr.w	r3, [sl, #8]
  407e5a:	1bdb      	subs	r3, r3, r7
  407e5c:	443d      	add	r5, r7
  407e5e:	1bf6      	subs	r6, r6, r7
  407e60:	f8ca 3008 	str.w	r3, [sl, #8]
  407e64:	2b00      	cmp	r3, #0
  407e66:	f43f af78 	beq.w	407d5a <__sfvwrite_r+0x5e>
  407e6a:	2e00      	cmp	r6, #0
  407e6c:	d1d5      	bne.n	407e1a <__sfvwrite_r+0x11e>
  407e6e:	f108 0308 	add.w	r3, r8, #8
  407e72:	e913 0060 	ldmdb	r3, {r5, r6}
  407e76:	4698      	mov	r8, r3
  407e78:	3308      	adds	r3, #8
  407e7a:	2e00      	cmp	r6, #0
  407e7c:	d0f9      	beq.n	407e72 <__sfvwrite_r+0x176>
  407e7e:	4632      	mov	r2, r6
  407e80:	210a      	movs	r1, #10
  407e82:	4628      	mov	r0, r5
  407e84:	f000 f994 	bl	4081b0 <memchr>
  407e88:	2800      	cmp	r0, #0
  407e8a:	f000 80a1 	beq.w	407fd0 <__sfvwrite_r+0x2d4>
  407e8e:	3001      	adds	r0, #1
  407e90:	eba0 0905 	sub.w	r9, r0, r5
  407e94:	e7c2      	b.n	407e1c <__sfvwrite_r+0x120>
  407e96:	6820      	ldr	r0, [r4, #0]
  407e98:	6923      	ldr	r3, [r4, #16]
  407e9a:	4298      	cmp	r0, r3
  407e9c:	d802      	bhi.n	407ea4 <__sfvwrite_r+0x1a8>
  407e9e:	6963      	ldr	r3, [r4, #20]
  407ea0:	429f      	cmp	r7, r3
  407ea2:	d25d      	bcs.n	407f60 <__sfvwrite_r+0x264>
  407ea4:	45b8      	cmp	r8, r7
  407ea6:	bf28      	it	cs
  407ea8:	46b8      	movcs	r8, r7
  407eaa:	4642      	mov	r2, r8
  407eac:	4649      	mov	r1, r9
  407eae:	f000 f9cf 	bl	408250 <memmove>
  407eb2:	68a3      	ldr	r3, [r4, #8]
  407eb4:	6822      	ldr	r2, [r4, #0]
  407eb6:	eba3 0308 	sub.w	r3, r3, r8
  407eba:	4442      	add	r2, r8
  407ebc:	60a3      	str	r3, [r4, #8]
  407ebe:	6022      	str	r2, [r4, #0]
  407ec0:	b10b      	cbz	r3, 407ec6 <__sfvwrite_r+0x1ca>
  407ec2:	46c2      	mov	sl, r8
  407ec4:	e779      	b.n	407dba <__sfvwrite_r+0xbe>
  407ec6:	4621      	mov	r1, r4
  407ec8:	9800      	ldr	r0, [sp, #0]
  407eca:	f7ff fcb3 	bl	407834 <_fflush_r>
  407ece:	2800      	cmp	r0, #0
  407ed0:	d192      	bne.n	407df8 <__sfvwrite_r+0xfc>
  407ed2:	46c2      	mov	sl, r8
  407ed4:	e771      	b.n	407dba <__sfvwrite_r+0xbe>
  407ed6:	465a      	mov	r2, fp
  407ed8:	4629      	mov	r1, r5
  407eda:	f000 f9b9 	bl	408250 <memmove>
  407ede:	68a2      	ldr	r2, [r4, #8]
  407ee0:	6823      	ldr	r3, [r4, #0]
  407ee2:	eba2 020b 	sub.w	r2, r2, fp
  407ee6:	445b      	add	r3, fp
  407ee8:	60a2      	str	r2, [r4, #8]
  407eea:	6023      	str	r3, [r4, #0]
  407eec:	e7af      	b.n	407e4e <__sfvwrite_r+0x152>
  407eee:	6820      	ldr	r0, [r4, #0]
  407ef0:	46b8      	mov	r8, r7
  407ef2:	46ba      	mov	sl, r7
  407ef4:	46bb      	mov	fp, r7
  407ef6:	e755      	b.n	407da4 <__sfvwrite_r+0xa8>
  407ef8:	6962      	ldr	r2, [r4, #20]
  407efa:	6820      	ldr	r0, [r4, #0]
  407efc:	6921      	ldr	r1, [r4, #16]
  407efe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407f02:	eba0 0a01 	sub.w	sl, r0, r1
  407f06:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407f0a:	f10a 0001 	add.w	r0, sl, #1
  407f0e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407f12:	4438      	add	r0, r7
  407f14:	4540      	cmp	r0, r8
  407f16:	4642      	mov	r2, r8
  407f18:	bf84      	itt	hi
  407f1a:	4680      	movhi	r8, r0
  407f1c:	4642      	movhi	r2, r8
  407f1e:	055b      	lsls	r3, r3, #21
  407f20:	d544      	bpl.n	407fac <__sfvwrite_r+0x2b0>
  407f22:	4611      	mov	r1, r2
  407f24:	9800      	ldr	r0, [sp, #0]
  407f26:	f7fb fd93 	bl	403a50 <_malloc_r>
  407f2a:	4683      	mov	fp, r0
  407f2c:	2800      	cmp	r0, #0
  407f2e:	d055      	beq.n	407fdc <__sfvwrite_r+0x2e0>
  407f30:	4652      	mov	r2, sl
  407f32:	6921      	ldr	r1, [r4, #16]
  407f34:	f7fc f83c 	bl	403fb0 <memcpy>
  407f38:	89a3      	ldrh	r3, [r4, #12]
  407f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407f42:	81a3      	strh	r3, [r4, #12]
  407f44:	eb0b 000a 	add.w	r0, fp, sl
  407f48:	eba8 030a 	sub.w	r3, r8, sl
  407f4c:	f8c4 b010 	str.w	fp, [r4, #16]
  407f50:	f8c4 8014 	str.w	r8, [r4, #20]
  407f54:	6020      	str	r0, [r4, #0]
  407f56:	60a3      	str	r3, [r4, #8]
  407f58:	46b8      	mov	r8, r7
  407f5a:	46ba      	mov	sl, r7
  407f5c:	46bb      	mov	fp, r7
  407f5e:	e721      	b.n	407da4 <__sfvwrite_r+0xa8>
  407f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407f64:	42b9      	cmp	r1, r7
  407f66:	bf28      	it	cs
  407f68:	4639      	movcs	r1, r7
  407f6a:	464a      	mov	r2, r9
  407f6c:	fb91 f1f3 	sdiv	r1, r1, r3
  407f70:	9800      	ldr	r0, [sp, #0]
  407f72:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407f74:	fb03 f301 	mul.w	r3, r3, r1
  407f78:	69e1      	ldr	r1, [r4, #28]
  407f7a:	47b0      	blx	r6
  407f7c:	f1b0 0a00 	subs.w	sl, r0, #0
  407f80:	f73f af1b 	bgt.w	407dba <__sfvwrite_r+0xbe>
  407f84:	e738      	b.n	407df8 <__sfvwrite_r+0xfc>
  407f86:	461a      	mov	r2, r3
  407f88:	4629      	mov	r1, r5
  407f8a:	9301      	str	r3, [sp, #4]
  407f8c:	f000 f960 	bl	408250 <memmove>
  407f90:	6822      	ldr	r2, [r4, #0]
  407f92:	9b01      	ldr	r3, [sp, #4]
  407f94:	9800      	ldr	r0, [sp, #0]
  407f96:	441a      	add	r2, r3
  407f98:	6022      	str	r2, [r4, #0]
  407f9a:	4621      	mov	r1, r4
  407f9c:	f7ff fc4a 	bl	407834 <_fflush_r>
  407fa0:	9b01      	ldr	r3, [sp, #4]
  407fa2:	2800      	cmp	r0, #0
  407fa4:	f47f af28 	bne.w	407df8 <__sfvwrite_r+0xfc>
  407fa8:	461f      	mov	r7, r3
  407faa:	e750      	b.n	407e4e <__sfvwrite_r+0x152>
  407fac:	9800      	ldr	r0, [sp, #0]
  407fae:	f000 fcad 	bl	40890c <_realloc_r>
  407fb2:	4683      	mov	fp, r0
  407fb4:	2800      	cmp	r0, #0
  407fb6:	d1c5      	bne.n	407f44 <__sfvwrite_r+0x248>
  407fb8:	9d00      	ldr	r5, [sp, #0]
  407fba:	6921      	ldr	r1, [r4, #16]
  407fbc:	4628      	mov	r0, r5
  407fbe:	f7ff fdb7 	bl	407b30 <_free_r>
  407fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407fc6:	220c      	movs	r2, #12
  407fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407fcc:	602a      	str	r2, [r5, #0]
  407fce:	e715      	b.n	407dfc <__sfvwrite_r+0x100>
  407fd0:	f106 0901 	add.w	r9, r6, #1
  407fd4:	e722      	b.n	407e1c <__sfvwrite_r+0x120>
  407fd6:	f04f 30ff 	mov.w	r0, #4294967295
  407fda:	e6bf      	b.n	407d5c <__sfvwrite_r+0x60>
  407fdc:	9a00      	ldr	r2, [sp, #0]
  407fde:	230c      	movs	r3, #12
  407fe0:	6013      	str	r3, [r2, #0]
  407fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407fe6:	e709      	b.n	407dfc <__sfvwrite_r+0x100>
  407fe8:	7ffffc00 	.word	0x7ffffc00

00407fec <_fwalk_reent>:
  407fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407ff0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407ff4:	d01f      	beq.n	408036 <_fwalk_reent+0x4a>
  407ff6:	4688      	mov	r8, r1
  407ff8:	4606      	mov	r6, r0
  407ffa:	f04f 0900 	mov.w	r9, #0
  407ffe:	687d      	ldr	r5, [r7, #4]
  408000:	68bc      	ldr	r4, [r7, #8]
  408002:	3d01      	subs	r5, #1
  408004:	d411      	bmi.n	40802a <_fwalk_reent+0x3e>
  408006:	89a3      	ldrh	r3, [r4, #12]
  408008:	2b01      	cmp	r3, #1
  40800a:	f105 35ff 	add.w	r5, r5, #4294967295
  40800e:	d908      	bls.n	408022 <_fwalk_reent+0x36>
  408010:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408014:	3301      	adds	r3, #1
  408016:	4621      	mov	r1, r4
  408018:	4630      	mov	r0, r6
  40801a:	d002      	beq.n	408022 <_fwalk_reent+0x36>
  40801c:	47c0      	blx	r8
  40801e:	ea49 0900 	orr.w	r9, r9, r0
  408022:	1c6b      	adds	r3, r5, #1
  408024:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408028:	d1ed      	bne.n	408006 <_fwalk_reent+0x1a>
  40802a:	683f      	ldr	r7, [r7, #0]
  40802c:	2f00      	cmp	r7, #0
  40802e:	d1e6      	bne.n	407ffe <_fwalk_reent+0x12>
  408030:	4648      	mov	r0, r9
  408032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408036:	46b9      	mov	r9, r7
  408038:	4648      	mov	r0, r9
  40803a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40803e:	bf00      	nop

00408040 <__locale_mb_cur_max>:
  408040:	4b04      	ldr	r3, [pc, #16]	; (408054 <__locale_mb_cur_max+0x14>)
  408042:	4a05      	ldr	r2, [pc, #20]	; (408058 <__locale_mb_cur_max+0x18>)
  408044:	681b      	ldr	r3, [r3, #0]
  408046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408048:	2b00      	cmp	r3, #0
  40804a:	bf08      	it	eq
  40804c:	4613      	moveq	r3, r2
  40804e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408052:	4770      	bx	lr
  408054:	2040000c 	.word	0x2040000c
  408058:	2040084c 	.word	0x2040084c

0040805c <_localeconv_r>:
  40805c:	4a04      	ldr	r2, [pc, #16]	; (408070 <_localeconv_r+0x14>)
  40805e:	4b05      	ldr	r3, [pc, #20]	; (408074 <_localeconv_r+0x18>)
  408060:	6812      	ldr	r2, [r2, #0]
  408062:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408064:	2800      	cmp	r0, #0
  408066:	bf08      	it	eq
  408068:	4618      	moveq	r0, r3
  40806a:	30f0      	adds	r0, #240	; 0xf0
  40806c:	4770      	bx	lr
  40806e:	bf00      	nop
  408070:	2040000c 	.word	0x2040000c
  408074:	2040084c 	.word	0x2040084c

00408078 <__retarget_lock_init_recursive>:
  408078:	4770      	bx	lr
  40807a:	bf00      	nop

0040807c <__retarget_lock_close_recursive>:
  40807c:	4770      	bx	lr
  40807e:	bf00      	nop

00408080 <__retarget_lock_acquire_recursive>:
  408080:	4770      	bx	lr
  408082:	bf00      	nop

00408084 <__retarget_lock_release_recursive>:
  408084:	4770      	bx	lr
  408086:	bf00      	nop

00408088 <__swhatbuf_r>:
  408088:	b570      	push	{r4, r5, r6, lr}
  40808a:	460c      	mov	r4, r1
  40808c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408090:	2900      	cmp	r1, #0
  408092:	b090      	sub	sp, #64	; 0x40
  408094:	4615      	mov	r5, r2
  408096:	461e      	mov	r6, r3
  408098:	db14      	blt.n	4080c4 <__swhatbuf_r+0x3c>
  40809a:	aa01      	add	r2, sp, #4
  40809c:	f001 f84a 	bl	409134 <_fstat_r>
  4080a0:	2800      	cmp	r0, #0
  4080a2:	db0f      	blt.n	4080c4 <__swhatbuf_r+0x3c>
  4080a4:	9a02      	ldr	r2, [sp, #8]
  4080a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4080aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4080ae:	fab2 f282 	clz	r2, r2
  4080b2:	0952      	lsrs	r2, r2, #5
  4080b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4080b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4080bc:	6032      	str	r2, [r6, #0]
  4080be:	602b      	str	r3, [r5, #0]
  4080c0:	b010      	add	sp, #64	; 0x40
  4080c2:	bd70      	pop	{r4, r5, r6, pc}
  4080c4:	89a2      	ldrh	r2, [r4, #12]
  4080c6:	2300      	movs	r3, #0
  4080c8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4080cc:	6033      	str	r3, [r6, #0]
  4080ce:	d004      	beq.n	4080da <__swhatbuf_r+0x52>
  4080d0:	2240      	movs	r2, #64	; 0x40
  4080d2:	4618      	mov	r0, r3
  4080d4:	602a      	str	r2, [r5, #0]
  4080d6:	b010      	add	sp, #64	; 0x40
  4080d8:	bd70      	pop	{r4, r5, r6, pc}
  4080da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4080de:	602b      	str	r3, [r5, #0]
  4080e0:	b010      	add	sp, #64	; 0x40
  4080e2:	bd70      	pop	{r4, r5, r6, pc}

004080e4 <__smakebuf_r>:
  4080e4:	898a      	ldrh	r2, [r1, #12]
  4080e6:	0792      	lsls	r2, r2, #30
  4080e8:	460b      	mov	r3, r1
  4080ea:	d506      	bpl.n	4080fa <__smakebuf_r+0x16>
  4080ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4080f0:	2101      	movs	r1, #1
  4080f2:	601a      	str	r2, [r3, #0]
  4080f4:	611a      	str	r2, [r3, #16]
  4080f6:	6159      	str	r1, [r3, #20]
  4080f8:	4770      	bx	lr
  4080fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4080fc:	b083      	sub	sp, #12
  4080fe:	ab01      	add	r3, sp, #4
  408100:	466a      	mov	r2, sp
  408102:	460c      	mov	r4, r1
  408104:	4606      	mov	r6, r0
  408106:	f7ff ffbf 	bl	408088 <__swhatbuf_r>
  40810a:	9900      	ldr	r1, [sp, #0]
  40810c:	4605      	mov	r5, r0
  40810e:	4630      	mov	r0, r6
  408110:	f7fb fc9e 	bl	403a50 <_malloc_r>
  408114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408118:	b1d8      	cbz	r0, 408152 <__smakebuf_r+0x6e>
  40811a:	9a01      	ldr	r2, [sp, #4]
  40811c:	4f15      	ldr	r7, [pc, #84]	; (408174 <__smakebuf_r+0x90>)
  40811e:	9900      	ldr	r1, [sp, #0]
  408120:	63f7      	str	r7, [r6, #60]	; 0x3c
  408122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408126:	81a3      	strh	r3, [r4, #12]
  408128:	6020      	str	r0, [r4, #0]
  40812a:	6120      	str	r0, [r4, #16]
  40812c:	6161      	str	r1, [r4, #20]
  40812e:	b91a      	cbnz	r2, 408138 <__smakebuf_r+0x54>
  408130:	432b      	orrs	r3, r5
  408132:	81a3      	strh	r3, [r4, #12]
  408134:	b003      	add	sp, #12
  408136:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408138:	4630      	mov	r0, r6
  40813a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40813e:	f001 f80d 	bl	40915c <_isatty_r>
  408142:	b1a0      	cbz	r0, 40816e <__smakebuf_r+0x8a>
  408144:	89a3      	ldrh	r3, [r4, #12]
  408146:	f023 0303 	bic.w	r3, r3, #3
  40814a:	f043 0301 	orr.w	r3, r3, #1
  40814e:	b21b      	sxth	r3, r3
  408150:	e7ee      	b.n	408130 <__smakebuf_r+0x4c>
  408152:	059a      	lsls	r2, r3, #22
  408154:	d4ee      	bmi.n	408134 <__smakebuf_r+0x50>
  408156:	f023 0303 	bic.w	r3, r3, #3
  40815a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40815e:	f043 0302 	orr.w	r3, r3, #2
  408162:	2101      	movs	r1, #1
  408164:	81a3      	strh	r3, [r4, #12]
  408166:	6022      	str	r2, [r4, #0]
  408168:	6122      	str	r2, [r4, #16]
  40816a:	6161      	str	r1, [r4, #20]
  40816c:	e7e2      	b.n	408134 <__smakebuf_r+0x50>
  40816e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408172:	e7dd      	b.n	408130 <__smakebuf_r+0x4c>
  408174:	00407889 	.word	0x00407889

00408178 <__ascii_mbtowc>:
  408178:	b082      	sub	sp, #8
  40817a:	b149      	cbz	r1, 408190 <__ascii_mbtowc+0x18>
  40817c:	b15a      	cbz	r2, 408196 <__ascii_mbtowc+0x1e>
  40817e:	b16b      	cbz	r3, 40819c <__ascii_mbtowc+0x24>
  408180:	7813      	ldrb	r3, [r2, #0]
  408182:	600b      	str	r3, [r1, #0]
  408184:	7812      	ldrb	r2, [r2, #0]
  408186:	1c10      	adds	r0, r2, #0
  408188:	bf18      	it	ne
  40818a:	2001      	movne	r0, #1
  40818c:	b002      	add	sp, #8
  40818e:	4770      	bx	lr
  408190:	a901      	add	r1, sp, #4
  408192:	2a00      	cmp	r2, #0
  408194:	d1f3      	bne.n	40817e <__ascii_mbtowc+0x6>
  408196:	4610      	mov	r0, r2
  408198:	b002      	add	sp, #8
  40819a:	4770      	bx	lr
  40819c:	f06f 0001 	mvn.w	r0, #1
  4081a0:	e7f4      	b.n	40818c <__ascii_mbtowc+0x14>
  4081a2:	bf00      	nop
	...

004081b0 <memchr>:
  4081b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4081b4:	2a10      	cmp	r2, #16
  4081b6:	db2b      	blt.n	408210 <memchr+0x60>
  4081b8:	f010 0f07 	tst.w	r0, #7
  4081bc:	d008      	beq.n	4081d0 <memchr+0x20>
  4081be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4081c2:	3a01      	subs	r2, #1
  4081c4:	428b      	cmp	r3, r1
  4081c6:	d02d      	beq.n	408224 <memchr+0x74>
  4081c8:	f010 0f07 	tst.w	r0, #7
  4081cc:	b342      	cbz	r2, 408220 <memchr+0x70>
  4081ce:	d1f6      	bne.n	4081be <memchr+0xe>
  4081d0:	b4f0      	push	{r4, r5, r6, r7}
  4081d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4081d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4081da:	f022 0407 	bic.w	r4, r2, #7
  4081de:	f07f 0700 	mvns.w	r7, #0
  4081e2:	2300      	movs	r3, #0
  4081e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4081e8:	3c08      	subs	r4, #8
  4081ea:	ea85 0501 	eor.w	r5, r5, r1
  4081ee:	ea86 0601 	eor.w	r6, r6, r1
  4081f2:	fa85 f547 	uadd8	r5, r5, r7
  4081f6:	faa3 f587 	sel	r5, r3, r7
  4081fa:	fa86 f647 	uadd8	r6, r6, r7
  4081fe:	faa5 f687 	sel	r6, r5, r7
  408202:	b98e      	cbnz	r6, 408228 <memchr+0x78>
  408204:	d1ee      	bne.n	4081e4 <memchr+0x34>
  408206:	bcf0      	pop	{r4, r5, r6, r7}
  408208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40820c:	f002 0207 	and.w	r2, r2, #7
  408210:	b132      	cbz	r2, 408220 <memchr+0x70>
  408212:	f810 3b01 	ldrb.w	r3, [r0], #1
  408216:	3a01      	subs	r2, #1
  408218:	ea83 0301 	eor.w	r3, r3, r1
  40821c:	b113      	cbz	r3, 408224 <memchr+0x74>
  40821e:	d1f8      	bne.n	408212 <memchr+0x62>
  408220:	2000      	movs	r0, #0
  408222:	4770      	bx	lr
  408224:	3801      	subs	r0, #1
  408226:	4770      	bx	lr
  408228:	2d00      	cmp	r5, #0
  40822a:	bf06      	itte	eq
  40822c:	4635      	moveq	r5, r6
  40822e:	3803      	subeq	r0, #3
  408230:	3807      	subne	r0, #7
  408232:	f015 0f01 	tst.w	r5, #1
  408236:	d107      	bne.n	408248 <memchr+0x98>
  408238:	3001      	adds	r0, #1
  40823a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40823e:	bf02      	ittt	eq
  408240:	3001      	addeq	r0, #1
  408242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408246:	3001      	addeq	r0, #1
  408248:	bcf0      	pop	{r4, r5, r6, r7}
  40824a:	3801      	subs	r0, #1
  40824c:	4770      	bx	lr
  40824e:	bf00      	nop

00408250 <memmove>:
  408250:	4288      	cmp	r0, r1
  408252:	b5f0      	push	{r4, r5, r6, r7, lr}
  408254:	d90d      	bls.n	408272 <memmove+0x22>
  408256:	188b      	adds	r3, r1, r2
  408258:	4298      	cmp	r0, r3
  40825a:	d20a      	bcs.n	408272 <memmove+0x22>
  40825c:	1884      	adds	r4, r0, r2
  40825e:	2a00      	cmp	r2, #0
  408260:	d051      	beq.n	408306 <memmove+0xb6>
  408262:	4622      	mov	r2, r4
  408264:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408268:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40826c:	4299      	cmp	r1, r3
  40826e:	d1f9      	bne.n	408264 <memmove+0x14>
  408270:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408272:	2a0f      	cmp	r2, #15
  408274:	d948      	bls.n	408308 <memmove+0xb8>
  408276:	ea41 0300 	orr.w	r3, r1, r0
  40827a:	079b      	lsls	r3, r3, #30
  40827c:	d146      	bne.n	40830c <memmove+0xbc>
  40827e:	f100 0410 	add.w	r4, r0, #16
  408282:	f101 0310 	add.w	r3, r1, #16
  408286:	4615      	mov	r5, r2
  408288:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40828c:	f844 6c10 	str.w	r6, [r4, #-16]
  408290:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408294:	f844 6c0c 	str.w	r6, [r4, #-12]
  408298:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40829c:	f844 6c08 	str.w	r6, [r4, #-8]
  4082a0:	3d10      	subs	r5, #16
  4082a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4082a6:	f844 6c04 	str.w	r6, [r4, #-4]
  4082aa:	2d0f      	cmp	r5, #15
  4082ac:	f103 0310 	add.w	r3, r3, #16
  4082b0:	f104 0410 	add.w	r4, r4, #16
  4082b4:	d8e8      	bhi.n	408288 <memmove+0x38>
  4082b6:	f1a2 0310 	sub.w	r3, r2, #16
  4082ba:	f023 030f 	bic.w	r3, r3, #15
  4082be:	f002 0e0f 	and.w	lr, r2, #15
  4082c2:	3310      	adds	r3, #16
  4082c4:	f1be 0f03 	cmp.w	lr, #3
  4082c8:	4419      	add	r1, r3
  4082ca:	4403      	add	r3, r0
  4082cc:	d921      	bls.n	408312 <memmove+0xc2>
  4082ce:	1f1e      	subs	r6, r3, #4
  4082d0:	460d      	mov	r5, r1
  4082d2:	4674      	mov	r4, lr
  4082d4:	3c04      	subs	r4, #4
  4082d6:	f855 7b04 	ldr.w	r7, [r5], #4
  4082da:	f846 7f04 	str.w	r7, [r6, #4]!
  4082de:	2c03      	cmp	r4, #3
  4082e0:	d8f8      	bhi.n	4082d4 <memmove+0x84>
  4082e2:	f1ae 0404 	sub.w	r4, lr, #4
  4082e6:	f024 0403 	bic.w	r4, r4, #3
  4082ea:	3404      	adds	r4, #4
  4082ec:	4421      	add	r1, r4
  4082ee:	4423      	add	r3, r4
  4082f0:	f002 0203 	and.w	r2, r2, #3
  4082f4:	b162      	cbz	r2, 408310 <memmove+0xc0>
  4082f6:	3b01      	subs	r3, #1
  4082f8:	440a      	add	r2, r1
  4082fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4082fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  408302:	428a      	cmp	r2, r1
  408304:	d1f9      	bne.n	4082fa <memmove+0xaa>
  408306:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408308:	4603      	mov	r3, r0
  40830a:	e7f3      	b.n	4082f4 <memmove+0xa4>
  40830c:	4603      	mov	r3, r0
  40830e:	e7f2      	b.n	4082f6 <memmove+0xa6>
  408310:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408312:	4672      	mov	r2, lr
  408314:	e7ee      	b.n	4082f4 <memmove+0xa4>
  408316:	bf00      	nop

00408318 <_Balloc>:
  408318:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40831a:	b570      	push	{r4, r5, r6, lr}
  40831c:	4605      	mov	r5, r0
  40831e:	460c      	mov	r4, r1
  408320:	b14b      	cbz	r3, 408336 <_Balloc+0x1e>
  408322:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  408326:	b180      	cbz	r0, 40834a <_Balloc+0x32>
  408328:	6802      	ldr	r2, [r0, #0]
  40832a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40832e:	2300      	movs	r3, #0
  408330:	6103      	str	r3, [r0, #16]
  408332:	60c3      	str	r3, [r0, #12]
  408334:	bd70      	pop	{r4, r5, r6, pc}
  408336:	2221      	movs	r2, #33	; 0x21
  408338:	2104      	movs	r1, #4
  40833a:	f000 fe57 	bl	408fec <_calloc_r>
  40833e:	64e8      	str	r0, [r5, #76]	; 0x4c
  408340:	4603      	mov	r3, r0
  408342:	2800      	cmp	r0, #0
  408344:	d1ed      	bne.n	408322 <_Balloc+0xa>
  408346:	2000      	movs	r0, #0
  408348:	bd70      	pop	{r4, r5, r6, pc}
  40834a:	2101      	movs	r1, #1
  40834c:	fa01 f604 	lsl.w	r6, r1, r4
  408350:	1d72      	adds	r2, r6, #5
  408352:	4628      	mov	r0, r5
  408354:	0092      	lsls	r2, r2, #2
  408356:	f000 fe49 	bl	408fec <_calloc_r>
  40835a:	2800      	cmp	r0, #0
  40835c:	d0f3      	beq.n	408346 <_Balloc+0x2e>
  40835e:	6044      	str	r4, [r0, #4]
  408360:	6086      	str	r6, [r0, #8]
  408362:	e7e4      	b.n	40832e <_Balloc+0x16>

00408364 <_Bfree>:
  408364:	b131      	cbz	r1, 408374 <_Bfree+0x10>
  408366:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408368:	684a      	ldr	r2, [r1, #4]
  40836a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40836e:	6008      	str	r0, [r1, #0]
  408370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408374:	4770      	bx	lr
  408376:	bf00      	nop

00408378 <__multadd>:
  408378:	b5f0      	push	{r4, r5, r6, r7, lr}
  40837a:	690c      	ldr	r4, [r1, #16]
  40837c:	b083      	sub	sp, #12
  40837e:	460d      	mov	r5, r1
  408380:	4606      	mov	r6, r0
  408382:	f101 0e14 	add.w	lr, r1, #20
  408386:	2700      	movs	r7, #0
  408388:	f8de 0000 	ldr.w	r0, [lr]
  40838c:	b281      	uxth	r1, r0
  40838e:	fb02 3301 	mla	r3, r2, r1, r3
  408392:	0c01      	lsrs	r1, r0, #16
  408394:	0c18      	lsrs	r0, r3, #16
  408396:	fb02 0101 	mla	r1, r2, r1, r0
  40839a:	b29b      	uxth	r3, r3
  40839c:	3701      	adds	r7, #1
  40839e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4083a2:	42bc      	cmp	r4, r7
  4083a4:	f84e 3b04 	str.w	r3, [lr], #4
  4083a8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4083ac:	dcec      	bgt.n	408388 <__multadd+0x10>
  4083ae:	b13b      	cbz	r3, 4083c0 <__multadd+0x48>
  4083b0:	68aa      	ldr	r2, [r5, #8]
  4083b2:	4294      	cmp	r4, r2
  4083b4:	da07      	bge.n	4083c6 <__multadd+0x4e>
  4083b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4083ba:	3401      	adds	r4, #1
  4083bc:	6153      	str	r3, [r2, #20]
  4083be:	612c      	str	r4, [r5, #16]
  4083c0:	4628      	mov	r0, r5
  4083c2:	b003      	add	sp, #12
  4083c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4083c6:	6869      	ldr	r1, [r5, #4]
  4083c8:	9301      	str	r3, [sp, #4]
  4083ca:	3101      	adds	r1, #1
  4083cc:	4630      	mov	r0, r6
  4083ce:	f7ff ffa3 	bl	408318 <_Balloc>
  4083d2:	692a      	ldr	r2, [r5, #16]
  4083d4:	3202      	adds	r2, #2
  4083d6:	f105 010c 	add.w	r1, r5, #12
  4083da:	4607      	mov	r7, r0
  4083dc:	0092      	lsls	r2, r2, #2
  4083de:	300c      	adds	r0, #12
  4083e0:	f7fb fde6 	bl	403fb0 <memcpy>
  4083e4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4083e6:	6869      	ldr	r1, [r5, #4]
  4083e8:	9b01      	ldr	r3, [sp, #4]
  4083ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4083ee:	6028      	str	r0, [r5, #0]
  4083f0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4083f4:	463d      	mov	r5, r7
  4083f6:	e7de      	b.n	4083b6 <__multadd+0x3e>

004083f8 <__hi0bits>:
  4083f8:	0c02      	lsrs	r2, r0, #16
  4083fa:	0412      	lsls	r2, r2, #16
  4083fc:	4603      	mov	r3, r0
  4083fe:	b9b2      	cbnz	r2, 40842e <__hi0bits+0x36>
  408400:	0403      	lsls	r3, r0, #16
  408402:	2010      	movs	r0, #16
  408404:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408408:	bf04      	itt	eq
  40840a:	021b      	lsleq	r3, r3, #8
  40840c:	3008      	addeq	r0, #8
  40840e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408412:	bf04      	itt	eq
  408414:	011b      	lsleq	r3, r3, #4
  408416:	3004      	addeq	r0, #4
  408418:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40841c:	bf04      	itt	eq
  40841e:	009b      	lsleq	r3, r3, #2
  408420:	3002      	addeq	r0, #2
  408422:	2b00      	cmp	r3, #0
  408424:	db02      	blt.n	40842c <__hi0bits+0x34>
  408426:	005b      	lsls	r3, r3, #1
  408428:	d403      	bmi.n	408432 <__hi0bits+0x3a>
  40842a:	2020      	movs	r0, #32
  40842c:	4770      	bx	lr
  40842e:	2000      	movs	r0, #0
  408430:	e7e8      	b.n	408404 <__hi0bits+0xc>
  408432:	3001      	adds	r0, #1
  408434:	4770      	bx	lr
  408436:	bf00      	nop

00408438 <__lo0bits>:
  408438:	6803      	ldr	r3, [r0, #0]
  40843a:	f013 0207 	ands.w	r2, r3, #7
  40843e:	4601      	mov	r1, r0
  408440:	d007      	beq.n	408452 <__lo0bits+0x1a>
  408442:	07da      	lsls	r2, r3, #31
  408444:	d421      	bmi.n	40848a <__lo0bits+0x52>
  408446:	0798      	lsls	r0, r3, #30
  408448:	d421      	bmi.n	40848e <__lo0bits+0x56>
  40844a:	089b      	lsrs	r3, r3, #2
  40844c:	600b      	str	r3, [r1, #0]
  40844e:	2002      	movs	r0, #2
  408450:	4770      	bx	lr
  408452:	b298      	uxth	r0, r3
  408454:	b198      	cbz	r0, 40847e <__lo0bits+0x46>
  408456:	4610      	mov	r0, r2
  408458:	f013 0fff 	tst.w	r3, #255	; 0xff
  40845c:	bf04      	itt	eq
  40845e:	0a1b      	lsreq	r3, r3, #8
  408460:	3008      	addeq	r0, #8
  408462:	071a      	lsls	r2, r3, #28
  408464:	bf04      	itt	eq
  408466:	091b      	lsreq	r3, r3, #4
  408468:	3004      	addeq	r0, #4
  40846a:	079a      	lsls	r2, r3, #30
  40846c:	bf04      	itt	eq
  40846e:	089b      	lsreq	r3, r3, #2
  408470:	3002      	addeq	r0, #2
  408472:	07da      	lsls	r2, r3, #31
  408474:	d407      	bmi.n	408486 <__lo0bits+0x4e>
  408476:	085b      	lsrs	r3, r3, #1
  408478:	d104      	bne.n	408484 <__lo0bits+0x4c>
  40847a:	2020      	movs	r0, #32
  40847c:	4770      	bx	lr
  40847e:	0c1b      	lsrs	r3, r3, #16
  408480:	2010      	movs	r0, #16
  408482:	e7e9      	b.n	408458 <__lo0bits+0x20>
  408484:	3001      	adds	r0, #1
  408486:	600b      	str	r3, [r1, #0]
  408488:	4770      	bx	lr
  40848a:	2000      	movs	r0, #0
  40848c:	4770      	bx	lr
  40848e:	085b      	lsrs	r3, r3, #1
  408490:	600b      	str	r3, [r1, #0]
  408492:	2001      	movs	r0, #1
  408494:	4770      	bx	lr
  408496:	bf00      	nop

00408498 <__i2b>:
  408498:	b510      	push	{r4, lr}
  40849a:	460c      	mov	r4, r1
  40849c:	2101      	movs	r1, #1
  40849e:	f7ff ff3b 	bl	408318 <_Balloc>
  4084a2:	2201      	movs	r2, #1
  4084a4:	6144      	str	r4, [r0, #20]
  4084a6:	6102      	str	r2, [r0, #16]
  4084a8:	bd10      	pop	{r4, pc}
  4084aa:	bf00      	nop

004084ac <__multiply>:
  4084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4084b0:	690c      	ldr	r4, [r1, #16]
  4084b2:	6915      	ldr	r5, [r2, #16]
  4084b4:	42ac      	cmp	r4, r5
  4084b6:	b083      	sub	sp, #12
  4084b8:	468b      	mov	fp, r1
  4084ba:	4616      	mov	r6, r2
  4084bc:	da04      	bge.n	4084c8 <__multiply+0x1c>
  4084be:	4622      	mov	r2, r4
  4084c0:	46b3      	mov	fp, r6
  4084c2:	462c      	mov	r4, r5
  4084c4:	460e      	mov	r6, r1
  4084c6:	4615      	mov	r5, r2
  4084c8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4084cc:	f8db 1004 	ldr.w	r1, [fp, #4]
  4084d0:	eb04 0805 	add.w	r8, r4, r5
  4084d4:	4598      	cmp	r8, r3
  4084d6:	bfc8      	it	gt
  4084d8:	3101      	addgt	r1, #1
  4084da:	f7ff ff1d 	bl	408318 <_Balloc>
  4084de:	f100 0914 	add.w	r9, r0, #20
  4084e2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4084e6:	45d1      	cmp	r9, sl
  4084e8:	9000      	str	r0, [sp, #0]
  4084ea:	d205      	bcs.n	4084f8 <__multiply+0x4c>
  4084ec:	464b      	mov	r3, r9
  4084ee:	2100      	movs	r1, #0
  4084f0:	f843 1b04 	str.w	r1, [r3], #4
  4084f4:	459a      	cmp	sl, r3
  4084f6:	d8fb      	bhi.n	4084f0 <__multiply+0x44>
  4084f8:	f106 0c14 	add.w	ip, r6, #20
  4084fc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408500:	f10b 0b14 	add.w	fp, fp, #20
  408504:	459c      	cmp	ip, r3
  408506:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40850a:	d24c      	bcs.n	4085a6 <__multiply+0xfa>
  40850c:	f8cd a004 	str.w	sl, [sp, #4]
  408510:	469a      	mov	sl, r3
  408512:	f8dc 5000 	ldr.w	r5, [ip]
  408516:	b2af      	uxth	r7, r5
  408518:	b1ef      	cbz	r7, 408556 <__multiply+0xaa>
  40851a:	2100      	movs	r1, #0
  40851c:	464d      	mov	r5, r9
  40851e:	465e      	mov	r6, fp
  408520:	460c      	mov	r4, r1
  408522:	f856 2b04 	ldr.w	r2, [r6], #4
  408526:	6828      	ldr	r0, [r5, #0]
  408528:	b293      	uxth	r3, r2
  40852a:	b281      	uxth	r1, r0
  40852c:	fb07 1303 	mla	r3, r7, r3, r1
  408530:	0c12      	lsrs	r2, r2, #16
  408532:	0c01      	lsrs	r1, r0, #16
  408534:	4423      	add	r3, r4
  408536:	fb07 1102 	mla	r1, r7, r2, r1
  40853a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40853e:	b29b      	uxth	r3, r3
  408540:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408544:	45b6      	cmp	lr, r6
  408546:	f845 3b04 	str.w	r3, [r5], #4
  40854a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40854e:	d8e8      	bhi.n	408522 <__multiply+0x76>
  408550:	602c      	str	r4, [r5, #0]
  408552:	f8dc 5000 	ldr.w	r5, [ip]
  408556:	0c2d      	lsrs	r5, r5, #16
  408558:	d01d      	beq.n	408596 <__multiply+0xea>
  40855a:	f8d9 3000 	ldr.w	r3, [r9]
  40855e:	4648      	mov	r0, r9
  408560:	461c      	mov	r4, r3
  408562:	4659      	mov	r1, fp
  408564:	2200      	movs	r2, #0
  408566:	880e      	ldrh	r6, [r1, #0]
  408568:	0c24      	lsrs	r4, r4, #16
  40856a:	fb05 4406 	mla	r4, r5, r6, r4
  40856e:	4422      	add	r2, r4
  408570:	b29b      	uxth	r3, r3
  408572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408576:	f840 3b04 	str.w	r3, [r0], #4
  40857a:	f851 3b04 	ldr.w	r3, [r1], #4
  40857e:	6804      	ldr	r4, [r0, #0]
  408580:	0c1b      	lsrs	r3, r3, #16
  408582:	b2a6      	uxth	r6, r4
  408584:	fb05 6303 	mla	r3, r5, r3, r6
  408588:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40858c:	458e      	cmp	lr, r1
  40858e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408592:	d8e8      	bhi.n	408566 <__multiply+0xba>
  408594:	6003      	str	r3, [r0, #0]
  408596:	f10c 0c04 	add.w	ip, ip, #4
  40859a:	45e2      	cmp	sl, ip
  40859c:	f109 0904 	add.w	r9, r9, #4
  4085a0:	d8b7      	bhi.n	408512 <__multiply+0x66>
  4085a2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4085a6:	f1b8 0f00 	cmp.w	r8, #0
  4085aa:	dd0b      	ble.n	4085c4 <__multiply+0x118>
  4085ac:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4085b0:	f1aa 0a04 	sub.w	sl, sl, #4
  4085b4:	b11b      	cbz	r3, 4085be <__multiply+0x112>
  4085b6:	e005      	b.n	4085c4 <__multiply+0x118>
  4085b8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4085bc:	b913      	cbnz	r3, 4085c4 <__multiply+0x118>
  4085be:	f1b8 0801 	subs.w	r8, r8, #1
  4085c2:	d1f9      	bne.n	4085b8 <__multiply+0x10c>
  4085c4:	9800      	ldr	r0, [sp, #0]
  4085c6:	f8c0 8010 	str.w	r8, [r0, #16]
  4085ca:	b003      	add	sp, #12
  4085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004085d0 <__pow5mult>:
  4085d0:	f012 0303 	ands.w	r3, r2, #3
  4085d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4085d8:	4614      	mov	r4, r2
  4085da:	4607      	mov	r7, r0
  4085dc:	d12e      	bne.n	40863c <__pow5mult+0x6c>
  4085de:	460d      	mov	r5, r1
  4085e0:	10a4      	asrs	r4, r4, #2
  4085e2:	d01c      	beq.n	40861e <__pow5mult+0x4e>
  4085e4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4085e6:	b396      	cbz	r6, 40864e <__pow5mult+0x7e>
  4085e8:	07e3      	lsls	r3, r4, #31
  4085ea:	f04f 0800 	mov.w	r8, #0
  4085ee:	d406      	bmi.n	4085fe <__pow5mult+0x2e>
  4085f0:	1064      	asrs	r4, r4, #1
  4085f2:	d014      	beq.n	40861e <__pow5mult+0x4e>
  4085f4:	6830      	ldr	r0, [r6, #0]
  4085f6:	b1a8      	cbz	r0, 408624 <__pow5mult+0x54>
  4085f8:	4606      	mov	r6, r0
  4085fa:	07e3      	lsls	r3, r4, #31
  4085fc:	d5f8      	bpl.n	4085f0 <__pow5mult+0x20>
  4085fe:	4632      	mov	r2, r6
  408600:	4629      	mov	r1, r5
  408602:	4638      	mov	r0, r7
  408604:	f7ff ff52 	bl	4084ac <__multiply>
  408608:	b1b5      	cbz	r5, 408638 <__pow5mult+0x68>
  40860a:	686a      	ldr	r2, [r5, #4]
  40860c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40860e:	1064      	asrs	r4, r4, #1
  408610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408614:	6029      	str	r1, [r5, #0]
  408616:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40861a:	4605      	mov	r5, r0
  40861c:	d1ea      	bne.n	4085f4 <__pow5mult+0x24>
  40861e:	4628      	mov	r0, r5
  408620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408624:	4632      	mov	r2, r6
  408626:	4631      	mov	r1, r6
  408628:	4638      	mov	r0, r7
  40862a:	f7ff ff3f 	bl	4084ac <__multiply>
  40862e:	6030      	str	r0, [r6, #0]
  408630:	f8c0 8000 	str.w	r8, [r0]
  408634:	4606      	mov	r6, r0
  408636:	e7e0      	b.n	4085fa <__pow5mult+0x2a>
  408638:	4605      	mov	r5, r0
  40863a:	e7d9      	b.n	4085f0 <__pow5mult+0x20>
  40863c:	1e5a      	subs	r2, r3, #1
  40863e:	4d0b      	ldr	r5, [pc, #44]	; (40866c <__pow5mult+0x9c>)
  408640:	2300      	movs	r3, #0
  408642:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408646:	f7ff fe97 	bl	408378 <__multadd>
  40864a:	4605      	mov	r5, r0
  40864c:	e7c8      	b.n	4085e0 <__pow5mult+0x10>
  40864e:	2101      	movs	r1, #1
  408650:	4638      	mov	r0, r7
  408652:	f7ff fe61 	bl	408318 <_Balloc>
  408656:	f240 2171 	movw	r1, #625	; 0x271
  40865a:	2201      	movs	r2, #1
  40865c:	2300      	movs	r3, #0
  40865e:	6141      	str	r1, [r0, #20]
  408660:	6102      	str	r2, [r0, #16]
  408662:	4606      	mov	r6, r0
  408664:	64b8      	str	r0, [r7, #72]	; 0x48
  408666:	6003      	str	r3, [r0, #0]
  408668:	e7be      	b.n	4085e8 <__pow5mult+0x18>
  40866a:	bf00      	nop
  40866c:	0040a078 	.word	0x0040a078

00408670 <__lshift>:
  408670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408674:	4691      	mov	r9, r2
  408676:	690a      	ldr	r2, [r1, #16]
  408678:	688b      	ldr	r3, [r1, #8]
  40867a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40867e:	eb04 0802 	add.w	r8, r4, r2
  408682:	f108 0501 	add.w	r5, r8, #1
  408686:	429d      	cmp	r5, r3
  408688:	460e      	mov	r6, r1
  40868a:	4607      	mov	r7, r0
  40868c:	6849      	ldr	r1, [r1, #4]
  40868e:	dd04      	ble.n	40869a <__lshift+0x2a>
  408690:	005b      	lsls	r3, r3, #1
  408692:	429d      	cmp	r5, r3
  408694:	f101 0101 	add.w	r1, r1, #1
  408698:	dcfa      	bgt.n	408690 <__lshift+0x20>
  40869a:	4638      	mov	r0, r7
  40869c:	f7ff fe3c 	bl	408318 <_Balloc>
  4086a0:	2c00      	cmp	r4, #0
  4086a2:	f100 0314 	add.w	r3, r0, #20
  4086a6:	dd06      	ble.n	4086b6 <__lshift+0x46>
  4086a8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4086ac:	2100      	movs	r1, #0
  4086ae:	f843 1b04 	str.w	r1, [r3], #4
  4086b2:	429a      	cmp	r2, r3
  4086b4:	d1fb      	bne.n	4086ae <__lshift+0x3e>
  4086b6:	6934      	ldr	r4, [r6, #16]
  4086b8:	f106 0114 	add.w	r1, r6, #20
  4086bc:	f019 091f 	ands.w	r9, r9, #31
  4086c0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4086c4:	d01d      	beq.n	408702 <__lshift+0x92>
  4086c6:	f1c9 0c20 	rsb	ip, r9, #32
  4086ca:	2200      	movs	r2, #0
  4086cc:	680c      	ldr	r4, [r1, #0]
  4086ce:	fa04 f409 	lsl.w	r4, r4, r9
  4086d2:	4314      	orrs	r4, r2
  4086d4:	f843 4b04 	str.w	r4, [r3], #4
  4086d8:	f851 2b04 	ldr.w	r2, [r1], #4
  4086dc:	458e      	cmp	lr, r1
  4086de:	fa22 f20c 	lsr.w	r2, r2, ip
  4086e2:	d8f3      	bhi.n	4086cc <__lshift+0x5c>
  4086e4:	601a      	str	r2, [r3, #0]
  4086e6:	b10a      	cbz	r2, 4086ec <__lshift+0x7c>
  4086e8:	f108 0502 	add.w	r5, r8, #2
  4086ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4086ee:	6872      	ldr	r2, [r6, #4]
  4086f0:	3d01      	subs	r5, #1
  4086f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4086f6:	6105      	str	r5, [r0, #16]
  4086f8:	6031      	str	r1, [r6, #0]
  4086fa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4086fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408702:	3b04      	subs	r3, #4
  408704:	f851 2b04 	ldr.w	r2, [r1], #4
  408708:	f843 2f04 	str.w	r2, [r3, #4]!
  40870c:	458e      	cmp	lr, r1
  40870e:	d8f9      	bhi.n	408704 <__lshift+0x94>
  408710:	e7ec      	b.n	4086ec <__lshift+0x7c>
  408712:	bf00      	nop

00408714 <__mcmp>:
  408714:	b430      	push	{r4, r5}
  408716:	690b      	ldr	r3, [r1, #16]
  408718:	4605      	mov	r5, r0
  40871a:	6900      	ldr	r0, [r0, #16]
  40871c:	1ac0      	subs	r0, r0, r3
  40871e:	d10f      	bne.n	408740 <__mcmp+0x2c>
  408720:	009b      	lsls	r3, r3, #2
  408722:	3514      	adds	r5, #20
  408724:	3114      	adds	r1, #20
  408726:	4419      	add	r1, r3
  408728:	442b      	add	r3, r5
  40872a:	e001      	b.n	408730 <__mcmp+0x1c>
  40872c:	429d      	cmp	r5, r3
  40872e:	d207      	bcs.n	408740 <__mcmp+0x2c>
  408730:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408734:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408738:	4294      	cmp	r4, r2
  40873a:	d0f7      	beq.n	40872c <__mcmp+0x18>
  40873c:	d302      	bcc.n	408744 <__mcmp+0x30>
  40873e:	2001      	movs	r0, #1
  408740:	bc30      	pop	{r4, r5}
  408742:	4770      	bx	lr
  408744:	f04f 30ff 	mov.w	r0, #4294967295
  408748:	e7fa      	b.n	408740 <__mcmp+0x2c>
  40874a:	bf00      	nop

0040874c <__mdiff>:
  40874c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408750:	690f      	ldr	r7, [r1, #16]
  408752:	460e      	mov	r6, r1
  408754:	6911      	ldr	r1, [r2, #16]
  408756:	1a7f      	subs	r7, r7, r1
  408758:	2f00      	cmp	r7, #0
  40875a:	4690      	mov	r8, r2
  40875c:	d117      	bne.n	40878e <__mdiff+0x42>
  40875e:	0089      	lsls	r1, r1, #2
  408760:	f106 0514 	add.w	r5, r6, #20
  408764:	f102 0e14 	add.w	lr, r2, #20
  408768:	186b      	adds	r3, r5, r1
  40876a:	4471      	add	r1, lr
  40876c:	e001      	b.n	408772 <__mdiff+0x26>
  40876e:	429d      	cmp	r5, r3
  408770:	d25c      	bcs.n	40882c <__mdiff+0xe0>
  408772:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408776:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40877a:	42a2      	cmp	r2, r4
  40877c:	d0f7      	beq.n	40876e <__mdiff+0x22>
  40877e:	d25e      	bcs.n	40883e <__mdiff+0xf2>
  408780:	4633      	mov	r3, r6
  408782:	462c      	mov	r4, r5
  408784:	4646      	mov	r6, r8
  408786:	4675      	mov	r5, lr
  408788:	4698      	mov	r8, r3
  40878a:	2701      	movs	r7, #1
  40878c:	e005      	b.n	40879a <__mdiff+0x4e>
  40878e:	db58      	blt.n	408842 <__mdiff+0xf6>
  408790:	f106 0514 	add.w	r5, r6, #20
  408794:	f108 0414 	add.w	r4, r8, #20
  408798:	2700      	movs	r7, #0
  40879a:	6871      	ldr	r1, [r6, #4]
  40879c:	f7ff fdbc 	bl	408318 <_Balloc>
  4087a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4087a4:	6936      	ldr	r6, [r6, #16]
  4087a6:	60c7      	str	r7, [r0, #12]
  4087a8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4087ac:	46a6      	mov	lr, r4
  4087ae:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4087b2:	f100 0414 	add.w	r4, r0, #20
  4087b6:	2300      	movs	r3, #0
  4087b8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4087bc:	f855 8b04 	ldr.w	r8, [r5], #4
  4087c0:	b28a      	uxth	r2, r1
  4087c2:	fa13 f388 	uxtah	r3, r3, r8
  4087c6:	0c09      	lsrs	r1, r1, #16
  4087c8:	1a9a      	subs	r2, r3, r2
  4087ca:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4087ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4087d2:	b292      	uxth	r2, r2
  4087d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4087d8:	45f4      	cmp	ip, lr
  4087da:	f844 2b04 	str.w	r2, [r4], #4
  4087de:	ea4f 4323 	mov.w	r3, r3, asr #16
  4087e2:	d8e9      	bhi.n	4087b8 <__mdiff+0x6c>
  4087e4:	42af      	cmp	r7, r5
  4087e6:	d917      	bls.n	408818 <__mdiff+0xcc>
  4087e8:	46a4      	mov	ip, r4
  4087ea:	46ae      	mov	lr, r5
  4087ec:	f85e 2b04 	ldr.w	r2, [lr], #4
  4087f0:	fa13 f382 	uxtah	r3, r3, r2
  4087f4:	1419      	asrs	r1, r3, #16
  4087f6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4087fa:	b29b      	uxth	r3, r3
  4087fc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408800:	4577      	cmp	r7, lr
  408802:	f84c 2b04 	str.w	r2, [ip], #4
  408806:	ea4f 4321 	mov.w	r3, r1, asr #16
  40880a:	d8ef      	bhi.n	4087ec <__mdiff+0xa0>
  40880c:	43ed      	mvns	r5, r5
  40880e:	442f      	add	r7, r5
  408810:	f027 0703 	bic.w	r7, r7, #3
  408814:	3704      	adds	r7, #4
  408816:	443c      	add	r4, r7
  408818:	3c04      	subs	r4, #4
  40881a:	b922      	cbnz	r2, 408826 <__mdiff+0xda>
  40881c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408820:	3e01      	subs	r6, #1
  408822:	2b00      	cmp	r3, #0
  408824:	d0fa      	beq.n	40881c <__mdiff+0xd0>
  408826:	6106      	str	r6, [r0, #16]
  408828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40882c:	2100      	movs	r1, #0
  40882e:	f7ff fd73 	bl	408318 <_Balloc>
  408832:	2201      	movs	r2, #1
  408834:	2300      	movs	r3, #0
  408836:	6102      	str	r2, [r0, #16]
  408838:	6143      	str	r3, [r0, #20]
  40883a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40883e:	4674      	mov	r4, lr
  408840:	e7ab      	b.n	40879a <__mdiff+0x4e>
  408842:	4633      	mov	r3, r6
  408844:	f106 0414 	add.w	r4, r6, #20
  408848:	f102 0514 	add.w	r5, r2, #20
  40884c:	4616      	mov	r6, r2
  40884e:	2701      	movs	r7, #1
  408850:	4698      	mov	r8, r3
  408852:	e7a2      	b.n	40879a <__mdiff+0x4e>

00408854 <__d2b>:
  408854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408858:	b082      	sub	sp, #8
  40885a:	2101      	movs	r1, #1
  40885c:	461c      	mov	r4, r3
  40885e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408862:	4615      	mov	r5, r2
  408864:	9e08      	ldr	r6, [sp, #32]
  408866:	f7ff fd57 	bl	408318 <_Balloc>
  40886a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40886e:	4680      	mov	r8, r0
  408870:	b10f      	cbz	r7, 408876 <__d2b+0x22>
  408872:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408876:	9401      	str	r4, [sp, #4]
  408878:	b31d      	cbz	r5, 4088c2 <__d2b+0x6e>
  40887a:	a802      	add	r0, sp, #8
  40887c:	f840 5d08 	str.w	r5, [r0, #-8]!
  408880:	f7ff fdda 	bl	408438 <__lo0bits>
  408884:	2800      	cmp	r0, #0
  408886:	d134      	bne.n	4088f2 <__d2b+0x9e>
  408888:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40888c:	f8c8 2014 	str.w	r2, [r8, #20]
  408890:	2b00      	cmp	r3, #0
  408892:	bf0c      	ite	eq
  408894:	2101      	moveq	r1, #1
  408896:	2102      	movne	r1, #2
  408898:	f8c8 3018 	str.w	r3, [r8, #24]
  40889c:	f8c8 1010 	str.w	r1, [r8, #16]
  4088a0:	b9df      	cbnz	r7, 4088da <__d2b+0x86>
  4088a2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4088a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4088aa:	6030      	str	r0, [r6, #0]
  4088ac:	6918      	ldr	r0, [r3, #16]
  4088ae:	f7ff fda3 	bl	4083f8 <__hi0bits>
  4088b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4088b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4088b8:	6018      	str	r0, [r3, #0]
  4088ba:	4640      	mov	r0, r8
  4088bc:	b002      	add	sp, #8
  4088be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4088c2:	a801      	add	r0, sp, #4
  4088c4:	f7ff fdb8 	bl	408438 <__lo0bits>
  4088c8:	9b01      	ldr	r3, [sp, #4]
  4088ca:	f8c8 3014 	str.w	r3, [r8, #20]
  4088ce:	2101      	movs	r1, #1
  4088d0:	3020      	adds	r0, #32
  4088d2:	f8c8 1010 	str.w	r1, [r8, #16]
  4088d6:	2f00      	cmp	r7, #0
  4088d8:	d0e3      	beq.n	4088a2 <__d2b+0x4e>
  4088da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4088dc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4088e0:	4407      	add	r7, r0
  4088e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4088e6:	6037      	str	r7, [r6, #0]
  4088e8:	6018      	str	r0, [r3, #0]
  4088ea:	4640      	mov	r0, r8
  4088ec:	b002      	add	sp, #8
  4088ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4088f2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4088f6:	f1c0 0220 	rsb	r2, r0, #32
  4088fa:	fa03 f202 	lsl.w	r2, r3, r2
  4088fe:	430a      	orrs	r2, r1
  408900:	40c3      	lsrs	r3, r0
  408902:	9301      	str	r3, [sp, #4]
  408904:	f8c8 2014 	str.w	r2, [r8, #20]
  408908:	e7c2      	b.n	408890 <__d2b+0x3c>
  40890a:	bf00      	nop

0040890c <_realloc_r>:
  40890c:	2900      	cmp	r1, #0
  40890e:	f000 8095 	beq.w	408a3c <_realloc_r+0x130>
  408912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408916:	460d      	mov	r5, r1
  408918:	4616      	mov	r6, r2
  40891a:	b083      	sub	sp, #12
  40891c:	4680      	mov	r8, r0
  40891e:	f106 070b 	add.w	r7, r6, #11
  408922:	f7fb fc2d 	bl	404180 <__malloc_lock>
  408926:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40892a:	2f16      	cmp	r7, #22
  40892c:	f02e 0403 	bic.w	r4, lr, #3
  408930:	f1a5 0908 	sub.w	r9, r5, #8
  408934:	d83c      	bhi.n	4089b0 <_realloc_r+0xa4>
  408936:	2210      	movs	r2, #16
  408938:	4617      	mov	r7, r2
  40893a:	42be      	cmp	r6, r7
  40893c:	d83d      	bhi.n	4089ba <_realloc_r+0xae>
  40893e:	4294      	cmp	r4, r2
  408940:	da43      	bge.n	4089ca <_realloc_r+0xbe>
  408942:	4bc4      	ldr	r3, [pc, #784]	; (408c54 <_realloc_r+0x348>)
  408944:	6899      	ldr	r1, [r3, #8]
  408946:	eb09 0004 	add.w	r0, r9, r4
  40894a:	4288      	cmp	r0, r1
  40894c:	f000 80b4 	beq.w	408ab8 <_realloc_r+0x1ac>
  408950:	6843      	ldr	r3, [r0, #4]
  408952:	f023 0101 	bic.w	r1, r3, #1
  408956:	4401      	add	r1, r0
  408958:	6849      	ldr	r1, [r1, #4]
  40895a:	07c9      	lsls	r1, r1, #31
  40895c:	d54c      	bpl.n	4089f8 <_realloc_r+0xec>
  40895e:	f01e 0f01 	tst.w	lr, #1
  408962:	f000 809b 	beq.w	408a9c <_realloc_r+0x190>
  408966:	4631      	mov	r1, r6
  408968:	4640      	mov	r0, r8
  40896a:	f7fb f871 	bl	403a50 <_malloc_r>
  40896e:	4606      	mov	r6, r0
  408970:	2800      	cmp	r0, #0
  408972:	d03a      	beq.n	4089ea <_realloc_r+0xde>
  408974:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408978:	f023 0301 	bic.w	r3, r3, #1
  40897c:	444b      	add	r3, r9
  40897e:	f1a0 0208 	sub.w	r2, r0, #8
  408982:	429a      	cmp	r2, r3
  408984:	f000 8121 	beq.w	408bca <_realloc_r+0x2be>
  408988:	1f22      	subs	r2, r4, #4
  40898a:	2a24      	cmp	r2, #36	; 0x24
  40898c:	f200 8107 	bhi.w	408b9e <_realloc_r+0x292>
  408990:	2a13      	cmp	r2, #19
  408992:	f200 80db 	bhi.w	408b4c <_realloc_r+0x240>
  408996:	4603      	mov	r3, r0
  408998:	462a      	mov	r2, r5
  40899a:	6811      	ldr	r1, [r2, #0]
  40899c:	6019      	str	r1, [r3, #0]
  40899e:	6851      	ldr	r1, [r2, #4]
  4089a0:	6059      	str	r1, [r3, #4]
  4089a2:	6892      	ldr	r2, [r2, #8]
  4089a4:	609a      	str	r2, [r3, #8]
  4089a6:	4629      	mov	r1, r5
  4089a8:	4640      	mov	r0, r8
  4089aa:	f7ff f8c1 	bl	407b30 <_free_r>
  4089ae:	e01c      	b.n	4089ea <_realloc_r+0xde>
  4089b0:	f027 0707 	bic.w	r7, r7, #7
  4089b4:	2f00      	cmp	r7, #0
  4089b6:	463a      	mov	r2, r7
  4089b8:	dabf      	bge.n	40893a <_realloc_r+0x2e>
  4089ba:	2600      	movs	r6, #0
  4089bc:	230c      	movs	r3, #12
  4089be:	4630      	mov	r0, r6
  4089c0:	f8c8 3000 	str.w	r3, [r8]
  4089c4:	b003      	add	sp, #12
  4089c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089ca:	462e      	mov	r6, r5
  4089cc:	1be3      	subs	r3, r4, r7
  4089ce:	2b0f      	cmp	r3, #15
  4089d0:	d81e      	bhi.n	408a10 <_realloc_r+0x104>
  4089d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4089d6:	f003 0301 	and.w	r3, r3, #1
  4089da:	4323      	orrs	r3, r4
  4089dc:	444c      	add	r4, r9
  4089de:	f8c9 3004 	str.w	r3, [r9, #4]
  4089e2:	6863      	ldr	r3, [r4, #4]
  4089e4:	f043 0301 	orr.w	r3, r3, #1
  4089e8:	6063      	str	r3, [r4, #4]
  4089ea:	4640      	mov	r0, r8
  4089ec:	f7fb fbce 	bl	40418c <__malloc_unlock>
  4089f0:	4630      	mov	r0, r6
  4089f2:	b003      	add	sp, #12
  4089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089f8:	f023 0303 	bic.w	r3, r3, #3
  4089fc:	18e1      	adds	r1, r4, r3
  4089fe:	4291      	cmp	r1, r2
  408a00:	db1f      	blt.n	408a42 <_realloc_r+0x136>
  408a02:	68c3      	ldr	r3, [r0, #12]
  408a04:	6882      	ldr	r2, [r0, #8]
  408a06:	462e      	mov	r6, r5
  408a08:	60d3      	str	r3, [r2, #12]
  408a0a:	460c      	mov	r4, r1
  408a0c:	609a      	str	r2, [r3, #8]
  408a0e:	e7dd      	b.n	4089cc <_realloc_r+0xc0>
  408a10:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408a14:	eb09 0107 	add.w	r1, r9, r7
  408a18:	f002 0201 	and.w	r2, r2, #1
  408a1c:	444c      	add	r4, r9
  408a1e:	f043 0301 	orr.w	r3, r3, #1
  408a22:	4317      	orrs	r7, r2
  408a24:	f8c9 7004 	str.w	r7, [r9, #4]
  408a28:	604b      	str	r3, [r1, #4]
  408a2a:	6863      	ldr	r3, [r4, #4]
  408a2c:	f043 0301 	orr.w	r3, r3, #1
  408a30:	3108      	adds	r1, #8
  408a32:	6063      	str	r3, [r4, #4]
  408a34:	4640      	mov	r0, r8
  408a36:	f7ff f87b 	bl	407b30 <_free_r>
  408a3a:	e7d6      	b.n	4089ea <_realloc_r+0xde>
  408a3c:	4611      	mov	r1, r2
  408a3e:	f7fb b807 	b.w	403a50 <_malloc_r>
  408a42:	f01e 0f01 	tst.w	lr, #1
  408a46:	d18e      	bne.n	408966 <_realloc_r+0x5a>
  408a48:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408a4c:	eba9 0a01 	sub.w	sl, r9, r1
  408a50:	f8da 1004 	ldr.w	r1, [sl, #4]
  408a54:	f021 0103 	bic.w	r1, r1, #3
  408a58:	440b      	add	r3, r1
  408a5a:	4423      	add	r3, r4
  408a5c:	4293      	cmp	r3, r2
  408a5e:	db25      	blt.n	408aac <_realloc_r+0x1a0>
  408a60:	68c2      	ldr	r2, [r0, #12]
  408a62:	6881      	ldr	r1, [r0, #8]
  408a64:	4656      	mov	r6, sl
  408a66:	60ca      	str	r2, [r1, #12]
  408a68:	6091      	str	r1, [r2, #8]
  408a6a:	f8da 100c 	ldr.w	r1, [sl, #12]
  408a6e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408a72:	1f22      	subs	r2, r4, #4
  408a74:	2a24      	cmp	r2, #36	; 0x24
  408a76:	60c1      	str	r1, [r0, #12]
  408a78:	6088      	str	r0, [r1, #8]
  408a7a:	f200 8094 	bhi.w	408ba6 <_realloc_r+0x29a>
  408a7e:	2a13      	cmp	r2, #19
  408a80:	d96f      	bls.n	408b62 <_realloc_r+0x256>
  408a82:	6829      	ldr	r1, [r5, #0]
  408a84:	f8ca 1008 	str.w	r1, [sl, #8]
  408a88:	6869      	ldr	r1, [r5, #4]
  408a8a:	f8ca 100c 	str.w	r1, [sl, #12]
  408a8e:	2a1b      	cmp	r2, #27
  408a90:	f200 80a2 	bhi.w	408bd8 <_realloc_r+0x2cc>
  408a94:	3508      	adds	r5, #8
  408a96:	f10a 0210 	add.w	r2, sl, #16
  408a9a:	e063      	b.n	408b64 <_realloc_r+0x258>
  408a9c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408aa0:	eba9 0a03 	sub.w	sl, r9, r3
  408aa4:	f8da 1004 	ldr.w	r1, [sl, #4]
  408aa8:	f021 0103 	bic.w	r1, r1, #3
  408aac:	1863      	adds	r3, r4, r1
  408aae:	4293      	cmp	r3, r2
  408ab0:	f6ff af59 	blt.w	408966 <_realloc_r+0x5a>
  408ab4:	4656      	mov	r6, sl
  408ab6:	e7d8      	b.n	408a6a <_realloc_r+0x15e>
  408ab8:	6841      	ldr	r1, [r0, #4]
  408aba:	f021 0b03 	bic.w	fp, r1, #3
  408abe:	44a3      	add	fp, r4
  408ac0:	f107 0010 	add.w	r0, r7, #16
  408ac4:	4583      	cmp	fp, r0
  408ac6:	da56      	bge.n	408b76 <_realloc_r+0x26a>
  408ac8:	f01e 0f01 	tst.w	lr, #1
  408acc:	f47f af4b 	bne.w	408966 <_realloc_r+0x5a>
  408ad0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408ad4:	eba9 0a01 	sub.w	sl, r9, r1
  408ad8:	f8da 1004 	ldr.w	r1, [sl, #4]
  408adc:	f021 0103 	bic.w	r1, r1, #3
  408ae0:	448b      	add	fp, r1
  408ae2:	4558      	cmp	r0, fp
  408ae4:	dce2      	bgt.n	408aac <_realloc_r+0x1a0>
  408ae6:	4656      	mov	r6, sl
  408ae8:	f8da 100c 	ldr.w	r1, [sl, #12]
  408aec:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408af0:	1f22      	subs	r2, r4, #4
  408af2:	2a24      	cmp	r2, #36	; 0x24
  408af4:	60c1      	str	r1, [r0, #12]
  408af6:	6088      	str	r0, [r1, #8]
  408af8:	f200 808f 	bhi.w	408c1a <_realloc_r+0x30e>
  408afc:	2a13      	cmp	r2, #19
  408afe:	f240 808a 	bls.w	408c16 <_realloc_r+0x30a>
  408b02:	6829      	ldr	r1, [r5, #0]
  408b04:	f8ca 1008 	str.w	r1, [sl, #8]
  408b08:	6869      	ldr	r1, [r5, #4]
  408b0a:	f8ca 100c 	str.w	r1, [sl, #12]
  408b0e:	2a1b      	cmp	r2, #27
  408b10:	f200 808a 	bhi.w	408c28 <_realloc_r+0x31c>
  408b14:	3508      	adds	r5, #8
  408b16:	f10a 0210 	add.w	r2, sl, #16
  408b1a:	6829      	ldr	r1, [r5, #0]
  408b1c:	6011      	str	r1, [r2, #0]
  408b1e:	6869      	ldr	r1, [r5, #4]
  408b20:	6051      	str	r1, [r2, #4]
  408b22:	68a9      	ldr	r1, [r5, #8]
  408b24:	6091      	str	r1, [r2, #8]
  408b26:	eb0a 0107 	add.w	r1, sl, r7
  408b2a:	ebab 0207 	sub.w	r2, fp, r7
  408b2e:	f042 0201 	orr.w	r2, r2, #1
  408b32:	6099      	str	r1, [r3, #8]
  408b34:	604a      	str	r2, [r1, #4]
  408b36:	f8da 3004 	ldr.w	r3, [sl, #4]
  408b3a:	f003 0301 	and.w	r3, r3, #1
  408b3e:	431f      	orrs	r7, r3
  408b40:	4640      	mov	r0, r8
  408b42:	f8ca 7004 	str.w	r7, [sl, #4]
  408b46:	f7fb fb21 	bl	40418c <__malloc_unlock>
  408b4a:	e751      	b.n	4089f0 <_realloc_r+0xe4>
  408b4c:	682b      	ldr	r3, [r5, #0]
  408b4e:	6003      	str	r3, [r0, #0]
  408b50:	686b      	ldr	r3, [r5, #4]
  408b52:	6043      	str	r3, [r0, #4]
  408b54:	2a1b      	cmp	r2, #27
  408b56:	d82d      	bhi.n	408bb4 <_realloc_r+0x2a8>
  408b58:	f100 0308 	add.w	r3, r0, #8
  408b5c:	f105 0208 	add.w	r2, r5, #8
  408b60:	e71b      	b.n	40899a <_realloc_r+0x8e>
  408b62:	4632      	mov	r2, r6
  408b64:	6829      	ldr	r1, [r5, #0]
  408b66:	6011      	str	r1, [r2, #0]
  408b68:	6869      	ldr	r1, [r5, #4]
  408b6a:	6051      	str	r1, [r2, #4]
  408b6c:	68a9      	ldr	r1, [r5, #8]
  408b6e:	6091      	str	r1, [r2, #8]
  408b70:	461c      	mov	r4, r3
  408b72:	46d1      	mov	r9, sl
  408b74:	e72a      	b.n	4089cc <_realloc_r+0xc0>
  408b76:	eb09 0107 	add.w	r1, r9, r7
  408b7a:	ebab 0b07 	sub.w	fp, fp, r7
  408b7e:	f04b 0201 	orr.w	r2, fp, #1
  408b82:	6099      	str	r1, [r3, #8]
  408b84:	604a      	str	r2, [r1, #4]
  408b86:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408b8a:	f003 0301 	and.w	r3, r3, #1
  408b8e:	431f      	orrs	r7, r3
  408b90:	4640      	mov	r0, r8
  408b92:	f845 7c04 	str.w	r7, [r5, #-4]
  408b96:	f7fb faf9 	bl	40418c <__malloc_unlock>
  408b9a:	462e      	mov	r6, r5
  408b9c:	e728      	b.n	4089f0 <_realloc_r+0xe4>
  408b9e:	4629      	mov	r1, r5
  408ba0:	f7ff fb56 	bl	408250 <memmove>
  408ba4:	e6ff      	b.n	4089a6 <_realloc_r+0x9a>
  408ba6:	4629      	mov	r1, r5
  408ba8:	4630      	mov	r0, r6
  408baa:	461c      	mov	r4, r3
  408bac:	46d1      	mov	r9, sl
  408bae:	f7ff fb4f 	bl	408250 <memmove>
  408bb2:	e70b      	b.n	4089cc <_realloc_r+0xc0>
  408bb4:	68ab      	ldr	r3, [r5, #8]
  408bb6:	6083      	str	r3, [r0, #8]
  408bb8:	68eb      	ldr	r3, [r5, #12]
  408bba:	60c3      	str	r3, [r0, #12]
  408bbc:	2a24      	cmp	r2, #36	; 0x24
  408bbe:	d017      	beq.n	408bf0 <_realloc_r+0x2e4>
  408bc0:	f100 0310 	add.w	r3, r0, #16
  408bc4:	f105 0210 	add.w	r2, r5, #16
  408bc8:	e6e7      	b.n	40899a <_realloc_r+0x8e>
  408bca:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408bce:	f023 0303 	bic.w	r3, r3, #3
  408bd2:	441c      	add	r4, r3
  408bd4:	462e      	mov	r6, r5
  408bd6:	e6f9      	b.n	4089cc <_realloc_r+0xc0>
  408bd8:	68a9      	ldr	r1, [r5, #8]
  408bda:	f8ca 1010 	str.w	r1, [sl, #16]
  408bde:	68e9      	ldr	r1, [r5, #12]
  408be0:	f8ca 1014 	str.w	r1, [sl, #20]
  408be4:	2a24      	cmp	r2, #36	; 0x24
  408be6:	d00c      	beq.n	408c02 <_realloc_r+0x2f6>
  408be8:	3510      	adds	r5, #16
  408bea:	f10a 0218 	add.w	r2, sl, #24
  408bee:	e7b9      	b.n	408b64 <_realloc_r+0x258>
  408bf0:	692b      	ldr	r3, [r5, #16]
  408bf2:	6103      	str	r3, [r0, #16]
  408bf4:	696b      	ldr	r3, [r5, #20]
  408bf6:	6143      	str	r3, [r0, #20]
  408bf8:	f105 0218 	add.w	r2, r5, #24
  408bfc:	f100 0318 	add.w	r3, r0, #24
  408c00:	e6cb      	b.n	40899a <_realloc_r+0x8e>
  408c02:	692a      	ldr	r2, [r5, #16]
  408c04:	f8ca 2018 	str.w	r2, [sl, #24]
  408c08:	696a      	ldr	r2, [r5, #20]
  408c0a:	f8ca 201c 	str.w	r2, [sl, #28]
  408c0e:	3518      	adds	r5, #24
  408c10:	f10a 0220 	add.w	r2, sl, #32
  408c14:	e7a6      	b.n	408b64 <_realloc_r+0x258>
  408c16:	4632      	mov	r2, r6
  408c18:	e77f      	b.n	408b1a <_realloc_r+0x20e>
  408c1a:	4629      	mov	r1, r5
  408c1c:	4630      	mov	r0, r6
  408c1e:	9301      	str	r3, [sp, #4]
  408c20:	f7ff fb16 	bl	408250 <memmove>
  408c24:	9b01      	ldr	r3, [sp, #4]
  408c26:	e77e      	b.n	408b26 <_realloc_r+0x21a>
  408c28:	68a9      	ldr	r1, [r5, #8]
  408c2a:	f8ca 1010 	str.w	r1, [sl, #16]
  408c2e:	68e9      	ldr	r1, [r5, #12]
  408c30:	f8ca 1014 	str.w	r1, [sl, #20]
  408c34:	2a24      	cmp	r2, #36	; 0x24
  408c36:	d003      	beq.n	408c40 <_realloc_r+0x334>
  408c38:	3510      	adds	r5, #16
  408c3a:	f10a 0218 	add.w	r2, sl, #24
  408c3e:	e76c      	b.n	408b1a <_realloc_r+0x20e>
  408c40:	692a      	ldr	r2, [r5, #16]
  408c42:	f8ca 2018 	str.w	r2, [sl, #24]
  408c46:	696a      	ldr	r2, [r5, #20]
  408c48:	f8ca 201c 	str.w	r2, [sl, #28]
  408c4c:	3518      	adds	r5, #24
  408c4e:	f10a 0220 	add.w	r2, sl, #32
  408c52:	e762      	b.n	408b1a <_realloc_r+0x20e>
  408c54:	20400438 	.word	0x20400438

00408c58 <__sread>:
  408c58:	b510      	push	{r4, lr}
  408c5a:	460c      	mov	r4, r1
  408c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408c60:	f000 faa4 	bl	4091ac <_read_r>
  408c64:	2800      	cmp	r0, #0
  408c66:	db03      	blt.n	408c70 <__sread+0x18>
  408c68:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408c6a:	4403      	add	r3, r0
  408c6c:	6523      	str	r3, [r4, #80]	; 0x50
  408c6e:	bd10      	pop	{r4, pc}
  408c70:	89a3      	ldrh	r3, [r4, #12]
  408c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408c76:	81a3      	strh	r3, [r4, #12]
  408c78:	bd10      	pop	{r4, pc}
  408c7a:	bf00      	nop

00408c7c <__swrite>:
  408c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408c80:	4616      	mov	r6, r2
  408c82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408c86:	461f      	mov	r7, r3
  408c88:	05d3      	lsls	r3, r2, #23
  408c8a:	460c      	mov	r4, r1
  408c8c:	4605      	mov	r5, r0
  408c8e:	d507      	bpl.n	408ca0 <__swrite+0x24>
  408c90:	2200      	movs	r2, #0
  408c92:	2302      	movs	r3, #2
  408c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408c98:	f000 fa72 	bl	409180 <_lseek_r>
  408c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408ca4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408ca8:	81a2      	strh	r2, [r4, #12]
  408caa:	463b      	mov	r3, r7
  408cac:	4632      	mov	r2, r6
  408cae:	4628      	mov	r0, r5
  408cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408cb4:	f000 b922 	b.w	408efc <_write_r>

00408cb8 <__sseek>:
  408cb8:	b510      	push	{r4, lr}
  408cba:	460c      	mov	r4, r1
  408cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408cc0:	f000 fa5e 	bl	409180 <_lseek_r>
  408cc4:	89a3      	ldrh	r3, [r4, #12]
  408cc6:	1c42      	adds	r2, r0, #1
  408cc8:	bf0e      	itee	eq
  408cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408cd2:	6520      	strne	r0, [r4, #80]	; 0x50
  408cd4:	81a3      	strh	r3, [r4, #12]
  408cd6:	bd10      	pop	{r4, pc}

00408cd8 <__sclose>:
  408cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408cdc:	f000 b9b6 	b.w	40904c <_close_r>

00408ce0 <__ssprint_r>:
  408ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408ce4:	6893      	ldr	r3, [r2, #8]
  408ce6:	b083      	sub	sp, #12
  408ce8:	4690      	mov	r8, r2
  408cea:	2b00      	cmp	r3, #0
  408cec:	d070      	beq.n	408dd0 <__ssprint_r+0xf0>
  408cee:	4682      	mov	sl, r0
  408cf0:	460c      	mov	r4, r1
  408cf2:	6817      	ldr	r7, [r2, #0]
  408cf4:	688d      	ldr	r5, [r1, #8]
  408cf6:	6808      	ldr	r0, [r1, #0]
  408cf8:	e042      	b.n	408d80 <__ssprint_r+0xa0>
  408cfa:	89a3      	ldrh	r3, [r4, #12]
  408cfc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408d00:	d02e      	beq.n	408d60 <__ssprint_r+0x80>
  408d02:	6965      	ldr	r5, [r4, #20]
  408d04:	6921      	ldr	r1, [r4, #16]
  408d06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  408d0a:	eba0 0b01 	sub.w	fp, r0, r1
  408d0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408d12:	f10b 0001 	add.w	r0, fp, #1
  408d16:	106d      	asrs	r5, r5, #1
  408d18:	4430      	add	r0, r6
  408d1a:	42a8      	cmp	r0, r5
  408d1c:	462a      	mov	r2, r5
  408d1e:	bf84      	itt	hi
  408d20:	4605      	movhi	r5, r0
  408d22:	462a      	movhi	r2, r5
  408d24:	055b      	lsls	r3, r3, #21
  408d26:	d538      	bpl.n	408d9a <__ssprint_r+0xba>
  408d28:	4611      	mov	r1, r2
  408d2a:	4650      	mov	r0, sl
  408d2c:	f7fa fe90 	bl	403a50 <_malloc_r>
  408d30:	2800      	cmp	r0, #0
  408d32:	d03c      	beq.n	408dae <__ssprint_r+0xce>
  408d34:	465a      	mov	r2, fp
  408d36:	6921      	ldr	r1, [r4, #16]
  408d38:	9001      	str	r0, [sp, #4]
  408d3a:	f7fb f939 	bl	403fb0 <memcpy>
  408d3e:	89a2      	ldrh	r2, [r4, #12]
  408d40:	9b01      	ldr	r3, [sp, #4]
  408d42:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408d46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408d4a:	81a2      	strh	r2, [r4, #12]
  408d4c:	eba5 020b 	sub.w	r2, r5, fp
  408d50:	eb03 000b 	add.w	r0, r3, fp
  408d54:	6165      	str	r5, [r4, #20]
  408d56:	6123      	str	r3, [r4, #16]
  408d58:	6020      	str	r0, [r4, #0]
  408d5a:	60a2      	str	r2, [r4, #8]
  408d5c:	4635      	mov	r5, r6
  408d5e:	46b3      	mov	fp, r6
  408d60:	465a      	mov	r2, fp
  408d62:	4649      	mov	r1, r9
  408d64:	f7ff fa74 	bl	408250 <memmove>
  408d68:	f8d8 3008 	ldr.w	r3, [r8, #8]
  408d6c:	68a2      	ldr	r2, [r4, #8]
  408d6e:	6820      	ldr	r0, [r4, #0]
  408d70:	1b55      	subs	r5, r2, r5
  408d72:	4458      	add	r0, fp
  408d74:	1b9e      	subs	r6, r3, r6
  408d76:	60a5      	str	r5, [r4, #8]
  408d78:	6020      	str	r0, [r4, #0]
  408d7a:	f8c8 6008 	str.w	r6, [r8, #8]
  408d7e:	b33e      	cbz	r6, 408dd0 <__ssprint_r+0xf0>
  408d80:	687e      	ldr	r6, [r7, #4]
  408d82:	463b      	mov	r3, r7
  408d84:	3708      	adds	r7, #8
  408d86:	2e00      	cmp	r6, #0
  408d88:	d0fa      	beq.n	408d80 <__ssprint_r+0xa0>
  408d8a:	42ae      	cmp	r6, r5
  408d8c:	f8d3 9000 	ldr.w	r9, [r3]
  408d90:	46ab      	mov	fp, r5
  408d92:	d2b2      	bcs.n	408cfa <__ssprint_r+0x1a>
  408d94:	4635      	mov	r5, r6
  408d96:	46b3      	mov	fp, r6
  408d98:	e7e2      	b.n	408d60 <__ssprint_r+0x80>
  408d9a:	4650      	mov	r0, sl
  408d9c:	f7ff fdb6 	bl	40890c <_realloc_r>
  408da0:	4603      	mov	r3, r0
  408da2:	2800      	cmp	r0, #0
  408da4:	d1d2      	bne.n	408d4c <__ssprint_r+0x6c>
  408da6:	6921      	ldr	r1, [r4, #16]
  408da8:	4650      	mov	r0, sl
  408daa:	f7fe fec1 	bl	407b30 <_free_r>
  408dae:	230c      	movs	r3, #12
  408db0:	f8ca 3000 	str.w	r3, [sl]
  408db4:	89a3      	ldrh	r3, [r4, #12]
  408db6:	2200      	movs	r2, #0
  408db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408dbc:	f04f 30ff 	mov.w	r0, #4294967295
  408dc0:	81a3      	strh	r3, [r4, #12]
  408dc2:	f8c8 2008 	str.w	r2, [r8, #8]
  408dc6:	f8c8 2004 	str.w	r2, [r8, #4]
  408dca:	b003      	add	sp, #12
  408dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408dd0:	2000      	movs	r0, #0
  408dd2:	f8c8 0004 	str.w	r0, [r8, #4]
  408dd6:	b003      	add	sp, #12
  408dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408ddc <__swbuf_r>:
  408ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408dde:	460d      	mov	r5, r1
  408de0:	4614      	mov	r4, r2
  408de2:	4606      	mov	r6, r0
  408de4:	b110      	cbz	r0, 408dec <__swbuf_r+0x10>
  408de6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408de8:	2b00      	cmp	r3, #0
  408dea:	d04b      	beq.n	408e84 <__swbuf_r+0xa8>
  408dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408df0:	69a3      	ldr	r3, [r4, #24]
  408df2:	60a3      	str	r3, [r4, #8]
  408df4:	b291      	uxth	r1, r2
  408df6:	0708      	lsls	r0, r1, #28
  408df8:	d539      	bpl.n	408e6e <__swbuf_r+0x92>
  408dfa:	6923      	ldr	r3, [r4, #16]
  408dfc:	2b00      	cmp	r3, #0
  408dfe:	d036      	beq.n	408e6e <__swbuf_r+0x92>
  408e00:	b2ed      	uxtb	r5, r5
  408e02:	0489      	lsls	r1, r1, #18
  408e04:	462f      	mov	r7, r5
  408e06:	d515      	bpl.n	408e34 <__swbuf_r+0x58>
  408e08:	6822      	ldr	r2, [r4, #0]
  408e0a:	6961      	ldr	r1, [r4, #20]
  408e0c:	1ad3      	subs	r3, r2, r3
  408e0e:	428b      	cmp	r3, r1
  408e10:	da1c      	bge.n	408e4c <__swbuf_r+0x70>
  408e12:	3301      	adds	r3, #1
  408e14:	68a1      	ldr	r1, [r4, #8]
  408e16:	1c50      	adds	r0, r2, #1
  408e18:	3901      	subs	r1, #1
  408e1a:	60a1      	str	r1, [r4, #8]
  408e1c:	6020      	str	r0, [r4, #0]
  408e1e:	7015      	strb	r5, [r2, #0]
  408e20:	6962      	ldr	r2, [r4, #20]
  408e22:	429a      	cmp	r2, r3
  408e24:	d01a      	beq.n	408e5c <__swbuf_r+0x80>
  408e26:	89a3      	ldrh	r3, [r4, #12]
  408e28:	07db      	lsls	r3, r3, #31
  408e2a:	d501      	bpl.n	408e30 <__swbuf_r+0x54>
  408e2c:	2d0a      	cmp	r5, #10
  408e2e:	d015      	beq.n	408e5c <__swbuf_r+0x80>
  408e30:	4638      	mov	r0, r7
  408e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408e34:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408e36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408e3a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408e3e:	81a2      	strh	r2, [r4, #12]
  408e40:	6822      	ldr	r2, [r4, #0]
  408e42:	6661      	str	r1, [r4, #100]	; 0x64
  408e44:	6961      	ldr	r1, [r4, #20]
  408e46:	1ad3      	subs	r3, r2, r3
  408e48:	428b      	cmp	r3, r1
  408e4a:	dbe2      	blt.n	408e12 <__swbuf_r+0x36>
  408e4c:	4621      	mov	r1, r4
  408e4e:	4630      	mov	r0, r6
  408e50:	f7fe fcf0 	bl	407834 <_fflush_r>
  408e54:	b940      	cbnz	r0, 408e68 <__swbuf_r+0x8c>
  408e56:	6822      	ldr	r2, [r4, #0]
  408e58:	2301      	movs	r3, #1
  408e5a:	e7db      	b.n	408e14 <__swbuf_r+0x38>
  408e5c:	4621      	mov	r1, r4
  408e5e:	4630      	mov	r0, r6
  408e60:	f7fe fce8 	bl	407834 <_fflush_r>
  408e64:	2800      	cmp	r0, #0
  408e66:	d0e3      	beq.n	408e30 <__swbuf_r+0x54>
  408e68:	f04f 37ff 	mov.w	r7, #4294967295
  408e6c:	e7e0      	b.n	408e30 <__swbuf_r+0x54>
  408e6e:	4621      	mov	r1, r4
  408e70:	4630      	mov	r0, r6
  408e72:	f7fd fc0b 	bl	40668c <__swsetup_r>
  408e76:	2800      	cmp	r0, #0
  408e78:	d1f6      	bne.n	408e68 <__swbuf_r+0x8c>
  408e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408e7e:	6923      	ldr	r3, [r4, #16]
  408e80:	b291      	uxth	r1, r2
  408e82:	e7bd      	b.n	408e00 <__swbuf_r+0x24>
  408e84:	f7fe fd2e 	bl	4078e4 <__sinit>
  408e88:	e7b0      	b.n	408dec <__swbuf_r+0x10>
  408e8a:	bf00      	nop

00408e8c <_wcrtomb_r>:
  408e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  408e8e:	4606      	mov	r6, r0
  408e90:	b085      	sub	sp, #20
  408e92:	461f      	mov	r7, r3
  408e94:	b189      	cbz	r1, 408eba <_wcrtomb_r+0x2e>
  408e96:	4c10      	ldr	r4, [pc, #64]	; (408ed8 <_wcrtomb_r+0x4c>)
  408e98:	4d10      	ldr	r5, [pc, #64]	; (408edc <_wcrtomb_r+0x50>)
  408e9a:	6824      	ldr	r4, [r4, #0]
  408e9c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408e9e:	2c00      	cmp	r4, #0
  408ea0:	bf08      	it	eq
  408ea2:	462c      	moveq	r4, r5
  408ea4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408ea8:	47a0      	blx	r4
  408eaa:	1c43      	adds	r3, r0, #1
  408eac:	d103      	bne.n	408eb6 <_wcrtomb_r+0x2a>
  408eae:	2200      	movs	r2, #0
  408eb0:	238a      	movs	r3, #138	; 0x8a
  408eb2:	603a      	str	r2, [r7, #0]
  408eb4:	6033      	str	r3, [r6, #0]
  408eb6:	b005      	add	sp, #20
  408eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408eba:	460c      	mov	r4, r1
  408ebc:	4906      	ldr	r1, [pc, #24]	; (408ed8 <_wcrtomb_r+0x4c>)
  408ebe:	4a07      	ldr	r2, [pc, #28]	; (408edc <_wcrtomb_r+0x50>)
  408ec0:	6809      	ldr	r1, [r1, #0]
  408ec2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408ec4:	2900      	cmp	r1, #0
  408ec6:	bf08      	it	eq
  408ec8:	4611      	moveq	r1, r2
  408eca:	4622      	mov	r2, r4
  408ecc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408ed0:	a901      	add	r1, sp, #4
  408ed2:	47a0      	blx	r4
  408ed4:	e7e9      	b.n	408eaa <_wcrtomb_r+0x1e>
  408ed6:	bf00      	nop
  408ed8:	2040000c 	.word	0x2040000c
  408edc:	2040084c 	.word	0x2040084c

00408ee0 <__ascii_wctomb>:
  408ee0:	b121      	cbz	r1, 408eec <__ascii_wctomb+0xc>
  408ee2:	2aff      	cmp	r2, #255	; 0xff
  408ee4:	d804      	bhi.n	408ef0 <__ascii_wctomb+0x10>
  408ee6:	700a      	strb	r2, [r1, #0]
  408ee8:	2001      	movs	r0, #1
  408eea:	4770      	bx	lr
  408eec:	4608      	mov	r0, r1
  408eee:	4770      	bx	lr
  408ef0:	238a      	movs	r3, #138	; 0x8a
  408ef2:	6003      	str	r3, [r0, #0]
  408ef4:	f04f 30ff 	mov.w	r0, #4294967295
  408ef8:	4770      	bx	lr
  408efa:	bf00      	nop

00408efc <_write_r>:
  408efc:	b570      	push	{r4, r5, r6, lr}
  408efe:	460d      	mov	r5, r1
  408f00:	4c08      	ldr	r4, [pc, #32]	; (408f24 <_write_r+0x28>)
  408f02:	4611      	mov	r1, r2
  408f04:	4606      	mov	r6, r0
  408f06:	461a      	mov	r2, r3
  408f08:	4628      	mov	r0, r5
  408f0a:	2300      	movs	r3, #0
  408f0c:	6023      	str	r3, [r4, #0]
  408f0e:	f7f7 fa0f 	bl	400330 <_write>
  408f12:	1c43      	adds	r3, r0, #1
  408f14:	d000      	beq.n	408f18 <_write_r+0x1c>
  408f16:	bd70      	pop	{r4, r5, r6, pc}
  408f18:	6823      	ldr	r3, [r4, #0]
  408f1a:	2b00      	cmp	r3, #0
  408f1c:	d0fb      	beq.n	408f16 <_write_r+0x1a>
  408f1e:	6033      	str	r3, [r6, #0]
  408f20:	bd70      	pop	{r4, r5, r6, pc}
  408f22:	bf00      	nop
  408f24:	20400d0c 	.word	0x20400d0c

00408f28 <__register_exitproc>:
  408f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408f2c:	4d2c      	ldr	r5, [pc, #176]	; (408fe0 <__register_exitproc+0xb8>)
  408f2e:	4606      	mov	r6, r0
  408f30:	6828      	ldr	r0, [r5, #0]
  408f32:	4698      	mov	r8, r3
  408f34:	460f      	mov	r7, r1
  408f36:	4691      	mov	r9, r2
  408f38:	f7ff f8a2 	bl	408080 <__retarget_lock_acquire_recursive>
  408f3c:	4b29      	ldr	r3, [pc, #164]	; (408fe4 <__register_exitproc+0xbc>)
  408f3e:	681c      	ldr	r4, [r3, #0]
  408f40:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408f44:	2b00      	cmp	r3, #0
  408f46:	d03e      	beq.n	408fc6 <__register_exitproc+0x9e>
  408f48:	685a      	ldr	r2, [r3, #4]
  408f4a:	2a1f      	cmp	r2, #31
  408f4c:	dc1c      	bgt.n	408f88 <__register_exitproc+0x60>
  408f4e:	f102 0e01 	add.w	lr, r2, #1
  408f52:	b176      	cbz	r6, 408f72 <__register_exitproc+0x4a>
  408f54:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408f58:	2401      	movs	r4, #1
  408f5a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408f5e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408f62:	4094      	lsls	r4, r2
  408f64:	4320      	orrs	r0, r4
  408f66:	2e02      	cmp	r6, #2
  408f68:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408f6c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408f70:	d023      	beq.n	408fba <__register_exitproc+0x92>
  408f72:	3202      	adds	r2, #2
  408f74:	f8c3 e004 	str.w	lr, [r3, #4]
  408f78:	6828      	ldr	r0, [r5, #0]
  408f7a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408f7e:	f7ff f881 	bl	408084 <__retarget_lock_release_recursive>
  408f82:	2000      	movs	r0, #0
  408f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408f88:	4b17      	ldr	r3, [pc, #92]	; (408fe8 <__register_exitproc+0xc0>)
  408f8a:	b30b      	cbz	r3, 408fd0 <__register_exitproc+0xa8>
  408f8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408f90:	f7fa fd4e 	bl	403a30 <malloc>
  408f94:	4603      	mov	r3, r0
  408f96:	b1d8      	cbz	r0, 408fd0 <__register_exitproc+0xa8>
  408f98:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408f9c:	6002      	str	r2, [r0, #0]
  408f9e:	2100      	movs	r1, #0
  408fa0:	6041      	str	r1, [r0, #4]
  408fa2:	460a      	mov	r2, r1
  408fa4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408fa8:	f04f 0e01 	mov.w	lr, #1
  408fac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408fb0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408fb4:	2e00      	cmp	r6, #0
  408fb6:	d0dc      	beq.n	408f72 <__register_exitproc+0x4a>
  408fb8:	e7cc      	b.n	408f54 <__register_exitproc+0x2c>
  408fba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408fbe:	430c      	orrs	r4, r1
  408fc0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408fc4:	e7d5      	b.n	408f72 <__register_exitproc+0x4a>
  408fc6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408fca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408fce:	e7bb      	b.n	408f48 <__register_exitproc+0x20>
  408fd0:	6828      	ldr	r0, [r5, #0]
  408fd2:	f7ff f857 	bl	408084 <__retarget_lock_release_recursive>
  408fd6:	f04f 30ff 	mov.w	r0, #4294967295
  408fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408fde:	bf00      	nop
  408fe0:	20400848 	.word	0x20400848
  408fe4:	00409edc 	.word	0x00409edc
  408fe8:	00403a31 	.word	0x00403a31

00408fec <_calloc_r>:
  408fec:	b510      	push	{r4, lr}
  408fee:	fb02 f101 	mul.w	r1, r2, r1
  408ff2:	f7fa fd2d 	bl	403a50 <_malloc_r>
  408ff6:	4604      	mov	r4, r0
  408ff8:	b1d8      	cbz	r0, 409032 <_calloc_r+0x46>
  408ffa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408ffe:	f022 0203 	bic.w	r2, r2, #3
  409002:	3a04      	subs	r2, #4
  409004:	2a24      	cmp	r2, #36	; 0x24
  409006:	d818      	bhi.n	40903a <_calloc_r+0x4e>
  409008:	2a13      	cmp	r2, #19
  40900a:	d914      	bls.n	409036 <_calloc_r+0x4a>
  40900c:	2300      	movs	r3, #0
  40900e:	2a1b      	cmp	r2, #27
  409010:	6003      	str	r3, [r0, #0]
  409012:	6043      	str	r3, [r0, #4]
  409014:	d916      	bls.n	409044 <_calloc_r+0x58>
  409016:	2a24      	cmp	r2, #36	; 0x24
  409018:	6083      	str	r3, [r0, #8]
  40901a:	60c3      	str	r3, [r0, #12]
  40901c:	bf11      	iteee	ne
  40901e:	f100 0210 	addne.w	r2, r0, #16
  409022:	6103      	streq	r3, [r0, #16]
  409024:	6143      	streq	r3, [r0, #20]
  409026:	f100 0218 	addeq.w	r2, r0, #24
  40902a:	2300      	movs	r3, #0
  40902c:	6013      	str	r3, [r2, #0]
  40902e:	6053      	str	r3, [r2, #4]
  409030:	6093      	str	r3, [r2, #8]
  409032:	4620      	mov	r0, r4
  409034:	bd10      	pop	{r4, pc}
  409036:	4602      	mov	r2, r0
  409038:	e7f7      	b.n	40902a <_calloc_r+0x3e>
  40903a:	2100      	movs	r1, #0
  40903c:	f7fb f852 	bl	4040e4 <memset>
  409040:	4620      	mov	r0, r4
  409042:	bd10      	pop	{r4, pc}
  409044:	f100 0208 	add.w	r2, r0, #8
  409048:	e7ef      	b.n	40902a <_calloc_r+0x3e>
  40904a:	bf00      	nop

0040904c <_close_r>:
  40904c:	b538      	push	{r3, r4, r5, lr}
  40904e:	4c07      	ldr	r4, [pc, #28]	; (40906c <_close_r+0x20>)
  409050:	2300      	movs	r3, #0
  409052:	4605      	mov	r5, r0
  409054:	4608      	mov	r0, r1
  409056:	6023      	str	r3, [r4, #0]
  409058:	f7f7 fff6 	bl	401048 <_close>
  40905c:	1c43      	adds	r3, r0, #1
  40905e:	d000      	beq.n	409062 <_close_r+0x16>
  409060:	bd38      	pop	{r3, r4, r5, pc}
  409062:	6823      	ldr	r3, [r4, #0]
  409064:	2b00      	cmp	r3, #0
  409066:	d0fb      	beq.n	409060 <_close_r+0x14>
  409068:	602b      	str	r3, [r5, #0]
  40906a:	bd38      	pop	{r3, r4, r5, pc}
  40906c:	20400d0c 	.word	0x20400d0c

00409070 <_fclose_r>:
  409070:	b570      	push	{r4, r5, r6, lr}
  409072:	b159      	cbz	r1, 40908c <_fclose_r+0x1c>
  409074:	4605      	mov	r5, r0
  409076:	460c      	mov	r4, r1
  409078:	b110      	cbz	r0, 409080 <_fclose_r+0x10>
  40907a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40907c:	2b00      	cmp	r3, #0
  40907e:	d03c      	beq.n	4090fa <_fclose_r+0x8a>
  409080:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409082:	07d8      	lsls	r0, r3, #31
  409084:	d505      	bpl.n	409092 <_fclose_r+0x22>
  409086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40908a:	b92b      	cbnz	r3, 409098 <_fclose_r+0x28>
  40908c:	2600      	movs	r6, #0
  40908e:	4630      	mov	r0, r6
  409090:	bd70      	pop	{r4, r5, r6, pc}
  409092:	89a3      	ldrh	r3, [r4, #12]
  409094:	0599      	lsls	r1, r3, #22
  409096:	d53c      	bpl.n	409112 <_fclose_r+0xa2>
  409098:	4621      	mov	r1, r4
  40909a:	4628      	mov	r0, r5
  40909c:	f7fe fb2a 	bl	4076f4 <__sflush_r>
  4090a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4090a2:	4606      	mov	r6, r0
  4090a4:	b133      	cbz	r3, 4090b4 <_fclose_r+0x44>
  4090a6:	69e1      	ldr	r1, [r4, #28]
  4090a8:	4628      	mov	r0, r5
  4090aa:	4798      	blx	r3
  4090ac:	2800      	cmp	r0, #0
  4090ae:	bfb8      	it	lt
  4090b0:	f04f 36ff 	movlt.w	r6, #4294967295
  4090b4:	89a3      	ldrh	r3, [r4, #12]
  4090b6:	061a      	lsls	r2, r3, #24
  4090b8:	d422      	bmi.n	409100 <_fclose_r+0x90>
  4090ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4090bc:	b141      	cbz	r1, 4090d0 <_fclose_r+0x60>
  4090be:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4090c2:	4299      	cmp	r1, r3
  4090c4:	d002      	beq.n	4090cc <_fclose_r+0x5c>
  4090c6:	4628      	mov	r0, r5
  4090c8:	f7fe fd32 	bl	407b30 <_free_r>
  4090cc:	2300      	movs	r3, #0
  4090ce:	6323      	str	r3, [r4, #48]	; 0x30
  4090d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4090d2:	b121      	cbz	r1, 4090de <_fclose_r+0x6e>
  4090d4:	4628      	mov	r0, r5
  4090d6:	f7fe fd2b 	bl	407b30 <_free_r>
  4090da:	2300      	movs	r3, #0
  4090dc:	6463      	str	r3, [r4, #68]	; 0x44
  4090de:	f7fe fc2d 	bl	40793c <__sfp_lock_acquire>
  4090e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4090e4:	2200      	movs	r2, #0
  4090e6:	07db      	lsls	r3, r3, #31
  4090e8:	81a2      	strh	r2, [r4, #12]
  4090ea:	d50e      	bpl.n	40910a <_fclose_r+0x9a>
  4090ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4090ee:	f7fe ffc5 	bl	40807c <__retarget_lock_close_recursive>
  4090f2:	f7fe fc29 	bl	407948 <__sfp_lock_release>
  4090f6:	4630      	mov	r0, r6
  4090f8:	bd70      	pop	{r4, r5, r6, pc}
  4090fa:	f7fe fbf3 	bl	4078e4 <__sinit>
  4090fe:	e7bf      	b.n	409080 <_fclose_r+0x10>
  409100:	6921      	ldr	r1, [r4, #16]
  409102:	4628      	mov	r0, r5
  409104:	f7fe fd14 	bl	407b30 <_free_r>
  409108:	e7d7      	b.n	4090ba <_fclose_r+0x4a>
  40910a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40910c:	f7fe ffba 	bl	408084 <__retarget_lock_release_recursive>
  409110:	e7ec      	b.n	4090ec <_fclose_r+0x7c>
  409112:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409114:	f7fe ffb4 	bl	408080 <__retarget_lock_acquire_recursive>
  409118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40911c:	2b00      	cmp	r3, #0
  40911e:	d1bb      	bne.n	409098 <_fclose_r+0x28>
  409120:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409122:	f016 0601 	ands.w	r6, r6, #1
  409126:	d1b1      	bne.n	40908c <_fclose_r+0x1c>
  409128:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40912a:	f7fe ffab 	bl	408084 <__retarget_lock_release_recursive>
  40912e:	4630      	mov	r0, r6
  409130:	bd70      	pop	{r4, r5, r6, pc}
  409132:	bf00      	nop

00409134 <_fstat_r>:
  409134:	b538      	push	{r3, r4, r5, lr}
  409136:	460b      	mov	r3, r1
  409138:	4c07      	ldr	r4, [pc, #28]	; (409158 <_fstat_r+0x24>)
  40913a:	4605      	mov	r5, r0
  40913c:	4611      	mov	r1, r2
  40913e:	4618      	mov	r0, r3
  409140:	2300      	movs	r3, #0
  409142:	6023      	str	r3, [r4, #0]
  409144:	f7f7 ff83 	bl	40104e <_fstat>
  409148:	1c43      	adds	r3, r0, #1
  40914a:	d000      	beq.n	40914e <_fstat_r+0x1a>
  40914c:	bd38      	pop	{r3, r4, r5, pc}
  40914e:	6823      	ldr	r3, [r4, #0]
  409150:	2b00      	cmp	r3, #0
  409152:	d0fb      	beq.n	40914c <_fstat_r+0x18>
  409154:	602b      	str	r3, [r5, #0]
  409156:	bd38      	pop	{r3, r4, r5, pc}
  409158:	20400d0c 	.word	0x20400d0c

0040915c <_isatty_r>:
  40915c:	b538      	push	{r3, r4, r5, lr}
  40915e:	4c07      	ldr	r4, [pc, #28]	; (40917c <_isatty_r+0x20>)
  409160:	2300      	movs	r3, #0
  409162:	4605      	mov	r5, r0
  409164:	4608      	mov	r0, r1
  409166:	6023      	str	r3, [r4, #0]
  409168:	f7f7 ff76 	bl	401058 <_isatty>
  40916c:	1c43      	adds	r3, r0, #1
  40916e:	d000      	beq.n	409172 <_isatty_r+0x16>
  409170:	bd38      	pop	{r3, r4, r5, pc}
  409172:	6823      	ldr	r3, [r4, #0]
  409174:	2b00      	cmp	r3, #0
  409176:	d0fb      	beq.n	409170 <_isatty_r+0x14>
  409178:	602b      	str	r3, [r5, #0]
  40917a:	bd38      	pop	{r3, r4, r5, pc}
  40917c:	20400d0c 	.word	0x20400d0c

00409180 <_lseek_r>:
  409180:	b570      	push	{r4, r5, r6, lr}
  409182:	460d      	mov	r5, r1
  409184:	4c08      	ldr	r4, [pc, #32]	; (4091a8 <_lseek_r+0x28>)
  409186:	4611      	mov	r1, r2
  409188:	4606      	mov	r6, r0
  40918a:	461a      	mov	r2, r3
  40918c:	4628      	mov	r0, r5
  40918e:	2300      	movs	r3, #0
  409190:	6023      	str	r3, [r4, #0]
  409192:	f7f7 ff63 	bl	40105c <_lseek>
  409196:	1c43      	adds	r3, r0, #1
  409198:	d000      	beq.n	40919c <_lseek_r+0x1c>
  40919a:	bd70      	pop	{r4, r5, r6, pc}
  40919c:	6823      	ldr	r3, [r4, #0]
  40919e:	2b00      	cmp	r3, #0
  4091a0:	d0fb      	beq.n	40919a <_lseek_r+0x1a>
  4091a2:	6033      	str	r3, [r6, #0]
  4091a4:	bd70      	pop	{r4, r5, r6, pc}
  4091a6:	bf00      	nop
  4091a8:	20400d0c 	.word	0x20400d0c

004091ac <_read_r>:
  4091ac:	b570      	push	{r4, r5, r6, lr}
  4091ae:	460d      	mov	r5, r1
  4091b0:	4c08      	ldr	r4, [pc, #32]	; (4091d4 <_read_r+0x28>)
  4091b2:	4611      	mov	r1, r2
  4091b4:	4606      	mov	r6, r0
  4091b6:	461a      	mov	r2, r3
  4091b8:	4628      	mov	r0, r5
  4091ba:	2300      	movs	r3, #0
  4091bc:	6023      	str	r3, [r4, #0]
  4091be:	f7f7 f899 	bl	4002f4 <_read>
  4091c2:	1c43      	adds	r3, r0, #1
  4091c4:	d000      	beq.n	4091c8 <_read_r+0x1c>
  4091c6:	bd70      	pop	{r4, r5, r6, pc}
  4091c8:	6823      	ldr	r3, [r4, #0]
  4091ca:	2b00      	cmp	r3, #0
  4091cc:	d0fb      	beq.n	4091c6 <_read_r+0x1a>
  4091ce:	6033      	str	r3, [r6, #0]
  4091d0:	bd70      	pop	{r4, r5, r6, pc}
  4091d2:	bf00      	nop
  4091d4:	20400d0c 	.word	0x20400d0c

004091d8 <__aeabi_drsub>:
  4091d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4091dc:	e002      	b.n	4091e4 <__adddf3>
  4091de:	bf00      	nop

004091e0 <__aeabi_dsub>:
  4091e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004091e4 <__adddf3>:
  4091e4:	b530      	push	{r4, r5, lr}
  4091e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4091ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4091ee:	ea94 0f05 	teq	r4, r5
  4091f2:	bf08      	it	eq
  4091f4:	ea90 0f02 	teqeq	r0, r2
  4091f8:	bf1f      	itttt	ne
  4091fa:	ea54 0c00 	orrsne.w	ip, r4, r0
  4091fe:	ea55 0c02 	orrsne.w	ip, r5, r2
  409202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40920a:	f000 80e2 	beq.w	4093d2 <__adddf3+0x1ee>
  40920e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409216:	bfb8      	it	lt
  409218:	426d      	neglt	r5, r5
  40921a:	dd0c      	ble.n	409236 <__adddf3+0x52>
  40921c:	442c      	add	r4, r5
  40921e:	ea80 0202 	eor.w	r2, r0, r2
  409222:	ea81 0303 	eor.w	r3, r1, r3
  409226:	ea82 0000 	eor.w	r0, r2, r0
  40922a:	ea83 0101 	eor.w	r1, r3, r1
  40922e:	ea80 0202 	eor.w	r2, r0, r2
  409232:	ea81 0303 	eor.w	r3, r1, r3
  409236:	2d36      	cmp	r5, #54	; 0x36
  409238:	bf88      	it	hi
  40923a:	bd30      	pophi	{r4, r5, pc}
  40923c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409240:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40924c:	d002      	beq.n	409254 <__adddf3+0x70>
  40924e:	4240      	negs	r0, r0
  409250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409258:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40925c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409260:	d002      	beq.n	409268 <__adddf3+0x84>
  409262:	4252      	negs	r2, r2
  409264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409268:	ea94 0f05 	teq	r4, r5
  40926c:	f000 80a7 	beq.w	4093be <__adddf3+0x1da>
  409270:	f1a4 0401 	sub.w	r4, r4, #1
  409274:	f1d5 0e20 	rsbs	lr, r5, #32
  409278:	db0d      	blt.n	409296 <__adddf3+0xb2>
  40927a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40927e:	fa22 f205 	lsr.w	r2, r2, r5
  409282:	1880      	adds	r0, r0, r2
  409284:	f141 0100 	adc.w	r1, r1, #0
  409288:	fa03 f20e 	lsl.w	r2, r3, lr
  40928c:	1880      	adds	r0, r0, r2
  40928e:	fa43 f305 	asr.w	r3, r3, r5
  409292:	4159      	adcs	r1, r3
  409294:	e00e      	b.n	4092b4 <__adddf3+0xd0>
  409296:	f1a5 0520 	sub.w	r5, r5, #32
  40929a:	f10e 0e20 	add.w	lr, lr, #32
  40929e:	2a01      	cmp	r2, #1
  4092a0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4092a4:	bf28      	it	cs
  4092a6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4092aa:	fa43 f305 	asr.w	r3, r3, r5
  4092ae:	18c0      	adds	r0, r0, r3
  4092b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4092b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4092b8:	d507      	bpl.n	4092ca <__adddf3+0xe6>
  4092ba:	f04f 0e00 	mov.w	lr, #0
  4092be:	f1dc 0c00 	rsbs	ip, ip, #0
  4092c2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4092c6:	eb6e 0101 	sbc.w	r1, lr, r1
  4092ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4092ce:	d31b      	bcc.n	409308 <__adddf3+0x124>
  4092d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4092d4:	d30c      	bcc.n	4092f0 <__adddf3+0x10c>
  4092d6:	0849      	lsrs	r1, r1, #1
  4092d8:	ea5f 0030 	movs.w	r0, r0, rrx
  4092dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4092e0:	f104 0401 	add.w	r4, r4, #1
  4092e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4092e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4092ec:	f080 809a 	bcs.w	409424 <__adddf3+0x240>
  4092f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4092f4:	bf08      	it	eq
  4092f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4092fa:	f150 0000 	adcs.w	r0, r0, #0
  4092fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409302:	ea41 0105 	orr.w	r1, r1, r5
  409306:	bd30      	pop	{r4, r5, pc}
  409308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40930c:	4140      	adcs	r0, r0
  40930e:	eb41 0101 	adc.w	r1, r1, r1
  409312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409316:	f1a4 0401 	sub.w	r4, r4, #1
  40931a:	d1e9      	bne.n	4092f0 <__adddf3+0x10c>
  40931c:	f091 0f00 	teq	r1, #0
  409320:	bf04      	itt	eq
  409322:	4601      	moveq	r1, r0
  409324:	2000      	moveq	r0, #0
  409326:	fab1 f381 	clz	r3, r1
  40932a:	bf08      	it	eq
  40932c:	3320      	addeq	r3, #32
  40932e:	f1a3 030b 	sub.w	r3, r3, #11
  409332:	f1b3 0220 	subs.w	r2, r3, #32
  409336:	da0c      	bge.n	409352 <__adddf3+0x16e>
  409338:	320c      	adds	r2, #12
  40933a:	dd08      	ble.n	40934e <__adddf3+0x16a>
  40933c:	f102 0c14 	add.w	ip, r2, #20
  409340:	f1c2 020c 	rsb	r2, r2, #12
  409344:	fa01 f00c 	lsl.w	r0, r1, ip
  409348:	fa21 f102 	lsr.w	r1, r1, r2
  40934c:	e00c      	b.n	409368 <__adddf3+0x184>
  40934e:	f102 0214 	add.w	r2, r2, #20
  409352:	bfd8      	it	le
  409354:	f1c2 0c20 	rsble	ip, r2, #32
  409358:	fa01 f102 	lsl.w	r1, r1, r2
  40935c:	fa20 fc0c 	lsr.w	ip, r0, ip
  409360:	bfdc      	itt	le
  409362:	ea41 010c 	orrle.w	r1, r1, ip
  409366:	4090      	lslle	r0, r2
  409368:	1ae4      	subs	r4, r4, r3
  40936a:	bfa2      	ittt	ge
  40936c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  409370:	4329      	orrge	r1, r5
  409372:	bd30      	popge	{r4, r5, pc}
  409374:	ea6f 0404 	mvn.w	r4, r4
  409378:	3c1f      	subs	r4, #31
  40937a:	da1c      	bge.n	4093b6 <__adddf3+0x1d2>
  40937c:	340c      	adds	r4, #12
  40937e:	dc0e      	bgt.n	40939e <__adddf3+0x1ba>
  409380:	f104 0414 	add.w	r4, r4, #20
  409384:	f1c4 0220 	rsb	r2, r4, #32
  409388:	fa20 f004 	lsr.w	r0, r0, r4
  40938c:	fa01 f302 	lsl.w	r3, r1, r2
  409390:	ea40 0003 	orr.w	r0, r0, r3
  409394:	fa21 f304 	lsr.w	r3, r1, r4
  409398:	ea45 0103 	orr.w	r1, r5, r3
  40939c:	bd30      	pop	{r4, r5, pc}
  40939e:	f1c4 040c 	rsb	r4, r4, #12
  4093a2:	f1c4 0220 	rsb	r2, r4, #32
  4093a6:	fa20 f002 	lsr.w	r0, r0, r2
  4093aa:	fa01 f304 	lsl.w	r3, r1, r4
  4093ae:	ea40 0003 	orr.w	r0, r0, r3
  4093b2:	4629      	mov	r1, r5
  4093b4:	bd30      	pop	{r4, r5, pc}
  4093b6:	fa21 f004 	lsr.w	r0, r1, r4
  4093ba:	4629      	mov	r1, r5
  4093bc:	bd30      	pop	{r4, r5, pc}
  4093be:	f094 0f00 	teq	r4, #0
  4093c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4093c6:	bf06      	itte	eq
  4093c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4093cc:	3401      	addeq	r4, #1
  4093ce:	3d01      	subne	r5, #1
  4093d0:	e74e      	b.n	409270 <__adddf3+0x8c>
  4093d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4093d6:	bf18      	it	ne
  4093d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4093dc:	d029      	beq.n	409432 <__adddf3+0x24e>
  4093de:	ea94 0f05 	teq	r4, r5
  4093e2:	bf08      	it	eq
  4093e4:	ea90 0f02 	teqeq	r0, r2
  4093e8:	d005      	beq.n	4093f6 <__adddf3+0x212>
  4093ea:	ea54 0c00 	orrs.w	ip, r4, r0
  4093ee:	bf04      	itt	eq
  4093f0:	4619      	moveq	r1, r3
  4093f2:	4610      	moveq	r0, r2
  4093f4:	bd30      	pop	{r4, r5, pc}
  4093f6:	ea91 0f03 	teq	r1, r3
  4093fa:	bf1e      	ittt	ne
  4093fc:	2100      	movne	r1, #0
  4093fe:	2000      	movne	r0, #0
  409400:	bd30      	popne	{r4, r5, pc}
  409402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409406:	d105      	bne.n	409414 <__adddf3+0x230>
  409408:	0040      	lsls	r0, r0, #1
  40940a:	4149      	adcs	r1, r1
  40940c:	bf28      	it	cs
  40940e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409412:	bd30      	pop	{r4, r5, pc}
  409414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409418:	bf3c      	itt	cc
  40941a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40941e:	bd30      	popcc	{r4, r5, pc}
  409420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  409428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40942c:	f04f 0000 	mov.w	r0, #0
  409430:	bd30      	pop	{r4, r5, pc}
  409432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409436:	bf1a      	itte	ne
  409438:	4619      	movne	r1, r3
  40943a:	4610      	movne	r0, r2
  40943c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  409440:	bf1c      	itt	ne
  409442:	460b      	movne	r3, r1
  409444:	4602      	movne	r2, r0
  409446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40944a:	bf06      	itte	eq
  40944c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  409450:	ea91 0f03 	teqeq	r1, r3
  409454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  409458:	bd30      	pop	{r4, r5, pc}
  40945a:	bf00      	nop

0040945c <__aeabi_ui2d>:
  40945c:	f090 0f00 	teq	r0, #0
  409460:	bf04      	itt	eq
  409462:	2100      	moveq	r1, #0
  409464:	4770      	bxeq	lr
  409466:	b530      	push	{r4, r5, lr}
  409468:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40946c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409470:	f04f 0500 	mov.w	r5, #0
  409474:	f04f 0100 	mov.w	r1, #0
  409478:	e750      	b.n	40931c <__adddf3+0x138>
  40947a:	bf00      	nop

0040947c <__aeabi_i2d>:
  40947c:	f090 0f00 	teq	r0, #0
  409480:	bf04      	itt	eq
  409482:	2100      	moveq	r1, #0
  409484:	4770      	bxeq	lr
  409486:	b530      	push	{r4, r5, lr}
  409488:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40948c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  409494:	bf48      	it	mi
  409496:	4240      	negmi	r0, r0
  409498:	f04f 0100 	mov.w	r1, #0
  40949c:	e73e      	b.n	40931c <__adddf3+0x138>
  40949e:	bf00      	nop

004094a0 <__aeabi_f2d>:
  4094a0:	0042      	lsls	r2, r0, #1
  4094a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4094a6:	ea4f 0131 	mov.w	r1, r1, rrx
  4094aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4094ae:	bf1f      	itttt	ne
  4094b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4094b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4094b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4094bc:	4770      	bxne	lr
  4094be:	f092 0f00 	teq	r2, #0
  4094c2:	bf14      	ite	ne
  4094c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4094c8:	4770      	bxeq	lr
  4094ca:	b530      	push	{r4, r5, lr}
  4094cc:	f44f 7460 	mov.w	r4, #896	; 0x380
  4094d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4094d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4094d8:	e720      	b.n	40931c <__adddf3+0x138>
  4094da:	bf00      	nop

004094dc <__aeabi_ul2d>:
  4094dc:	ea50 0201 	orrs.w	r2, r0, r1
  4094e0:	bf08      	it	eq
  4094e2:	4770      	bxeq	lr
  4094e4:	b530      	push	{r4, r5, lr}
  4094e6:	f04f 0500 	mov.w	r5, #0
  4094ea:	e00a      	b.n	409502 <__aeabi_l2d+0x16>

004094ec <__aeabi_l2d>:
  4094ec:	ea50 0201 	orrs.w	r2, r0, r1
  4094f0:	bf08      	it	eq
  4094f2:	4770      	bxeq	lr
  4094f4:	b530      	push	{r4, r5, lr}
  4094f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4094fa:	d502      	bpl.n	409502 <__aeabi_l2d+0x16>
  4094fc:	4240      	negs	r0, r0
  4094fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409502:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409506:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40950a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40950e:	f43f aedc 	beq.w	4092ca <__adddf3+0xe6>
  409512:	f04f 0203 	mov.w	r2, #3
  409516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40951a:	bf18      	it	ne
  40951c:	3203      	addne	r2, #3
  40951e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409522:	bf18      	it	ne
  409524:	3203      	addne	r2, #3
  409526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40952a:	f1c2 0320 	rsb	r3, r2, #32
  40952e:	fa00 fc03 	lsl.w	ip, r0, r3
  409532:	fa20 f002 	lsr.w	r0, r0, r2
  409536:	fa01 fe03 	lsl.w	lr, r1, r3
  40953a:	ea40 000e 	orr.w	r0, r0, lr
  40953e:	fa21 f102 	lsr.w	r1, r1, r2
  409542:	4414      	add	r4, r2
  409544:	e6c1      	b.n	4092ca <__adddf3+0xe6>
  409546:	bf00      	nop

00409548 <__aeabi_dmul>:
  409548:	b570      	push	{r4, r5, r6, lr}
  40954a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40954e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409556:	bf1d      	ittte	ne
  409558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40955c:	ea94 0f0c 	teqne	r4, ip
  409560:	ea95 0f0c 	teqne	r5, ip
  409564:	f000 f8de 	bleq	409724 <__aeabi_dmul+0x1dc>
  409568:	442c      	add	r4, r5
  40956a:	ea81 0603 	eor.w	r6, r1, r3
  40956e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  409572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  409576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40957a:	bf18      	it	ne
  40957c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  409580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409588:	d038      	beq.n	4095fc <__aeabi_dmul+0xb4>
  40958a:	fba0 ce02 	umull	ip, lr, r0, r2
  40958e:	f04f 0500 	mov.w	r5, #0
  409592:	fbe1 e502 	umlal	lr, r5, r1, r2
  409596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40959a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40959e:	f04f 0600 	mov.w	r6, #0
  4095a2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4095a6:	f09c 0f00 	teq	ip, #0
  4095aa:	bf18      	it	ne
  4095ac:	f04e 0e01 	orrne.w	lr, lr, #1
  4095b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4095b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4095b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4095bc:	d204      	bcs.n	4095c8 <__aeabi_dmul+0x80>
  4095be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4095c2:	416d      	adcs	r5, r5
  4095c4:	eb46 0606 	adc.w	r6, r6, r6
  4095c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4095cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4095d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4095d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4095d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4095dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4095e0:	bf88      	it	hi
  4095e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4095e6:	d81e      	bhi.n	409626 <__aeabi_dmul+0xde>
  4095e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4095ec:	bf08      	it	eq
  4095ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4095f2:	f150 0000 	adcs.w	r0, r0, #0
  4095f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4095fa:	bd70      	pop	{r4, r5, r6, pc}
  4095fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409600:	ea46 0101 	orr.w	r1, r6, r1
  409604:	ea40 0002 	orr.w	r0, r0, r2
  409608:	ea81 0103 	eor.w	r1, r1, r3
  40960c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409610:	bfc2      	ittt	gt
  409612:	ebd4 050c 	rsbsgt	r5, r4, ip
  409616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40961a:	bd70      	popgt	{r4, r5, r6, pc}
  40961c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409620:	f04f 0e00 	mov.w	lr, #0
  409624:	3c01      	subs	r4, #1
  409626:	f300 80ab 	bgt.w	409780 <__aeabi_dmul+0x238>
  40962a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40962e:	bfde      	ittt	le
  409630:	2000      	movle	r0, #0
  409632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  409636:	bd70      	pople	{r4, r5, r6, pc}
  409638:	f1c4 0400 	rsb	r4, r4, #0
  40963c:	3c20      	subs	r4, #32
  40963e:	da35      	bge.n	4096ac <__aeabi_dmul+0x164>
  409640:	340c      	adds	r4, #12
  409642:	dc1b      	bgt.n	40967c <__aeabi_dmul+0x134>
  409644:	f104 0414 	add.w	r4, r4, #20
  409648:	f1c4 0520 	rsb	r5, r4, #32
  40964c:	fa00 f305 	lsl.w	r3, r0, r5
  409650:	fa20 f004 	lsr.w	r0, r0, r4
  409654:	fa01 f205 	lsl.w	r2, r1, r5
  409658:	ea40 0002 	orr.w	r0, r0, r2
  40965c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  409660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409668:	fa21 f604 	lsr.w	r6, r1, r4
  40966c:	eb42 0106 	adc.w	r1, r2, r6
  409670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409674:	bf08      	it	eq
  409676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40967a:	bd70      	pop	{r4, r5, r6, pc}
  40967c:	f1c4 040c 	rsb	r4, r4, #12
  409680:	f1c4 0520 	rsb	r5, r4, #32
  409684:	fa00 f304 	lsl.w	r3, r0, r4
  409688:	fa20 f005 	lsr.w	r0, r0, r5
  40968c:	fa01 f204 	lsl.w	r2, r1, r4
  409690:	ea40 0002 	orr.w	r0, r0, r2
  409694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40969c:	f141 0100 	adc.w	r1, r1, #0
  4096a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4096a4:	bf08      	it	eq
  4096a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4096aa:	bd70      	pop	{r4, r5, r6, pc}
  4096ac:	f1c4 0520 	rsb	r5, r4, #32
  4096b0:	fa00 f205 	lsl.w	r2, r0, r5
  4096b4:	ea4e 0e02 	orr.w	lr, lr, r2
  4096b8:	fa20 f304 	lsr.w	r3, r0, r4
  4096bc:	fa01 f205 	lsl.w	r2, r1, r5
  4096c0:	ea43 0302 	orr.w	r3, r3, r2
  4096c4:	fa21 f004 	lsr.w	r0, r1, r4
  4096c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4096cc:	fa21 f204 	lsr.w	r2, r1, r4
  4096d0:	ea20 0002 	bic.w	r0, r0, r2
  4096d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4096d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4096dc:	bf08      	it	eq
  4096de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4096e2:	bd70      	pop	{r4, r5, r6, pc}
  4096e4:	f094 0f00 	teq	r4, #0
  4096e8:	d10f      	bne.n	40970a <__aeabi_dmul+0x1c2>
  4096ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4096ee:	0040      	lsls	r0, r0, #1
  4096f0:	eb41 0101 	adc.w	r1, r1, r1
  4096f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4096f8:	bf08      	it	eq
  4096fa:	3c01      	subeq	r4, #1
  4096fc:	d0f7      	beq.n	4096ee <__aeabi_dmul+0x1a6>
  4096fe:	ea41 0106 	orr.w	r1, r1, r6
  409702:	f095 0f00 	teq	r5, #0
  409706:	bf18      	it	ne
  409708:	4770      	bxne	lr
  40970a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40970e:	0052      	lsls	r2, r2, #1
  409710:	eb43 0303 	adc.w	r3, r3, r3
  409714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409718:	bf08      	it	eq
  40971a:	3d01      	subeq	r5, #1
  40971c:	d0f7      	beq.n	40970e <__aeabi_dmul+0x1c6>
  40971e:	ea43 0306 	orr.w	r3, r3, r6
  409722:	4770      	bx	lr
  409724:	ea94 0f0c 	teq	r4, ip
  409728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40972c:	bf18      	it	ne
  40972e:	ea95 0f0c 	teqne	r5, ip
  409732:	d00c      	beq.n	40974e <__aeabi_dmul+0x206>
  409734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409738:	bf18      	it	ne
  40973a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40973e:	d1d1      	bne.n	4096e4 <__aeabi_dmul+0x19c>
  409740:	ea81 0103 	eor.w	r1, r1, r3
  409744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409748:	f04f 0000 	mov.w	r0, #0
  40974c:	bd70      	pop	{r4, r5, r6, pc}
  40974e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409752:	bf06      	itte	eq
  409754:	4610      	moveq	r0, r2
  409756:	4619      	moveq	r1, r3
  409758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40975c:	d019      	beq.n	409792 <__aeabi_dmul+0x24a>
  40975e:	ea94 0f0c 	teq	r4, ip
  409762:	d102      	bne.n	40976a <__aeabi_dmul+0x222>
  409764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  409768:	d113      	bne.n	409792 <__aeabi_dmul+0x24a>
  40976a:	ea95 0f0c 	teq	r5, ip
  40976e:	d105      	bne.n	40977c <__aeabi_dmul+0x234>
  409770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  409774:	bf1c      	itt	ne
  409776:	4610      	movne	r0, r2
  409778:	4619      	movne	r1, r3
  40977a:	d10a      	bne.n	409792 <__aeabi_dmul+0x24a>
  40977c:	ea81 0103 	eor.w	r1, r1, r3
  409780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40978c:	f04f 0000 	mov.w	r0, #0
  409790:	bd70      	pop	{r4, r5, r6, pc}
  409792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40979a:	bd70      	pop	{r4, r5, r6, pc}

0040979c <__aeabi_ddiv>:
  40979c:	b570      	push	{r4, r5, r6, lr}
  40979e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4097a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4097a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4097aa:	bf1d      	ittte	ne
  4097ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4097b0:	ea94 0f0c 	teqne	r4, ip
  4097b4:	ea95 0f0c 	teqne	r5, ip
  4097b8:	f000 f8a7 	bleq	40990a <__aeabi_ddiv+0x16e>
  4097bc:	eba4 0405 	sub.w	r4, r4, r5
  4097c0:	ea81 0e03 	eor.w	lr, r1, r3
  4097c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4097c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4097cc:	f000 8088 	beq.w	4098e0 <__aeabi_ddiv+0x144>
  4097d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4097d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4097d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4097dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4097e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4097e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4097e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4097ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4097f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4097f4:	429d      	cmp	r5, r3
  4097f6:	bf08      	it	eq
  4097f8:	4296      	cmpeq	r6, r2
  4097fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4097fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
  409802:	d202      	bcs.n	40980a <__aeabi_ddiv+0x6e>
  409804:	085b      	lsrs	r3, r3, #1
  409806:	ea4f 0232 	mov.w	r2, r2, rrx
  40980a:	1ab6      	subs	r6, r6, r2
  40980c:	eb65 0503 	sbc.w	r5, r5, r3
  409810:	085b      	lsrs	r3, r3, #1
  409812:	ea4f 0232 	mov.w	r2, r2, rrx
  409816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40981a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40981e:	ebb6 0e02 	subs.w	lr, r6, r2
  409822:	eb75 0e03 	sbcs.w	lr, r5, r3
  409826:	bf22      	ittt	cs
  409828:	1ab6      	subcs	r6, r6, r2
  40982a:	4675      	movcs	r5, lr
  40982c:	ea40 000c 	orrcs.w	r0, r0, ip
  409830:	085b      	lsrs	r3, r3, #1
  409832:	ea4f 0232 	mov.w	r2, r2, rrx
  409836:	ebb6 0e02 	subs.w	lr, r6, r2
  40983a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40983e:	bf22      	ittt	cs
  409840:	1ab6      	subcs	r6, r6, r2
  409842:	4675      	movcs	r5, lr
  409844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  409848:	085b      	lsrs	r3, r3, #1
  40984a:	ea4f 0232 	mov.w	r2, r2, rrx
  40984e:	ebb6 0e02 	subs.w	lr, r6, r2
  409852:	eb75 0e03 	sbcs.w	lr, r5, r3
  409856:	bf22      	ittt	cs
  409858:	1ab6      	subcs	r6, r6, r2
  40985a:	4675      	movcs	r5, lr
  40985c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  409860:	085b      	lsrs	r3, r3, #1
  409862:	ea4f 0232 	mov.w	r2, r2, rrx
  409866:	ebb6 0e02 	subs.w	lr, r6, r2
  40986a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40986e:	bf22      	ittt	cs
  409870:	1ab6      	subcs	r6, r6, r2
  409872:	4675      	movcs	r5, lr
  409874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  409878:	ea55 0e06 	orrs.w	lr, r5, r6
  40987c:	d018      	beq.n	4098b0 <__aeabi_ddiv+0x114>
  40987e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  409882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  409886:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40988a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40988e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  409892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  409896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40989a:	d1c0      	bne.n	40981e <__aeabi_ddiv+0x82>
  40989c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4098a0:	d10b      	bne.n	4098ba <__aeabi_ddiv+0x11e>
  4098a2:	ea41 0100 	orr.w	r1, r1, r0
  4098a6:	f04f 0000 	mov.w	r0, #0
  4098aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4098ae:	e7b6      	b.n	40981e <__aeabi_ddiv+0x82>
  4098b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4098b4:	bf04      	itt	eq
  4098b6:	4301      	orreq	r1, r0
  4098b8:	2000      	moveq	r0, #0
  4098ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4098be:	bf88      	it	hi
  4098c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4098c4:	f63f aeaf 	bhi.w	409626 <__aeabi_dmul+0xde>
  4098c8:	ebb5 0c03 	subs.w	ip, r5, r3
  4098cc:	bf04      	itt	eq
  4098ce:	ebb6 0c02 	subseq.w	ip, r6, r2
  4098d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4098d6:	f150 0000 	adcs.w	r0, r0, #0
  4098da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4098de:	bd70      	pop	{r4, r5, r6, pc}
  4098e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4098e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4098e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4098ec:	bfc2      	ittt	gt
  4098ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  4098f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4098f6:	bd70      	popgt	{r4, r5, r6, pc}
  4098f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4098fc:	f04f 0e00 	mov.w	lr, #0
  409900:	3c01      	subs	r4, #1
  409902:	e690      	b.n	409626 <__aeabi_dmul+0xde>
  409904:	ea45 0e06 	orr.w	lr, r5, r6
  409908:	e68d      	b.n	409626 <__aeabi_dmul+0xde>
  40990a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40990e:	ea94 0f0c 	teq	r4, ip
  409912:	bf08      	it	eq
  409914:	ea95 0f0c 	teqeq	r5, ip
  409918:	f43f af3b 	beq.w	409792 <__aeabi_dmul+0x24a>
  40991c:	ea94 0f0c 	teq	r4, ip
  409920:	d10a      	bne.n	409938 <__aeabi_ddiv+0x19c>
  409922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409926:	f47f af34 	bne.w	409792 <__aeabi_dmul+0x24a>
  40992a:	ea95 0f0c 	teq	r5, ip
  40992e:	f47f af25 	bne.w	40977c <__aeabi_dmul+0x234>
  409932:	4610      	mov	r0, r2
  409934:	4619      	mov	r1, r3
  409936:	e72c      	b.n	409792 <__aeabi_dmul+0x24a>
  409938:	ea95 0f0c 	teq	r5, ip
  40993c:	d106      	bne.n	40994c <__aeabi_ddiv+0x1b0>
  40993e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409942:	f43f aefd 	beq.w	409740 <__aeabi_dmul+0x1f8>
  409946:	4610      	mov	r0, r2
  409948:	4619      	mov	r1, r3
  40994a:	e722      	b.n	409792 <__aeabi_dmul+0x24a>
  40994c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409950:	bf18      	it	ne
  409952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409956:	f47f aec5 	bne.w	4096e4 <__aeabi_dmul+0x19c>
  40995a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40995e:	f47f af0d 	bne.w	40977c <__aeabi_dmul+0x234>
  409962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  409966:	f47f aeeb 	bne.w	409740 <__aeabi_dmul+0x1f8>
  40996a:	e712      	b.n	409792 <__aeabi_dmul+0x24a>

0040996c <__gedf2>:
  40996c:	f04f 3cff 	mov.w	ip, #4294967295
  409970:	e006      	b.n	409980 <__cmpdf2+0x4>
  409972:	bf00      	nop

00409974 <__ledf2>:
  409974:	f04f 0c01 	mov.w	ip, #1
  409978:	e002      	b.n	409980 <__cmpdf2+0x4>
  40997a:	bf00      	nop

0040997c <__cmpdf2>:
  40997c:	f04f 0c01 	mov.w	ip, #1
  409980:	f84d cd04 	str.w	ip, [sp, #-4]!
  409984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40998c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409990:	bf18      	it	ne
  409992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409996:	d01b      	beq.n	4099d0 <__cmpdf2+0x54>
  409998:	b001      	add	sp, #4
  40999a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40999e:	bf0c      	ite	eq
  4099a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4099a4:	ea91 0f03 	teqne	r1, r3
  4099a8:	bf02      	ittt	eq
  4099aa:	ea90 0f02 	teqeq	r0, r2
  4099ae:	2000      	moveq	r0, #0
  4099b0:	4770      	bxeq	lr
  4099b2:	f110 0f00 	cmn.w	r0, #0
  4099b6:	ea91 0f03 	teq	r1, r3
  4099ba:	bf58      	it	pl
  4099bc:	4299      	cmppl	r1, r3
  4099be:	bf08      	it	eq
  4099c0:	4290      	cmpeq	r0, r2
  4099c2:	bf2c      	ite	cs
  4099c4:	17d8      	asrcs	r0, r3, #31
  4099c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4099ca:	f040 0001 	orr.w	r0, r0, #1
  4099ce:	4770      	bx	lr
  4099d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4099d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4099d8:	d102      	bne.n	4099e0 <__cmpdf2+0x64>
  4099da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4099de:	d107      	bne.n	4099f0 <__cmpdf2+0x74>
  4099e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4099e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4099e8:	d1d6      	bne.n	409998 <__cmpdf2+0x1c>
  4099ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4099ee:	d0d3      	beq.n	409998 <__cmpdf2+0x1c>
  4099f0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4099f4:	4770      	bx	lr
  4099f6:	bf00      	nop

004099f8 <__aeabi_cdrcmple>:
  4099f8:	4684      	mov	ip, r0
  4099fa:	4610      	mov	r0, r2
  4099fc:	4662      	mov	r2, ip
  4099fe:	468c      	mov	ip, r1
  409a00:	4619      	mov	r1, r3
  409a02:	4663      	mov	r3, ip
  409a04:	e000      	b.n	409a08 <__aeabi_cdcmpeq>
  409a06:	bf00      	nop

00409a08 <__aeabi_cdcmpeq>:
  409a08:	b501      	push	{r0, lr}
  409a0a:	f7ff ffb7 	bl	40997c <__cmpdf2>
  409a0e:	2800      	cmp	r0, #0
  409a10:	bf48      	it	mi
  409a12:	f110 0f00 	cmnmi.w	r0, #0
  409a16:	bd01      	pop	{r0, pc}

00409a18 <__aeabi_dcmpeq>:
  409a18:	f84d ed08 	str.w	lr, [sp, #-8]!
  409a1c:	f7ff fff4 	bl	409a08 <__aeabi_cdcmpeq>
  409a20:	bf0c      	ite	eq
  409a22:	2001      	moveq	r0, #1
  409a24:	2000      	movne	r0, #0
  409a26:	f85d fb08 	ldr.w	pc, [sp], #8
  409a2a:	bf00      	nop

00409a2c <__aeabi_dcmplt>:
  409a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  409a30:	f7ff ffea 	bl	409a08 <__aeabi_cdcmpeq>
  409a34:	bf34      	ite	cc
  409a36:	2001      	movcc	r0, #1
  409a38:	2000      	movcs	r0, #0
  409a3a:	f85d fb08 	ldr.w	pc, [sp], #8
  409a3e:	bf00      	nop

00409a40 <__aeabi_dcmple>:
  409a40:	f84d ed08 	str.w	lr, [sp, #-8]!
  409a44:	f7ff ffe0 	bl	409a08 <__aeabi_cdcmpeq>
  409a48:	bf94      	ite	ls
  409a4a:	2001      	movls	r0, #1
  409a4c:	2000      	movhi	r0, #0
  409a4e:	f85d fb08 	ldr.w	pc, [sp], #8
  409a52:	bf00      	nop

00409a54 <__aeabi_dcmpge>:
  409a54:	f84d ed08 	str.w	lr, [sp, #-8]!
  409a58:	f7ff ffce 	bl	4099f8 <__aeabi_cdrcmple>
  409a5c:	bf94      	ite	ls
  409a5e:	2001      	movls	r0, #1
  409a60:	2000      	movhi	r0, #0
  409a62:	f85d fb08 	ldr.w	pc, [sp], #8
  409a66:	bf00      	nop

00409a68 <__aeabi_dcmpgt>:
  409a68:	f84d ed08 	str.w	lr, [sp, #-8]!
  409a6c:	f7ff ffc4 	bl	4099f8 <__aeabi_cdrcmple>
  409a70:	bf34      	ite	cc
  409a72:	2001      	movcc	r0, #1
  409a74:	2000      	movcs	r0, #0
  409a76:	f85d fb08 	ldr.w	pc, [sp], #8
  409a7a:	bf00      	nop

00409a7c <__aeabi_dcmpun>:
  409a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409a84:	d102      	bne.n	409a8c <__aeabi_dcmpun+0x10>
  409a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409a8a:	d10a      	bne.n	409aa2 <__aeabi_dcmpun+0x26>
  409a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409a94:	d102      	bne.n	409a9c <__aeabi_dcmpun+0x20>
  409a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409a9a:	d102      	bne.n	409aa2 <__aeabi_dcmpun+0x26>
  409a9c:	f04f 0000 	mov.w	r0, #0
  409aa0:	4770      	bx	lr
  409aa2:	f04f 0001 	mov.w	r0, #1
  409aa6:	4770      	bx	lr

00409aa8 <__aeabi_d2iz>:
  409aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409ab0:	d215      	bcs.n	409ade <__aeabi_d2iz+0x36>
  409ab2:	d511      	bpl.n	409ad8 <__aeabi_d2iz+0x30>
  409ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409abc:	d912      	bls.n	409ae4 <__aeabi_d2iz+0x3c>
  409abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  409ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  409aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409ace:	fa23 f002 	lsr.w	r0, r3, r2
  409ad2:	bf18      	it	ne
  409ad4:	4240      	negne	r0, r0
  409ad6:	4770      	bx	lr
  409ad8:	f04f 0000 	mov.w	r0, #0
  409adc:	4770      	bx	lr
  409ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  409ae2:	d105      	bne.n	409af0 <__aeabi_d2iz+0x48>
  409ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409ae8:	bf08      	it	eq
  409aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409aee:	4770      	bx	lr
  409af0:	f04f 0000 	mov.w	r0, #0
  409af4:	4770      	bx	lr
  409af6:	bf00      	nop

00409af8 <__aeabi_uldivmod>:
  409af8:	b953      	cbnz	r3, 409b10 <__aeabi_uldivmod+0x18>
  409afa:	b94a      	cbnz	r2, 409b10 <__aeabi_uldivmod+0x18>
  409afc:	2900      	cmp	r1, #0
  409afe:	bf08      	it	eq
  409b00:	2800      	cmpeq	r0, #0
  409b02:	bf1c      	itt	ne
  409b04:	f04f 31ff 	movne.w	r1, #4294967295
  409b08:	f04f 30ff 	movne.w	r0, #4294967295
  409b0c:	f000 b97a 	b.w	409e04 <__aeabi_idiv0>
  409b10:	f1ad 0c08 	sub.w	ip, sp, #8
  409b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409b18:	f000 f806 	bl	409b28 <__udivmoddi4>
  409b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
  409b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409b24:	b004      	add	sp, #16
  409b26:	4770      	bx	lr

00409b28 <__udivmoddi4>:
  409b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409b2c:	468c      	mov	ip, r1
  409b2e:	460d      	mov	r5, r1
  409b30:	4604      	mov	r4, r0
  409b32:	9e08      	ldr	r6, [sp, #32]
  409b34:	2b00      	cmp	r3, #0
  409b36:	d151      	bne.n	409bdc <__udivmoddi4+0xb4>
  409b38:	428a      	cmp	r2, r1
  409b3a:	4617      	mov	r7, r2
  409b3c:	d96d      	bls.n	409c1a <__udivmoddi4+0xf2>
  409b3e:	fab2 fe82 	clz	lr, r2
  409b42:	f1be 0f00 	cmp.w	lr, #0
  409b46:	d00b      	beq.n	409b60 <__udivmoddi4+0x38>
  409b48:	f1ce 0c20 	rsb	ip, lr, #32
  409b4c:	fa01 f50e 	lsl.w	r5, r1, lr
  409b50:	fa20 fc0c 	lsr.w	ip, r0, ip
  409b54:	fa02 f70e 	lsl.w	r7, r2, lr
  409b58:	ea4c 0c05 	orr.w	ip, ip, r5
  409b5c:	fa00 f40e 	lsl.w	r4, r0, lr
  409b60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409b64:	0c25      	lsrs	r5, r4, #16
  409b66:	fbbc f8fa 	udiv	r8, ip, sl
  409b6a:	fa1f f987 	uxth.w	r9, r7
  409b6e:	fb0a cc18 	mls	ip, sl, r8, ip
  409b72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409b76:	fb08 f309 	mul.w	r3, r8, r9
  409b7a:	42ab      	cmp	r3, r5
  409b7c:	d90a      	bls.n	409b94 <__udivmoddi4+0x6c>
  409b7e:	19ed      	adds	r5, r5, r7
  409b80:	f108 32ff 	add.w	r2, r8, #4294967295
  409b84:	f080 8123 	bcs.w	409dce <__udivmoddi4+0x2a6>
  409b88:	42ab      	cmp	r3, r5
  409b8a:	f240 8120 	bls.w	409dce <__udivmoddi4+0x2a6>
  409b8e:	f1a8 0802 	sub.w	r8, r8, #2
  409b92:	443d      	add	r5, r7
  409b94:	1aed      	subs	r5, r5, r3
  409b96:	b2a4      	uxth	r4, r4
  409b98:	fbb5 f0fa 	udiv	r0, r5, sl
  409b9c:	fb0a 5510 	mls	r5, sl, r0, r5
  409ba0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409ba4:	fb00 f909 	mul.w	r9, r0, r9
  409ba8:	45a1      	cmp	r9, r4
  409baa:	d909      	bls.n	409bc0 <__udivmoddi4+0x98>
  409bac:	19e4      	adds	r4, r4, r7
  409bae:	f100 33ff 	add.w	r3, r0, #4294967295
  409bb2:	f080 810a 	bcs.w	409dca <__udivmoddi4+0x2a2>
  409bb6:	45a1      	cmp	r9, r4
  409bb8:	f240 8107 	bls.w	409dca <__udivmoddi4+0x2a2>
  409bbc:	3802      	subs	r0, #2
  409bbe:	443c      	add	r4, r7
  409bc0:	eba4 0409 	sub.w	r4, r4, r9
  409bc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409bc8:	2100      	movs	r1, #0
  409bca:	2e00      	cmp	r6, #0
  409bcc:	d061      	beq.n	409c92 <__udivmoddi4+0x16a>
  409bce:	fa24 f40e 	lsr.w	r4, r4, lr
  409bd2:	2300      	movs	r3, #0
  409bd4:	6034      	str	r4, [r6, #0]
  409bd6:	6073      	str	r3, [r6, #4]
  409bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409bdc:	428b      	cmp	r3, r1
  409bde:	d907      	bls.n	409bf0 <__udivmoddi4+0xc8>
  409be0:	2e00      	cmp	r6, #0
  409be2:	d054      	beq.n	409c8e <__udivmoddi4+0x166>
  409be4:	2100      	movs	r1, #0
  409be6:	e886 0021 	stmia.w	r6, {r0, r5}
  409bea:	4608      	mov	r0, r1
  409bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409bf0:	fab3 f183 	clz	r1, r3
  409bf4:	2900      	cmp	r1, #0
  409bf6:	f040 808e 	bne.w	409d16 <__udivmoddi4+0x1ee>
  409bfa:	42ab      	cmp	r3, r5
  409bfc:	d302      	bcc.n	409c04 <__udivmoddi4+0xdc>
  409bfe:	4282      	cmp	r2, r0
  409c00:	f200 80fa 	bhi.w	409df8 <__udivmoddi4+0x2d0>
  409c04:	1a84      	subs	r4, r0, r2
  409c06:	eb65 0503 	sbc.w	r5, r5, r3
  409c0a:	2001      	movs	r0, #1
  409c0c:	46ac      	mov	ip, r5
  409c0e:	2e00      	cmp	r6, #0
  409c10:	d03f      	beq.n	409c92 <__udivmoddi4+0x16a>
  409c12:	e886 1010 	stmia.w	r6, {r4, ip}
  409c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409c1a:	b912      	cbnz	r2, 409c22 <__udivmoddi4+0xfa>
  409c1c:	2701      	movs	r7, #1
  409c1e:	fbb7 f7f2 	udiv	r7, r7, r2
  409c22:	fab7 fe87 	clz	lr, r7
  409c26:	f1be 0f00 	cmp.w	lr, #0
  409c2a:	d134      	bne.n	409c96 <__udivmoddi4+0x16e>
  409c2c:	1beb      	subs	r3, r5, r7
  409c2e:	0c3a      	lsrs	r2, r7, #16
  409c30:	fa1f fc87 	uxth.w	ip, r7
  409c34:	2101      	movs	r1, #1
  409c36:	fbb3 f8f2 	udiv	r8, r3, r2
  409c3a:	0c25      	lsrs	r5, r4, #16
  409c3c:	fb02 3318 	mls	r3, r2, r8, r3
  409c40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409c44:	fb0c f308 	mul.w	r3, ip, r8
  409c48:	42ab      	cmp	r3, r5
  409c4a:	d907      	bls.n	409c5c <__udivmoddi4+0x134>
  409c4c:	19ed      	adds	r5, r5, r7
  409c4e:	f108 30ff 	add.w	r0, r8, #4294967295
  409c52:	d202      	bcs.n	409c5a <__udivmoddi4+0x132>
  409c54:	42ab      	cmp	r3, r5
  409c56:	f200 80d1 	bhi.w	409dfc <__udivmoddi4+0x2d4>
  409c5a:	4680      	mov	r8, r0
  409c5c:	1aed      	subs	r5, r5, r3
  409c5e:	b2a3      	uxth	r3, r4
  409c60:	fbb5 f0f2 	udiv	r0, r5, r2
  409c64:	fb02 5510 	mls	r5, r2, r0, r5
  409c68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409c6c:	fb0c fc00 	mul.w	ip, ip, r0
  409c70:	45a4      	cmp	ip, r4
  409c72:	d907      	bls.n	409c84 <__udivmoddi4+0x15c>
  409c74:	19e4      	adds	r4, r4, r7
  409c76:	f100 33ff 	add.w	r3, r0, #4294967295
  409c7a:	d202      	bcs.n	409c82 <__udivmoddi4+0x15a>
  409c7c:	45a4      	cmp	ip, r4
  409c7e:	f200 80b8 	bhi.w	409df2 <__udivmoddi4+0x2ca>
  409c82:	4618      	mov	r0, r3
  409c84:	eba4 040c 	sub.w	r4, r4, ip
  409c88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409c8c:	e79d      	b.n	409bca <__udivmoddi4+0xa2>
  409c8e:	4631      	mov	r1, r6
  409c90:	4630      	mov	r0, r6
  409c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409c96:	f1ce 0420 	rsb	r4, lr, #32
  409c9a:	fa05 f30e 	lsl.w	r3, r5, lr
  409c9e:	fa07 f70e 	lsl.w	r7, r7, lr
  409ca2:	fa20 f804 	lsr.w	r8, r0, r4
  409ca6:	0c3a      	lsrs	r2, r7, #16
  409ca8:	fa25 f404 	lsr.w	r4, r5, r4
  409cac:	ea48 0803 	orr.w	r8, r8, r3
  409cb0:	fbb4 f1f2 	udiv	r1, r4, r2
  409cb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409cb8:	fb02 4411 	mls	r4, r2, r1, r4
  409cbc:	fa1f fc87 	uxth.w	ip, r7
  409cc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409cc4:	fb01 f30c 	mul.w	r3, r1, ip
  409cc8:	42ab      	cmp	r3, r5
  409cca:	fa00 f40e 	lsl.w	r4, r0, lr
  409cce:	d909      	bls.n	409ce4 <__udivmoddi4+0x1bc>
  409cd0:	19ed      	adds	r5, r5, r7
  409cd2:	f101 30ff 	add.w	r0, r1, #4294967295
  409cd6:	f080 808a 	bcs.w	409dee <__udivmoddi4+0x2c6>
  409cda:	42ab      	cmp	r3, r5
  409cdc:	f240 8087 	bls.w	409dee <__udivmoddi4+0x2c6>
  409ce0:	3902      	subs	r1, #2
  409ce2:	443d      	add	r5, r7
  409ce4:	1aeb      	subs	r3, r5, r3
  409ce6:	fa1f f588 	uxth.w	r5, r8
  409cea:	fbb3 f0f2 	udiv	r0, r3, r2
  409cee:	fb02 3310 	mls	r3, r2, r0, r3
  409cf2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409cf6:	fb00 f30c 	mul.w	r3, r0, ip
  409cfa:	42ab      	cmp	r3, r5
  409cfc:	d907      	bls.n	409d0e <__udivmoddi4+0x1e6>
  409cfe:	19ed      	adds	r5, r5, r7
  409d00:	f100 38ff 	add.w	r8, r0, #4294967295
  409d04:	d26f      	bcs.n	409de6 <__udivmoddi4+0x2be>
  409d06:	42ab      	cmp	r3, r5
  409d08:	d96d      	bls.n	409de6 <__udivmoddi4+0x2be>
  409d0a:	3802      	subs	r0, #2
  409d0c:	443d      	add	r5, r7
  409d0e:	1aeb      	subs	r3, r5, r3
  409d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409d14:	e78f      	b.n	409c36 <__udivmoddi4+0x10e>
  409d16:	f1c1 0720 	rsb	r7, r1, #32
  409d1a:	fa22 f807 	lsr.w	r8, r2, r7
  409d1e:	408b      	lsls	r3, r1
  409d20:	fa05 f401 	lsl.w	r4, r5, r1
  409d24:	ea48 0303 	orr.w	r3, r8, r3
  409d28:	fa20 fe07 	lsr.w	lr, r0, r7
  409d2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409d30:	40fd      	lsrs	r5, r7
  409d32:	ea4e 0e04 	orr.w	lr, lr, r4
  409d36:	fbb5 f9fc 	udiv	r9, r5, ip
  409d3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409d3e:	fb0c 5519 	mls	r5, ip, r9, r5
  409d42:	fa1f f883 	uxth.w	r8, r3
  409d46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409d4a:	fb09 f408 	mul.w	r4, r9, r8
  409d4e:	42ac      	cmp	r4, r5
  409d50:	fa02 f201 	lsl.w	r2, r2, r1
  409d54:	fa00 fa01 	lsl.w	sl, r0, r1
  409d58:	d908      	bls.n	409d6c <__udivmoddi4+0x244>
  409d5a:	18ed      	adds	r5, r5, r3
  409d5c:	f109 30ff 	add.w	r0, r9, #4294967295
  409d60:	d243      	bcs.n	409dea <__udivmoddi4+0x2c2>
  409d62:	42ac      	cmp	r4, r5
  409d64:	d941      	bls.n	409dea <__udivmoddi4+0x2c2>
  409d66:	f1a9 0902 	sub.w	r9, r9, #2
  409d6a:	441d      	add	r5, r3
  409d6c:	1b2d      	subs	r5, r5, r4
  409d6e:	fa1f fe8e 	uxth.w	lr, lr
  409d72:	fbb5 f0fc 	udiv	r0, r5, ip
  409d76:	fb0c 5510 	mls	r5, ip, r0, r5
  409d7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409d7e:	fb00 f808 	mul.w	r8, r0, r8
  409d82:	45a0      	cmp	r8, r4
  409d84:	d907      	bls.n	409d96 <__udivmoddi4+0x26e>
  409d86:	18e4      	adds	r4, r4, r3
  409d88:	f100 35ff 	add.w	r5, r0, #4294967295
  409d8c:	d229      	bcs.n	409de2 <__udivmoddi4+0x2ba>
  409d8e:	45a0      	cmp	r8, r4
  409d90:	d927      	bls.n	409de2 <__udivmoddi4+0x2ba>
  409d92:	3802      	subs	r0, #2
  409d94:	441c      	add	r4, r3
  409d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  409d9a:	eba4 0408 	sub.w	r4, r4, r8
  409d9e:	fba0 8902 	umull	r8, r9, r0, r2
  409da2:	454c      	cmp	r4, r9
  409da4:	46c6      	mov	lr, r8
  409da6:	464d      	mov	r5, r9
  409da8:	d315      	bcc.n	409dd6 <__udivmoddi4+0x2ae>
  409daa:	d012      	beq.n	409dd2 <__udivmoddi4+0x2aa>
  409dac:	b156      	cbz	r6, 409dc4 <__udivmoddi4+0x29c>
  409dae:	ebba 030e 	subs.w	r3, sl, lr
  409db2:	eb64 0405 	sbc.w	r4, r4, r5
  409db6:	fa04 f707 	lsl.w	r7, r4, r7
  409dba:	40cb      	lsrs	r3, r1
  409dbc:	431f      	orrs	r7, r3
  409dbe:	40cc      	lsrs	r4, r1
  409dc0:	6037      	str	r7, [r6, #0]
  409dc2:	6074      	str	r4, [r6, #4]
  409dc4:	2100      	movs	r1, #0
  409dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409dca:	4618      	mov	r0, r3
  409dcc:	e6f8      	b.n	409bc0 <__udivmoddi4+0x98>
  409dce:	4690      	mov	r8, r2
  409dd0:	e6e0      	b.n	409b94 <__udivmoddi4+0x6c>
  409dd2:	45c2      	cmp	sl, r8
  409dd4:	d2ea      	bcs.n	409dac <__udivmoddi4+0x284>
  409dd6:	ebb8 0e02 	subs.w	lr, r8, r2
  409dda:	eb69 0503 	sbc.w	r5, r9, r3
  409dde:	3801      	subs	r0, #1
  409de0:	e7e4      	b.n	409dac <__udivmoddi4+0x284>
  409de2:	4628      	mov	r0, r5
  409de4:	e7d7      	b.n	409d96 <__udivmoddi4+0x26e>
  409de6:	4640      	mov	r0, r8
  409de8:	e791      	b.n	409d0e <__udivmoddi4+0x1e6>
  409dea:	4681      	mov	r9, r0
  409dec:	e7be      	b.n	409d6c <__udivmoddi4+0x244>
  409dee:	4601      	mov	r1, r0
  409df0:	e778      	b.n	409ce4 <__udivmoddi4+0x1bc>
  409df2:	3802      	subs	r0, #2
  409df4:	443c      	add	r4, r7
  409df6:	e745      	b.n	409c84 <__udivmoddi4+0x15c>
  409df8:	4608      	mov	r0, r1
  409dfa:	e708      	b.n	409c0e <__udivmoddi4+0xe6>
  409dfc:	f1a8 0802 	sub.w	r8, r8, #2
  409e00:	443d      	add	r5, r7
  409e02:	e72b      	b.n	409c5c <__udivmoddi4+0x134>

00409e04 <__aeabi_idiv0>:
  409e04:	4770      	bx	lr
  409e06:	bf00      	nop
  409e08:	454c4449 	.word	0x454c4449
  409e0c:	00000000 	.word	0x00000000
  409e10:	51726d54 	.word	0x51726d54
  409e14:	00000000 	.word	0x00000000
  409e18:	20726d54 	.word	0x20726d54
  409e1c:	00637653 	.word	0x00637653
  409e20:	00005441 	.word	0x00005441
  409e24:	4e2b5441 	.word	0x4e2b5441
  409e28:	50454d41 	.word	0x50454d41
  409e2c:	6f726465 	.word	0x6f726465
  409e30:	00000000 	.word	0x00000000
  409e34:	502b5441 	.word	0x502b5441
  409e38:	35354e49 	.word	0x35354e49
  409e3c:	00003535 	.word	0x00003535
  409e40:	00544c42 	.word	0x00544c42
  409e44:	53545542 	.word	0x53545542
  409e48:	00000000 	.word	0x00000000
  409e4c:	65756c42 	.word	0x65756c42
  409e50:	746f6f74 	.word	0x746f6f74
  409e54:	6e692068 	.word	0x6e692068
  409e58:	61697469 	.word	0x61697469
  409e5c:	697a696c 	.word	0x697a696c
  409e60:	0a20676e 	.word	0x0a20676e
  409e64:	00000000 	.word	0x00000000
  409e68:	666e6f43 	.word	0x666e6f43
  409e6c:	64206769 	.word	0x64206769
  409e70:	20656e6f 	.word	0x20656e6f
  409e74:	0000000a 	.word	0x0000000a
  409e78:	3b64253b 	.word	0x3b64253b
  409e7c:	00000000 	.word	0x00000000
  409e80:	000a6425 	.word	0x000a6425
  409e84:	686c6166 	.word	0x686c6166
  409e88:	6d652061 	.word	0x6d652061
  409e8c:	69726320 	.word	0x69726320
  409e90:	6f207261 	.word	0x6f207261
  409e94:	6d657320 	.word	0x6d657320
  409e98:	726f6661 	.word	0x726f6661
  409e9c:	0a41206f 	.word	0x0a41206f
  409ea0:	00000000 	.word	0x00000000
  409ea4:	686c6166 	.word	0x686c6166
  409ea8:	6d652061 	.word	0x6d652061
  409eac:	69726320 	.word	0x69726320
  409eb0:	6f207261 	.word	0x6f207261
  409eb4:	6d657320 	.word	0x6d657320
  409eb8:	726f6661 	.word	0x726f6661
  409ebc:	0a42206f 	.word	0x0a42206f
  409ec0:	00000000 	.word	0x00000000
  409ec4:	63617473 	.word	0x63617473
  409ec8:	766f206b 	.word	0x766f206b
  409ecc:	6c667265 	.word	0x6c667265
  409ed0:	2520776f 	.word	0x2520776f
  409ed4:	73252078 	.word	0x73252078
  409ed8:	00000a0d 	.word	0x00000a0d

00409edc <_global_impure_ptr>:
  409edc:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  409eec:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  409efc:	46454443 00000000 33323130 37363534     CDEF....01234567
  409f0c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409f1c:	0000296c 00000030                       l)..0...

00409f24 <blanks.7223>:
  409f24:	20202020 20202020 20202020 20202020                     

00409f34 <zeroes.7224>:
  409f34:	30303030 30303030 30303030 30303030     0000000000000000

00409f44 <blanks.7217>:
  409f44:	20202020 20202020 20202020 20202020                     

00409f54 <zeroes.7218>:
  409f54:	30303030 30303030 30303030 30303030     0000000000000000
  409f64:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409f74:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  409f84:	00000000                                ....

00409f88 <__mprec_bigtens>:
  409f88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409f98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409fa8:	7f73bf3c 75154fdd                       <.s..O.u

00409fb0 <__mprec_tens>:
  409fb0:	00000000 3ff00000 00000000 40240000     .......?......$@
  409fc0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409fd0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409fe0:	00000000 412e8480 00000000 416312d0     .......A......cA
  409ff0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40a000:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40a010:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40a020:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40a030:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40a040:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40a050:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40a060:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40a070:	79d99db4 44ea7843                       ...yCx.D

0040a078 <p05.6055>:
  40a078:	00000005 00000019 0000007d              ........}...

0040a084 <_ctype_>:
  40a084:	20202000 20202020 28282020 20282828     .         ((((( 
  40a094:	20202020 20202020 20202020 20202020                     
  40a0a4:	10108820 10101010 10101010 10101010      ...............
  40a0b4:	04040410 04040404 10040404 10101010     ................
  40a0c4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a0d4:	01010101 01010101 01010101 10101010     ................
  40a0e4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a0f4:	02020202 02020202 02020202 10101010     ................
  40a104:	00000020 00000000 00000000 00000000      ...............
	...

0040a188 <_init>:
  40a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a18a:	bf00      	nop
  40a18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a18e:	bc08      	pop	{r3}
  40a190:	469e      	mov	lr, r3
  40a192:	4770      	bx	lr

0040a194 <__init_array_start>:
  40a194:	00406755 	.word	0x00406755

0040a198 <__frame_dummy_init_array_entry>:
  40a198:	00400165                                e.@.

0040a19c <_fini>:
  40a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a19e:	bf00      	nop
  40a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a1a2:	bc08      	pop	{r3}
  40a1a4:	469e      	mov	lr, r3
  40a1a6:	4770      	bx	lr

0040a1a8 <__fini_array_start>:
  40a1a8:	00400141 	.word	0x00400141
