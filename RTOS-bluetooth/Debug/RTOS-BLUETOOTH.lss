
RTOS-BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a234  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a234  0040a234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  0040a23c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000358  204009b8  0040abf4  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400d10  0040af4c  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402d10  0040cf4c  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00022a42  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004592  00000000  00000000  00043481  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009d97  00000000  00000000  00047a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f58  00000000  00000000  000517aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010f0  00000000  00000000  00052702  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000229f7  00000000  00000000  000537f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012464  00000000  00000000  000761e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094a2a  00000000  00000000  0008864d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003898  00000000  00000000  0011d078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 2d 40 20 b9 0d 40 00 b7 0d 40 00 b7 0d 40 00     .-@ ..@...@...@.
  400010:	b7 0d 40 00 b7 0d 40 00 b7 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	91 11 40 00 b7 0d 40 00 00 00 00 00 31 12 40 00     ..@...@.....1.@.
  40003c:	99 12 40 00 b7 0d 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  40004c:	b7 0d 40 00 b7 0d 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  40005c:	b7 0d 40 00 b7 0d 40 00 00 00 00 00 a1 0a 40 00     ..@...@.......@.
  40006c:	b5 0a 40 00 c9 0a 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  40007c:	b7 0d 40 00 dd 0a 40 00 f1 0a 40 00 b7 0d 40 00     ..@...@...@...@.
  40008c:	b7 0d 40 00 b7 0d 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  40009c:	b7 0d 40 00 b7 0d 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  4000ac:	b7 0d 40 00 b7 0d 40 00 8d 07 40 00 b7 0d 40 00     ..@...@...@...@.
  4000bc:	b7 0d 40 00 b7 0d 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  4000cc:	b7 0d 40 00 00 00 00 00 b7 0d 40 00 00 00 00 00     ..@.......@.....
  4000dc:	b7 0d 40 00 a1 07 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  4000ec:	b7 0d 40 00 b7 0d 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  4000fc:	b7 0d 40 00 b7 0d 40 00 b7 0d 40 00 b7 0d 40 00     ..@...@...@...@.
  40010c:	b7 0d 40 00 b7 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b7 0d 40 00 b7 0d 40 00 b7 0d 40 00     ......@...@...@.
  40012c:	b7 0d 40 00 b7 0d 40 00 00 00 00 00 b7 0d 40 00     ..@...@.......@.
  40013c:	b7 0d 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	0040a23c 	.word	0x0040a23c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040a23c 	.word	0x0040a23c
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	0040a23c 	.word	0x0040a23c
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400f8d 	.word	0x00400f8d
  4001f8:	00400ba1 	.word	0x00400ba1
  4001fc:	00400bf5 	.word	0x00400bf5
  400200:	00400c05 	.word	0x00400c05
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400c15 	.word	0x00400c15
  400210:	00400b05 	.word	0x00400b05
  400214:	00400b3d 	.word	0x00400b3d
  400218:	00400e81 	.word	0x00400e81

0040021c <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  40021c:	2a00      	cmp	r2, #0
  40021e:	d054      	beq.n	4002ca <usart_serial_write_packet+0xae>
{
  400220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400224:	4692      	mov	sl, r2
  400226:	4606      	mov	r6, r0
  400228:	460f      	mov	r7, r1
  40022a:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40022c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4002e8 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  400230:	4d27      	ldr	r5, [pc, #156]	; (4002d0 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400232:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4002ec <usart_serial_write_packet+0xd0>
  400236:	e006      	b.n	400246 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400238:	4621      	mov	r1, r4
  40023a:	4640      	mov	r0, r8
  40023c:	47a8      	blx	r5
  40023e:	2800      	cmp	r0, #0
  400240:	d1fa      	bne.n	400238 <usart_serial_write_packet+0x1c>
	while (len) {
  400242:	45ba      	cmp	sl, r7
  400244:	d03e      	beq.n	4002c4 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400246:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  40024a:	4546      	cmp	r6, r8
  40024c:	d0f4      	beq.n	400238 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40024e:	454e      	cmp	r6, r9
  400250:	d016      	beq.n	400280 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400252:	4b20      	ldr	r3, [pc, #128]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400254:	429e      	cmp	r6, r3
  400256:	d019      	beq.n	40028c <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400258:	4b1f      	ldr	r3, [pc, #124]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40025a:	429e      	cmp	r6, r3
  40025c:	d01c      	beq.n	400298 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40025e:	4b1f      	ldr	r3, [pc, #124]	; (4002dc <usart_serial_write_packet+0xc0>)
  400260:	429e      	cmp	r6, r3
  400262:	d01f      	beq.n	4002a4 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400264:	4b1e      	ldr	r3, [pc, #120]	; (4002e0 <usart_serial_write_packet+0xc4>)
  400266:	429e      	cmp	r6, r3
  400268:	d024      	beq.n	4002b4 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40026a:	4b1e      	ldr	r3, [pc, #120]	; (4002e4 <usart_serial_write_packet+0xc8>)
  40026c:	429e      	cmp	r6, r3
  40026e:	d1e8      	bne.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400270:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4002f0 <usart_serial_write_packet+0xd4>
  400274:	4621      	mov	r1, r4
  400276:	481b      	ldr	r0, [pc, #108]	; (4002e4 <usart_serial_write_packet+0xc8>)
  400278:	47d8      	blx	fp
  40027a:	2800      	cmp	r0, #0
  40027c:	d1fa      	bne.n	400274 <usart_serial_write_packet+0x58>
  40027e:	e7e0      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400280:	4621      	mov	r1, r4
  400282:	4648      	mov	r0, r9
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_write_packet+0x64>
  40028a:	e7da      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40028c:	4621      	mov	r1, r4
  40028e:	4811      	ldr	r0, [pc, #68]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400290:	47a8      	blx	r5
  400292:	2800      	cmp	r0, #0
  400294:	d1fa      	bne.n	40028c <usart_serial_write_packet+0x70>
  400296:	e7d4      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400298:	4621      	mov	r1, r4
  40029a:	480f      	ldr	r0, [pc, #60]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40029c:	47a8      	blx	r5
  40029e:	2800      	cmp	r0, #0
  4002a0:	d1fa      	bne.n	400298 <usart_serial_write_packet+0x7c>
  4002a2:	e7ce      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002a4:	f8df b048 	ldr.w	fp, [pc, #72]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002a8:	4621      	mov	r1, r4
  4002aa:	480c      	ldr	r0, [pc, #48]	; (4002dc <usart_serial_write_packet+0xc0>)
  4002ac:	47d8      	blx	fp
  4002ae:	2800      	cmp	r0, #0
  4002b0:	d1fa      	bne.n	4002a8 <usart_serial_write_packet+0x8c>
  4002b2:	e7c6      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002b4:	f8df b038 	ldr.w	fp, [pc, #56]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002b8:	4621      	mov	r1, r4
  4002ba:	4809      	ldr	r0, [pc, #36]	; (4002e0 <usart_serial_write_packet+0xc4>)
  4002bc:	47d8      	blx	fp
  4002be:	2800      	cmp	r0, #0
  4002c0:	d1fa      	bne.n	4002b8 <usart_serial_write_packet+0x9c>
  4002c2:	e7be      	b.n	400242 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4002c4:	2000      	movs	r0, #0
  4002c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002ca:	2000      	movs	r0, #0
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	00400c79 	.word	0x00400c79
  4002d4:	400e1a00 	.word	0x400e1a00
  4002d8:	400e1c00 	.word	0x400e1c00
  4002dc:	40024000 	.word	0x40024000
  4002e0:	40028000 	.word	0x40028000
  4002e4:	4002c000 	.word	0x4002c000
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	400e0a00 	.word	0x400e0a00
  4002f0:	00400d89 	.word	0x00400d89

004002f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4002f8:	b980      	cbnz	r0, 40031c <_read+0x28>
  4002fa:	460c      	mov	r4, r1
  4002fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4002fe:	2a00      	cmp	r2, #0
  400300:	dd0f      	ble.n	400322 <_read+0x2e>
  400302:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400304:	4e08      	ldr	r6, [pc, #32]	; (400328 <_read+0x34>)
  400306:	4d09      	ldr	r5, [pc, #36]	; (40032c <_read+0x38>)
  400308:	6830      	ldr	r0, [r6, #0]
  40030a:	4621      	mov	r1, r4
  40030c:	682b      	ldr	r3, [r5, #0]
  40030e:	4798      	blx	r3
		ptr++;
  400310:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400312:	42bc      	cmp	r4, r7
  400314:	d1f8      	bne.n	400308 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400316:	4640      	mov	r0, r8
  400318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40031c:	f04f 38ff 	mov.w	r8, #4294967295
  400320:	e7f9      	b.n	400316 <_read+0x22>
	for (; len > 0; --len) {
  400322:	4680      	mov	r8, r0
  400324:	e7f7      	b.n	400316 <_read+0x22>
  400326:	bf00      	nop
  400328:	20400bdc 	.word	0x20400bdc
  40032c:	20400bd4 	.word	0x20400bd4

00400330 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400330:	3801      	subs	r0, #1
  400332:	2802      	cmp	r0, #2
  400334:	d815      	bhi.n	400362 <_write+0x32>
{
  400336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40033a:	460e      	mov	r6, r1
  40033c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40033e:	b19a      	cbz	r2, 400368 <_write+0x38>
  400340:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400342:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40037c <_write+0x4c>
  400346:	4f0c      	ldr	r7, [pc, #48]	; (400378 <_write+0x48>)
  400348:	f8d8 0000 	ldr.w	r0, [r8]
  40034c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400350:	683b      	ldr	r3, [r7, #0]
  400352:	4798      	blx	r3
  400354:	2800      	cmp	r0, #0
  400356:	db0a      	blt.n	40036e <_write+0x3e>
  400358:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40035a:	3c01      	subs	r4, #1
  40035c:	d1f4      	bne.n	400348 <_write+0x18>
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
  400366:	4770      	bx	lr
	for (; len != 0; --len) {
  400368:	4610      	mov	r0, r2
  40036a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40036e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400376:	bf00      	nop
  400378:	20400bd8 	.word	0x20400bd8
  40037c:	20400bdc 	.word	0x20400bdc

00400380 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400386:	4b5c      	ldr	r3, [pc, #368]	; (4004f8 <board_init+0x178>)
  400388:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40038e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400392:	4b5a      	ldr	r3, [pc, #360]	; (4004fc <board_init+0x17c>)
  400394:	2200      	movs	r2, #0
  400396:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40039a:	695a      	ldr	r2, [r3, #20]
  40039c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4003a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4003a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003a6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4003aa:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4003ae:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4003b2:	f007 0007 	and.w	r0, r7, #7
  4003b6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4003b8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4003bc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4003c0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4003c4:	f3bf 8f4f 	dsb	sy
  4003c8:	f04f 34ff 	mov.w	r4, #4294967295
  4003cc:	fa04 fc00 	lsl.w	ip, r4, r0
  4003d0:	fa06 f000 	lsl.w	r0, r6, r0
  4003d4:	fa04 f40e 	lsl.w	r4, r4, lr
  4003d8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4003dc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4003de:	463a      	mov	r2, r7
  4003e0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4003e2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4003e6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4003ea:	3a01      	subs	r2, #1
  4003ec:	4423      	add	r3, r4
  4003ee:	f1b2 3fff 	cmp.w	r2, #4294967295
  4003f2:	d1f6      	bne.n	4003e2 <board_init+0x62>
        } while(sets--);
  4003f4:	3e01      	subs	r6, #1
  4003f6:	4460      	add	r0, ip
  4003f8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4003fc:	d1ef      	bne.n	4003de <board_init+0x5e>
  4003fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400402:	4b3e      	ldr	r3, [pc, #248]	; (4004fc <board_init+0x17c>)
  400404:	695a      	ldr	r2, [r3, #20]
  400406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40040a:	615a      	str	r2, [r3, #20]
  40040c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400410:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400414:	4a3a      	ldr	r2, [pc, #232]	; (400500 <board_init+0x180>)
  400416:	493b      	ldr	r1, [pc, #236]	; (400504 <board_init+0x184>)
  400418:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40041a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40041e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400424:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400428:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40042c:	f022 0201 	bic.w	r2, r2, #1
  400430:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400434:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400438:	f022 0201 	bic.w	r2, r2, #1
  40043c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400444:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400448:	200a      	movs	r0, #10
  40044a:	4c2f      	ldr	r4, [pc, #188]	; (400508 <board_init+0x188>)
  40044c:	47a0      	blx	r4
  40044e:	200b      	movs	r0, #11
  400450:	47a0      	blx	r4
  400452:	200c      	movs	r0, #12
  400454:	47a0      	blx	r4
  400456:	2010      	movs	r0, #16
  400458:	47a0      	blx	r4
  40045a:	2011      	movs	r0, #17
  40045c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40045e:	4b2b      	ldr	r3, [pc, #172]	; (40050c <board_init+0x18c>)
  400460:	f44f 7280 	mov.w	r2, #256	; 0x100
  400464:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40046a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40046c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400470:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400474:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400476:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40047a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40047c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400480:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400482:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400488:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40048a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40048e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400490:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400492:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400496:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400498:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40049c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4004a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4004a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004c0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004c4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004c6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4004c8:	4a11      	ldr	r2, [pc, #68]	; (400510 <board_init+0x190>)
  4004ca:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004ce:	f043 0310 	orr.w	r3, r3, #16
  4004d2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <board_init+0x194>)
  4004d8:	2210      	movs	r2, #16
  4004da:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004e0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4004e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004ea:	4311      	orrs	r1, r2
  4004ec:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4004ee:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004f0:	4311      	orrs	r1, r2
  4004f2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f4:	605a      	str	r2, [r3, #4]
  4004f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004f8:	400e1850 	.word	0x400e1850
  4004fc:	e000ed00 	.word	0xe000ed00
  400500:	400e0c00 	.word	0x400e0c00
  400504:	5a00080c 	.word	0x5a00080c
  400508:	00400c25 	.word	0x00400c25
  40050c:	400e1200 	.word	0x400e1200
  400510:	40088000 	.word	0x40088000
  400514:	400e1000 	.word	0x400e1000

00400518 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400518:	b570      	push	{r4, r5, r6, lr}
  40051a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40051c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40051e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400520:	4013      	ands	r3, r2
  400522:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400524:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400526:	4e1c      	ldr	r6, [pc, #112]	; (400598 <afec_process_callback+0x80>)
  400528:	4d1c      	ldr	r5, [pc, #112]	; (40059c <afec_process_callback+0x84>)
  40052a:	42a8      	cmp	r0, r5
  40052c:	bf14      	ite	ne
  40052e:	2000      	movne	r0, #0
  400530:	2001      	moveq	r0, #1
  400532:	0105      	lsls	r5, r0, #4
  400534:	e00b      	b.n	40054e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400536:	2c0e      	cmp	r4, #14
  400538:	d81e      	bhi.n	400578 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40053a:	9a01      	ldr	r2, [sp, #4]
  40053c:	f104 010c 	add.w	r1, r4, #12
  400540:	2301      	movs	r3, #1
  400542:	408b      	lsls	r3, r1
  400544:	4213      	tst	r3, r2
  400546:	d110      	bne.n	40056a <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400548:	3401      	adds	r4, #1
  40054a:	2c10      	cmp	r4, #16
  40054c:	d022      	beq.n	400594 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40054e:	2c0b      	cmp	r4, #11
  400550:	d8f1      	bhi.n	400536 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400552:	9a01      	ldr	r2, [sp, #4]
  400554:	2301      	movs	r3, #1
  400556:	40a3      	lsls	r3, r4
  400558:	4213      	tst	r3, r2
  40055a:	d0f5      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40055c:	192b      	adds	r3, r5, r4
  40055e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400562:	2b00      	cmp	r3, #0
  400564:	d0f0      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400566:	4798      	blx	r3
  400568:	e7ee      	b.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40056a:	192b      	adds	r3, r5, r4
  40056c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400570:	2b00      	cmp	r3, #0
  400572:	d0e9      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400574:	4798      	blx	r3
  400576:	e7e7      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400578:	9a01      	ldr	r2, [sp, #4]
  40057a:	f104 010f 	add.w	r1, r4, #15
  40057e:	2301      	movs	r3, #1
  400580:	408b      	lsls	r3, r1
  400582:	4213      	tst	r3, r2
  400584:	d0e0      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400586:	192b      	adds	r3, r5, r4
  400588:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40058c:	2b00      	cmp	r3, #0
  40058e:	d0db      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400590:	4798      	blx	r3
  400592:	e7d9      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400594:	b002      	add	sp, #8
  400596:	bd70      	pop	{r4, r5, r6, pc}
  400598:	20400be0 	.word	0x20400be0
  40059c:	40064000 	.word	0x40064000

004005a0 <afec_ch_set_config>:
{
  4005a0:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4005a2:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4005a4:	2301      	movs	r3, #1
  4005a6:	408b      	lsls	r3, r1
  4005a8:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4005ac:	7815      	ldrb	r5, [r2, #0]
  4005ae:	2d00      	cmp	r5, #0
  4005b0:	bf08      	it	eq
  4005b2:	2300      	moveq	r3, #0
  4005b4:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4005b6:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4005b8:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4005ba:	004b      	lsls	r3, r1, #1
  4005bc:	2103      	movs	r1, #3
  4005be:	4099      	lsls	r1, r3
  4005c0:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4005c4:	7851      	ldrb	r1, [r2, #1]
  4005c6:	4099      	lsls	r1, r3
  4005c8:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4005ca:	6541      	str	r1, [r0, #84]	; 0x54
}
  4005cc:	bc30      	pop	{r4, r5}
  4005ce:	4770      	bx	lr

004005d0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4005d0:	784b      	ldrb	r3, [r1, #1]
  4005d2:	780a      	ldrb	r2, [r1, #0]
  4005d4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4005d6:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4005d8:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4005da:	884b      	ldrh	r3, [r1, #2]
  4005dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4005e0:	6743      	str	r3, [r0, #116]	; 0x74
  4005e2:	4770      	bx	lr

004005e4 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4005e4:	2200      	movs	r2, #0
  4005e6:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4005e8:	4b08      	ldr	r3, [pc, #32]	; (40060c <afec_get_config_defaults+0x28>)
  4005ea:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4005ec:	4b08      	ldr	r3, [pc, #32]	; (400610 <afec_get_config_defaults+0x2c>)
  4005ee:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4005f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4005f4:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4005f6:	2302      	movs	r3, #2
  4005f8:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4005fa:	2301      	movs	r3, #1
  4005fc:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4005fe:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400600:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400602:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400604:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400606:	7583      	strb	r3, [r0, #22]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	11e1a300 	.word	0x11e1a300
  400610:	005b8d80 	.word	0x005b8d80

00400614 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400614:	2300      	movs	r3, #0
  400616:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400618:	2301      	movs	r3, #1
  40061a:	7043      	strb	r3, [r0, #1]
  40061c:	4770      	bx	lr

0040061e <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40061e:	2300      	movs	r3, #0
  400620:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400622:	2320      	movs	r3, #32
  400624:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400626:	23ff      	movs	r3, #255	; 0xff
  400628:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  40062a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40062e:	8083      	strh	r3, [r0, #4]
  400630:	4770      	bx	lr
	...

00400634 <afec_init>:
	return afec->AFEC_ISR;
  400634:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400636:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  40063a:	d001      	beq.n	400640 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40063c:	2019      	movs	r0, #25
  40063e:	4770      	bx	lr
{
  400640:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400642:	2301      	movs	r3, #1
  400644:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400646:	7ccb      	ldrb	r3, [r1, #19]
  400648:	2b00      	cmp	r3, #0
  40064a:	bf18      	it	ne
  40064c:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400650:	684b      	ldr	r3, [r1, #4]
  400652:	688c      	ldr	r4, [r1, #8]
  400654:	fbb3 f3f4 	udiv	r3, r3, r4
  400658:	3b01      	subs	r3, #1
  40065a:	021b      	lsls	r3, r3, #8
  40065c:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40065e:	68cc      	ldr	r4, [r1, #12]
  400660:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400664:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400666:	7c0c      	ldrb	r4, [r1, #16]
  400668:	0624      	lsls	r4, r4, #24
  40066a:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40066e:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400670:	7c4c      	ldrb	r4, [r1, #17]
  400672:	0724      	lsls	r4, r4, #28
  400674:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400678:	4323      	orrs	r3, r4
  40067a:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  40067c:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40067e:	7d0b      	ldrb	r3, [r1, #20]
  400680:	2b00      	cmp	r3, #0
  400682:	bf14      	ite	ne
  400684:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400688:	2300      	moveq	r3, #0
  40068a:	680a      	ldr	r2, [r1, #0]
  40068c:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40068e:	7d4a      	ldrb	r2, [r1, #21]
  400690:	2a00      	cmp	r2, #0
  400692:	bf14      	ite	ne
  400694:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400698:	2200      	moveq	r2, #0
			(config->resolution) |
  40069a:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40069c:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40069e:	7d8b      	ldrb	r3, [r1, #22]
  4006a0:	021b      	lsls	r3, r3, #8
  4006a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4006a6:	f043 030c 	orr.w	r3, r3, #12
  4006aa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4006ae:	4b0f      	ldr	r3, [pc, #60]	; (4006ec <afec_init+0xb8>)
  4006b0:	4298      	cmp	r0, r3
  4006b2:	d006      	beq.n	4006c2 <afec_init+0x8e>
	if(afec == AFEC1) {
  4006b4:	4b0e      	ldr	r3, [pc, #56]	; (4006f0 <afec_init+0xbc>)
  4006b6:	4298      	cmp	r0, r3
  4006b8:	d00d      	beq.n	4006d6 <afec_init+0xa2>
	return STATUS_OK;
  4006ba:	2000      	movs	r0, #0
}
  4006bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006c0:	4770      	bx	lr
  4006c2:	4b0c      	ldr	r3, [pc, #48]	; (4006f4 <afec_init+0xc0>)
  4006c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4006c8:	2200      	movs	r2, #0
  4006ca:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006ce:	428b      	cmp	r3, r1
  4006d0:	d1fb      	bne.n	4006ca <afec_init+0x96>
	return STATUS_OK;
  4006d2:	2000      	movs	r0, #0
  4006d4:	e7f2      	b.n	4006bc <afec_init+0x88>
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <afec_init+0xc4>)
  4006d8:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4006dc:	2200      	movs	r2, #0
  4006de:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006e2:	428b      	cmp	r3, r1
  4006e4:	d1fb      	bne.n	4006de <afec_init+0xaa>
	return STATUS_OK;
  4006e6:	2000      	movs	r0, #0
  4006e8:	e7e8      	b.n	4006bc <afec_init+0x88>
  4006ea:	bf00      	nop
  4006ec:	4003c000 	.word	0x4003c000
  4006f0:	40064000 	.word	0x40064000
  4006f4:	20400bdc 	.word	0x20400bdc
  4006f8:	20400c20 	.word	0x20400c20

004006fc <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4006fc:	4b0c      	ldr	r3, [pc, #48]	; (400730 <afec_enable_interrupt+0x34>)
  4006fe:	4299      	cmp	r1, r3
  400700:	d007      	beq.n	400712 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400702:	290b      	cmp	r1, #11
  400704:	d80b      	bhi.n	40071e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400706:	d006      	beq.n	400716 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400708:	2301      	movs	r3, #1
  40070a:	fa03 f101 	lsl.w	r1, r3, r1
  40070e:	6241      	str	r1, [r0, #36]	; 0x24
  400710:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400712:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400714:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400716:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40071a:	6243      	str	r3, [r0, #36]	; 0x24
  40071c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40071e:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400720:	bf94      	ite	ls
  400722:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400724:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400726:	2301      	movs	r3, #1
  400728:	fa03 f101 	lsl.w	r1, r3, r1
  40072c:	6241      	str	r1, [r0, #36]	; 0x24
  40072e:	4770      	bx	lr
  400730:	47000fff 	.word	0x47000fff

00400734 <afec_set_callback>:
{
  400734:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400736:	4c11      	ldr	r4, [pc, #68]	; (40077c <afec_set_callback+0x48>)
  400738:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  40073a:	bf0c      	ite	eq
  40073c:	2410      	moveq	r4, #16
  40073e:	2400      	movne	r4, #0
  400740:	440c      	add	r4, r1
  400742:	4d0f      	ldr	r5, [pc, #60]	; (400780 <afec_set_callback+0x4c>)
  400744:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400748:	d10a      	bne.n	400760 <afec_set_callback+0x2c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40074a:	4a0e      	ldr	r2, [pc, #56]	; (400784 <afec_set_callback+0x50>)
  40074c:	f44f 7480 	mov.w	r4, #256	; 0x100
  400750:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400754:	015b      	lsls	r3, r3, #5
  400756:	b2db      	uxtb	r3, r3
  400758:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40075c:	6054      	str	r4, [r2, #4]
  40075e:	e009      	b.n	400774 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400760:	4a08      	ldr	r2, [pc, #32]	; (400784 <afec_set_callback+0x50>)
  400762:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400766:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40076a:	015b      	lsls	r3, r3, #5
  40076c:	b2db      	uxtb	r3, r3
  40076e:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400772:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400774:	4b04      	ldr	r3, [pc, #16]	; (400788 <afec_set_callback+0x54>)
  400776:	4798      	blx	r3
  400778:	bd38      	pop	{r3, r4, r5, pc}
  40077a:	bf00      	nop
  40077c:	40064000 	.word	0x40064000
  400780:	20400be0 	.word	0x20400be0
  400784:	e000e100 	.word	0xe000e100
  400788:	004006fd 	.word	0x004006fd

0040078c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40078c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40078e:	4802      	ldr	r0, [pc, #8]	; (400798 <AFEC0_Handler+0xc>)
  400790:	4b02      	ldr	r3, [pc, #8]	; (40079c <AFEC0_Handler+0x10>)
  400792:	4798      	blx	r3
  400794:	bd08      	pop	{r3, pc}
  400796:	bf00      	nop
  400798:	4003c000 	.word	0x4003c000
  40079c:	00400519 	.word	0x00400519

004007a0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4007a0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4007a2:	4802      	ldr	r0, [pc, #8]	; (4007ac <AFEC1_Handler+0xc>)
  4007a4:	4b02      	ldr	r3, [pc, #8]	; (4007b0 <AFEC1_Handler+0x10>)
  4007a6:	4798      	blx	r3
  4007a8:	bd08      	pop	{r3, pc}
  4007aa:	bf00      	nop
  4007ac:	40064000 	.word	0x40064000
  4007b0:	00400519 	.word	0x00400519

004007b4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4007b4:	b500      	push	{lr}
  4007b6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4007b8:	4b13      	ldr	r3, [pc, #76]	; (400808 <afec_enable+0x54>)
  4007ba:	4298      	cmp	r0, r3
  4007bc:	bf0c      	ite	eq
  4007be:	2028      	moveq	r0, #40	; 0x28
  4007c0:	201d      	movne	r0, #29
  4007c2:	4b12      	ldr	r3, [pc, #72]	; (40080c <afec_enable+0x58>)
  4007c4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4007c6:	4b12      	ldr	r3, [pc, #72]	; (400810 <afec_enable+0x5c>)
  4007c8:	789b      	ldrb	r3, [r3, #2]
  4007ca:	2bff      	cmp	r3, #255	; 0xff
  4007cc:	d01a      	beq.n	400804 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4007d2:	fab3 f383 	clz	r3, r3
  4007d6:	095b      	lsrs	r3, r3, #5
  4007d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4007da:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4007dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4007e0:	2200      	movs	r2, #0
  4007e2:	4b0c      	ldr	r3, [pc, #48]	; (400814 <afec_enable+0x60>)
  4007e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4007e6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4007e8:	4a09      	ldr	r2, [pc, #36]	; (400810 <afec_enable+0x5c>)
  4007ea:	7893      	ldrb	r3, [r2, #2]
  4007ec:	3301      	adds	r3, #1
  4007ee:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007f0:	b129      	cbz	r1, 4007fe <afec_enable+0x4a>
		cpu_irq_enable();
  4007f2:	2201      	movs	r2, #1
  4007f4:	4b07      	ldr	r3, [pc, #28]	; (400814 <afec_enable+0x60>)
  4007f6:	701a      	strb	r2, [r3, #0]
  4007f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007fc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4007fe:	b003      	add	sp, #12
  400800:	f85d fb04 	ldr.w	pc, [sp], #4
  400804:	e7fe      	b.n	400804 <afec_enable+0x50>
  400806:	bf00      	nop
  400808:	40064000 	.word	0x40064000
  40080c:	00400c25 	.word	0x00400c25
  400810:	20400bcc 	.word	0x20400bcc
  400814:	20400000 	.word	0x20400000

00400818 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400818:	6301      	str	r1, [r0, #48]	; 0x30
  40081a:	4770      	bx	lr

0040081c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40081c:	6341      	str	r1, [r0, #52]	; 0x34
  40081e:	4770      	bx	lr

00400820 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400820:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400822:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400826:	d03a      	beq.n	40089e <pio_set_peripheral+0x7e>
  400828:	d813      	bhi.n	400852 <pio_set_peripheral+0x32>
  40082a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40082e:	d025      	beq.n	40087c <pio_set_peripheral+0x5c>
  400830:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400834:	d10a      	bne.n	40084c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400836:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400838:	4313      	orrs	r3, r2
  40083a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40083c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40083e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400840:	400b      	ands	r3, r1
  400842:	ea23 0302 	bic.w	r3, r3, r2
  400846:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400848:	6042      	str	r2, [r0, #4]
  40084a:	4770      	bx	lr
	switch (ul_type) {
  40084c:	2900      	cmp	r1, #0
  40084e:	d1fb      	bne.n	400848 <pio_set_peripheral+0x28>
  400850:	4770      	bx	lr
  400852:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400856:	d021      	beq.n	40089c <pio_set_peripheral+0x7c>
  400858:	d809      	bhi.n	40086e <pio_set_peripheral+0x4e>
  40085a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40085e:	d1f3      	bne.n	400848 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400860:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400862:	4313      	orrs	r3, r2
  400864:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400866:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400868:	4313      	orrs	r3, r2
  40086a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40086c:	e7ec      	b.n	400848 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40086e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400872:	d013      	beq.n	40089c <pio_set_peripheral+0x7c>
  400874:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400878:	d010      	beq.n	40089c <pio_set_peripheral+0x7c>
  40087a:	e7e5      	b.n	400848 <pio_set_peripheral+0x28>
{
  40087c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40087e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400880:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400882:	43d3      	mvns	r3, r2
  400884:	4021      	ands	r1, r4
  400886:	461c      	mov	r4, r3
  400888:	4019      	ands	r1, r3
  40088a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40088c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40088e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400890:	400b      	ands	r3, r1
  400892:	4023      	ands	r3, r4
  400894:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400896:	6042      	str	r2, [r0, #4]
}
  400898:	f85d 4b04 	ldr.w	r4, [sp], #4
  40089c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40089e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008a0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4008a2:	400b      	ands	r3, r1
  4008a4:	ea23 0302 	bic.w	r3, r3, r2
  4008a8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008ac:	4313      	orrs	r3, r2
  4008ae:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008b0:	e7ca      	b.n	400848 <pio_set_peripheral+0x28>

004008b2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008b2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008b4:	f012 0f01 	tst.w	r2, #1
  4008b8:	d10d      	bne.n	4008d6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4008ba:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4008bc:	f012 0f0a 	tst.w	r2, #10
  4008c0:	d00b      	beq.n	4008da <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4008c2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4008c4:	f012 0f02 	tst.w	r2, #2
  4008c8:	d109      	bne.n	4008de <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4008ca:	f012 0f08 	tst.w	r2, #8
  4008ce:	d008      	beq.n	4008e2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4008d0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4008d4:	e005      	b.n	4008e2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4008d6:	6641      	str	r1, [r0, #100]	; 0x64
  4008d8:	e7f0      	b.n	4008bc <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4008da:	6241      	str	r1, [r0, #36]	; 0x24
  4008dc:	e7f2      	b.n	4008c4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4008de:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4008e2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4008e4:	6001      	str	r1, [r0, #0]
  4008e6:	4770      	bx	lr

004008e8 <pio_set_output>:
{
  4008e8:	b410      	push	{r4}
  4008ea:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4008ec:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008ee:	b94c      	cbnz	r4, 400904 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4008f0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4008f2:	b14b      	cbz	r3, 400908 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4008f4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4008f6:	b94a      	cbnz	r2, 40090c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4008f8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4008fa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4008fc:	6001      	str	r1, [r0, #0]
}
  4008fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400902:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400904:	6641      	str	r1, [r0, #100]	; 0x64
  400906:	e7f4      	b.n	4008f2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400908:	6541      	str	r1, [r0, #84]	; 0x54
  40090a:	e7f4      	b.n	4008f6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40090c:	6301      	str	r1, [r0, #48]	; 0x30
  40090e:	e7f4      	b.n	4008fa <pio_set_output+0x12>

00400910 <pio_configure>:
{
  400910:	b570      	push	{r4, r5, r6, lr}
  400912:	b082      	sub	sp, #8
  400914:	4605      	mov	r5, r0
  400916:	4616      	mov	r6, r2
  400918:	461c      	mov	r4, r3
	switch (ul_type) {
  40091a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40091e:	d014      	beq.n	40094a <pio_configure+0x3a>
  400920:	d90a      	bls.n	400938 <pio_configure+0x28>
  400922:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400926:	d024      	beq.n	400972 <pio_configure+0x62>
  400928:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40092c:	d021      	beq.n	400972 <pio_configure+0x62>
  40092e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400932:	d017      	beq.n	400964 <pio_configure+0x54>
		return 0;
  400934:	2000      	movs	r0, #0
  400936:	e01a      	b.n	40096e <pio_configure+0x5e>
	switch (ul_type) {
  400938:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40093c:	d005      	beq.n	40094a <pio_configure+0x3a>
  40093e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400942:	d002      	beq.n	40094a <pio_configure+0x3a>
  400944:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400948:	d1f4      	bne.n	400934 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40094a:	4632      	mov	r2, r6
  40094c:	4628      	mov	r0, r5
  40094e:	4b11      	ldr	r3, [pc, #68]	; (400994 <pio_configure+0x84>)
  400950:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400952:	f014 0f01 	tst.w	r4, #1
  400956:	d102      	bne.n	40095e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400958:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40095a:	2001      	movs	r0, #1
  40095c:	e007      	b.n	40096e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40095e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400960:	2001      	movs	r0, #1
  400962:	e004      	b.n	40096e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400964:	461a      	mov	r2, r3
  400966:	4631      	mov	r1, r6
  400968:	4b0b      	ldr	r3, [pc, #44]	; (400998 <pio_configure+0x88>)
  40096a:	4798      	blx	r3
	return 1;
  40096c:	2001      	movs	r0, #1
}
  40096e:	b002      	add	sp, #8
  400970:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400972:	f004 0301 	and.w	r3, r4, #1
  400976:	9300      	str	r3, [sp, #0]
  400978:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40097c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400980:	bf14      	ite	ne
  400982:	2200      	movne	r2, #0
  400984:	2201      	moveq	r2, #1
  400986:	4631      	mov	r1, r6
  400988:	4628      	mov	r0, r5
  40098a:	4c04      	ldr	r4, [pc, #16]	; (40099c <pio_configure+0x8c>)
  40098c:	47a0      	blx	r4
	return 1;
  40098e:	2001      	movs	r0, #1
		break;
  400990:	e7ed      	b.n	40096e <pio_configure+0x5e>
  400992:	bf00      	nop
  400994:	00400821 	.word	0x00400821
  400998:	004008b3 	.word	0x004008b3
  40099c:	004008e9 	.word	0x004008e9

004009a0 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4009a0:	f012 0f10 	tst.w	r2, #16
  4009a4:	d012      	beq.n	4009cc <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4009a6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4009aa:	f012 0f20 	tst.w	r2, #32
  4009ae:	d007      	beq.n	4009c0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4009b0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4009b4:	f012 0f40 	tst.w	r2, #64	; 0x40
  4009b8:	d005      	beq.n	4009c6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4009ba:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4009be:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4009c0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4009c4:	e7f6      	b.n	4009b4 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4009c6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4009ca:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4009cc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4009d0:	4770      	bx	lr

004009d2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4009d2:	6401      	str	r1, [r0, #64]	; 0x40
  4009d4:	4770      	bx	lr

004009d6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4009d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4009d8:	4770      	bx	lr

004009da <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4009da:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4009dc:	4770      	bx	lr
	...

004009e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009e4:	4604      	mov	r4, r0
  4009e6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009e8:	4b0e      	ldr	r3, [pc, #56]	; (400a24 <pio_handler_process+0x44>)
  4009ea:	4798      	blx	r3
  4009ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4009ee:	4620      	mov	r0, r4
  4009f0:	4b0d      	ldr	r3, [pc, #52]	; (400a28 <pio_handler_process+0x48>)
  4009f2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4009f4:	4005      	ands	r5, r0
  4009f6:	d013      	beq.n	400a20 <pio_handler_process+0x40>
  4009f8:	4c0c      	ldr	r4, [pc, #48]	; (400a2c <pio_handler_process+0x4c>)
  4009fa:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4009fe:	e003      	b.n	400a08 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a00:	42b4      	cmp	r4, r6
  400a02:	d00d      	beq.n	400a20 <pio_handler_process+0x40>
  400a04:	3410      	adds	r4, #16
		while (status != 0) {
  400a06:	b15d      	cbz	r5, 400a20 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a08:	6820      	ldr	r0, [r4, #0]
  400a0a:	4540      	cmp	r0, r8
  400a0c:	d1f8      	bne.n	400a00 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a0e:	6861      	ldr	r1, [r4, #4]
  400a10:	4229      	tst	r1, r5
  400a12:	d0f5      	beq.n	400a00 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a14:	68e3      	ldr	r3, [r4, #12]
  400a16:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a18:	6863      	ldr	r3, [r4, #4]
  400a1a:	ea25 0503 	bic.w	r5, r5, r3
  400a1e:	e7ef      	b.n	400a00 <pio_handler_process+0x20>
  400a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a24:	004009d7 	.word	0x004009d7
  400a28:	004009db 	.word	0x004009db
  400a2c:	204009d4 	.word	0x204009d4

00400a30 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400a32:	4c18      	ldr	r4, [pc, #96]	; (400a94 <pio_handler_set+0x64>)
  400a34:	6826      	ldr	r6, [r4, #0]
  400a36:	2e06      	cmp	r6, #6
  400a38:	d82a      	bhi.n	400a90 <pio_handler_set+0x60>
  400a3a:	f04f 0c00 	mov.w	ip, #0
  400a3e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a40:	4f15      	ldr	r7, [pc, #84]	; (400a98 <pio_handler_set+0x68>)
  400a42:	e004      	b.n	400a4e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a44:	3401      	adds	r4, #1
  400a46:	b2e4      	uxtb	r4, r4
  400a48:	46a4      	mov	ip, r4
  400a4a:	42a6      	cmp	r6, r4
  400a4c:	d309      	bcc.n	400a62 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400a4e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a50:	0125      	lsls	r5, r4, #4
  400a52:	597d      	ldr	r5, [r7, r5]
  400a54:	428d      	cmp	r5, r1
  400a56:	d1f5      	bne.n	400a44 <pio_handler_set+0x14>
  400a58:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400a5c:	686d      	ldr	r5, [r5, #4]
  400a5e:	4295      	cmp	r5, r2
  400a60:	d1f0      	bne.n	400a44 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400a62:	4d0d      	ldr	r5, [pc, #52]	; (400a98 <pio_handler_set+0x68>)
  400a64:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400a68:	eb05 040e 	add.w	r4, r5, lr
  400a6c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400a70:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400a72:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400a74:	9906      	ldr	r1, [sp, #24]
  400a76:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400a78:	3601      	adds	r6, #1
  400a7a:	4566      	cmp	r6, ip
  400a7c:	d005      	beq.n	400a8a <pio_handler_set+0x5a>
  400a7e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400a80:	461a      	mov	r2, r3
  400a82:	4b06      	ldr	r3, [pc, #24]	; (400a9c <pio_handler_set+0x6c>)
  400a84:	4798      	blx	r3

	return 0;
  400a86:	2000      	movs	r0, #0
  400a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400a8a:	4902      	ldr	r1, [pc, #8]	; (400a94 <pio_handler_set+0x64>)
  400a8c:	600e      	str	r6, [r1, #0]
  400a8e:	e7f6      	b.n	400a7e <pio_handler_set+0x4e>
		return 1;
  400a90:	2001      	movs	r0, #1
}
  400a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a94:	20400a44 	.word	0x20400a44
  400a98:	204009d4 	.word	0x204009d4
  400a9c:	004009a1 	.word	0x004009a1

00400aa0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400aa0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400aa2:	210a      	movs	r1, #10
  400aa4:	4801      	ldr	r0, [pc, #4]	; (400aac <PIOA_Handler+0xc>)
  400aa6:	4b02      	ldr	r3, [pc, #8]	; (400ab0 <PIOA_Handler+0x10>)
  400aa8:	4798      	blx	r3
  400aaa:	bd08      	pop	{r3, pc}
  400aac:	400e0e00 	.word	0x400e0e00
  400ab0:	004009e1 	.word	0x004009e1

00400ab4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ab4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400ab6:	210b      	movs	r1, #11
  400ab8:	4801      	ldr	r0, [pc, #4]	; (400ac0 <PIOB_Handler+0xc>)
  400aba:	4b02      	ldr	r3, [pc, #8]	; (400ac4 <PIOB_Handler+0x10>)
  400abc:	4798      	blx	r3
  400abe:	bd08      	pop	{r3, pc}
  400ac0:	400e1000 	.word	0x400e1000
  400ac4:	004009e1 	.word	0x004009e1

00400ac8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ac8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400aca:	210c      	movs	r1, #12
  400acc:	4801      	ldr	r0, [pc, #4]	; (400ad4 <PIOC_Handler+0xc>)
  400ace:	4b02      	ldr	r3, [pc, #8]	; (400ad8 <PIOC_Handler+0x10>)
  400ad0:	4798      	blx	r3
  400ad2:	bd08      	pop	{r3, pc}
  400ad4:	400e1200 	.word	0x400e1200
  400ad8:	004009e1 	.word	0x004009e1

00400adc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400adc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ade:	2110      	movs	r1, #16
  400ae0:	4801      	ldr	r0, [pc, #4]	; (400ae8 <PIOD_Handler+0xc>)
  400ae2:	4b02      	ldr	r3, [pc, #8]	; (400aec <PIOD_Handler+0x10>)
  400ae4:	4798      	blx	r3
  400ae6:	bd08      	pop	{r3, pc}
  400ae8:	400e1400 	.word	0x400e1400
  400aec:	004009e1 	.word	0x004009e1

00400af0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400af0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400af2:	2111      	movs	r1, #17
  400af4:	4801      	ldr	r0, [pc, #4]	; (400afc <PIOE_Handler+0xc>)
  400af6:	4b02      	ldr	r3, [pc, #8]	; (400b00 <PIOE_Handler+0x10>)
  400af8:	4798      	blx	r3
  400afa:	bd08      	pop	{r3, pc}
  400afc:	400e1600 	.word	0x400e1600
  400b00:	004009e1 	.word	0x004009e1

00400b04 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b04:	2803      	cmp	r0, #3
  400b06:	d011      	beq.n	400b2c <pmc_mck_set_division+0x28>
  400b08:	2804      	cmp	r0, #4
  400b0a:	d012      	beq.n	400b32 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b0c:	2802      	cmp	r0, #2
  400b0e:	bf0c      	ite	eq
  400b10:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b14:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b16:	4a08      	ldr	r2, [pc, #32]	; (400b38 <pmc_mck_set_division+0x34>)
  400b18:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b1e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b20:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b22:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b24:	f013 0f08 	tst.w	r3, #8
  400b28:	d0fb      	beq.n	400b22 <pmc_mck_set_division+0x1e>
}
  400b2a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b2c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b30:	e7f1      	b.n	400b16 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b32:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b36:	e7ee      	b.n	400b16 <pmc_mck_set_division+0x12>
  400b38:	400e0600 	.word	0x400e0600

00400b3c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b3c:	4a17      	ldr	r2, [pc, #92]	; (400b9c <pmc_switch_mck_to_pllack+0x60>)
  400b3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b44:	4318      	orrs	r0, r3
  400b46:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b48:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b4a:	f013 0f08 	tst.w	r3, #8
  400b4e:	d10a      	bne.n	400b66 <pmc_switch_mck_to_pllack+0x2a>
  400b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b54:	4911      	ldr	r1, [pc, #68]	; (400b9c <pmc_switch_mck_to_pllack+0x60>)
  400b56:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b58:	f012 0f08 	tst.w	r2, #8
  400b5c:	d103      	bne.n	400b66 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b5e:	3b01      	subs	r3, #1
  400b60:	d1f9      	bne.n	400b56 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400b62:	2001      	movs	r0, #1
  400b64:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b66:	4a0d      	ldr	r2, [pc, #52]	; (400b9c <pmc_switch_mck_to_pllack+0x60>)
  400b68:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b6a:	f023 0303 	bic.w	r3, r3, #3
  400b6e:	f043 0302 	orr.w	r3, r3, #2
  400b72:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b74:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b76:	f013 0f08 	tst.w	r3, #8
  400b7a:	d10a      	bne.n	400b92 <pmc_switch_mck_to_pllack+0x56>
  400b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b80:	4906      	ldr	r1, [pc, #24]	; (400b9c <pmc_switch_mck_to_pllack+0x60>)
  400b82:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b84:	f012 0f08 	tst.w	r2, #8
  400b88:	d105      	bne.n	400b96 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b8a:	3b01      	subs	r3, #1
  400b8c:	d1f9      	bne.n	400b82 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400b8e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b90:	4770      	bx	lr
	return 0;
  400b92:	2000      	movs	r0, #0
  400b94:	4770      	bx	lr
  400b96:	2000      	movs	r0, #0
  400b98:	4770      	bx	lr
  400b9a:	bf00      	nop
  400b9c:	400e0600 	.word	0x400e0600

00400ba0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400ba0:	b9a0      	cbnz	r0, 400bcc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ba2:	480e      	ldr	r0, [pc, #56]	; (400bdc <pmc_switch_mainck_to_xtal+0x3c>)
  400ba4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400ba6:	0209      	lsls	r1, r1, #8
  400ba8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400baa:	4a0d      	ldr	r2, [pc, #52]	; (400be0 <pmc_switch_mainck_to_xtal+0x40>)
  400bac:	401a      	ands	r2, r3
  400bae:	4b0d      	ldr	r3, [pc, #52]	; (400be4 <pmc_switch_mainck_to_xtal+0x44>)
  400bb0:	4313      	orrs	r3, r2
  400bb2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bb4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400bb6:	4602      	mov	r2, r0
  400bb8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bba:	f013 0f01 	tst.w	r3, #1
  400bbe:	d0fb      	beq.n	400bb8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400bc0:	4a06      	ldr	r2, [pc, #24]	; (400bdc <pmc_switch_mainck_to_xtal+0x3c>)
  400bc2:	6a11      	ldr	r1, [r2, #32]
  400bc4:	4b08      	ldr	r3, [pc, #32]	; (400be8 <pmc_switch_mainck_to_xtal+0x48>)
  400bc6:	430b      	orrs	r3, r1
  400bc8:	6213      	str	r3, [r2, #32]
  400bca:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bcc:	4903      	ldr	r1, [pc, #12]	; (400bdc <pmc_switch_mainck_to_xtal+0x3c>)
  400bce:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400bd0:	4a06      	ldr	r2, [pc, #24]	; (400bec <pmc_switch_mainck_to_xtal+0x4c>)
  400bd2:	401a      	ands	r2, r3
  400bd4:	4b06      	ldr	r3, [pc, #24]	; (400bf0 <pmc_switch_mainck_to_xtal+0x50>)
  400bd6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bd8:	620b      	str	r3, [r1, #32]
  400bda:	4770      	bx	lr
  400bdc:	400e0600 	.word	0x400e0600
  400be0:	ffc8fffc 	.word	0xffc8fffc
  400be4:	00370001 	.word	0x00370001
  400be8:	01370000 	.word	0x01370000
  400bec:	fec8fffc 	.word	0xfec8fffc
  400bf0:	01370002 	.word	0x01370002

00400bf4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400bf4:	4b02      	ldr	r3, [pc, #8]	; (400c00 <pmc_osc_is_ready_mainck+0xc>)
  400bf6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400bf8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400bfc:	4770      	bx	lr
  400bfe:	bf00      	nop
  400c00:	400e0600 	.word	0x400e0600

00400c04 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c08:	4b01      	ldr	r3, [pc, #4]	; (400c10 <pmc_disable_pllack+0xc>)
  400c0a:	629a      	str	r2, [r3, #40]	; 0x28
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop
  400c10:	400e0600 	.word	0x400e0600

00400c14 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c14:	4b02      	ldr	r3, [pc, #8]	; (400c20 <pmc_is_locked_pllack+0xc>)
  400c16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c18:	f000 0002 	and.w	r0, r0, #2
  400c1c:	4770      	bx	lr
  400c1e:	bf00      	nop
  400c20:	400e0600 	.word	0x400e0600

00400c24 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c24:	283f      	cmp	r0, #63	; 0x3f
  400c26:	d81e      	bhi.n	400c66 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c28:	281f      	cmp	r0, #31
  400c2a:	d80c      	bhi.n	400c46 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c2c:	4b11      	ldr	r3, [pc, #68]	; (400c74 <pmc_enable_periph_clk+0x50>)
  400c2e:	699a      	ldr	r2, [r3, #24]
  400c30:	2301      	movs	r3, #1
  400c32:	4083      	lsls	r3, r0
  400c34:	4393      	bics	r3, r2
  400c36:	d018      	beq.n	400c6a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c38:	2301      	movs	r3, #1
  400c3a:	fa03 f000 	lsl.w	r0, r3, r0
  400c3e:	4b0d      	ldr	r3, [pc, #52]	; (400c74 <pmc_enable_periph_clk+0x50>)
  400c40:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c42:	2000      	movs	r0, #0
  400c44:	4770      	bx	lr
		ul_id -= 32;
  400c46:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c48:	4b0a      	ldr	r3, [pc, #40]	; (400c74 <pmc_enable_periph_clk+0x50>)
  400c4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c4e:	2301      	movs	r3, #1
  400c50:	4083      	lsls	r3, r0
  400c52:	4393      	bics	r3, r2
  400c54:	d00b      	beq.n	400c6e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c56:	2301      	movs	r3, #1
  400c58:	fa03 f000 	lsl.w	r0, r3, r0
  400c5c:	4b05      	ldr	r3, [pc, #20]	; (400c74 <pmc_enable_periph_clk+0x50>)
  400c5e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400c62:	2000      	movs	r0, #0
  400c64:	4770      	bx	lr
		return 1;
  400c66:	2001      	movs	r0, #1
  400c68:	4770      	bx	lr
	return 0;
  400c6a:	2000      	movs	r0, #0
  400c6c:	4770      	bx	lr
  400c6e:	2000      	movs	r0, #0
}
  400c70:	4770      	bx	lr
  400c72:	bf00      	nop
  400c74:	400e0600 	.word	0x400e0600

00400c78 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400c78:	6943      	ldr	r3, [r0, #20]
  400c7a:	f013 0f02 	tst.w	r3, #2
  400c7e:	d002      	beq.n	400c86 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400c80:	61c1      	str	r1, [r0, #28]
	return 0;
  400c82:	2000      	movs	r0, #0
  400c84:	4770      	bx	lr
		return 1;
  400c86:	2001      	movs	r0, #1
}
  400c88:	4770      	bx	lr

00400c8a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400c8a:	6943      	ldr	r3, [r0, #20]
  400c8c:	f013 0f01 	tst.w	r3, #1
  400c90:	d003      	beq.n	400c9a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400c92:	6983      	ldr	r3, [r0, #24]
  400c94:	700b      	strb	r3, [r1, #0]
	return 0;
  400c96:	2000      	movs	r0, #0
  400c98:	4770      	bx	lr
		return 1;
  400c9a:	2001      	movs	r0, #1
}
  400c9c:	4770      	bx	lr

00400c9e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400c9e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400ca0:	010b      	lsls	r3, r1, #4
  400ca2:	4293      	cmp	r3, r2
  400ca4:	d914      	bls.n	400cd0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400ca6:	00c9      	lsls	r1, r1, #3
  400ca8:	084b      	lsrs	r3, r1, #1
  400caa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400cae:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400cb2:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cb4:	1e5c      	subs	r4, r3, #1
  400cb6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cba:	428c      	cmp	r4, r1
  400cbc:	d901      	bls.n	400cc2 <usart_set_async_baudrate+0x24>
		return 1;
  400cbe:	2001      	movs	r0, #1
  400cc0:	e017      	b.n	400cf2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400cc2:	6841      	ldr	r1, [r0, #4]
  400cc4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400cc8:	6041      	str	r1, [r0, #4]
  400cca:	e00c      	b.n	400ce6 <usart_set_async_baudrate+0x48>
		return 1;
  400ccc:	2001      	movs	r0, #1
  400cce:	e010      	b.n	400cf2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400cd0:	0859      	lsrs	r1, r3, #1
  400cd2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400cd6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400cda:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cdc:	1e5c      	subs	r4, r3, #1
  400cde:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400ce2:	428c      	cmp	r4, r1
  400ce4:	d8f2      	bhi.n	400ccc <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400ce6:	0412      	lsls	r2, r2, #16
  400ce8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400cec:	431a      	orrs	r2, r3
  400cee:	6202      	str	r2, [r0, #32]

	return 0;
  400cf0:	2000      	movs	r0, #0
}
  400cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cf6:	4770      	bx	lr

00400cf8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400cf8:	4b08      	ldr	r3, [pc, #32]	; (400d1c <usart_reset+0x24>)
  400cfa:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400cfe:	2300      	movs	r3, #0
  400d00:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400d02:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400d04:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400d06:	2388      	movs	r3, #136	; 0x88
  400d08:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d0a:	2324      	movs	r3, #36	; 0x24
  400d0c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d12:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400d14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d18:	6003      	str	r3, [r0, #0]
  400d1a:	4770      	bx	lr
  400d1c:	55534100 	.word	0x55534100

00400d20 <usart_init_rs232>:
{
  400d20:	b570      	push	{r4, r5, r6, lr}
  400d22:	4605      	mov	r5, r0
  400d24:	460c      	mov	r4, r1
  400d26:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400d28:	4b0f      	ldr	r3, [pc, #60]	; (400d68 <usart_init_rs232+0x48>)
  400d2a:	4798      	blx	r3
	ul_reg_val = 0;
  400d2c:	2200      	movs	r2, #0
  400d2e:	4b0f      	ldr	r3, [pc, #60]	; (400d6c <usart_init_rs232+0x4c>)
  400d30:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400d32:	b1a4      	cbz	r4, 400d5e <usart_init_rs232+0x3e>
  400d34:	4632      	mov	r2, r6
  400d36:	6821      	ldr	r1, [r4, #0]
  400d38:	4628      	mov	r0, r5
  400d3a:	4b0d      	ldr	r3, [pc, #52]	; (400d70 <usart_init_rs232+0x50>)
  400d3c:	4798      	blx	r3
  400d3e:	4602      	mov	r2, r0
  400d40:	b978      	cbnz	r0, 400d62 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d42:	6863      	ldr	r3, [r4, #4]
  400d44:	68a1      	ldr	r1, [r4, #8]
  400d46:	430b      	orrs	r3, r1
  400d48:	6921      	ldr	r1, [r4, #16]
  400d4a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400d4c:	68e1      	ldr	r1, [r4, #12]
  400d4e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d50:	4906      	ldr	r1, [pc, #24]	; (400d6c <usart_init_rs232+0x4c>)
  400d52:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400d54:	6869      	ldr	r1, [r5, #4]
  400d56:	430b      	orrs	r3, r1
  400d58:	606b      	str	r3, [r5, #4]
}
  400d5a:	4610      	mov	r0, r2
  400d5c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400d5e:	2201      	movs	r2, #1
  400d60:	e7fb      	b.n	400d5a <usart_init_rs232+0x3a>
  400d62:	2201      	movs	r2, #1
  400d64:	e7f9      	b.n	400d5a <usart_init_rs232+0x3a>
  400d66:	bf00      	nop
  400d68:	00400cf9 	.word	0x00400cf9
  400d6c:	20400a48 	.word	0x20400a48
  400d70:	00400c9f 	.word	0x00400c9f

00400d74 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400d74:	2340      	movs	r3, #64	; 0x40
  400d76:	6003      	str	r3, [r0, #0]
  400d78:	4770      	bx	lr

00400d7a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400d7a:	2310      	movs	r3, #16
  400d7c:	6003      	str	r3, [r0, #0]
  400d7e:	4770      	bx	lr

00400d80 <usart_is_tx_ready>:
	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
  400d80:	6940      	ldr	r0, [r0, #20]
}
  400d82:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400d86:	4770      	bx	lr

00400d88 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400d88:	6943      	ldr	r3, [r0, #20]
  400d8a:	f013 0f02 	tst.w	r3, #2
  400d8e:	d004      	beq.n	400d9a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400d90:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400d94:	61c1      	str	r1, [r0, #28]
	return 0;
  400d96:	2000      	movs	r0, #0
  400d98:	4770      	bx	lr
		return 1;
  400d9a:	2001      	movs	r0, #1
}
  400d9c:	4770      	bx	lr

00400d9e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d9e:	6943      	ldr	r3, [r0, #20]
  400da0:	f013 0f01 	tst.w	r3, #1
  400da4:	d005      	beq.n	400db2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400da6:	6983      	ldr	r3, [r0, #24]
  400da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400dac:	600b      	str	r3, [r1, #0]
	return 0;
  400dae:	2000      	movs	r0, #0
  400db0:	4770      	bx	lr
		return 1;
  400db2:	2001      	movs	r0, #1
}
  400db4:	4770      	bx	lr

00400db6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400db6:	e7fe      	b.n	400db6 <Dummy_Handler>

00400db8 <Reset_Handler>:
{
  400db8:	b500      	push	{lr}
  400dba:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400dbc:	4b25      	ldr	r3, [pc, #148]	; (400e54 <Reset_Handler+0x9c>)
  400dbe:	4a26      	ldr	r2, [pc, #152]	; (400e58 <Reset_Handler+0xa0>)
  400dc0:	429a      	cmp	r2, r3
  400dc2:	d010      	beq.n	400de6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400dc4:	4b25      	ldr	r3, [pc, #148]	; (400e5c <Reset_Handler+0xa4>)
  400dc6:	4a23      	ldr	r2, [pc, #140]	; (400e54 <Reset_Handler+0x9c>)
  400dc8:	429a      	cmp	r2, r3
  400dca:	d20c      	bcs.n	400de6 <Reset_Handler+0x2e>
  400dcc:	3b01      	subs	r3, #1
  400dce:	1a9b      	subs	r3, r3, r2
  400dd0:	f023 0303 	bic.w	r3, r3, #3
  400dd4:	3304      	adds	r3, #4
  400dd6:	4413      	add	r3, r2
  400dd8:	491f      	ldr	r1, [pc, #124]	; (400e58 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400dda:	f851 0b04 	ldr.w	r0, [r1], #4
  400dde:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400de2:	429a      	cmp	r2, r3
  400de4:	d1f9      	bne.n	400dda <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400de6:	4b1e      	ldr	r3, [pc, #120]	; (400e60 <Reset_Handler+0xa8>)
  400de8:	4a1e      	ldr	r2, [pc, #120]	; (400e64 <Reset_Handler+0xac>)
  400dea:	429a      	cmp	r2, r3
  400dec:	d20a      	bcs.n	400e04 <Reset_Handler+0x4c>
  400dee:	3b01      	subs	r3, #1
  400df0:	1a9b      	subs	r3, r3, r2
  400df2:	f023 0303 	bic.w	r3, r3, #3
  400df6:	3304      	adds	r3, #4
  400df8:	4413      	add	r3, r2
                *pDest++ = 0;
  400dfa:	2100      	movs	r1, #0
  400dfc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400e00:	4293      	cmp	r3, r2
  400e02:	d1fb      	bne.n	400dfc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400e04:	4a18      	ldr	r2, [pc, #96]	; (400e68 <Reset_Handler+0xb0>)
  400e06:	4b19      	ldr	r3, [pc, #100]	; (400e6c <Reset_Handler+0xb4>)
  400e08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e0c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e0e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e12:	fab3 f383 	clz	r3, r3
  400e16:	095b      	lsrs	r3, r3, #5
  400e18:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e1a:	b672      	cpsid	i
  400e1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e20:	2200      	movs	r2, #0
  400e22:	4b13      	ldr	r3, [pc, #76]	; (400e70 <Reset_Handler+0xb8>)
  400e24:	701a      	strb	r2, [r3, #0]
	return flags;
  400e26:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e28:	4a12      	ldr	r2, [pc, #72]	; (400e74 <Reset_Handler+0xbc>)
  400e2a:	6813      	ldr	r3, [r2, #0]
  400e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400e32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e36:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400e3a:	b129      	cbz	r1, 400e48 <Reset_Handler+0x90>
		cpu_irq_enable();
  400e3c:	2201      	movs	r2, #1
  400e3e:	4b0c      	ldr	r3, [pc, #48]	; (400e70 <Reset_Handler+0xb8>)
  400e40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400e42:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e46:	b662      	cpsie	i
        __libc_init_array();
  400e48:	4b0b      	ldr	r3, [pc, #44]	; (400e78 <Reset_Handler+0xc0>)
  400e4a:	4798      	blx	r3
        main();
  400e4c:	4b0b      	ldr	r3, [pc, #44]	; (400e7c <Reset_Handler+0xc4>)
  400e4e:	4798      	blx	r3
  400e50:	e7fe      	b.n	400e50 <Reset_Handler+0x98>
  400e52:	bf00      	nop
  400e54:	20400000 	.word	0x20400000
  400e58:	0040a23c 	.word	0x0040a23c
  400e5c:	204009b8 	.word	0x204009b8
  400e60:	20400d10 	.word	0x20400d10
  400e64:	204009b8 	.word	0x204009b8
  400e68:	e000ed00 	.word	0xe000ed00
  400e6c:	00400000 	.word	0x00400000
  400e70:	20400000 	.word	0x20400000
  400e74:	e000ed88 	.word	0xe000ed88
  400e78:	00403a31 	.word	0x00403a31
  400e7c:	00403925 	.word	0x00403925

00400e80 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400e80:	4b3b      	ldr	r3, [pc, #236]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e84:	f003 0303 	and.w	r3, r3, #3
  400e88:	2b01      	cmp	r3, #1
  400e8a:	d01d      	beq.n	400ec8 <SystemCoreClockUpdate+0x48>
  400e8c:	b183      	cbz	r3, 400eb0 <SystemCoreClockUpdate+0x30>
  400e8e:	2b02      	cmp	r3, #2
  400e90:	d036      	beq.n	400f00 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400e92:	4b37      	ldr	r3, [pc, #220]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e9a:	2b70      	cmp	r3, #112	; 0x70
  400e9c:	d05f      	beq.n	400f5e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400e9e:	4b34      	ldr	r3, [pc, #208]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400ea2:	4934      	ldr	r1, [pc, #208]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400ea4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400ea8:	680b      	ldr	r3, [r1, #0]
  400eaa:	40d3      	lsrs	r3, r2
  400eac:	600b      	str	r3, [r1, #0]
  400eae:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400eb0:	4b31      	ldr	r3, [pc, #196]	; (400f78 <SystemCoreClockUpdate+0xf8>)
  400eb2:	695b      	ldr	r3, [r3, #20]
  400eb4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400eb8:	bf14      	ite	ne
  400eba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ebe:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400ec2:	4b2c      	ldr	r3, [pc, #176]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400ec4:	601a      	str	r2, [r3, #0]
  400ec6:	e7e4      	b.n	400e92 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ec8:	4b29      	ldr	r3, [pc, #164]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400eca:	6a1b      	ldr	r3, [r3, #32]
  400ecc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ed0:	d003      	beq.n	400eda <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400ed2:	4a2a      	ldr	r2, [pc, #168]	; (400f7c <SystemCoreClockUpdate+0xfc>)
  400ed4:	4b27      	ldr	r3, [pc, #156]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400ed6:	601a      	str	r2, [r3, #0]
  400ed8:	e7db      	b.n	400e92 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400eda:	4a29      	ldr	r2, [pc, #164]	; (400f80 <SystemCoreClockUpdate+0x100>)
  400edc:	4b25      	ldr	r3, [pc, #148]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400ede:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ee0:	4b23      	ldr	r3, [pc, #140]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400ee2:	6a1b      	ldr	r3, [r3, #32]
  400ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ee8:	2b10      	cmp	r3, #16
  400eea:	d005      	beq.n	400ef8 <SystemCoreClockUpdate+0x78>
  400eec:	2b20      	cmp	r3, #32
  400eee:	d1d0      	bne.n	400e92 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400ef0:	4a22      	ldr	r2, [pc, #136]	; (400f7c <SystemCoreClockUpdate+0xfc>)
  400ef2:	4b20      	ldr	r3, [pc, #128]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400ef4:	601a      	str	r2, [r3, #0]
          break;
  400ef6:	e7cc      	b.n	400e92 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400ef8:	4a22      	ldr	r2, [pc, #136]	; (400f84 <SystemCoreClockUpdate+0x104>)
  400efa:	4b1e      	ldr	r3, [pc, #120]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400efc:	601a      	str	r2, [r3, #0]
          break;
  400efe:	e7c8      	b.n	400e92 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f00:	4b1b      	ldr	r3, [pc, #108]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400f02:	6a1b      	ldr	r3, [r3, #32]
  400f04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f08:	d016      	beq.n	400f38 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f0a:	4a1c      	ldr	r2, [pc, #112]	; (400f7c <SystemCoreClockUpdate+0xfc>)
  400f0c:	4b19      	ldr	r3, [pc, #100]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400f0e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f10:	4b17      	ldr	r3, [pc, #92]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f14:	f003 0303 	and.w	r3, r3, #3
  400f18:	2b02      	cmp	r3, #2
  400f1a:	d1ba      	bne.n	400e92 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f1c:	4a14      	ldr	r2, [pc, #80]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400f1e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f20:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f22:	4814      	ldr	r0, [pc, #80]	; (400f74 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f24:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400f28:	6803      	ldr	r3, [r0, #0]
  400f2a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f2e:	b2d2      	uxtb	r2, r2
  400f30:	fbb3 f3f2 	udiv	r3, r3, r2
  400f34:	6003      	str	r3, [r0, #0]
  400f36:	e7ac      	b.n	400e92 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f38:	4a11      	ldr	r2, [pc, #68]	; (400f80 <SystemCoreClockUpdate+0x100>)
  400f3a:	4b0e      	ldr	r3, [pc, #56]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400f3c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f3e:	4b0c      	ldr	r3, [pc, #48]	; (400f70 <SystemCoreClockUpdate+0xf0>)
  400f40:	6a1b      	ldr	r3, [r3, #32]
  400f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f46:	2b10      	cmp	r3, #16
  400f48:	d005      	beq.n	400f56 <SystemCoreClockUpdate+0xd6>
  400f4a:	2b20      	cmp	r3, #32
  400f4c:	d1e0      	bne.n	400f10 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400f4e:	4a0b      	ldr	r2, [pc, #44]	; (400f7c <SystemCoreClockUpdate+0xfc>)
  400f50:	4b08      	ldr	r3, [pc, #32]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400f52:	601a      	str	r2, [r3, #0]
          break;
  400f54:	e7dc      	b.n	400f10 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400f56:	4a0b      	ldr	r2, [pc, #44]	; (400f84 <SystemCoreClockUpdate+0x104>)
  400f58:	4b06      	ldr	r3, [pc, #24]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400f5a:	601a      	str	r2, [r3, #0]
          break;
  400f5c:	e7d8      	b.n	400f10 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400f5e:	4a05      	ldr	r2, [pc, #20]	; (400f74 <SystemCoreClockUpdate+0xf4>)
  400f60:	6813      	ldr	r3, [r2, #0]
  400f62:	4909      	ldr	r1, [pc, #36]	; (400f88 <SystemCoreClockUpdate+0x108>)
  400f64:	fba1 1303 	umull	r1, r3, r1, r3
  400f68:	085b      	lsrs	r3, r3, #1
  400f6a:	6013      	str	r3, [r2, #0]
  400f6c:	4770      	bx	lr
  400f6e:	bf00      	nop
  400f70:	400e0600 	.word	0x400e0600
  400f74:	20400004 	.word	0x20400004
  400f78:	400e1810 	.word	0x400e1810
  400f7c:	00b71b00 	.word	0x00b71b00
  400f80:	003d0900 	.word	0x003d0900
  400f84:	007a1200 	.word	0x007a1200
  400f88:	aaaaaaab 	.word	0xaaaaaaab

00400f8c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400f8c:	4b16      	ldr	r3, [pc, #88]	; (400fe8 <system_init_flash+0x5c>)
  400f8e:	4298      	cmp	r0, r3
  400f90:	d913      	bls.n	400fba <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400f92:	4b16      	ldr	r3, [pc, #88]	; (400fec <system_init_flash+0x60>)
  400f94:	4298      	cmp	r0, r3
  400f96:	d915      	bls.n	400fc4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400f98:	4b15      	ldr	r3, [pc, #84]	; (400ff0 <system_init_flash+0x64>)
  400f9a:	4298      	cmp	r0, r3
  400f9c:	d916      	bls.n	400fcc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400f9e:	4b15      	ldr	r3, [pc, #84]	; (400ff4 <system_init_flash+0x68>)
  400fa0:	4298      	cmp	r0, r3
  400fa2:	d917      	bls.n	400fd4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400fa4:	4b14      	ldr	r3, [pc, #80]	; (400ff8 <system_init_flash+0x6c>)
  400fa6:	4298      	cmp	r0, r3
  400fa8:	d918      	bls.n	400fdc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400faa:	4b14      	ldr	r3, [pc, #80]	; (400ffc <system_init_flash+0x70>)
  400fac:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400fae:	bf94      	ite	ls
  400fb0:	4a13      	ldrls	r2, [pc, #76]	; (401000 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400fb2:	4a14      	ldrhi	r2, [pc, #80]	; (401004 <system_init_flash+0x78>)
  400fb4:	4b14      	ldr	r3, [pc, #80]	; (401008 <system_init_flash+0x7c>)
  400fb6:	601a      	str	r2, [r3, #0]
  400fb8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fbe:	4b12      	ldr	r3, [pc, #72]	; (401008 <system_init_flash+0x7c>)
  400fc0:	601a      	str	r2, [r3, #0]
  400fc2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fc4:	4a11      	ldr	r2, [pc, #68]	; (40100c <system_init_flash+0x80>)
  400fc6:	4b10      	ldr	r3, [pc, #64]	; (401008 <system_init_flash+0x7c>)
  400fc8:	601a      	str	r2, [r3, #0]
  400fca:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400fcc:	4a10      	ldr	r2, [pc, #64]	; (401010 <system_init_flash+0x84>)
  400fce:	4b0e      	ldr	r3, [pc, #56]	; (401008 <system_init_flash+0x7c>)
  400fd0:	601a      	str	r2, [r3, #0]
  400fd2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400fd4:	4a0f      	ldr	r2, [pc, #60]	; (401014 <system_init_flash+0x88>)
  400fd6:	4b0c      	ldr	r3, [pc, #48]	; (401008 <system_init_flash+0x7c>)
  400fd8:	601a      	str	r2, [r3, #0]
  400fda:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400fdc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400fe0:	4b09      	ldr	r3, [pc, #36]	; (401008 <system_init_flash+0x7c>)
  400fe2:	601a      	str	r2, [r3, #0]
  400fe4:	4770      	bx	lr
  400fe6:	bf00      	nop
  400fe8:	015ef3bf 	.word	0x015ef3bf
  400fec:	02bde77f 	.word	0x02bde77f
  400ff0:	041cdb3f 	.word	0x041cdb3f
  400ff4:	057bceff 	.word	0x057bceff
  400ff8:	06dac2bf 	.word	0x06dac2bf
  400ffc:	0839b67f 	.word	0x0839b67f
  401000:	04000500 	.word	0x04000500
  401004:	04000600 	.word	0x04000600
  401008:	400e0c00 	.word	0x400e0c00
  40100c:	04000100 	.word	0x04000100
  401010:	04000200 	.word	0x04000200
  401014:	04000300 	.word	0x04000300

00401018 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401018:	4b0a      	ldr	r3, [pc, #40]	; (401044 <_sbrk+0x2c>)
  40101a:	681b      	ldr	r3, [r3, #0]
  40101c:	b153      	cbz	r3, 401034 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40101e:	4b09      	ldr	r3, [pc, #36]	; (401044 <_sbrk+0x2c>)
  401020:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401022:	181a      	adds	r2, r3, r0
  401024:	4908      	ldr	r1, [pc, #32]	; (401048 <_sbrk+0x30>)
  401026:	4291      	cmp	r1, r2
  401028:	db08      	blt.n	40103c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40102a:	4610      	mov	r0, r2
  40102c:	4a05      	ldr	r2, [pc, #20]	; (401044 <_sbrk+0x2c>)
  40102e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401030:	4618      	mov	r0, r3
  401032:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401034:	4a05      	ldr	r2, [pc, #20]	; (40104c <_sbrk+0x34>)
  401036:	4b03      	ldr	r3, [pc, #12]	; (401044 <_sbrk+0x2c>)
  401038:	601a      	str	r2, [r3, #0]
  40103a:	e7f0      	b.n	40101e <_sbrk+0x6>
		return (caddr_t) -1;	
  40103c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401040:	4770      	bx	lr
  401042:	bf00      	nop
  401044:	20400a4c 	.word	0x20400a4c
  401048:	2045fffc 	.word	0x2045fffc
  40104c:	20402f10 	.word	0x20402f10

00401050 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401050:	f04f 30ff 	mov.w	r0, #4294967295
  401054:	4770      	bx	lr

00401056 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40105a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40105c:	2000      	movs	r0, #0
  40105e:	4770      	bx	lr

00401060 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401060:	2001      	movs	r0, #1
  401062:	4770      	bx	lr

00401064 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401064:	2000      	movs	r0, #0
  401066:	4770      	bx	lr

00401068 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401068:	f100 0308 	add.w	r3, r0, #8
  40106c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40106e:	f04f 32ff 	mov.w	r2, #4294967295
  401072:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401074:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401076:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401078:	2300      	movs	r3, #0
  40107a:	6003      	str	r3, [r0, #0]
  40107c:	4770      	bx	lr

0040107e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40107e:	2300      	movs	r3, #0
  401080:	6103      	str	r3, [r0, #16]
  401082:	4770      	bx	lr

00401084 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401084:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401086:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401088:	689a      	ldr	r2, [r3, #8]
  40108a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40108c:	689a      	ldr	r2, [r3, #8]
  40108e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401090:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401092:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401094:	6803      	ldr	r3, [r0, #0]
  401096:	3301      	adds	r3, #1
  401098:	6003      	str	r3, [r0, #0]
  40109a:	4770      	bx	lr

0040109c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40109c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40109e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4010a0:	f1b5 3fff 	cmp.w	r5, #4294967295
  4010a4:	d002      	beq.n	4010ac <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010a6:	f100 0208 	add.w	r2, r0, #8
  4010aa:	e002      	b.n	4010b2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4010ac:	6902      	ldr	r2, [r0, #16]
  4010ae:	e004      	b.n	4010ba <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010b0:	461a      	mov	r2, r3
  4010b2:	6853      	ldr	r3, [r2, #4]
  4010b4:	681c      	ldr	r4, [r3, #0]
  4010b6:	42a5      	cmp	r5, r4
  4010b8:	d2fa      	bcs.n	4010b0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4010ba:	6853      	ldr	r3, [r2, #4]
  4010bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4010be:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4010c0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4010c2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4010c4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4010c6:	6803      	ldr	r3, [r0, #0]
  4010c8:	3301      	adds	r3, #1
  4010ca:	6003      	str	r3, [r0, #0]
}
  4010cc:	bc30      	pop	{r4, r5}
  4010ce:	4770      	bx	lr

004010d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4010d0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4010d2:	6842      	ldr	r2, [r0, #4]
  4010d4:	6881      	ldr	r1, [r0, #8]
  4010d6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4010d8:	6882      	ldr	r2, [r0, #8]
  4010da:	6841      	ldr	r1, [r0, #4]
  4010dc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4010de:	685a      	ldr	r2, [r3, #4]
  4010e0:	4290      	cmp	r0, r2
  4010e2:	d005      	beq.n	4010f0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4010e4:	2200      	movs	r2, #0
  4010e6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4010e8:	6818      	ldr	r0, [r3, #0]
  4010ea:	3801      	subs	r0, #1
  4010ec:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4010ee:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4010f0:	6882      	ldr	r2, [r0, #8]
  4010f2:	605a      	str	r2, [r3, #4]
  4010f4:	e7f6      	b.n	4010e4 <uxListRemove+0x14>
	...

004010f8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4010f8:	4b0d      	ldr	r3, [pc, #52]	; (401130 <prvTaskExitError+0x38>)
  4010fa:	681b      	ldr	r3, [r3, #0]
  4010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
  401100:	d00a      	beq.n	401118 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401102:	f04f 0380 	mov.w	r3, #128	; 0x80
  401106:	b672      	cpsid	i
  401108:	f383 8811 	msr	BASEPRI, r3
  40110c:	f3bf 8f6f 	isb	sy
  401110:	f3bf 8f4f 	dsb	sy
  401114:	b662      	cpsie	i
  401116:	e7fe      	b.n	401116 <prvTaskExitError+0x1e>
  401118:	f04f 0380 	mov.w	r3, #128	; 0x80
  40111c:	b672      	cpsid	i
  40111e:	f383 8811 	msr	BASEPRI, r3
  401122:	f3bf 8f6f 	isb	sy
  401126:	f3bf 8f4f 	dsb	sy
  40112a:	b662      	cpsie	i
  40112c:	e7fe      	b.n	40112c <prvTaskExitError+0x34>
  40112e:	bf00      	nop
  401130:	20400008 	.word	0x20400008

00401134 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401134:	4806      	ldr	r0, [pc, #24]	; (401150 <prvPortStartFirstTask+0x1c>)
  401136:	6800      	ldr	r0, [r0, #0]
  401138:	6800      	ldr	r0, [r0, #0]
  40113a:	f380 8808 	msr	MSP, r0
  40113e:	b662      	cpsie	i
  401140:	b661      	cpsie	f
  401142:	f3bf 8f4f 	dsb	sy
  401146:	f3bf 8f6f 	isb	sy
  40114a:	df00      	svc	0
  40114c:	bf00      	nop
  40114e:	0000      	.short	0x0000
  401150:	e000ed08 	.word	0xe000ed08

00401154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401164 <vPortEnableVFP+0x10>
  401158:	6801      	ldr	r1, [r0, #0]
  40115a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40115e:	6001      	str	r1, [r0, #0]
  401160:	4770      	bx	lr
  401162:	0000      	.short	0x0000
  401164:	e000ed88 	.word	0xe000ed88

00401168 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40116c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401170:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401174:	4b05      	ldr	r3, [pc, #20]	; (40118c <pxPortInitialiseStack+0x24>)
  401176:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40117a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40117e:	f06f 0302 	mvn.w	r3, #2
  401182:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401186:	3844      	subs	r0, #68	; 0x44
  401188:	4770      	bx	lr
  40118a:	bf00      	nop
  40118c:	004010f9 	.word	0x004010f9

00401190 <SVC_Handler>:
	__asm volatile (
  401190:	4b06      	ldr	r3, [pc, #24]	; (4011ac <pxCurrentTCBConst2>)
  401192:	6819      	ldr	r1, [r3, #0]
  401194:	6808      	ldr	r0, [r1, #0]
  401196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40119a:	f380 8809 	msr	PSP, r0
  40119e:	f3bf 8f6f 	isb	sy
  4011a2:	f04f 0000 	mov.w	r0, #0
  4011a6:	f380 8811 	msr	BASEPRI, r0
  4011aa:	4770      	bx	lr

004011ac <pxCurrentTCBConst2>:
  4011ac:	20400a58 	.word	0x20400a58
  4011b0:	4770      	bx	lr
  4011b2:	bf00      	nop

004011b4 <vPortEnterCritical>:
  4011b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011b8:	b672      	cpsid	i
  4011ba:	f383 8811 	msr	BASEPRI, r3
  4011be:	f3bf 8f6f 	isb	sy
  4011c2:	f3bf 8f4f 	dsb	sy
  4011c6:	b662      	cpsie	i
	uxCriticalNesting++;
  4011c8:	4a0b      	ldr	r2, [pc, #44]	; (4011f8 <vPortEnterCritical+0x44>)
  4011ca:	6813      	ldr	r3, [r2, #0]
  4011cc:	3301      	adds	r3, #1
  4011ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4011d0:	2b01      	cmp	r3, #1
  4011d2:	d10f      	bne.n	4011f4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4011d4:	4b09      	ldr	r3, [pc, #36]	; (4011fc <vPortEnterCritical+0x48>)
  4011d6:	681b      	ldr	r3, [r3, #0]
  4011d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4011dc:	d00a      	beq.n	4011f4 <vPortEnterCritical+0x40>
  4011de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011e2:	b672      	cpsid	i
  4011e4:	f383 8811 	msr	BASEPRI, r3
  4011e8:	f3bf 8f6f 	isb	sy
  4011ec:	f3bf 8f4f 	dsb	sy
  4011f0:	b662      	cpsie	i
  4011f2:	e7fe      	b.n	4011f2 <vPortEnterCritical+0x3e>
  4011f4:	4770      	bx	lr
  4011f6:	bf00      	nop
  4011f8:	20400008 	.word	0x20400008
  4011fc:	e000ed04 	.word	0xe000ed04

00401200 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401200:	4b0a      	ldr	r3, [pc, #40]	; (40122c <vPortExitCritical+0x2c>)
  401202:	681b      	ldr	r3, [r3, #0]
  401204:	b953      	cbnz	r3, 40121c <vPortExitCritical+0x1c>
  401206:	f04f 0380 	mov.w	r3, #128	; 0x80
  40120a:	b672      	cpsid	i
  40120c:	f383 8811 	msr	BASEPRI, r3
  401210:	f3bf 8f6f 	isb	sy
  401214:	f3bf 8f4f 	dsb	sy
  401218:	b662      	cpsie	i
  40121a:	e7fe      	b.n	40121a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40121c:	3b01      	subs	r3, #1
  40121e:	4a03      	ldr	r2, [pc, #12]	; (40122c <vPortExitCritical+0x2c>)
  401220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401222:	b90b      	cbnz	r3, 401228 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401224:	f383 8811 	msr	BASEPRI, r3
  401228:	4770      	bx	lr
  40122a:	bf00      	nop
  40122c:	20400008 	.word	0x20400008

00401230 <PendSV_Handler>:
	__asm volatile
  401230:	f3ef 8009 	mrs	r0, PSP
  401234:	f3bf 8f6f 	isb	sy
  401238:	4b15      	ldr	r3, [pc, #84]	; (401290 <pxCurrentTCBConst>)
  40123a:	681a      	ldr	r2, [r3, #0]
  40123c:	f01e 0f10 	tst.w	lr, #16
  401240:	bf08      	it	eq
  401242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40124a:	6010      	str	r0, [r2, #0]
  40124c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401250:	f04f 0080 	mov.w	r0, #128	; 0x80
  401254:	b672      	cpsid	i
  401256:	f380 8811 	msr	BASEPRI, r0
  40125a:	f3bf 8f4f 	dsb	sy
  40125e:	f3bf 8f6f 	isb	sy
  401262:	b662      	cpsie	i
  401264:	f001 f8fe 	bl	402464 <vTaskSwitchContext>
  401268:	f04f 0000 	mov.w	r0, #0
  40126c:	f380 8811 	msr	BASEPRI, r0
  401270:	bc08      	pop	{r3}
  401272:	6819      	ldr	r1, [r3, #0]
  401274:	6808      	ldr	r0, [r1, #0]
  401276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40127a:	f01e 0f10 	tst.w	lr, #16
  40127e:	bf08      	it	eq
  401280:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401284:	f380 8809 	msr	PSP, r0
  401288:	f3bf 8f6f 	isb	sy
  40128c:	4770      	bx	lr
  40128e:	bf00      	nop

00401290 <pxCurrentTCBConst>:
  401290:	20400a58 	.word	0x20400a58
  401294:	4770      	bx	lr
  401296:	bf00      	nop

00401298 <SysTick_Handler>:
{
  401298:	b508      	push	{r3, lr}
	__asm volatile
  40129a:	f3ef 8311 	mrs	r3, BASEPRI
  40129e:	f04f 0280 	mov.w	r2, #128	; 0x80
  4012a2:	b672      	cpsid	i
  4012a4:	f382 8811 	msr	BASEPRI, r2
  4012a8:	f3bf 8f6f 	isb	sy
  4012ac:	f3bf 8f4f 	dsb	sy
  4012b0:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4012b2:	4b05      	ldr	r3, [pc, #20]	; (4012c8 <SysTick_Handler+0x30>)
  4012b4:	4798      	blx	r3
  4012b6:	b118      	cbz	r0, 4012c0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4012b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012bc:	4b03      	ldr	r3, [pc, #12]	; (4012cc <SysTick_Handler+0x34>)
  4012be:	601a      	str	r2, [r3, #0]
	__asm volatile
  4012c0:	2300      	movs	r3, #0
  4012c2:	f383 8811 	msr	BASEPRI, r3
  4012c6:	bd08      	pop	{r3, pc}
  4012c8:	004020d1 	.word	0x004020d1
  4012cc:	e000ed04 	.word	0xe000ed04

004012d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4012d0:	4a03      	ldr	r2, [pc, #12]	; (4012e0 <vPortSetupTimerInterrupt+0x10>)
  4012d2:	4b04      	ldr	r3, [pc, #16]	; (4012e4 <vPortSetupTimerInterrupt+0x14>)
  4012d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4012d6:	2207      	movs	r2, #7
  4012d8:	3b04      	subs	r3, #4
  4012da:	601a      	str	r2, [r3, #0]
  4012dc:	4770      	bx	lr
  4012de:	bf00      	nop
  4012e0:	000927bf 	.word	0x000927bf
  4012e4:	e000e014 	.word	0xe000e014

004012e8 <xPortStartScheduler>:
{
  4012e8:	b500      	push	{lr}
  4012ea:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4012ec:	4b25      	ldr	r3, [pc, #148]	; (401384 <xPortStartScheduler+0x9c>)
  4012ee:	781a      	ldrb	r2, [r3, #0]
  4012f0:	b2d2      	uxtb	r2, r2
  4012f2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4012f4:	22ff      	movs	r2, #255	; 0xff
  4012f6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4012f8:	781b      	ldrb	r3, [r3, #0]
  4012fa:	b2db      	uxtb	r3, r3
  4012fc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401300:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401304:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401308:	4a1f      	ldr	r2, [pc, #124]	; (401388 <xPortStartScheduler+0xa0>)
  40130a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40130c:	2207      	movs	r2, #7
  40130e:	4b1f      	ldr	r3, [pc, #124]	; (40138c <xPortStartScheduler+0xa4>)
  401310:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401312:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401316:	f013 0f80 	tst.w	r3, #128	; 0x80
  40131a:	d010      	beq.n	40133e <xPortStartScheduler+0x56>
  40131c:	2206      	movs	r2, #6
  40131e:	e000      	b.n	401322 <xPortStartScheduler+0x3a>
  401320:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401322:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401326:	005b      	lsls	r3, r3, #1
  401328:	b2db      	uxtb	r3, r3
  40132a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40132e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401332:	1e51      	subs	r1, r2, #1
  401334:	f013 0f80 	tst.w	r3, #128	; 0x80
  401338:	d1f2      	bne.n	401320 <xPortStartScheduler+0x38>
  40133a:	4b14      	ldr	r3, [pc, #80]	; (40138c <xPortStartScheduler+0xa4>)
  40133c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40133e:	4a13      	ldr	r2, [pc, #76]	; (40138c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401340:	6813      	ldr	r3, [r2, #0]
  401342:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401348:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40134a:	9b01      	ldr	r3, [sp, #4]
  40134c:	b2db      	uxtb	r3, r3
  40134e:	4a0d      	ldr	r2, [pc, #52]	; (401384 <xPortStartScheduler+0x9c>)
  401350:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401352:	4b0f      	ldr	r3, [pc, #60]	; (401390 <xPortStartScheduler+0xa8>)
  401354:	681a      	ldr	r2, [r3, #0]
  401356:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40135a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40135c:	681a      	ldr	r2, [r3, #0]
  40135e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401362:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401364:	4b0b      	ldr	r3, [pc, #44]	; (401394 <xPortStartScheduler+0xac>)
  401366:	4798      	blx	r3
	uxCriticalNesting = 0;
  401368:	2200      	movs	r2, #0
  40136a:	4b0b      	ldr	r3, [pc, #44]	; (401398 <xPortStartScheduler+0xb0>)
  40136c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40136e:	4b0b      	ldr	r3, [pc, #44]	; (40139c <xPortStartScheduler+0xb4>)
  401370:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401372:	4a0b      	ldr	r2, [pc, #44]	; (4013a0 <xPortStartScheduler+0xb8>)
  401374:	6813      	ldr	r3, [r2, #0]
  401376:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40137a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40137c:	4b09      	ldr	r3, [pc, #36]	; (4013a4 <xPortStartScheduler+0xbc>)
  40137e:	4798      	blx	r3
	prvTaskExitError();
  401380:	4b09      	ldr	r3, [pc, #36]	; (4013a8 <xPortStartScheduler+0xc0>)
  401382:	4798      	blx	r3
  401384:	e000e400 	.word	0xe000e400
  401388:	20400a50 	.word	0x20400a50
  40138c:	20400a54 	.word	0x20400a54
  401390:	e000ed20 	.word	0xe000ed20
  401394:	004012d1 	.word	0x004012d1
  401398:	20400008 	.word	0x20400008
  40139c:	00401155 	.word	0x00401155
  4013a0:	e000ef34 	.word	0xe000ef34
  4013a4:	00401135 	.word	0x00401135
  4013a8:	004010f9 	.word	0x004010f9

004013ac <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4013ac:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4013b0:	2b0f      	cmp	r3, #15
  4013b2:	d911      	bls.n	4013d8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4013b4:	4a12      	ldr	r2, [pc, #72]	; (401400 <vPortValidateInterruptPriority+0x54>)
  4013b6:	5c9b      	ldrb	r3, [r3, r2]
  4013b8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4013ba:	4a12      	ldr	r2, [pc, #72]	; (401404 <vPortValidateInterruptPriority+0x58>)
  4013bc:	7812      	ldrb	r2, [r2, #0]
  4013be:	429a      	cmp	r2, r3
  4013c0:	d90a      	bls.n	4013d8 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4013c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013c6:	b672      	cpsid	i
  4013c8:	f383 8811 	msr	BASEPRI, r3
  4013cc:	f3bf 8f6f 	isb	sy
  4013d0:	f3bf 8f4f 	dsb	sy
  4013d4:	b662      	cpsie	i
  4013d6:	e7fe      	b.n	4013d6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4013d8:	4b0b      	ldr	r3, [pc, #44]	; (401408 <vPortValidateInterruptPriority+0x5c>)
  4013da:	681b      	ldr	r3, [r3, #0]
  4013dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4013e0:	4a0a      	ldr	r2, [pc, #40]	; (40140c <vPortValidateInterruptPriority+0x60>)
  4013e2:	6812      	ldr	r2, [r2, #0]
  4013e4:	4293      	cmp	r3, r2
  4013e6:	d90a      	bls.n	4013fe <vPortValidateInterruptPriority+0x52>
  4013e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013ec:	b672      	cpsid	i
  4013ee:	f383 8811 	msr	BASEPRI, r3
  4013f2:	f3bf 8f6f 	isb	sy
  4013f6:	f3bf 8f4f 	dsb	sy
  4013fa:	b662      	cpsie	i
  4013fc:	e7fe      	b.n	4013fc <vPortValidateInterruptPriority+0x50>
  4013fe:	4770      	bx	lr
  401400:	e000e3f0 	.word	0xe000e3f0
  401404:	20400a50 	.word	0x20400a50
  401408:	e000ed0c 	.word	0xe000ed0c
  40140c:	20400a54 	.word	0x20400a54

00401410 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401410:	b510      	push	{r4, lr}
  401412:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401414:	4b06      	ldr	r3, [pc, #24]	; (401430 <pvPortMalloc+0x20>)
  401416:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401418:	4620      	mov	r0, r4
  40141a:	4b06      	ldr	r3, [pc, #24]	; (401434 <pvPortMalloc+0x24>)
  40141c:	4798      	blx	r3
  40141e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401420:	4b05      	ldr	r3, [pc, #20]	; (401438 <pvPortMalloc+0x28>)
  401422:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401424:	b10c      	cbz	r4, 40142a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401426:	4620      	mov	r0, r4
  401428:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40142a:	4b04      	ldr	r3, [pc, #16]	; (40143c <pvPortMalloc+0x2c>)
  40142c:	4798      	blx	r3
	return pvReturn;
  40142e:	e7fa      	b.n	401426 <pvPortMalloc+0x16>
  401430:	004020b5 	.word	0x004020b5
  401434:	00403aa9 	.word	0x00403aa9
  401438:	0040221d 	.word	0x0040221d
  40143c:	00403187 	.word	0x00403187

00401440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401440:	b148      	cbz	r0, 401456 <vPortFree+0x16>
{
  401442:	b510      	push	{r4, lr}
  401444:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401446:	4b04      	ldr	r3, [pc, #16]	; (401458 <vPortFree+0x18>)
  401448:	4798      	blx	r3
		{
			free( pv );
  40144a:	4620      	mov	r0, r4
  40144c:	4b03      	ldr	r3, [pc, #12]	; (40145c <vPortFree+0x1c>)
  40144e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401450:	4b03      	ldr	r3, [pc, #12]	; (401460 <vPortFree+0x20>)
  401452:	4798      	blx	r3
  401454:	bd10      	pop	{r4, pc}
  401456:	4770      	bx	lr
  401458:	004020b5 	.word	0x004020b5
  40145c:	00403ab9 	.word	0x00403ab9
  401460:	0040221d 	.word	0x0040221d

00401464 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401464:	b538      	push	{r3, r4, r5, lr}
  401466:	4604      	mov	r4, r0
  401468:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40146a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40146c:	b95a      	cbnz	r2, 401486 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40146e:	6803      	ldr	r3, [r0, #0]
  401470:	2b00      	cmp	r3, #0
  401472:	d12e      	bne.n	4014d2 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401474:	6840      	ldr	r0, [r0, #4]
  401476:	4b1b      	ldr	r3, [pc, #108]	; (4014e4 <prvCopyDataToQueue+0x80>)
  401478:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40147a:	2300      	movs	r3, #0
  40147c:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40147e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401480:	3301      	adds	r3, #1
  401482:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401484:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401486:	b96d      	cbnz	r5, 4014a4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401488:	6880      	ldr	r0, [r0, #8]
  40148a:	4b17      	ldr	r3, [pc, #92]	; (4014e8 <prvCopyDataToQueue+0x84>)
  40148c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40148e:	68a3      	ldr	r3, [r4, #8]
  401490:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401492:	4413      	add	r3, r2
  401494:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401496:	6862      	ldr	r2, [r4, #4]
  401498:	4293      	cmp	r3, r2
  40149a:	d31c      	bcc.n	4014d6 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40149c:	6823      	ldr	r3, [r4, #0]
  40149e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4014a0:	2000      	movs	r0, #0
  4014a2:	e7ec      	b.n	40147e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4014a4:	68c0      	ldr	r0, [r0, #12]
  4014a6:	4b10      	ldr	r3, [pc, #64]	; (4014e8 <prvCopyDataToQueue+0x84>)
  4014a8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4014aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4014ac:	425b      	negs	r3, r3
  4014ae:	68e2      	ldr	r2, [r4, #12]
  4014b0:	441a      	add	r2, r3
  4014b2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4014b4:	6821      	ldr	r1, [r4, #0]
  4014b6:	428a      	cmp	r2, r1
  4014b8:	d202      	bcs.n	4014c0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4014ba:	6862      	ldr	r2, [r4, #4]
  4014bc:	4413      	add	r3, r2
  4014be:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4014c0:	2d02      	cmp	r5, #2
  4014c2:	d10a      	bne.n	4014da <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4014c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014c6:	b153      	cbz	r3, 4014de <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4014c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014ca:	3b01      	subs	r3, #1
  4014cc:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4014ce:	2000      	movs	r0, #0
  4014d0:	e7d5      	b.n	40147e <prvCopyDataToQueue+0x1a>
  4014d2:	2000      	movs	r0, #0
  4014d4:	e7d3      	b.n	40147e <prvCopyDataToQueue+0x1a>
  4014d6:	2000      	movs	r0, #0
  4014d8:	e7d1      	b.n	40147e <prvCopyDataToQueue+0x1a>
  4014da:	2000      	movs	r0, #0
  4014dc:	e7cf      	b.n	40147e <prvCopyDataToQueue+0x1a>
  4014de:	2000      	movs	r0, #0
  4014e0:	e7cd      	b.n	40147e <prvCopyDataToQueue+0x1a>
  4014e2:	bf00      	nop
  4014e4:	00402865 	.word	0x00402865
  4014e8:	00404029 	.word	0x00404029

004014ec <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4014ec:	b530      	push	{r4, r5, lr}
  4014ee:	b083      	sub	sp, #12
  4014f0:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4014f2:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4014f4:	b174      	cbz	r4, 401514 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4014f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014fa:	429a      	cmp	r2, r3
  4014fc:	d315      	bcc.n	40152a <prvNotifyQueueSetContainer+0x3e>
  4014fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401502:	b672      	cpsid	i
  401504:	f383 8811 	msr	BASEPRI, r3
  401508:	f3bf 8f6f 	isb	sy
  40150c:	f3bf 8f4f 	dsb	sy
  401510:	b662      	cpsie	i
  401512:	e7fe      	b.n	401512 <prvNotifyQueueSetContainer+0x26>
  401514:	f04f 0380 	mov.w	r3, #128	; 0x80
  401518:	b672      	cpsid	i
  40151a:	f383 8811 	msr	BASEPRI, r3
  40151e:	f3bf 8f6f 	isb	sy
  401522:	f3bf 8f4f 	dsb	sy
  401526:	b662      	cpsie	i
  401528:	e7fe      	b.n	401528 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40152a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40152c:	4293      	cmp	r3, r2
  40152e:	d803      	bhi.n	401538 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401530:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401532:	4628      	mov	r0, r5
  401534:	b003      	add	sp, #12
  401536:	bd30      	pop	{r4, r5, pc}
  401538:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40153a:	a901      	add	r1, sp, #4
  40153c:	4620      	mov	r0, r4
  40153e:	4b0b      	ldr	r3, [pc, #44]	; (40156c <prvNotifyQueueSetContainer+0x80>)
  401540:	4798      	blx	r3
  401542:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401544:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401546:	f1b3 3fff 	cmp.w	r3, #4294967295
  40154a:	d10a      	bne.n	401562 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40154c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40154e:	2b00      	cmp	r3, #0
  401550:	d0ef      	beq.n	401532 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401552:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401556:	4b06      	ldr	r3, [pc, #24]	; (401570 <prvNotifyQueueSetContainer+0x84>)
  401558:	4798      	blx	r3
  40155a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40155c:	bf18      	it	ne
  40155e:	2501      	movne	r5, #1
  401560:	e7e7      	b.n	401532 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401562:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401564:	3301      	adds	r3, #1
  401566:	64a3      	str	r3, [r4, #72]	; 0x48
  401568:	e7e3      	b.n	401532 <prvNotifyQueueSetContainer+0x46>
  40156a:	bf00      	nop
  40156c:	00401465 	.word	0x00401465
  401570:	00402639 	.word	0x00402639

00401574 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401574:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401576:	b172      	cbz	r2, 401596 <prvCopyDataFromQueue+0x22>
{
  401578:	b510      	push	{r4, lr}
  40157a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40157c:	68c4      	ldr	r4, [r0, #12]
  40157e:	4414      	add	r4, r2
  401580:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401582:	6840      	ldr	r0, [r0, #4]
  401584:	4284      	cmp	r4, r0
  401586:	d301      	bcc.n	40158c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401588:	6818      	ldr	r0, [r3, #0]
  40158a:	60d8      	str	r0, [r3, #12]
  40158c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40158e:	68d9      	ldr	r1, [r3, #12]
  401590:	4b01      	ldr	r3, [pc, #4]	; (401598 <prvCopyDataFromQueue+0x24>)
  401592:	4798      	blx	r3
  401594:	bd10      	pop	{r4, pc}
  401596:	4770      	bx	lr
  401598:	00404029 	.word	0x00404029

0040159c <prvUnlockQueue>:
{
  40159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40159e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4015a0:	4b22      	ldr	r3, [pc, #136]	; (40162c <prvUnlockQueue+0x90>)
  4015a2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4015a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015a6:	2b00      	cmp	r3, #0
  4015a8:	dd1b      	ble.n	4015e2 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4015aa:	4d21      	ldr	r5, [pc, #132]	; (401630 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4015ac:	4f21      	ldr	r7, [pc, #132]	; (401634 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015ae:	4e22      	ldr	r6, [pc, #136]	; (401638 <prvUnlockQueue+0x9c>)
  4015b0:	e00b      	b.n	4015ca <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4015b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015b4:	b1ab      	cbz	r3, 4015e2 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015ba:	47b0      	blx	r6
  4015bc:	b978      	cbnz	r0, 4015de <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4015be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015c0:	3b01      	subs	r3, #1
  4015c2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4015c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015c6:	2b00      	cmp	r3, #0
  4015c8:	dd0b      	ble.n	4015e2 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4015ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4015cc:	2b00      	cmp	r3, #0
  4015ce:	d0f0      	beq.n	4015b2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4015d0:	2100      	movs	r1, #0
  4015d2:	4620      	mov	r0, r4
  4015d4:	47a8      	blx	r5
  4015d6:	2801      	cmp	r0, #1
  4015d8:	d1f1      	bne.n	4015be <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4015da:	47b8      	blx	r7
  4015dc:	e7ef      	b.n	4015be <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4015de:	47b8      	blx	r7
  4015e0:	e7ed      	b.n	4015be <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4015e2:	f04f 33ff 	mov.w	r3, #4294967295
  4015e6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4015e8:	4b14      	ldr	r3, [pc, #80]	; (40163c <prvUnlockQueue+0xa0>)
  4015ea:	4798      	blx	r3
	taskENTER_CRITICAL();
  4015ec:	4b0f      	ldr	r3, [pc, #60]	; (40162c <prvUnlockQueue+0x90>)
  4015ee:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4015f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015f2:	2b00      	cmp	r3, #0
  4015f4:	dd14      	ble.n	401620 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015f6:	6923      	ldr	r3, [r4, #16]
  4015f8:	b193      	cbz	r3, 401620 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4015fa:	f104 0610 	add.w	r6, r4, #16
  4015fe:	4d0e      	ldr	r5, [pc, #56]	; (401638 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401600:	4f0c      	ldr	r7, [pc, #48]	; (401634 <prvUnlockQueue+0x98>)
  401602:	e007      	b.n	401614 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401604:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401606:	3b01      	subs	r3, #1
  401608:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40160a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40160c:	2b00      	cmp	r3, #0
  40160e:	dd07      	ble.n	401620 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401610:	6923      	ldr	r3, [r4, #16]
  401612:	b12b      	cbz	r3, 401620 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401614:	4630      	mov	r0, r6
  401616:	47a8      	blx	r5
  401618:	2800      	cmp	r0, #0
  40161a:	d0f3      	beq.n	401604 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  40161c:	47b8      	blx	r7
  40161e:	e7f1      	b.n	401604 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401620:	f04f 33ff 	mov.w	r3, #4294967295
  401624:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401626:	4b05      	ldr	r3, [pc, #20]	; (40163c <prvUnlockQueue+0xa0>)
  401628:	4798      	blx	r3
  40162a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40162c:	004011b5 	.word	0x004011b5
  401630:	004014ed 	.word	0x004014ed
  401634:	00402795 	.word	0x00402795
  401638:	00402639 	.word	0x00402639
  40163c:	00401201 	.word	0x00401201

00401640 <xQueueGenericReset>:
{
  401640:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401642:	b308      	cbz	r0, 401688 <xQueueGenericReset+0x48>
  401644:	4604      	mov	r4, r0
  401646:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401648:	4b1d      	ldr	r3, [pc, #116]	; (4016c0 <xQueueGenericReset+0x80>)
  40164a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40164c:	6822      	ldr	r2, [r4, #0]
  40164e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401652:	fb03 f301 	mul.w	r3, r3, r1
  401656:	18d0      	adds	r0, r2, r3
  401658:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40165a:	2000      	movs	r0, #0
  40165c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40165e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401660:	1a5b      	subs	r3, r3, r1
  401662:	4413      	add	r3, r2
  401664:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401666:	f04f 33ff 	mov.w	r3, #4294967295
  40166a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40166c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  40166e:	b9fd      	cbnz	r5, 4016b0 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401670:	6923      	ldr	r3, [r4, #16]
  401672:	b12b      	cbz	r3, 401680 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401674:	f104 0010 	add.w	r0, r4, #16
  401678:	4b12      	ldr	r3, [pc, #72]	; (4016c4 <xQueueGenericReset+0x84>)
  40167a:	4798      	blx	r3
  40167c:	2801      	cmp	r0, #1
  40167e:	d00e      	beq.n	40169e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401680:	4b11      	ldr	r3, [pc, #68]	; (4016c8 <xQueueGenericReset+0x88>)
  401682:	4798      	blx	r3
}
  401684:	2001      	movs	r0, #1
  401686:	bd38      	pop	{r3, r4, r5, pc}
  401688:	f04f 0380 	mov.w	r3, #128	; 0x80
  40168c:	b672      	cpsid	i
  40168e:	f383 8811 	msr	BASEPRI, r3
  401692:	f3bf 8f6f 	isb	sy
  401696:	f3bf 8f4f 	dsb	sy
  40169a:	b662      	cpsie	i
  40169c:	e7fe      	b.n	40169c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40169e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016a2:	4b0a      	ldr	r3, [pc, #40]	; (4016cc <xQueueGenericReset+0x8c>)
  4016a4:	601a      	str	r2, [r3, #0]
  4016a6:	f3bf 8f4f 	dsb	sy
  4016aa:	f3bf 8f6f 	isb	sy
  4016ae:	e7e7      	b.n	401680 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4016b0:	f104 0010 	add.w	r0, r4, #16
  4016b4:	4d06      	ldr	r5, [pc, #24]	; (4016d0 <xQueueGenericReset+0x90>)
  4016b6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4016b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016bc:	47a8      	blx	r5
  4016be:	e7df      	b.n	401680 <xQueueGenericReset+0x40>
  4016c0:	004011b5 	.word	0x004011b5
  4016c4:	00402639 	.word	0x00402639
  4016c8:	00401201 	.word	0x00401201
  4016cc:	e000ed04 	.word	0xe000ed04
  4016d0:	00401069 	.word	0x00401069

004016d4 <xQueueGenericCreate>:
{
  4016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4016d6:	b950      	cbnz	r0, 4016ee <xQueueGenericCreate+0x1a>
  4016d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016dc:	b672      	cpsid	i
  4016de:	f383 8811 	msr	BASEPRI, r3
  4016e2:	f3bf 8f6f 	isb	sy
  4016e6:	f3bf 8f4f 	dsb	sy
  4016ea:	b662      	cpsie	i
  4016ec:	e7fe      	b.n	4016ec <xQueueGenericCreate+0x18>
  4016ee:	4606      	mov	r6, r0
  4016f0:	4617      	mov	r7, r2
  4016f2:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4016f4:	b189      	cbz	r1, 40171a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4016f6:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4016fa:	3059      	adds	r0, #89	; 0x59
  4016fc:	4b12      	ldr	r3, [pc, #72]	; (401748 <xQueueGenericCreate+0x74>)
  4016fe:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401700:	4604      	mov	r4, r0
  401702:	b9e8      	cbnz	r0, 401740 <xQueueGenericCreate+0x6c>
  401704:	f04f 0380 	mov.w	r3, #128	; 0x80
  401708:	b672      	cpsid	i
  40170a:	f383 8811 	msr	BASEPRI, r3
  40170e:	f3bf 8f6f 	isb	sy
  401712:	f3bf 8f4f 	dsb	sy
  401716:	b662      	cpsie	i
  401718:	e7fe      	b.n	401718 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40171a:	2058      	movs	r0, #88	; 0x58
  40171c:	4b0a      	ldr	r3, [pc, #40]	; (401748 <xQueueGenericCreate+0x74>)
  40171e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401720:	4604      	mov	r4, r0
  401722:	2800      	cmp	r0, #0
  401724:	d0ee      	beq.n	401704 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401726:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401728:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40172a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40172c:	2101      	movs	r1, #1
  40172e:	4620      	mov	r0, r4
  401730:	4b06      	ldr	r3, [pc, #24]	; (40174c <xQueueGenericCreate+0x78>)
  401732:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401734:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401738:	2300      	movs	r3, #0
  40173a:	6563      	str	r3, [r4, #84]	; 0x54
}
  40173c:	4620      	mov	r0, r4
  40173e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401740:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401744:	6003      	str	r3, [r0, #0]
  401746:	e7ef      	b.n	401728 <xQueueGenericCreate+0x54>
  401748:	00401411 	.word	0x00401411
  40174c:	00401641 	.word	0x00401641

00401750 <xQueueGenericSend>:
{
  401750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401754:	b085      	sub	sp, #20
  401756:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401758:	b1b8      	cbz	r0, 40178a <xQueueGenericSend+0x3a>
  40175a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40175c:	b301      	cbz	r1, 4017a0 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40175e:	2b02      	cmp	r3, #2
  401760:	d02c      	beq.n	4017bc <xQueueGenericSend+0x6c>
  401762:	461d      	mov	r5, r3
  401764:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401766:	4b66      	ldr	r3, [pc, #408]	; (401900 <xQueueGenericSend+0x1b0>)
  401768:	4798      	blx	r3
  40176a:	2800      	cmp	r0, #0
  40176c:	d134      	bne.n	4017d8 <xQueueGenericSend+0x88>
  40176e:	9b01      	ldr	r3, [sp, #4]
  401770:	2b00      	cmp	r3, #0
  401772:	d038      	beq.n	4017e6 <xQueueGenericSend+0x96>
  401774:	f04f 0380 	mov.w	r3, #128	; 0x80
  401778:	b672      	cpsid	i
  40177a:	f383 8811 	msr	BASEPRI, r3
  40177e:	f3bf 8f6f 	isb	sy
  401782:	f3bf 8f4f 	dsb	sy
  401786:	b662      	cpsie	i
  401788:	e7fe      	b.n	401788 <xQueueGenericSend+0x38>
  40178a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40178e:	b672      	cpsid	i
  401790:	f383 8811 	msr	BASEPRI, r3
  401794:	f3bf 8f6f 	isb	sy
  401798:	f3bf 8f4f 	dsb	sy
  40179c:	b662      	cpsie	i
  40179e:	e7fe      	b.n	40179e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4017a2:	2a00      	cmp	r2, #0
  4017a4:	d0db      	beq.n	40175e <xQueueGenericSend+0xe>
  4017a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017aa:	b672      	cpsid	i
  4017ac:	f383 8811 	msr	BASEPRI, r3
  4017b0:	f3bf 8f6f 	isb	sy
  4017b4:	f3bf 8f4f 	dsb	sy
  4017b8:	b662      	cpsie	i
  4017ba:	e7fe      	b.n	4017ba <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4017bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4017be:	2a01      	cmp	r2, #1
  4017c0:	d0cf      	beq.n	401762 <xQueueGenericSend+0x12>
  4017c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c6:	b672      	cpsid	i
  4017c8:	f383 8811 	msr	BASEPRI, r3
  4017cc:	f3bf 8f6f 	isb	sy
  4017d0:	f3bf 8f4f 	dsb	sy
  4017d4:	b662      	cpsie	i
  4017d6:	e7fe      	b.n	4017d6 <xQueueGenericSend+0x86>
  4017d8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4017da:	4e4a      	ldr	r6, [pc, #296]	; (401904 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4017dc:	f8df a150 	ldr.w	sl, [pc, #336]	; 401930 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4017e0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401910 <xQueueGenericSend+0x1c0>
  4017e4:	e042      	b.n	40186c <xQueueGenericSend+0x11c>
  4017e6:	2700      	movs	r7, #0
  4017e8:	e7f7      	b.n	4017da <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4017ea:	462a      	mov	r2, r5
  4017ec:	4641      	mov	r1, r8
  4017ee:	4620      	mov	r0, r4
  4017f0:	4b45      	ldr	r3, [pc, #276]	; (401908 <xQueueGenericSend+0x1b8>)
  4017f2:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4017f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4017f6:	b19b      	cbz	r3, 401820 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4017f8:	4629      	mov	r1, r5
  4017fa:	4620      	mov	r0, r4
  4017fc:	4b43      	ldr	r3, [pc, #268]	; (40190c <xQueueGenericSend+0x1bc>)
  4017fe:	4798      	blx	r3
  401800:	2801      	cmp	r0, #1
  401802:	d107      	bne.n	401814 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401808:	4b41      	ldr	r3, [pc, #260]	; (401910 <xQueueGenericSend+0x1c0>)
  40180a:	601a      	str	r2, [r3, #0]
  40180c:	f3bf 8f4f 	dsb	sy
  401810:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401814:	4b3f      	ldr	r3, [pc, #252]	; (401914 <xQueueGenericSend+0x1c4>)
  401816:	4798      	blx	r3
				return pdPASS;
  401818:	2001      	movs	r0, #1
}
  40181a:	b005      	add	sp, #20
  40181c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401820:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401822:	b173      	cbz	r3, 401842 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401824:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401828:	4b3b      	ldr	r3, [pc, #236]	; (401918 <xQueueGenericSend+0x1c8>)
  40182a:	4798      	blx	r3
  40182c:	2801      	cmp	r0, #1
  40182e:	d1f1      	bne.n	401814 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401834:	4b36      	ldr	r3, [pc, #216]	; (401910 <xQueueGenericSend+0x1c0>)
  401836:	601a      	str	r2, [r3, #0]
  401838:	f3bf 8f4f 	dsb	sy
  40183c:	f3bf 8f6f 	isb	sy
  401840:	e7e8      	b.n	401814 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401842:	2800      	cmp	r0, #0
  401844:	d0e6      	beq.n	401814 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40184a:	4b31      	ldr	r3, [pc, #196]	; (401910 <xQueueGenericSend+0x1c0>)
  40184c:	601a      	str	r2, [r3, #0]
  40184e:	f3bf 8f4f 	dsb	sy
  401852:	f3bf 8f6f 	isb	sy
  401856:	e7dd      	b.n	401814 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401858:	4b2e      	ldr	r3, [pc, #184]	; (401914 <xQueueGenericSend+0x1c4>)
  40185a:	4798      	blx	r3
					return errQUEUE_FULL;
  40185c:	2000      	movs	r0, #0
  40185e:	e7dc      	b.n	40181a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401860:	4620      	mov	r0, r4
  401862:	4b2e      	ldr	r3, [pc, #184]	; (40191c <xQueueGenericSend+0x1cc>)
  401864:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401866:	4b2e      	ldr	r3, [pc, #184]	; (401920 <xQueueGenericSend+0x1d0>)
  401868:	4798      	blx	r3
  40186a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  40186c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40186e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401872:	429a      	cmp	r2, r3
  401874:	d3b9      	bcc.n	4017ea <xQueueGenericSend+0x9a>
  401876:	2d02      	cmp	r5, #2
  401878:	d0b7      	beq.n	4017ea <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  40187a:	9b01      	ldr	r3, [sp, #4]
  40187c:	2b00      	cmp	r3, #0
  40187e:	d0eb      	beq.n	401858 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401880:	b90f      	cbnz	r7, 401886 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401882:	a802      	add	r0, sp, #8
  401884:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401886:	4b23      	ldr	r3, [pc, #140]	; (401914 <xQueueGenericSend+0x1c4>)
  401888:	4798      	blx	r3
		vTaskSuspendAll();
  40188a:	4b26      	ldr	r3, [pc, #152]	; (401924 <xQueueGenericSend+0x1d4>)
  40188c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40188e:	47b0      	blx	r6
  401890:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401892:	f1b3 3fff 	cmp.w	r3, #4294967295
  401896:	d101      	bne.n	40189c <xQueueGenericSend+0x14c>
  401898:	2300      	movs	r3, #0
  40189a:	6463      	str	r3, [r4, #68]	; 0x44
  40189c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40189e:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018a2:	d101      	bne.n	4018a8 <xQueueGenericSend+0x158>
  4018a4:	2300      	movs	r3, #0
  4018a6:	64a3      	str	r3, [r4, #72]	; 0x48
  4018a8:	4b1a      	ldr	r3, [pc, #104]	; (401914 <xQueueGenericSend+0x1c4>)
  4018aa:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4018ac:	a901      	add	r1, sp, #4
  4018ae:	a802      	add	r0, sp, #8
  4018b0:	4b1d      	ldr	r3, [pc, #116]	; (401928 <xQueueGenericSend+0x1d8>)
  4018b2:	4798      	blx	r3
  4018b4:	b9e0      	cbnz	r0, 4018f0 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4018b6:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4018b8:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4018bc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4018be:	4b15      	ldr	r3, [pc, #84]	; (401914 <xQueueGenericSend+0x1c4>)
  4018c0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4018c2:	45bb      	cmp	fp, r7
  4018c4:	d1cc      	bne.n	401860 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4018c6:	9901      	ldr	r1, [sp, #4]
  4018c8:	f104 0010 	add.w	r0, r4, #16
  4018cc:	4b17      	ldr	r3, [pc, #92]	; (40192c <xQueueGenericSend+0x1dc>)
  4018ce:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4018d0:	4620      	mov	r0, r4
  4018d2:	4b12      	ldr	r3, [pc, #72]	; (40191c <xQueueGenericSend+0x1cc>)
  4018d4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4018d6:	4b12      	ldr	r3, [pc, #72]	; (401920 <xQueueGenericSend+0x1d0>)
  4018d8:	4798      	blx	r3
  4018da:	2800      	cmp	r0, #0
  4018dc:	d1c5      	bne.n	40186a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4018de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4018e2:	f8c9 3000 	str.w	r3, [r9]
  4018e6:	f3bf 8f4f 	dsb	sy
  4018ea:	f3bf 8f6f 	isb	sy
  4018ee:	e7bc      	b.n	40186a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4018f0:	4620      	mov	r0, r4
  4018f2:	4b0a      	ldr	r3, [pc, #40]	; (40191c <xQueueGenericSend+0x1cc>)
  4018f4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4018f6:	4b0a      	ldr	r3, [pc, #40]	; (401920 <xQueueGenericSend+0x1d0>)
  4018f8:	4798      	blx	r3
			return errQUEUE_FULL;
  4018fa:	2000      	movs	r0, #0
  4018fc:	e78d      	b.n	40181a <xQueueGenericSend+0xca>
  4018fe:	bf00      	nop
  401900:	004027a1 	.word	0x004027a1
  401904:	004011b5 	.word	0x004011b5
  401908:	00401465 	.word	0x00401465
  40190c:	004014ed 	.word	0x004014ed
  401910:	e000ed04 	.word	0xe000ed04
  401914:	00401201 	.word	0x00401201
  401918:	00402639 	.word	0x00402639
  40191c:	0040159d 	.word	0x0040159d
  401920:	0040221d 	.word	0x0040221d
  401924:	004020b5 	.word	0x004020b5
  401928:	00402701 	.word	0x00402701
  40192c:	00402535 	.word	0x00402535
  401930:	004026d1 	.word	0x004026d1

00401934 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401934:	2800      	cmp	r0, #0
  401936:	d036      	beq.n	4019a6 <xQueueGenericSendFromISR+0x72>
{
  401938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40193c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40193e:	2900      	cmp	r1, #0
  401940:	d03c      	beq.n	4019bc <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401942:	2b02      	cmp	r3, #2
  401944:	d048      	beq.n	4019d8 <xQueueGenericSendFromISR+0xa4>
  401946:	461e      	mov	r6, r3
  401948:	4615      	mov	r5, r2
  40194a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40194c:	4b35      	ldr	r3, [pc, #212]	; (401a24 <xQueueGenericSendFromISR+0xf0>)
  40194e:	4798      	blx	r3
	__asm volatile
  401950:	f3ef 8711 	mrs	r7, BASEPRI
  401954:	f04f 0380 	mov.w	r3, #128	; 0x80
  401958:	b672      	cpsid	i
  40195a:	f383 8811 	msr	BASEPRI, r3
  40195e:	f3bf 8f6f 	isb	sy
  401962:	f3bf 8f4f 	dsb	sy
  401966:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401968:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40196a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40196c:	429a      	cmp	r2, r3
  40196e:	d301      	bcc.n	401974 <xQueueGenericSendFromISR+0x40>
  401970:	2e02      	cmp	r6, #2
  401972:	d14f      	bne.n	401a14 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401974:	4632      	mov	r2, r6
  401976:	4641      	mov	r1, r8
  401978:	4620      	mov	r0, r4
  40197a:	4b2b      	ldr	r3, [pc, #172]	; (401a28 <xQueueGenericSendFromISR+0xf4>)
  40197c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40197e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401980:	f1b3 3fff 	cmp.w	r3, #4294967295
  401984:	d141      	bne.n	401a0a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401986:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401988:	2b00      	cmp	r3, #0
  40198a:	d033      	beq.n	4019f4 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40198c:	4631      	mov	r1, r6
  40198e:	4620      	mov	r0, r4
  401990:	4b26      	ldr	r3, [pc, #152]	; (401a2c <xQueueGenericSendFromISR+0xf8>)
  401992:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401994:	2d00      	cmp	r5, #0
  401996:	d03f      	beq.n	401a18 <xQueueGenericSendFromISR+0xe4>
  401998:	2801      	cmp	r0, #1
  40199a:	d13d      	bne.n	401a18 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40199c:	6028      	str	r0, [r5, #0]
	__asm volatile
  40199e:	f387 8811 	msr	BASEPRI, r7
}
  4019a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4019a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019aa:	b672      	cpsid	i
  4019ac:	f383 8811 	msr	BASEPRI, r3
  4019b0:	f3bf 8f6f 	isb	sy
  4019b4:	f3bf 8f4f 	dsb	sy
  4019b8:	b662      	cpsie	i
  4019ba:	e7fe      	b.n	4019ba <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4019bc:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4019be:	2800      	cmp	r0, #0
  4019c0:	d0bf      	beq.n	401942 <xQueueGenericSendFromISR+0xe>
  4019c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019c6:	b672      	cpsid	i
  4019c8:	f383 8811 	msr	BASEPRI, r3
  4019cc:	f3bf 8f6f 	isb	sy
  4019d0:	f3bf 8f4f 	dsb	sy
  4019d4:	b662      	cpsie	i
  4019d6:	e7fe      	b.n	4019d6 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4019d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4019da:	2801      	cmp	r0, #1
  4019dc:	d0b3      	beq.n	401946 <xQueueGenericSendFromISR+0x12>
  4019de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019e2:	b672      	cpsid	i
  4019e4:	f383 8811 	msr	BASEPRI, r3
  4019e8:	f3bf 8f6f 	isb	sy
  4019ec:	f3bf 8f4f 	dsb	sy
  4019f0:	b662      	cpsie	i
  4019f2:	e7fe      	b.n	4019f2 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4019f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4019f6:	b18b      	cbz	r3, 401a1c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4019f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019fc:	4b0c      	ldr	r3, [pc, #48]	; (401a30 <xQueueGenericSendFromISR+0xfc>)
  4019fe:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a00:	b175      	cbz	r5, 401a20 <xQueueGenericSendFromISR+0xec>
  401a02:	b168      	cbz	r0, 401a20 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a04:	2001      	movs	r0, #1
  401a06:	6028      	str	r0, [r5, #0]
  401a08:	e7c9      	b.n	40199e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401a0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a0c:	3301      	adds	r3, #1
  401a0e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401a10:	2001      	movs	r0, #1
  401a12:	e7c4      	b.n	40199e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401a14:	2000      	movs	r0, #0
  401a16:	e7c2      	b.n	40199e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401a18:	2001      	movs	r0, #1
  401a1a:	e7c0      	b.n	40199e <xQueueGenericSendFromISR+0x6a>
  401a1c:	2001      	movs	r0, #1
  401a1e:	e7be      	b.n	40199e <xQueueGenericSendFromISR+0x6a>
  401a20:	2001      	movs	r0, #1
  401a22:	e7bc      	b.n	40199e <xQueueGenericSendFromISR+0x6a>
  401a24:	004013ad 	.word	0x004013ad
  401a28:	00401465 	.word	0x00401465
  401a2c:	004014ed 	.word	0x004014ed
  401a30:	00402639 	.word	0x00402639

00401a34 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401a34:	b170      	cbz	r0, 401a54 <xQueueGiveFromISR+0x20>
{
  401a36:	b570      	push	{r4, r5, r6, lr}
  401a38:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401a3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401a3c:	b1ab      	cbz	r3, 401a6a <xQueueGiveFromISR+0x36>
  401a3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a42:	b672      	cpsid	i
  401a44:	f383 8811 	msr	BASEPRI, r3
  401a48:	f3bf 8f6f 	isb	sy
  401a4c:	f3bf 8f4f 	dsb	sy
  401a50:	b662      	cpsie	i
  401a52:	e7fe      	b.n	401a52 <xQueueGiveFromISR+0x1e>
  401a54:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a58:	b672      	cpsid	i
  401a5a:	f383 8811 	msr	BASEPRI, r3
  401a5e:	f3bf 8f6f 	isb	sy
  401a62:	f3bf 8f4f 	dsb	sy
  401a66:	b662      	cpsie	i
  401a68:	e7fe      	b.n	401a68 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401a6a:	6803      	ldr	r3, [r0, #0]
  401a6c:	b333      	cbz	r3, 401abc <xQueueGiveFromISR+0x88>
  401a6e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401a70:	4b25      	ldr	r3, [pc, #148]	; (401b08 <xQueueGiveFromISR+0xd4>)
  401a72:	4798      	blx	r3
	__asm volatile
  401a74:	f3ef 8611 	mrs	r6, BASEPRI
  401a78:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a7c:	b672      	cpsid	i
  401a7e:	f383 8811 	msr	BASEPRI, r3
  401a82:	f3bf 8f6f 	isb	sy
  401a86:	f3bf 8f4f 	dsb	sy
  401a8a:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401a8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a90:	429a      	cmp	r2, r3
  401a92:	d231      	bcs.n	401af8 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  401a94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a96:	3301      	adds	r3, #1
  401a98:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401a9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401aa0:	d125      	bne.n	401aee <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401aa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401aa4:	b1c3      	cbz	r3, 401ad8 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401aa6:	2100      	movs	r1, #0
  401aa8:	4620      	mov	r0, r4
  401aaa:	4b18      	ldr	r3, [pc, #96]	; (401b0c <xQueueGiveFromISR+0xd8>)
  401aac:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401aae:	b32d      	cbz	r5, 401afc <xQueueGiveFromISR+0xc8>
  401ab0:	2801      	cmp	r0, #1
  401ab2:	d123      	bne.n	401afc <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401ab4:	6028      	str	r0, [r5, #0]
	__asm volatile
  401ab6:	f386 8811 	msr	BASEPRI, r6
}
  401aba:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401abc:	6843      	ldr	r3, [r0, #4]
  401abe:	2b00      	cmp	r3, #0
  401ac0:	d0d5      	beq.n	401a6e <xQueueGiveFromISR+0x3a>
	__asm volatile
  401ac2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac6:	b672      	cpsid	i
  401ac8:	f383 8811 	msr	BASEPRI, r3
  401acc:	f3bf 8f6f 	isb	sy
  401ad0:	f3bf 8f4f 	dsb	sy
  401ad4:	b662      	cpsie	i
  401ad6:	e7fe      	b.n	401ad6 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ada:	b18b      	cbz	r3, 401b00 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401adc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ae0:	4b0b      	ldr	r3, [pc, #44]	; (401b10 <xQueueGiveFromISR+0xdc>)
  401ae2:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401ae4:	b175      	cbz	r5, 401b04 <xQueueGiveFromISR+0xd0>
  401ae6:	b168      	cbz	r0, 401b04 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401ae8:	2001      	movs	r0, #1
  401aea:	6028      	str	r0, [r5, #0]
  401aec:	e7e3      	b.n	401ab6 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401aee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401af0:	3301      	adds	r3, #1
  401af2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401af4:	2001      	movs	r0, #1
  401af6:	e7de      	b.n	401ab6 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401af8:	2000      	movs	r0, #0
  401afa:	e7dc      	b.n	401ab6 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401afc:	2001      	movs	r0, #1
  401afe:	e7da      	b.n	401ab6 <xQueueGiveFromISR+0x82>
  401b00:	2001      	movs	r0, #1
  401b02:	e7d8      	b.n	401ab6 <xQueueGiveFromISR+0x82>
  401b04:	2001      	movs	r0, #1
  401b06:	e7d6      	b.n	401ab6 <xQueueGiveFromISR+0x82>
  401b08:	004013ad 	.word	0x004013ad
  401b0c:	004014ed 	.word	0x004014ed
  401b10:	00402639 	.word	0x00402639

00401b14 <xQueueGenericReceive>:
{
  401b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b18:	b084      	sub	sp, #16
  401b1a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b1c:	b198      	cbz	r0, 401b46 <xQueueGenericReceive+0x32>
  401b1e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b20:	b1e1      	cbz	r1, 401b5c <xQueueGenericReceive+0x48>
  401b22:	4698      	mov	r8, r3
  401b24:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b26:	4b61      	ldr	r3, [pc, #388]	; (401cac <xQueueGenericReceive+0x198>)
  401b28:	4798      	blx	r3
  401b2a:	bb28      	cbnz	r0, 401b78 <xQueueGenericReceive+0x64>
  401b2c:	9b01      	ldr	r3, [sp, #4]
  401b2e:	b353      	cbz	r3, 401b86 <xQueueGenericReceive+0x72>
  401b30:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b34:	b672      	cpsid	i
  401b36:	f383 8811 	msr	BASEPRI, r3
  401b3a:	f3bf 8f6f 	isb	sy
  401b3e:	f3bf 8f4f 	dsb	sy
  401b42:	b662      	cpsie	i
  401b44:	e7fe      	b.n	401b44 <xQueueGenericReceive+0x30>
  401b46:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b4a:	b672      	cpsid	i
  401b4c:	f383 8811 	msr	BASEPRI, r3
  401b50:	f3bf 8f6f 	isb	sy
  401b54:	f3bf 8f4f 	dsb	sy
  401b58:	b662      	cpsie	i
  401b5a:	e7fe      	b.n	401b5a <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b5e:	2a00      	cmp	r2, #0
  401b60:	d0df      	beq.n	401b22 <xQueueGenericReceive+0xe>
  401b62:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b66:	b672      	cpsid	i
  401b68:	f383 8811 	msr	BASEPRI, r3
  401b6c:	f3bf 8f6f 	isb	sy
  401b70:	f3bf 8f4f 	dsb	sy
  401b74:	b662      	cpsie	i
  401b76:	e7fe      	b.n	401b76 <xQueueGenericReceive+0x62>
  401b78:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401b7a:	4d4d      	ldr	r5, [pc, #308]	; (401cb0 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401b7c:	f8df a160 	ldr.w	sl, [pc, #352]	; 401ce0 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401b80:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401cc0 <xQueueGenericReceive+0x1ac>
  401b84:	e04b      	b.n	401c1e <xQueueGenericReceive+0x10a>
  401b86:	2600      	movs	r6, #0
  401b88:	e7f7      	b.n	401b7a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401b8a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401b8c:	4639      	mov	r1, r7
  401b8e:	4620      	mov	r0, r4
  401b90:	4b48      	ldr	r3, [pc, #288]	; (401cb4 <xQueueGenericReceive+0x1a0>)
  401b92:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401b94:	f1b8 0f00 	cmp.w	r8, #0
  401b98:	d11d      	bne.n	401bd6 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401b9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b9c:	3b01      	subs	r3, #1
  401b9e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ba0:	6823      	ldr	r3, [r4, #0]
  401ba2:	b913      	cbnz	r3, 401baa <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401ba4:	4b44      	ldr	r3, [pc, #272]	; (401cb8 <xQueueGenericReceive+0x1a4>)
  401ba6:	4798      	blx	r3
  401ba8:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401baa:	6923      	ldr	r3, [r4, #16]
  401bac:	b16b      	cbz	r3, 401bca <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401bae:	f104 0010 	add.w	r0, r4, #16
  401bb2:	4b42      	ldr	r3, [pc, #264]	; (401cbc <xQueueGenericReceive+0x1a8>)
  401bb4:	4798      	blx	r3
  401bb6:	2801      	cmp	r0, #1
  401bb8:	d107      	bne.n	401bca <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bbe:	4b40      	ldr	r3, [pc, #256]	; (401cc0 <xQueueGenericReceive+0x1ac>)
  401bc0:	601a      	str	r2, [r3, #0]
  401bc2:	f3bf 8f4f 	dsb	sy
  401bc6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bca:	4b3e      	ldr	r3, [pc, #248]	; (401cc4 <xQueueGenericReceive+0x1b0>)
  401bcc:	4798      	blx	r3
				return pdPASS;
  401bce:	2001      	movs	r0, #1
}
  401bd0:	b004      	add	sp, #16
  401bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401bd6:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bda:	2b00      	cmp	r3, #0
  401bdc:	d0f5      	beq.n	401bca <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bde:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401be2:	4b36      	ldr	r3, [pc, #216]	; (401cbc <xQueueGenericReceive+0x1a8>)
  401be4:	4798      	blx	r3
  401be6:	2800      	cmp	r0, #0
  401be8:	d0ef      	beq.n	401bca <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bee:	4b34      	ldr	r3, [pc, #208]	; (401cc0 <xQueueGenericReceive+0x1ac>)
  401bf0:	601a      	str	r2, [r3, #0]
  401bf2:	f3bf 8f4f 	dsb	sy
  401bf6:	f3bf 8f6f 	isb	sy
  401bfa:	e7e6      	b.n	401bca <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401bfc:	4b31      	ldr	r3, [pc, #196]	; (401cc4 <xQueueGenericReceive+0x1b0>)
  401bfe:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401c00:	2000      	movs	r0, #0
  401c02:	e7e5      	b.n	401bd0 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401c04:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401c06:	6860      	ldr	r0, [r4, #4]
  401c08:	4b2f      	ldr	r3, [pc, #188]	; (401cc8 <xQueueGenericReceive+0x1b4>)
  401c0a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401c0c:	4b2d      	ldr	r3, [pc, #180]	; (401cc4 <xQueueGenericReceive+0x1b0>)
  401c0e:	4798      	blx	r3
  401c10:	e030      	b.n	401c74 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401c12:	4620      	mov	r0, r4
  401c14:	4b2d      	ldr	r3, [pc, #180]	; (401ccc <xQueueGenericReceive+0x1b8>)
  401c16:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c18:	4b2d      	ldr	r3, [pc, #180]	; (401cd0 <xQueueGenericReceive+0x1bc>)
  401c1a:	4798      	blx	r3
  401c1c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401c1e:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401c20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c22:	2b00      	cmp	r3, #0
  401c24:	d1b1      	bne.n	401b8a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c26:	9b01      	ldr	r3, [sp, #4]
  401c28:	2b00      	cmp	r3, #0
  401c2a:	d0e7      	beq.n	401bfc <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401c2c:	b90e      	cbnz	r6, 401c32 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401c2e:	a802      	add	r0, sp, #8
  401c30:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401c32:	4b24      	ldr	r3, [pc, #144]	; (401cc4 <xQueueGenericReceive+0x1b0>)
  401c34:	4798      	blx	r3
		vTaskSuspendAll();
  401c36:	4b27      	ldr	r3, [pc, #156]	; (401cd4 <xQueueGenericReceive+0x1c0>)
  401c38:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c3a:	47a8      	blx	r5
  401c3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c42:	d101      	bne.n	401c48 <xQueueGenericReceive+0x134>
  401c44:	2300      	movs	r3, #0
  401c46:	6463      	str	r3, [r4, #68]	; 0x44
  401c48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c4e:	d101      	bne.n	401c54 <xQueueGenericReceive+0x140>
  401c50:	2300      	movs	r3, #0
  401c52:	64a3      	str	r3, [r4, #72]	; 0x48
  401c54:	4b1b      	ldr	r3, [pc, #108]	; (401cc4 <xQueueGenericReceive+0x1b0>)
  401c56:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c58:	a901      	add	r1, sp, #4
  401c5a:	a802      	add	r0, sp, #8
  401c5c:	4b1e      	ldr	r3, [pc, #120]	; (401cd8 <xQueueGenericReceive+0x1c4>)
  401c5e:	4798      	blx	r3
  401c60:	b9e8      	cbnz	r0, 401c9e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401c62:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401c64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401c66:	4b17      	ldr	r3, [pc, #92]	; (401cc4 <xQueueGenericReceive+0x1b0>)
  401c68:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401c6a:	2e00      	cmp	r6, #0
  401c6c:	d1d1      	bne.n	401c12 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c6e:	6823      	ldr	r3, [r4, #0]
  401c70:	2b00      	cmp	r3, #0
  401c72:	d0c7      	beq.n	401c04 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401c74:	9901      	ldr	r1, [sp, #4]
  401c76:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c7a:	4b18      	ldr	r3, [pc, #96]	; (401cdc <xQueueGenericReceive+0x1c8>)
  401c7c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401c7e:	4620      	mov	r0, r4
  401c80:	4b12      	ldr	r3, [pc, #72]	; (401ccc <xQueueGenericReceive+0x1b8>)
  401c82:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c84:	4b12      	ldr	r3, [pc, #72]	; (401cd0 <xQueueGenericReceive+0x1bc>)
  401c86:	4798      	blx	r3
  401c88:	2800      	cmp	r0, #0
  401c8a:	d1c7      	bne.n	401c1c <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c90:	f8c9 3000 	str.w	r3, [r9]
  401c94:	f3bf 8f4f 	dsb	sy
  401c98:	f3bf 8f6f 	isb	sy
  401c9c:	e7be      	b.n	401c1c <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401c9e:	4620      	mov	r0, r4
  401ca0:	4b0a      	ldr	r3, [pc, #40]	; (401ccc <xQueueGenericReceive+0x1b8>)
  401ca2:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401ca4:	4b0a      	ldr	r3, [pc, #40]	; (401cd0 <xQueueGenericReceive+0x1bc>)
  401ca6:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401ca8:	2000      	movs	r0, #0
  401caa:	e791      	b.n	401bd0 <xQueueGenericReceive+0xbc>
  401cac:	004027a1 	.word	0x004027a1
  401cb0:	004011b5 	.word	0x004011b5
  401cb4:	00401575 	.word	0x00401575
  401cb8:	00402921 	.word	0x00402921
  401cbc:	00402639 	.word	0x00402639
  401cc0:	e000ed04 	.word	0xe000ed04
  401cc4:	00401201 	.word	0x00401201
  401cc8:	004027c1 	.word	0x004027c1
  401ccc:	0040159d 	.word	0x0040159d
  401cd0:	0040221d 	.word	0x0040221d
  401cd4:	004020b5 	.word	0x004020b5
  401cd8:	00402701 	.word	0x00402701
  401cdc:	00402535 	.word	0x00402535
  401ce0:	004026d1 	.word	0x004026d1

00401ce4 <vQueueAddToRegistry>:
	{
  401ce4:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401ce6:	4b0b      	ldr	r3, [pc, #44]	; (401d14 <vQueueAddToRegistry+0x30>)
  401ce8:	681b      	ldr	r3, [r3, #0]
  401cea:	b153      	cbz	r3, 401d02 <vQueueAddToRegistry+0x1e>
  401cec:	2301      	movs	r3, #1
  401cee:	4c09      	ldr	r4, [pc, #36]	; (401d14 <vQueueAddToRegistry+0x30>)
  401cf0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401cf4:	b132      	cbz	r2, 401d04 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401cf6:	3301      	adds	r3, #1
  401cf8:	2b08      	cmp	r3, #8
  401cfa:	d1f9      	bne.n	401cf0 <vQueueAddToRegistry+0xc>
	}
  401cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d00:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401d02:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401d04:	4a03      	ldr	r2, [pc, #12]	; (401d14 <vQueueAddToRegistry+0x30>)
  401d06:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401d0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401d0e:	6058      	str	r0, [r3, #4]
				break;
  401d10:	e7f4      	b.n	401cfc <vQueueAddToRegistry+0x18>
  401d12:	bf00      	nop
  401d14:	20400c60 	.word	0x20400c60

00401d18 <vQueueWaitForMessageRestricted>:
	{
  401d18:	b570      	push	{r4, r5, r6, lr}
  401d1a:	4604      	mov	r4, r0
  401d1c:	460d      	mov	r5, r1
  401d1e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401d20:	4b0f      	ldr	r3, [pc, #60]	; (401d60 <vQueueWaitForMessageRestricted+0x48>)
  401d22:	4798      	blx	r3
  401d24:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d26:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d2a:	d00b      	beq.n	401d44 <vQueueWaitForMessageRestricted+0x2c>
  401d2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d32:	d00a      	beq.n	401d4a <vQueueWaitForMessageRestricted+0x32>
  401d34:	4b0b      	ldr	r3, [pc, #44]	; (401d64 <vQueueWaitForMessageRestricted+0x4c>)
  401d36:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401d38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d3a:	b14b      	cbz	r3, 401d50 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401d3c:	4620      	mov	r0, r4
  401d3e:	4b0a      	ldr	r3, [pc, #40]	; (401d68 <vQueueWaitForMessageRestricted+0x50>)
  401d40:	4798      	blx	r3
  401d42:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401d44:	2300      	movs	r3, #0
  401d46:	6463      	str	r3, [r4, #68]	; 0x44
  401d48:	e7f0      	b.n	401d2c <vQueueWaitForMessageRestricted+0x14>
  401d4a:	2300      	movs	r3, #0
  401d4c:	64a3      	str	r3, [r4, #72]	; 0x48
  401d4e:	e7f1      	b.n	401d34 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401d50:	4632      	mov	r2, r6
  401d52:	4629      	mov	r1, r5
  401d54:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d58:	4b04      	ldr	r3, [pc, #16]	; (401d6c <vQueueWaitForMessageRestricted+0x54>)
  401d5a:	4798      	blx	r3
  401d5c:	e7ee      	b.n	401d3c <vQueueWaitForMessageRestricted+0x24>
  401d5e:	bf00      	nop
  401d60:	004011b5 	.word	0x004011b5
  401d64:	00401201 	.word	0x00401201
  401d68:	0040159d 	.word	0x0040159d
  401d6c:	004025b9 	.word	0x004025b9

00401d70 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d70:	4b08      	ldr	r3, [pc, #32]	; (401d94 <prvResetNextTaskUnblockTime+0x24>)
  401d72:	681b      	ldr	r3, [r3, #0]
  401d74:	681b      	ldr	r3, [r3, #0]
  401d76:	b13b      	cbz	r3, 401d88 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401d78:	4b06      	ldr	r3, [pc, #24]	; (401d94 <prvResetNextTaskUnblockTime+0x24>)
  401d7a:	681b      	ldr	r3, [r3, #0]
  401d7c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401d7e:	68db      	ldr	r3, [r3, #12]
  401d80:	685a      	ldr	r2, [r3, #4]
  401d82:	4b05      	ldr	r3, [pc, #20]	; (401d98 <prvResetNextTaskUnblockTime+0x28>)
  401d84:	601a      	str	r2, [r3, #0]
  401d86:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401d88:	f04f 32ff 	mov.w	r2, #4294967295
  401d8c:	4b02      	ldr	r3, [pc, #8]	; (401d98 <prvResetNextTaskUnblockTime+0x28>)
  401d8e:	601a      	str	r2, [r3, #0]
  401d90:	4770      	bx	lr
  401d92:	bf00      	nop
  401d94:	20400a5c 	.word	0x20400a5c
  401d98:	20400b08 	.word	0x20400b08

00401d9c <prvAddCurrentTaskToDelayedList>:
{
  401d9c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401d9e:	4b0f      	ldr	r3, [pc, #60]	; (401ddc <prvAddCurrentTaskToDelayedList+0x40>)
  401da0:	681b      	ldr	r3, [r3, #0]
  401da2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401da4:	4b0e      	ldr	r3, [pc, #56]	; (401de0 <prvAddCurrentTaskToDelayedList+0x44>)
  401da6:	681b      	ldr	r3, [r3, #0]
  401da8:	4298      	cmp	r0, r3
  401daa:	d30e      	bcc.n	401dca <prvAddCurrentTaskToDelayedList+0x2e>
  401dac:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401dae:	4b0d      	ldr	r3, [pc, #52]	; (401de4 <prvAddCurrentTaskToDelayedList+0x48>)
  401db0:	6818      	ldr	r0, [r3, #0]
  401db2:	4b0a      	ldr	r3, [pc, #40]	; (401ddc <prvAddCurrentTaskToDelayedList+0x40>)
  401db4:	6819      	ldr	r1, [r3, #0]
  401db6:	3104      	adds	r1, #4
  401db8:	4b0b      	ldr	r3, [pc, #44]	; (401de8 <prvAddCurrentTaskToDelayedList+0x4c>)
  401dba:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401dbc:	4b0b      	ldr	r3, [pc, #44]	; (401dec <prvAddCurrentTaskToDelayedList+0x50>)
  401dbe:	681b      	ldr	r3, [r3, #0]
  401dc0:	429c      	cmp	r4, r3
  401dc2:	d201      	bcs.n	401dc8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401dc4:	4b09      	ldr	r3, [pc, #36]	; (401dec <prvAddCurrentTaskToDelayedList+0x50>)
  401dc6:	601c      	str	r4, [r3, #0]
  401dc8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401dca:	4b09      	ldr	r3, [pc, #36]	; (401df0 <prvAddCurrentTaskToDelayedList+0x54>)
  401dcc:	6818      	ldr	r0, [r3, #0]
  401dce:	4b03      	ldr	r3, [pc, #12]	; (401ddc <prvAddCurrentTaskToDelayedList+0x40>)
  401dd0:	6819      	ldr	r1, [r3, #0]
  401dd2:	3104      	adds	r1, #4
  401dd4:	4b04      	ldr	r3, [pc, #16]	; (401de8 <prvAddCurrentTaskToDelayedList+0x4c>)
  401dd6:	4798      	blx	r3
  401dd8:	bd10      	pop	{r4, pc}
  401dda:	bf00      	nop
  401ddc:	20400a58 	.word	0x20400a58
  401de0:	20400b50 	.word	0x20400b50
  401de4:	20400a5c 	.word	0x20400a5c
  401de8:	0040109d 	.word	0x0040109d
  401dec:	20400b08 	.word	0x20400b08
  401df0:	20400a60 	.word	0x20400a60

00401df4 <xTaskGenericCreate>:
{
  401df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401df8:	b083      	sub	sp, #12
  401dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401dfc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401e00:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401e02:	b160      	cbz	r0, 401e1e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401e04:	2d04      	cmp	r5, #4
  401e06:	d915      	bls.n	401e34 <xTaskGenericCreate+0x40>
  401e08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e0c:	b672      	cpsid	i
  401e0e:	f383 8811 	msr	BASEPRI, r3
  401e12:	f3bf 8f6f 	isb	sy
  401e16:	f3bf 8f4f 	dsb	sy
  401e1a:	b662      	cpsie	i
  401e1c:	e7fe      	b.n	401e1c <xTaskGenericCreate+0x28>
  401e1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e22:	b672      	cpsid	i
  401e24:	f383 8811 	msr	BASEPRI, r3
  401e28:	f3bf 8f6f 	isb	sy
  401e2c:	f3bf 8f4f 	dsb	sy
  401e30:	b662      	cpsie	i
  401e32:	e7fe      	b.n	401e32 <xTaskGenericCreate+0x3e>
  401e34:	9001      	str	r0, [sp, #4]
  401e36:	4698      	mov	r8, r3
  401e38:	4691      	mov	r9, r2
  401e3a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e3c:	b936      	cbnz	r6, 401e4c <xTaskGenericCreate+0x58>
  401e3e:	0090      	lsls	r0, r2, #2
  401e40:	4b62      	ldr	r3, [pc, #392]	; (401fcc <xTaskGenericCreate+0x1d8>)
  401e42:	4798      	blx	r3
		if( pxStack != NULL )
  401e44:	4606      	mov	r6, r0
  401e46:	2800      	cmp	r0, #0
  401e48:	f000 809e 	beq.w	401f88 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401e4c:	2058      	movs	r0, #88	; 0x58
  401e4e:	4b5f      	ldr	r3, [pc, #380]	; (401fcc <xTaskGenericCreate+0x1d8>)
  401e50:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401e52:	4604      	mov	r4, r0
  401e54:	2800      	cmp	r0, #0
  401e56:	f000 8094 	beq.w	401f82 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401e5a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401e5c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401e60:	21a5      	movs	r1, #165	; 0xa5
  401e62:	4630      	mov	r0, r6
  401e64:	4b5a      	ldr	r3, [pc, #360]	; (401fd0 <xTaskGenericCreate+0x1dc>)
  401e66:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401e68:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401e6c:	444e      	add	r6, r9
  401e6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e70:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401e74:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401e78:	783b      	ldrb	r3, [r7, #0]
  401e7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401e7e:	783b      	ldrb	r3, [r7, #0]
  401e80:	2b00      	cmp	r3, #0
  401e82:	f040 8084 	bne.w	401f8e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401e86:	2700      	movs	r7, #0
  401e88:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401e8c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401e8e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401e90:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401e92:	f104 0904 	add.w	r9, r4, #4
  401e96:	4648      	mov	r0, r9
  401e98:	f8df b184 	ldr.w	fp, [pc, #388]	; 402020 <xTaskGenericCreate+0x22c>
  401e9c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401e9e:	f104 0018 	add.w	r0, r4, #24
  401ea2:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401ea4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ea6:	f1c5 0305 	rsb	r3, r5, #5
  401eaa:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401eac:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401eae:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401eb0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401eb4:	4642      	mov	r2, r8
  401eb6:	9901      	ldr	r1, [sp, #4]
  401eb8:	4630      	mov	r0, r6
  401eba:	4b46      	ldr	r3, [pc, #280]	; (401fd4 <xTaskGenericCreate+0x1e0>)
  401ebc:	4798      	blx	r3
  401ebe:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401ec0:	f1ba 0f00 	cmp.w	sl, #0
  401ec4:	d001      	beq.n	401eca <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401ec6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401eca:	4b43      	ldr	r3, [pc, #268]	; (401fd8 <xTaskGenericCreate+0x1e4>)
  401ecc:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401ece:	4a43      	ldr	r2, [pc, #268]	; (401fdc <xTaskGenericCreate+0x1e8>)
  401ed0:	6813      	ldr	r3, [r2, #0]
  401ed2:	3301      	adds	r3, #1
  401ed4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401ed6:	4b42      	ldr	r3, [pc, #264]	; (401fe0 <xTaskGenericCreate+0x1ec>)
  401ed8:	681b      	ldr	r3, [r3, #0]
  401eda:	2b00      	cmp	r3, #0
  401edc:	d166      	bne.n	401fac <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401ede:	4b40      	ldr	r3, [pc, #256]	; (401fe0 <xTaskGenericCreate+0x1ec>)
  401ee0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401ee2:	6813      	ldr	r3, [r2, #0]
  401ee4:	2b01      	cmp	r3, #1
  401ee6:	d121      	bne.n	401f2c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ee8:	4f3e      	ldr	r7, [pc, #248]	; (401fe4 <xTaskGenericCreate+0x1f0>)
  401eea:	4638      	mov	r0, r7
  401eec:	4e3e      	ldr	r6, [pc, #248]	; (401fe8 <xTaskGenericCreate+0x1f4>)
  401eee:	47b0      	blx	r6
  401ef0:	f107 0014 	add.w	r0, r7, #20
  401ef4:	47b0      	blx	r6
  401ef6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401efa:	47b0      	blx	r6
  401efc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401f00:	47b0      	blx	r6
  401f02:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401f06:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401f08:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402024 <xTaskGenericCreate+0x230>
  401f0c:	4640      	mov	r0, r8
  401f0e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401f10:	4f36      	ldr	r7, [pc, #216]	; (401fec <xTaskGenericCreate+0x1f8>)
  401f12:	4638      	mov	r0, r7
  401f14:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401f16:	4836      	ldr	r0, [pc, #216]	; (401ff0 <xTaskGenericCreate+0x1fc>)
  401f18:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401f1a:	4836      	ldr	r0, [pc, #216]	; (401ff4 <xTaskGenericCreate+0x200>)
  401f1c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401f1e:	4836      	ldr	r0, [pc, #216]	; (401ff8 <xTaskGenericCreate+0x204>)
  401f20:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401f22:	4b36      	ldr	r3, [pc, #216]	; (401ffc <xTaskGenericCreate+0x208>)
  401f24:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401f28:	4b35      	ldr	r3, [pc, #212]	; (402000 <xTaskGenericCreate+0x20c>)
  401f2a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401f2c:	4a35      	ldr	r2, [pc, #212]	; (402004 <xTaskGenericCreate+0x210>)
  401f2e:	6813      	ldr	r3, [r2, #0]
  401f30:	3301      	adds	r3, #1
  401f32:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401f34:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401f36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401f38:	4a33      	ldr	r2, [pc, #204]	; (402008 <xTaskGenericCreate+0x214>)
  401f3a:	6811      	ldr	r1, [r2, #0]
  401f3c:	2301      	movs	r3, #1
  401f3e:	4083      	lsls	r3, r0
  401f40:	430b      	orrs	r3, r1
  401f42:	6013      	str	r3, [r2, #0]
  401f44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f48:	4649      	mov	r1, r9
  401f4a:	4b26      	ldr	r3, [pc, #152]	; (401fe4 <xTaskGenericCreate+0x1f0>)
  401f4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f50:	4b2e      	ldr	r3, [pc, #184]	; (40200c <xTaskGenericCreate+0x218>)
  401f52:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401f54:	4b2e      	ldr	r3, [pc, #184]	; (402010 <xTaskGenericCreate+0x21c>)
  401f56:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401f58:	4b2e      	ldr	r3, [pc, #184]	; (402014 <xTaskGenericCreate+0x220>)
  401f5a:	681b      	ldr	r3, [r3, #0]
  401f5c:	2b00      	cmp	r3, #0
  401f5e:	d031      	beq.n	401fc4 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401f60:	4b1f      	ldr	r3, [pc, #124]	; (401fe0 <xTaskGenericCreate+0x1ec>)
  401f62:	681b      	ldr	r3, [r3, #0]
  401f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f66:	429d      	cmp	r5, r3
  401f68:	d92e      	bls.n	401fc8 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f6e:	4b2a      	ldr	r3, [pc, #168]	; (402018 <xTaskGenericCreate+0x224>)
  401f70:	601a      	str	r2, [r3, #0]
  401f72:	f3bf 8f4f 	dsb	sy
  401f76:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401f7a:	2001      	movs	r0, #1
}
  401f7c:	b003      	add	sp, #12
  401f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401f82:	4630      	mov	r0, r6
  401f84:	4b25      	ldr	r3, [pc, #148]	; (40201c <xTaskGenericCreate+0x228>)
  401f86:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401f88:	f04f 30ff 	mov.w	r0, #4294967295
  401f8c:	e7f6      	b.n	401f7c <xTaskGenericCreate+0x188>
  401f8e:	463b      	mov	r3, r7
  401f90:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401f94:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401f96:	7859      	ldrb	r1, [r3, #1]
  401f98:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401f9c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401fa0:	2900      	cmp	r1, #0
  401fa2:	f43f af70 	beq.w	401e86 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401fa6:	42bb      	cmp	r3, r7
  401fa8:	d1f5      	bne.n	401f96 <xTaskGenericCreate+0x1a2>
  401faa:	e76c      	b.n	401e86 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401fac:	4b19      	ldr	r3, [pc, #100]	; (402014 <xTaskGenericCreate+0x220>)
  401fae:	681b      	ldr	r3, [r3, #0]
  401fb0:	2b00      	cmp	r3, #0
  401fb2:	d1bb      	bne.n	401f2c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401fb4:	4b0a      	ldr	r3, [pc, #40]	; (401fe0 <xTaskGenericCreate+0x1ec>)
  401fb6:	681b      	ldr	r3, [r3, #0]
  401fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401fba:	429d      	cmp	r5, r3
  401fbc:	d3b6      	bcc.n	401f2c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401fbe:	4b08      	ldr	r3, [pc, #32]	; (401fe0 <xTaskGenericCreate+0x1ec>)
  401fc0:	601c      	str	r4, [r3, #0]
  401fc2:	e7b3      	b.n	401f2c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401fc4:	2001      	movs	r0, #1
  401fc6:	e7d9      	b.n	401f7c <xTaskGenericCreate+0x188>
  401fc8:	2001      	movs	r0, #1
	return xReturn;
  401fca:	e7d7      	b.n	401f7c <xTaskGenericCreate+0x188>
  401fcc:	00401411 	.word	0x00401411
  401fd0:	0040415d 	.word	0x0040415d
  401fd4:	00401169 	.word	0x00401169
  401fd8:	004011b5 	.word	0x004011b5
  401fdc:	20400ac8 	.word	0x20400ac8
  401fe0:	20400a58 	.word	0x20400a58
  401fe4:	20400a64 	.word	0x20400a64
  401fe8:	00401069 	.word	0x00401069
  401fec:	20400af4 	.word	0x20400af4
  401ff0:	20400b10 	.word	0x20400b10
  401ff4:	20400b3c 	.word	0x20400b3c
  401ff8:	20400b28 	.word	0x20400b28
  401ffc:	20400a5c 	.word	0x20400a5c
  402000:	20400a60 	.word	0x20400a60
  402004:	20400ad4 	.word	0x20400ad4
  402008:	20400adc 	.word	0x20400adc
  40200c:	00401085 	.word	0x00401085
  402010:	00401201 	.word	0x00401201
  402014:	20400b24 	.word	0x20400b24
  402018:	e000ed04 	.word	0xe000ed04
  40201c:	00401441 	.word	0x00401441
  402020:	0040107f 	.word	0x0040107f
  402024:	20400ae0 	.word	0x20400ae0

00402028 <vTaskStartScheduler>:
{
  402028:	b510      	push	{r4, lr}
  40202a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  40202c:	2300      	movs	r3, #0
  40202e:	9303      	str	r3, [sp, #12]
  402030:	9302      	str	r3, [sp, #8]
  402032:	9301      	str	r3, [sp, #4]
  402034:	9300      	str	r3, [sp, #0]
  402036:	2282      	movs	r2, #130	; 0x82
  402038:	4916      	ldr	r1, [pc, #88]	; (402094 <vTaskStartScheduler+0x6c>)
  40203a:	4817      	ldr	r0, [pc, #92]	; (402098 <vTaskStartScheduler+0x70>)
  40203c:	4c17      	ldr	r4, [pc, #92]	; (40209c <vTaskStartScheduler+0x74>)
  40203e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402040:	2801      	cmp	r0, #1
  402042:	d00b      	beq.n	40205c <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402044:	bb20      	cbnz	r0, 402090 <vTaskStartScheduler+0x68>
  402046:	f04f 0380 	mov.w	r3, #128	; 0x80
  40204a:	b672      	cpsid	i
  40204c:	f383 8811 	msr	BASEPRI, r3
  402050:	f3bf 8f6f 	isb	sy
  402054:	f3bf 8f4f 	dsb	sy
  402058:	b662      	cpsie	i
  40205a:	e7fe      	b.n	40205a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  40205c:	4b10      	ldr	r3, [pc, #64]	; (4020a0 <vTaskStartScheduler+0x78>)
  40205e:	4798      	blx	r3
	if( xReturn == pdPASS )
  402060:	2801      	cmp	r0, #1
  402062:	d1ef      	bne.n	402044 <vTaskStartScheduler+0x1c>
  402064:	f04f 0380 	mov.w	r3, #128	; 0x80
  402068:	b672      	cpsid	i
  40206a:	f383 8811 	msr	BASEPRI, r3
  40206e:	f3bf 8f6f 	isb	sy
  402072:	f3bf 8f4f 	dsb	sy
  402076:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402078:	f04f 32ff 	mov.w	r2, #4294967295
  40207c:	4b09      	ldr	r3, [pc, #36]	; (4020a4 <vTaskStartScheduler+0x7c>)
  40207e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402080:	2201      	movs	r2, #1
  402082:	4b09      	ldr	r3, [pc, #36]	; (4020a8 <vTaskStartScheduler+0x80>)
  402084:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402086:	2200      	movs	r2, #0
  402088:	4b08      	ldr	r3, [pc, #32]	; (4020ac <vTaskStartScheduler+0x84>)
  40208a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40208c:	4b08      	ldr	r3, [pc, #32]	; (4020b0 <vTaskStartScheduler+0x88>)
  40208e:	4798      	blx	r3
}
  402090:	b004      	add	sp, #16
  402092:	bd10      	pop	{r4, pc}
  402094:	00409e88 	.word	0x00409e88
  402098:	004023cd 	.word	0x004023cd
  40209c:	00401df5 	.word	0x00401df5
  4020a0:	00402a0d 	.word	0x00402a0d
  4020a4:	20400b08 	.word	0x20400b08
  4020a8:	20400b24 	.word	0x20400b24
  4020ac:	20400b50 	.word	0x20400b50
  4020b0:	004012e9 	.word	0x004012e9

004020b4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4020b4:	4a02      	ldr	r2, [pc, #8]	; (4020c0 <vTaskSuspendAll+0xc>)
  4020b6:	6813      	ldr	r3, [r2, #0]
  4020b8:	3301      	adds	r3, #1
  4020ba:	6013      	str	r3, [r2, #0]
  4020bc:	4770      	bx	lr
  4020be:	bf00      	nop
  4020c0:	20400ad0 	.word	0x20400ad0

004020c4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4020c4:	4b01      	ldr	r3, [pc, #4]	; (4020cc <xTaskGetTickCount+0x8>)
  4020c6:	6818      	ldr	r0, [r3, #0]
}
  4020c8:	4770      	bx	lr
  4020ca:	bf00      	nop
  4020cc:	20400b50 	.word	0x20400b50

004020d0 <xTaskIncrementTick>:
{
  4020d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4020d4:	4b42      	ldr	r3, [pc, #264]	; (4021e0 <xTaskIncrementTick+0x110>)
  4020d6:	681b      	ldr	r3, [r3, #0]
  4020d8:	2b00      	cmp	r3, #0
  4020da:	d178      	bne.n	4021ce <xTaskIncrementTick+0xfe>
		++xTickCount;
  4020dc:	4b41      	ldr	r3, [pc, #260]	; (4021e4 <xTaskIncrementTick+0x114>)
  4020de:	681a      	ldr	r2, [r3, #0]
  4020e0:	3201      	adds	r2, #1
  4020e2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4020e4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4020e6:	b9d6      	cbnz	r6, 40211e <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4020e8:	4b3f      	ldr	r3, [pc, #252]	; (4021e8 <xTaskIncrementTick+0x118>)
  4020ea:	681b      	ldr	r3, [r3, #0]
  4020ec:	681b      	ldr	r3, [r3, #0]
  4020ee:	b153      	cbz	r3, 402106 <xTaskIncrementTick+0x36>
  4020f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020f4:	b672      	cpsid	i
  4020f6:	f383 8811 	msr	BASEPRI, r3
  4020fa:	f3bf 8f6f 	isb	sy
  4020fe:	f3bf 8f4f 	dsb	sy
  402102:	b662      	cpsie	i
  402104:	e7fe      	b.n	402104 <xTaskIncrementTick+0x34>
  402106:	4a38      	ldr	r2, [pc, #224]	; (4021e8 <xTaskIncrementTick+0x118>)
  402108:	6811      	ldr	r1, [r2, #0]
  40210a:	4b38      	ldr	r3, [pc, #224]	; (4021ec <xTaskIncrementTick+0x11c>)
  40210c:	6818      	ldr	r0, [r3, #0]
  40210e:	6010      	str	r0, [r2, #0]
  402110:	6019      	str	r1, [r3, #0]
  402112:	4a37      	ldr	r2, [pc, #220]	; (4021f0 <xTaskIncrementTick+0x120>)
  402114:	6813      	ldr	r3, [r2, #0]
  402116:	3301      	adds	r3, #1
  402118:	6013      	str	r3, [r2, #0]
  40211a:	4b36      	ldr	r3, [pc, #216]	; (4021f4 <xTaskIncrementTick+0x124>)
  40211c:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40211e:	4b36      	ldr	r3, [pc, #216]	; (4021f8 <xTaskIncrementTick+0x128>)
  402120:	681b      	ldr	r3, [r3, #0]
  402122:	429e      	cmp	r6, r3
  402124:	d218      	bcs.n	402158 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402126:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402128:	4b34      	ldr	r3, [pc, #208]	; (4021fc <xTaskIncrementTick+0x12c>)
  40212a:	681b      	ldr	r3, [r3, #0]
  40212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40212e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402132:	4a33      	ldr	r2, [pc, #204]	; (402200 <xTaskIncrementTick+0x130>)
  402134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402138:	2b02      	cmp	r3, #2
  40213a:	bf28      	it	cs
  40213c:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40213e:	4b31      	ldr	r3, [pc, #196]	; (402204 <xTaskIncrementTick+0x134>)
  402140:	681b      	ldr	r3, [r3, #0]
  402142:	b90b      	cbnz	r3, 402148 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402144:	4b30      	ldr	r3, [pc, #192]	; (402208 <xTaskIncrementTick+0x138>)
  402146:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402148:	4b30      	ldr	r3, [pc, #192]	; (40220c <xTaskIncrementTick+0x13c>)
  40214a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40214c:	2b00      	cmp	r3, #0
}
  40214e:	bf0c      	ite	eq
  402150:	4620      	moveq	r0, r4
  402152:	2001      	movne	r0, #1
  402154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402158:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40215a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4021e8 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40215e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402218 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402162:	4f2b      	ldr	r7, [pc, #172]	; (402210 <xTaskIncrementTick+0x140>)
  402164:	e01f      	b.n	4021a6 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402166:	f04f 32ff 	mov.w	r2, #4294967295
  40216a:	4b23      	ldr	r3, [pc, #140]	; (4021f8 <xTaskIncrementTick+0x128>)
  40216c:	601a      	str	r2, [r3, #0]
						break;
  40216e:	e7db      	b.n	402128 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402170:	4a21      	ldr	r2, [pc, #132]	; (4021f8 <xTaskIncrementTick+0x128>)
  402172:	6013      	str	r3, [r2, #0]
							break;
  402174:	e7d8      	b.n	402128 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402176:	f105 0018 	add.w	r0, r5, #24
  40217a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  40217c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40217e:	683a      	ldr	r2, [r7, #0]
  402180:	2301      	movs	r3, #1
  402182:	4083      	lsls	r3, r0
  402184:	4313      	orrs	r3, r2
  402186:	603b      	str	r3, [r7, #0]
  402188:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40218c:	4651      	mov	r1, sl
  40218e:	4b1c      	ldr	r3, [pc, #112]	; (402200 <xTaskIncrementTick+0x130>)
  402190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402194:	4b1f      	ldr	r3, [pc, #124]	; (402214 <xTaskIncrementTick+0x144>)
  402196:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402198:	4b18      	ldr	r3, [pc, #96]	; (4021fc <xTaskIncrementTick+0x12c>)
  40219a:	681b      	ldr	r3, [r3, #0]
  40219c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4021a0:	429a      	cmp	r2, r3
  4021a2:	bf28      	it	cs
  4021a4:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4021a6:	f8d9 3000 	ldr.w	r3, [r9]
  4021aa:	681b      	ldr	r3, [r3, #0]
  4021ac:	2b00      	cmp	r3, #0
  4021ae:	d0da      	beq.n	402166 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4021b0:	f8d9 3000 	ldr.w	r3, [r9]
  4021b4:	68db      	ldr	r3, [r3, #12]
  4021b6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4021b8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4021ba:	429e      	cmp	r6, r3
  4021bc:	d3d8      	bcc.n	402170 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4021be:	f105 0a04 	add.w	sl, r5, #4
  4021c2:	4650      	mov	r0, sl
  4021c4:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4021c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4021c8:	2b00      	cmp	r3, #0
  4021ca:	d1d4      	bne.n	402176 <xTaskIncrementTick+0xa6>
  4021cc:	e7d6      	b.n	40217c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4021ce:	4a0d      	ldr	r2, [pc, #52]	; (402204 <xTaskIncrementTick+0x134>)
  4021d0:	6813      	ldr	r3, [r2, #0]
  4021d2:	3301      	adds	r3, #1
  4021d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4021d6:	4b0c      	ldr	r3, [pc, #48]	; (402208 <xTaskIncrementTick+0x138>)
  4021d8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4021da:	2400      	movs	r4, #0
  4021dc:	e7b4      	b.n	402148 <xTaskIncrementTick+0x78>
  4021de:	bf00      	nop
  4021e0:	20400ad0 	.word	0x20400ad0
  4021e4:	20400b50 	.word	0x20400b50
  4021e8:	20400a5c 	.word	0x20400a5c
  4021ec:	20400a60 	.word	0x20400a60
  4021f0:	20400b0c 	.word	0x20400b0c
  4021f4:	00401d71 	.word	0x00401d71
  4021f8:	20400b08 	.word	0x20400b08
  4021fc:	20400a58 	.word	0x20400a58
  402200:	20400a64 	.word	0x20400a64
  402204:	20400acc 	.word	0x20400acc
  402208:	00403185 	.word	0x00403185
  40220c:	20400b54 	.word	0x20400b54
  402210:	20400adc 	.word	0x20400adc
  402214:	00401085 	.word	0x00401085
  402218:	004010d1 	.word	0x004010d1

0040221c <xTaskResumeAll>:
{
  40221c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402220:	4b38      	ldr	r3, [pc, #224]	; (402304 <xTaskResumeAll+0xe8>)
  402222:	681b      	ldr	r3, [r3, #0]
  402224:	b953      	cbnz	r3, 40223c <xTaskResumeAll+0x20>
  402226:	f04f 0380 	mov.w	r3, #128	; 0x80
  40222a:	b672      	cpsid	i
  40222c:	f383 8811 	msr	BASEPRI, r3
  402230:	f3bf 8f6f 	isb	sy
  402234:	f3bf 8f4f 	dsb	sy
  402238:	b662      	cpsie	i
  40223a:	e7fe      	b.n	40223a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  40223c:	4b32      	ldr	r3, [pc, #200]	; (402308 <xTaskResumeAll+0xec>)
  40223e:	4798      	blx	r3
		--uxSchedulerSuspended;
  402240:	4b30      	ldr	r3, [pc, #192]	; (402304 <xTaskResumeAll+0xe8>)
  402242:	681a      	ldr	r2, [r3, #0]
  402244:	3a01      	subs	r2, #1
  402246:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402248:	681b      	ldr	r3, [r3, #0]
  40224a:	2b00      	cmp	r3, #0
  40224c:	d155      	bne.n	4022fa <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40224e:	4b2f      	ldr	r3, [pc, #188]	; (40230c <xTaskResumeAll+0xf0>)
  402250:	681b      	ldr	r3, [r3, #0]
  402252:	2b00      	cmp	r3, #0
  402254:	d132      	bne.n	4022bc <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402256:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402258:	4b2d      	ldr	r3, [pc, #180]	; (402310 <xTaskResumeAll+0xf4>)
  40225a:	4798      	blx	r3
}
  40225c:	4620      	mov	r0, r4
  40225e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402262:	68fb      	ldr	r3, [r7, #12]
  402264:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402266:	f104 0018 	add.w	r0, r4, #24
  40226a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40226c:	f104 0804 	add.w	r8, r4, #4
  402270:	4640      	mov	r0, r8
  402272:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402274:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402276:	682a      	ldr	r2, [r5, #0]
  402278:	2301      	movs	r3, #1
  40227a:	4083      	lsls	r3, r0
  40227c:	4313      	orrs	r3, r2
  40227e:	602b      	str	r3, [r5, #0]
  402280:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402284:	4641      	mov	r1, r8
  402286:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40228a:	4b22      	ldr	r3, [pc, #136]	; (402314 <xTaskResumeAll+0xf8>)
  40228c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40228e:	4b22      	ldr	r3, [pc, #136]	; (402318 <xTaskResumeAll+0xfc>)
  402290:	681b      	ldr	r3, [r3, #0]
  402292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402296:	429a      	cmp	r2, r3
  402298:	d20c      	bcs.n	4022b4 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40229a:	683b      	ldr	r3, [r7, #0]
  40229c:	2b00      	cmp	r3, #0
  40229e:	d1e0      	bne.n	402262 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4022a0:	4b1e      	ldr	r3, [pc, #120]	; (40231c <xTaskResumeAll+0x100>)
  4022a2:	681b      	ldr	r3, [r3, #0]
  4022a4:	b1db      	cbz	r3, 4022de <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4022a6:	4b1d      	ldr	r3, [pc, #116]	; (40231c <xTaskResumeAll+0x100>)
  4022a8:	681b      	ldr	r3, [r3, #0]
  4022aa:	b1c3      	cbz	r3, 4022de <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4022ac:	4e1c      	ldr	r6, [pc, #112]	; (402320 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4022ae:	4d1d      	ldr	r5, [pc, #116]	; (402324 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4022b0:	4c1a      	ldr	r4, [pc, #104]	; (40231c <xTaskResumeAll+0x100>)
  4022b2:	e00e      	b.n	4022d2 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4022b4:	2201      	movs	r2, #1
  4022b6:	4b1b      	ldr	r3, [pc, #108]	; (402324 <xTaskResumeAll+0x108>)
  4022b8:	601a      	str	r2, [r3, #0]
  4022ba:	e7ee      	b.n	40229a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4022bc:	4f1a      	ldr	r7, [pc, #104]	; (402328 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4022be:	4e1b      	ldr	r6, [pc, #108]	; (40232c <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4022c0:	4d1b      	ldr	r5, [pc, #108]	; (402330 <xTaskResumeAll+0x114>)
  4022c2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402338 <xTaskResumeAll+0x11c>
  4022c6:	e7e8      	b.n	40229a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4022c8:	6823      	ldr	r3, [r4, #0]
  4022ca:	3b01      	subs	r3, #1
  4022cc:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4022ce:	6823      	ldr	r3, [r4, #0]
  4022d0:	b12b      	cbz	r3, 4022de <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4022d2:	47b0      	blx	r6
  4022d4:	2800      	cmp	r0, #0
  4022d6:	d0f7      	beq.n	4022c8 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4022d8:	2301      	movs	r3, #1
  4022da:	602b      	str	r3, [r5, #0]
  4022dc:	e7f4      	b.n	4022c8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4022de:	4b11      	ldr	r3, [pc, #68]	; (402324 <xTaskResumeAll+0x108>)
  4022e0:	681b      	ldr	r3, [r3, #0]
  4022e2:	2b01      	cmp	r3, #1
  4022e4:	d10b      	bne.n	4022fe <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4022e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022ea:	4b12      	ldr	r3, [pc, #72]	; (402334 <xTaskResumeAll+0x118>)
  4022ec:	601a      	str	r2, [r3, #0]
  4022ee:	f3bf 8f4f 	dsb	sy
  4022f2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4022f6:	2401      	movs	r4, #1
  4022f8:	e7ae      	b.n	402258 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4022fa:	2400      	movs	r4, #0
  4022fc:	e7ac      	b.n	402258 <xTaskResumeAll+0x3c>
  4022fe:	2400      	movs	r4, #0
  402300:	e7aa      	b.n	402258 <xTaskResumeAll+0x3c>
  402302:	bf00      	nop
  402304:	20400ad0 	.word	0x20400ad0
  402308:	004011b5 	.word	0x004011b5
  40230c:	20400ac8 	.word	0x20400ac8
  402310:	00401201 	.word	0x00401201
  402314:	00401085 	.word	0x00401085
  402318:	20400a58 	.word	0x20400a58
  40231c:	20400acc 	.word	0x20400acc
  402320:	004020d1 	.word	0x004020d1
  402324:	20400b54 	.word	0x20400b54
  402328:	20400b10 	.word	0x20400b10
  40232c:	004010d1 	.word	0x004010d1
  402330:	20400adc 	.word	0x20400adc
  402334:	e000ed04 	.word	0xe000ed04
  402338:	20400a64 	.word	0x20400a64

0040233c <vTaskDelay>:
	{
  40233c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40233e:	2800      	cmp	r0, #0
  402340:	d029      	beq.n	402396 <vTaskDelay+0x5a>
  402342:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402344:	4b18      	ldr	r3, [pc, #96]	; (4023a8 <vTaskDelay+0x6c>)
  402346:	681b      	ldr	r3, [r3, #0]
  402348:	b153      	cbz	r3, 402360 <vTaskDelay+0x24>
  40234a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40234e:	b672      	cpsid	i
  402350:	f383 8811 	msr	BASEPRI, r3
  402354:	f3bf 8f6f 	isb	sy
  402358:	f3bf 8f4f 	dsb	sy
  40235c:	b662      	cpsie	i
  40235e:	e7fe      	b.n	40235e <vTaskDelay+0x22>
			vTaskSuspendAll();
  402360:	4b12      	ldr	r3, [pc, #72]	; (4023ac <vTaskDelay+0x70>)
  402362:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402364:	4b12      	ldr	r3, [pc, #72]	; (4023b0 <vTaskDelay+0x74>)
  402366:	681b      	ldr	r3, [r3, #0]
  402368:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40236a:	4b12      	ldr	r3, [pc, #72]	; (4023b4 <vTaskDelay+0x78>)
  40236c:	6818      	ldr	r0, [r3, #0]
  40236e:	3004      	adds	r0, #4
  402370:	4b11      	ldr	r3, [pc, #68]	; (4023b8 <vTaskDelay+0x7c>)
  402372:	4798      	blx	r3
  402374:	b948      	cbnz	r0, 40238a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402376:	4b0f      	ldr	r3, [pc, #60]	; (4023b4 <vTaskDelay+0x78>)
  402378:	681a      	ldr	r2, [r3, #0]
  40237a:	4910      	ldr	r1, [pc, #64]	; (4023bc <vTaskDelay+0x80>)
  40237c:	680b      	ldr	r3, [r1, #0]
  40237e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402380:	2201      	movs	r2, #1
  402382:	4082      	lsls	r2, r0
  402384:	ea23 0302 	bic.w	r3, r3, r2
  402388:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40238a:	4620      	mov	r0, r4
  40238c:	4b0c      	ldr	r3, [pc, #48]	; (4023c0 <vTaskDelay+0x84>)
  40238e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402390:	4b0c      	ldr	r3, [pc, #48]	; (4023c4 <vTaskDelay+0x88>)
  402392:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402394:	b938      	cbnz	r0, 4023a6 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40239a:	4b0b      	ldr	r3, [pc, #44]	; (4023c8 <vTaskDelay+0x8c>)
  40239c:	601a      	str	r2, [r3, #0]
  40239e:	f3bf 8f4f 	dsb	sy
  4023a2:	f3bf 8f6f 	isb	sy
  4023a6:	bd10      	pop	{r4, pc}
  4023a8:	20400ad0 	.word	0x20400ad0
  4023ac:	004020b5 	.word	0x004020b5
  4023b0:	20400b50 	.word	0x20400b50
  4023b4:	20400a58 	.word	0x20400a58
  4023b8:	004010d1 	.word	0x004010d1
  4023bc:	20400adc 	.word	0x20400adc
  4023c0:	00401d9d 	.word	0x00401d9d
  4023c4:	0040221d 	.word	0x0040221d
  4023c8:	e000ed04 	.word	0xe000ed04

004023cc <prvIdleTask>:
{
  4023cc:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4023ce:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402458 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4023d2:	4e19      	ldr	r6, [pc, #100]	; (402438 <prvIdleTask+0x6c>)
				taskYIELD();
  4023d4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40245c <prvIdleTask+0x90>
  4023d8:	e02a      	b.n	402430 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4023da:	4b18      	ldr	r3, [pc, #96]	; (40243c <prvIdleTask+0x70>)
  4023dc:	681b      	ldr	r3, [r3, #0]
  4023de:	2b01      	cmp	r3, #1
  4023e0:	d81e      	bhi.n	402420 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4023e2:	682b      	ldr	r3, [r5, #0]
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	d0f8      	beq.n	4023da <prvIdleTask+0xe>
			vTaskSuspendAll();
  4023e8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4023ea:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4023ec:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4023ee:	2c00      	cmp	r4, #0
  4023f0:	d0f7      	beq.n	4023e2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4023f2:	4b13      	ldr	r3, [pc, #76]	; (402440 <prvIdleTask+0x74>)
  4023f4:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4023f6:	68f3      	ldr	r3, [r6, #12]
  4023f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4023fa:	1d20      	adds	r0, r4, #4
  4023fc:	4b11      	ldr	r3, [pc, #68]	; (402444 <prvIdleTask+0x78>)
  4023fe:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402400:	4a11      	ldr	r2, [pc, #68]	; (402448 <prvIdleTask+0x7c>)
  402402:	6813      	ldr	r3, [r2, #0]
  402404:	3b01      	subs	r3, #1
  402406:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402408:	682b      	ldr	r3, [r5, #0]
  40240a:	3b01      	subs	r3, #1
  40240c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40240e:	4b0f      	ldr	r3, [pc, #60]	; (40244c <prvIdleTask+0x80>)
  402410:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402412:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402414:	f8df a048 	ldr.w	sl, [pc, #72]	; 402460 <prvIdleTask+0x94>
  402418:	47d0      	blx	sl
		vPortFree( pxTCB );
  40241a:	4620      	mov	r0, r4
  40241c:	47d0      	blx	sl
  40241e:	e7e0      	b.n	4023e2 <prvIdleTask+0x16>
				taskYIELD();
  402420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402424:	f8c9 3000 	str.w	r3, [r9]
  402428:	f3bf 8f4f 	dsb	sy
  40242c:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402430:	4d07      	ldr	r5, [pc, #28]	; (402450 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402432:	4f08      	ldr	r7, [pc, #32]	; (402454 <prvIdleTask+0x88>)
  402434:	e7d5      	b.n	4023e2 <prvIdleTask+0x16>
  402436:	bf00      	nop
  402438:	20400b3c 	.word	0x20400b3c
  40243c:	20400a64 	.word	0x20400a64
  402440:	004011b5 	.word	0x004011b5
  402444:	004010d1 	.word	0x004010d1
  402448:	20400ac8 	.word	0x20400ac8
  40244c:	00401201 	.word	0x00401201
  402450:	20400ad8 	.word	0x20400ad8
  402454:	0040221d 	.word	0x0040221d
  402458:	004020b5 	.word	0x004020b5
  40245c:	e000ed04 	.word	0xe000ed04
  402460:	00401441 	.word	0x00401441

00402464 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402464:	4b2d      	ldr	r3, [pc, #180]	; (40251c <vTaskSwitchContext+0xb8>)
  402466:	681b      	ldr	r3, [r3, #0]
  402468:	2b00      	cmp	r3, #0
  40246a:	d12c      	bne.n	4024c6 <vTaskSwitchContext+0x62>
{
  40246c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40246e:	2200      	movs	r2, #0
  402470:	4b2b      	ldr	r3, [pc, #172]	; (402520 <vTaskSwitchContext+0xbc>)
  402472:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402474:	4b2b      	ldr	r3, [pc, #172]	; (402524 <vTaskSwitchContext+0xc0>)
  402476:	681b      	ldr	r3, [r3, #0]
  402478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40247a:	681a      	ldr	r2, [r3, #0]
  40247c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402480:	d103      	bne.n	40248a <vTaskSwitchContext+0x26>
  402482:	685a      	ldr	r2, [r3, #4]
  402484:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402488:	d021      	beq.n	4024ce <vTaskSwitchContext+0x6a>
  40248a:	4b26      	ldr	r3, [pc, #152]	; (402524 <vTaskSwitchContext+0xc0>)
  40248c:	6818      	ldr	r0, [r3, #0]
  40248e:	6819      	ldr	r1, [r3, #0]
  402490:	3134      	adds	r1, #52	; 0x34
  402492:	4b25      	ldr	r3, [pc, #148]	; (402528 <vTaskSwitchContext+0xc4>)
  402494:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402496:	4b25      	ldr	r3, [pc, #148]	; (40252c <vTaskSwitchContext+0xc8>)
  402498:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40249a:	fab3 f383 	clz	r3, r3
  40249e:	b2db      	uxtb	r3, r3
  4024a0:	f1c3 031f 	rsb	r3, r3, #31
  4024a4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4024a8:	4a21      	ldr	r2, [pc, #132]	; (402530 <vTaskSwitchContext+0xcc>)
  4024aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4024ae:	b9ba      	cbnz	r2, 4024e0 <vTaskSwitchContext+0x7c>
	__asm volatile
  4024b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024b4:	b672      	cpsid	i
  4024b6:	f383 8811 	msr	BASEPRI, r3
  4024ba:	f3bf 8f6f 	isb	sy
  4024be:	f3bf 8f4f 	dsb	sy
  4024c2:	b662      	cpsie	i
  4024c4:	e7fe      	b.n	4024c4 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4024c6:	2201      	movs	r2, #1
  4024c8:	4b15      	ldr	r3, [pc, #84]	; (402520 <vTaskSwitchContext+0xbc>)
  4024ca:	601a      	str	r2, [r3, #0]
  4024cc:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4024ce:	689a      	ldr	r2, [r3, #8]
  4024d0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4024d4:	d1d9      	bne.n	40248a <vTaskSwitchContext+0x26>
  4024d6:	68db      	ldr	r3, [r3, #12]
  4024d8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4024dc:	d1d5      	bne.n	40248a <vTaskSwitchContext+0x26>
  4024de:	e7da      	b.n	402496 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4024e0:	4a13      	ldr	r2, [pc, #76]	; (402530 <vTaskSwitchContext+0xcc>)
  4024e2:	0099      	lsls	r1, r3, #2
  4024e4:	18c8      	adds	r0, r1, r3
  4024e6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4024ea:	6844      	ldr	r4, [r0, #4]
  4024ec:	6864      	ldr	r4, [r4, #4]
  4024ee:	6044      	str	r4, [r0, #4]
  4024f0:	4419      	add	r1, r3
  4024f2:	4602      	mov	r2, r0
  4024f4:	3208      	adds	r2, #8
  4024f6:	4294      	cmp	r4, r2
  4024f8:	d009      	beq.n	40250e <vTaskSwitchContext+0xaa>
  4024fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024fe:	4a0c      	ldr	r2, [pc, #48]	; (402530 <vTaskSwitchContext+0xcc>)
  402500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402504:	685b      	ldr	r3, [r3, #4]
  402506:	68da      	ldr	r2, [r3, #12]
  402508:	4b06      	ldr	r3, [pc, #24]	; (402524 <vTaskSwitchContext+0xc0>)
  40250a:	601a      	str	r2, [r3, #0]
  40250c:	bd10      	pop	{r4, pc}
  40250e:	6860      	ldr	r0, [r4, #4]
  402510:	4a07      	ldr	r2, [pc, #28]	; (402530 <vTaskSwitchContext+0xcc>)
  402512:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402516:	6050      	str	r0, [r2, #4]
  402518:	e7ef      	b.n	4024fa <vTaskSwitchContext+0x96>
  40251a:	bf00      	nop
  40251c:	20400ad0 	.word	0x20400ad0
  402520:	20400b54 	.word	0x20400b54
  402524:	20400a58 	.word	0x20400a58
  402528:	0040316d 	.word	0x0040316d
  40252c:	20400adc 	.word	0x20400adc
  402530:	20400a64 	.word	0x20400a64

00402534 <vTaskPlaceOnEventList>:
{
  402534:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402536:	b1e0      	cbz	r0, 402572 <vTaskPlaceOnEventList+0x3e>
  402538:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40253a:	4d17      	ldr	r5, [pc, #92]	; (402598 <vTaskPlaceOnEventList+0x64>)
  40253c:	6829      	ldr	r1, [r5, #0]
  40253e:	3118      	adds	r1, #24
  402540:	4b16      	ldr	r3, [pc, #88]	; (40259c <vTaskPlaceOnEventList+0x68>)
  402542:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402544:	6828      	ldr	r0, [r5, #0]
  402546:	3004      	adds	r0, #4
  402548:	4b15      	ldr	r3, [pc, #84]	; (4025a0 <vTaskPlaceOnEventList+0x6c>)
  40254a:	4798      	blx	r3
  40254c:	b940      	cbnz	r0, 402560 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40254e:	682a      	ldr	r2, [r5, #0]
  402550:	4914      	ldr	r1, [pc, #80]	; (4025a4 <vTaskPlaceOnEventList+0x70>)
  402552:	680b      	ldr	r3, [r1, #0]
  402554:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402556:	2201      	movs	r2, #1
  402558:	4082      	lsls	r2, r0
  40255a:	ea23 0302 	bic.w	r3, r3, r2
  40255e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402560:	f1b4 3fff 	cmp.w	r4, #4294967295
  402564:	d010      	beq.n	402588 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402566:	4b10      	ldr	r3, [pc, #64]	; (4025a8 <vTaskPlaceOnEventList+0x74>)
  402568:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40256a:	4420      	add	r0, r4
  40256c:	4b0f      	ldr	r3, [pc, #60]	; (4025ac <vTaskPlaceOnEventList+0x78>)
  40256e:	4798      	blx	r3
  402570:	bd38      	pop	{r3, r4, r5, pc}
  402572:	f04f 0380 	mov.w	r3, #128	; 0x80
  402576:	b672      	cpsid	i
  402578:	f383 8811 	msr	BASEPRI, r3
  40257c:	f3bf 8f6f 	isb	sy
  402580:	f3bf 8f4f 	dsb	sy
  402584:	b662      	cpsie	i
  402586:	e7fe      	b.n	402586 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402588:	4b03      	ldr	r3, [pc, #12]	; (402598 <vTaskPlaceOnEventList+0x64>)
  40258a:	6819      	ldr	r1, [r3, #0]
  40258c:	3104      	adds	r1, #4
  40258e:	4808      	ldr	r0, [pc, #32]	; (4025b0 <vTaskPlaceOnEventList+0x7c>)
  402590:	4b08      	ldr	r3, [pc, #32]	; (4025b4 <vTaskPlaceOnEventList+0x80>)
  402592:	4798      	blx	r3
  402594:	bd38      	pop	{r3, r4, r5, pc}
  402596:	bf00      	nop
  402598:	20400a58 	.word	0x20400a58
  40259c:	0040109d 	.word	0x0040109d
  4025a0:	004010d1 	.word	0x004010d1
  4025a4:	20400adc 	.word	0x20400adc
  4025a8:	20400b50 	.word	0x20400b50
  4025ac:	00401d9d 	.word	0x00401d9d
  4025b0:	20400b28 	.word	0x20400b28
  4025b4:	00401085 	.word	0x00401085

004025b8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4025b8:	b1e8      	cbz	r0, 4025f6 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4025ba:	b570      	push	{r4, r5, r6, lr}
  4025bc:	4615      	mov	r5, r2
  4025be:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4025c0:	4e16      	ldr	r6, [pc, #88]	; (40261c <vTaskPlaceOnEventListRestricted+0x64>)
  4025c2:	6831      	ldr	r1, [r6, #0]
  4025c4:	3118      	adds	r1, #24
  4025c6:	4b16      	ldr	r3, [pc, #88]	; (402620 <vTaskPlaceOnEventListRestricted+0x68>)
  4025c8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4025ca:	6830      	ldr	r0, [r6, #0]
  4025cc:	3004      	adds	r0, #4
  4025ce:	4b15      	ldr	r3, [pc, #84]	; (402624 <vTaskPlaceOnEventListRestricted+0x6c>)
  4025d0:	4798      	blx	r3
  4025d2:	b940      	cbnz	r0, 4025e6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4025d4:	6832      	ldr	r2, [r6, #0]
  4025d6:	4914      	ldr	r1, [pc, #80]	; (402628 <vTaskPlaceOnEventListRestricted+0x70>)
  4025d8:	680b      	ldr	r3, [r1, #0]
  4025da:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4025dc:	2201      	movs	r2, #1
  4025de:	4082      	lsls	r2, r0
  4025e0:	ea23 0302 	bic.w	r3, r3, r2
  4025e4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4025e6:	2d01      	cmp	r5, #1
  4025e8:	d010      	beq.n	40260c <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4025ea:	4b10      	ldr	r3, [pc, #64]	; (40262c <vTaskPlaceOnEventListRestricted+0x74>)
  4025ec:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4025ee:	4420      	add	r0, r4
  4025f0:	4b0f      	ldr	r3, [pc, #60]	; (402630 <vTaskPlaceOnEventListRestricted+0x78>)
  4025f2:	4798      	blx	r3
  4025f4:	bd70      	pop	{r4, r5, r6, pc}
  4025f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025fa:	b672      	cpsid	i
  4025fc:	f383 8811 	msr	BASEPRI, r3
  402600:	f3bf 8f6f 	isb	sy
  402604:	f3bf 8f4f 	dsb	sy
  402608:	b662      	cpsie	i
  40260a:	e7fe      	b.n	40260a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40260c:	4b03      	ldr	r3, [pc, #12]	; (40261c <vTaskPlaceOnEventListRestricted+0x64>)
  40260e:	6819      	ldr	r1, [r3, #0]
  402610:	3104      	adds	r1, #4
  402612:	4808      	ldr	r0, [pc, #32]	; (402634 <vTaskPlaceOnEventListRestricted+0x7c>)
  402614:	4b02      	ldr	r3, [pc, #8]	; (402620 <vTaskPlaceOnEventListRestricted+0x68>)
  402616:	4798      	blx	r3
  402618:	bd70      	pop	{r4, r5, r6, pc}
  40261a:	bf00      	nop
  40261c:	20400a58 	.word	0x20400a58
  402620:	00401085 	.word	0x00401085
  402624:	004010d1 	.word	0x004010d1
  402628:	20400adc 	.word	0x20400adc
  40262c:	20400b50 	.word	0x20400b50
  402630:	00401d9d 	.word	0x00401d9d
  402634:	20400b28 	.word	0x20400b28

00402638 <xTaskRemoveFromEventList>:
{
  402638:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40263a:	68c3      	ldr	r3, [r0, #12]
  40263c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40263e:	b324      	cbz	r4, 40268a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402640:	f104 0518 	add.w	r5, r4, #24
  402644:	4628      	mov	r0, r5
  402646:	4b1a      	ldr	r3, [pc, #104]	; (4026b0 <xTaskRemoveFromEventList+0x78>)
  402648:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40264a:	4b1a      	ldr	r3, [pc, #104]	; (4026b4 <xTaskRemoveFromEventList+0x7c>)
  40264c:	681b      	ldr	r3, [r3, #0]
  40264e:	bb3b      	cbnz	r3, 4026a0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402650:	1d25      	adds	r5, r4, #4
  402652:	4628      	mov	r0, r5
  402654:	4b16      	ldr	r3, [pc, #88]	; (4026b0 <xTaskRemoveFromEventList+0x78>)
  402656:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402658:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40265a:	4a17      	ldr	r2, [pc, #92]	; (4026b8 <xTaskRemoveFromEventList+0x80>)
  40265c:	6811      	ldr	r1, [r2, #0]
  40265e:	2301      	movs	r3, #1
  402660:	4083      	lsls	r3, r0
  402662:	430b      	orrs	r3, r1
  402664:	6013      	str	r3, [r2, #0]
  402666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40266a:	4629      	mov	r1, r5
  40266c:	4b13      	ldr	r3, [pc, #76]	; (4026bc <xTaskRemoveFromEventList+0x84>)
  40266e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402672:	4b13      	ldr	r3, [pc, #76]	; (4026c0 <xTaskRemoveFromEventList+0x88>)
  402674:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402676:	4b13      	ldr	r3, [pc, #76]	; (4026c4 <xTaskRemoveFromEventList+0x8c>)
  402678:	681b      	ldr	r3, [r3, #0]
  40267a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40267e:	429a      	cmp	r2, r3
  402680:	d913      	bls.n	4026aa <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402682:	2001      	movs	r0, #1
  402684:	4b10      	ldr	r3, [pc, #64]	; (4026c8 <xTaskRemoveFromEventList+0x90>)
  402686:	6018      	str	r0, [r3, #0]
  402688:	bd38      	pop	{r3, r4, r5, pc}
  40268a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40268e:	b672      	cpsid	i
  402690:	f383 8811 	msr	BASEPRI, r3
  402694:	f3bf 8f6f 	isb	sy
  402698:	f3bf 8f4f 	dsb	sy
  40269c:	b662      	cpsie	i
  40269e:	e7fe      	b.n	40269e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4026a0:	4629      	mov	r1, r5
  4026a2:	480a      	ldr	r0, [pc, #40]	; (4026cc <xTaskRemoveFromEventList+0x94>)
  4026a4:	4b06      	ldr	r3, [pc, #24]	; (4026c0 <xTaskRemoveFromEventList+0x88>)
  4026a6:	4798      	blx	r3
  4026a8:	e7e5      	b.n	402676 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4026aa:	2000      	movs	r0, #0
}
  4026ac:	bd38      	pop	{r3, r4, r5, pc}
  4026ae:	bf00      	nop
  4026b0:	004010d1 	.word	0x004010d1
  4026b4:	20400ad0 	.word	0x20400ad0
  4026b8:	20400adc 	.word	0x20400adc
  4026bc:	20400a64 	.word	0x20400a64
  4026c0:	00401085 	.word	0x00401085
  4026c4:	20400a58 	.word	0x20400a58
  4026c8:	20400b54 	.word	0x20400b54
  4026cc:	20400b10 	.word	0x20400b10

004026d0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4026d0:	b130      	cbz	r0, 4026e0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4026d2:	4a09      	ldr	r2, [pc, #36]	; (4026f8 <vTaskSetTimeOutState+0x28>)
  4026d4:	6812      	ldr	r2, [r2, #0]
  4026d6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4026d8:	4a08      	ldr	r2, [pc, #32]	; (4026fc <vTaskSetTimeOutState+0x2c>)
  4026da:	6812      	ldr	r2, [r2, #0]
  4026dc:	6042      	str	r2, [r0, #4]
  4026de:	4770      	bx	lr
  4026e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026e4:	b672      	cpsid	i
  4026e6:	f383 8811 	msr	BASEPRI, r3
  4026ea:	f3bf 8f6f 	isb	sy
  4026ee:	f3bf 8f4f 	dsb	sy
  4026f2:	b662      	cpsie	i
  4026f4:	e7fe      	b.n	4026f4 <vTaskSetTimeOutState+0x24>
  4026f6:	bf00      	nop
  4026f8:	20400b0c 	.word	0x20400b0c
  4026fc:	20400b50 	.word	0x20400b50

00402700 <xTaskCheckForTimeOut>:
{
  402700:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402702:	b1c0      	cbz	r0, 402736 <xTaskCheckForTimeOut+0x36>
  402704:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402706:	b309      	cbz	r1, 40274c <xTaskCheckForTimeOut+0x4c>
  402708:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40270a:	4b1d      	ldr	r3, [pc, #116]	; (402780 <xTaskCheckForTimeOut+0x80>)
  40270c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40270e:	4b1d      	ldr	r3, [pc, #116]	; (402784 <xTaskCheckForTimeOut+0x84>)
  402710:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402712:	682b      	ldr	r3, [r5, #0]
  402714:	f1b3 3fff 	cmp.w	r3, #4294967295
  402718:	d02e      	beq.n	402778 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40271a:	491b      	ldr	r1, [pc, #108]	; (402788 <xTaskCheckForTimeOut+0x88>)
  40271c:	6809      	ldr	r1, [r1, #0]
  40271e:	6820      	ldr	r0, [r4, #0]
  402720:	4288      	cmp	r0, r1
  402722:	d002      	beq.n	40272a <xTaskCheckForTimeOut+0x2a>
  402724:	6861      	ldr	r1, [r4, #4]
  402726:	428a      	cmp	r2, r1
  402728:	d228      	bcs.n	40277c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40272a:	6861      	ldr	r1, [r4, #4]
  40272c:	1a50      	subs	r0, r2, r1
  40272e:	4283      	cmp	r3, r0
  402730:	d817      	bhi.n	402762 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402732:	2401      	movs	r4, #1
  402734:	e01c      	b.n	402770 <xTaskCheckForTimeOut+0x70>
  402736:	f04f 0380 	mov.w	r3, #128	; 0x80
  40273a:	b672      	cpsid	i
  40273c:	f383 8811 	msr	BASEPRI, r3
  402740:	f3bf 8f6f 	isb	sy
  402744:	f3bf 8f4f 	dsb	sy
  402748:	b662      	cpsie	i
  40274a:	e7fe      	b.n	40274a <xTaskCheckForTimeOut+0x4a>
  40274c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402750:	b672      	cpsid	i
  402752:	f383 8811 	msr	BASEPRI, r3
  402756:	f3bf 8f6f 	isb	sy
  40275a:	f3bf 8f4f 	dsb	sy
  40275e:	b662      	cpsie	i
  402760:	e7fe      	b.n	402760 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402762:	1a9b      	subs	r3, r3, r2
  402764:	440b      	add	r3, r1
  402766:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402768:	4620      	mov	r0, r4
  40276a:	4b08      	ldr	r3, [pc, #32]	; (40278c <xTaskCheckForTimeOut+0x8c>)
  40276c:	4798      	blx	r3
			xReturn = pdFALSE;
  40276e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402770:	4b07      	ldr	r3, [pc, #28]	; (402790 <xTaskCheckForTimeOut+0x90>)
  402772:	4798      	blx	r3
}
  402774:	4620      	mov	r0, r4
  402776:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402778:	2400      	movs	r4, #0
  40277a:	e7f9      	b.n	402770 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  40277c:	2401      	movs	r4, #1
  40277e:	e7f7      	b.n	402770 <xTaskCheckForTimeOut+0x70>
  402780:	004011b5 	.word	0x004011b5
  402784:	20400b50 	.word	0x20400b50
  402788:	20400b0c 	.word	0x20400b0c
  40278c:	004026d1 	.word	0x004026d1
  402790:	00401201 	.word	0x00401201

00402794 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402794:	2201      	movs	r2, #1
  402796:	4b01      	ldr	r3, [pc, #4]	; (40279c <vTaskMissedYield+0x8>)
  402798:	601a      	str	r2, [r3, #0]
  40279a:	4770      	bx	lr
  40279c:	20400b54 	.word	0x20400b54

004027a0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4027a0:	4b05      	ldr	r3, [pc, #20]	; (4027b8 <xTaskGetSchedulerState+0x18>)
  4027a2:	681b      	ldr	r3, [r3, #0]
  4027a4:	b133      	cbz	r3, 4027b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4027a6:	4b05      	ldr	r3, [pc, #20]	; (4027bc <xTaskGetSchedulerState+0x1c>)
  4027a8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4027aa:	2b00      	cmp	r3, #0
  4027ac:	bf0c      	ite	eq
  4027ae:	2002      	moveq	r0, #2
  4027b0:	2000      	movne	r0, #0
  4027b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4027b4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4027b6:	4770      	bx	lr
  4027b8:	20400b24 	.word	0x20400b24
  4027bc:	20400ad0 	.word	0x20400ad0

004027c0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4027c0:	2800      	cmp	r0, #0
  4027c2:	d044      	beq.n	40284e <vTaskPriorityInherit+0x8e>
	{
  4027c4:	b538      	push	{r3, r4, r5, lr}
  4027c6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4027c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4027ca:	4921      	ldr	r1, [pc, #132]	; (402850 <vTaskPriorityInherit+0x90>)
  4027cc:	6809      	ldr	r1, [r1, #0]
  4027ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4027d0:	428a      	cmp	r2, r1
  4027d2:	d214      	bcs.n	4027fe <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4027d4:	6981      	ldr	r1, [r0, #24]
  4027d6:	2900      	cmp	r1, #0
  4027d8:	db05      	blt.n	4027e6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4027da:	491d      	ldr	r1, [pc, #116]	; (402850 <vTaskPriorityInherit+0x90>)
  4027dc:	6809      	ldr	r1, [r1, #0]
  4027de:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4027e0:	f1c1 0105 	rsb	r1, r1, #5
  4027e4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4027e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4027ea:	491a      	ldr	r1, [pc, #104]	; (402854 <vTaskPriorityInherit+0x94>)
  4027ec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4027f0:	6961      	ldr	r1, [r4, #20]
  4027f2:	4291      	cmp	r1, r2
  4027f4:	d004      	beq.n	402800 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4027f6:	4a16      	ldr	r2, [pc, #88]	; (402850 <vTaskPriorityInherit+0x90>)
  4027f8:	6812      	ldr	r2, [r2, #0]
  4027fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4027fc:	62e2      	str	r2, [r4, #44]	; 0x2c
  4027fe:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402800:	1d25      	adds	r5, r4, #4
  402802:	4628      	mov	r0, r5
  402804:	4b14      	ldr	r3, [pc, #80]	; (402858 <vTaskPriorityInherit+0x98>)
  402806:	4798      	blx	r3
  402808:	b970      	cbnz	r0, 402828 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40280a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40280c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402810:	4a10      	ldr	r2, [pc, #64]	; (402854 <vTaskPriorityInherit+0x94>)
  402812:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402816:	b93a      	cbnz	r2, 402828 <vTaskPriorityInherit+0x68>
  402818:	4810      	ldr	r0, [pc, #64]	; (40285c <vTaskPriorityInherit+0x9c>)
  40281a:	6802      	ldr	r2, [r0, #0]
  40281c:	2101      	movs	r1, #1
  40281e:	fa01 f303 	lsl.w	r3, r1, r3
  402822:	ea22 0303 	bic.w	r3, r2, r3
  402826:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402828:	4b09      	ldr	r3, [pc, #36]	; (402850 <vTaskPriorityInherit+0x90>)
  40282a:	681b      	ldr	r3, [r3, #0]
  40282c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40282e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402830:	4a0a      	ldr	r2, [pc, #40]	; (40285c <vTaskPriorityInherit+0x9c>)
  402832:	6811      	ldr	r1, [r2, #0]
  402834:	2301      	movs	r3, #1
  402836:	4083      	lsls	r3, r0
  402838:	430b      	orrs	r3, r1
  40283a:	6013      	str	r3, [r2, #0]
  40283c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402840:	4629      	mov	r1, r5
  402842:	4b04      	ldr	r3, [pc, #16]	; (402854 <vTaskPriorityInherit+0x94>)
  402844:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402848:	4b05      	ldr	r3, [pc, #20]	; (402860 <vTaskPriorityInherit+0xa0>)
  40284a:	4798      	blx	r3
  40284c:	bd38      	pop	{r3, r4, r5, pc}
  40284e:	4770      	bx	lr
  402850:	20400a58 	.word	0x20400a58
  402854:	20400a64 	.word	0x20400a64
  402858:	004010d1 	.word	0x004010d1
  40285c:	20400adc 	.word	0x20400adc
  402860:	00401085 	.word	0x00401085

00402864 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402864:	2800      	cmp	r0, #0
  402866:	d04d      	beq.n	402904 <xTaskPriorityDisinherit+0xa0>
	{
  402868:	b538      	push	{r3, r4, r5, lr}
  40286a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40286c:	4a27      	ldr	r2, [pc, #156]	; (40290c <xTaskPriorityDisinherit+0xa8>)
  40286e:	6812      	ldr	r2, [r2, #0]
  402870:	4290      	cmp	r0, r2
  402872:	d00a      	beq.n	40288a <xTaskPriorityDisinherit+0x26>
  402874:	f04f 0380 	mov.w	r3, #128	; 0x80
  402878:	b672      	cpsid	i
  40287a:	f383 8811 	msr	BASEPRI, r3
  40287e:	f3bf 8f6f 	isb	sy
  402882:	f3bf 8f4f 	dsb	sy
  402886:	b662      	cpsie	i
  402888:	e7fe      	b.n	402888 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40288a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40288c:	b952      	cbnz	r2, 4028a4 <xTaskPriorityDisinherit+0x40>
  40288e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402892:	b672      	cpsid	i
  402894:	f383 8811 	msr	BASEPRI, r3
  402898:	f3bf 8f6f 	isb	sy
  40289c:	f3bf 8f4f 	dsb	sy
  4028a0:	b662      	cpsie	i
  4028a2:	e7fe      	b.n	4028a2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4028a4:	3a01      	subs	r2, #1
  4028a6:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4028a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4028aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4028ac:	4288      	cmp	r0, r1
  4028ae:	d02b      	beq.n	402908 <xTaskPriorityDisinherit+0xa4>
  4028b0:	bb52      	cbnz	r2, 402908 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4028b2:	1d25      	adds	r5, r4, #4
  4028b4:	4628      	mov	r0, r5
  4028b6:	4b16      	ldr	r3, [pc, #88]	; (402910 <xTaskPriorityDisinherit+0xac>)
  4028b8:	4798      	blx	r3
  4028ba:	b968      	cbnz	r0, 4028d8 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4028bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4028be:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4028c2:	4b14      	ldr	r3, [pc, #80]	; (402914 <xTaskPriorityDisinherit+0xb0>)
  4028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4028c8:	b933      	cbnz	r3, 4028d8 <xTaskPriorityDisinherit+0x74>
  4028ca:	4813      	ldr	r0, [pc, #76]	; (402918 <xTaskPriorityDisinherit+0xb4>)
  4028cc:	6803      	ldr	r3, [r0, #0]
  4028ce:	2201      	movs	r2, #1
  4028d0:	408a      	lsls	r2, r1
  4028d2:	ea23 0302 	bic.w	r3, r3, r2
  4028d6:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4028d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4028da:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4028dc:	f1c0 0305 	rsb	r3, r0, #5
  4028e0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4028e2:	4a0d      	ldr	r2, [pc, #52]	; (402918 <xTaskPriorityDisinherit+0xb4>)
  4028e4:	6811      	ldr	r1, [r2, #0]
  4028e6:	2401      	movs	r4, #1
  4028e8:	fa04 f300 	lsl.w	r3, r4, r0
  4028ec:	430b      	orrs	r3, r1
  4028ee:	6013      	str	r3, [r2, #0]
  4028f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4028f4:	4629      	mov	r1, r5
  4028f6:	4b07      	ldr	r3, [pc, #28]	; (402914 <xTaskPriorityDisinherit+0xb0>)
  4028f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4028fc:	4b07      	ldr	r3, [pc, #28]	; (40291c <xTaskPriorityDisinherit+0xb8>)
  4028fe:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402900:	4620      	mov	r0, r4
  402902:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402904:	2000      	movs	r0, #0
  402906:	4770      	bx	lr
  402908:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40290a:	bd38      	pop	{r3, r4, r5, pc}
  40290c:	20400a58 	.word	0x20400a58
  402910:	004010d1 	.word	0x004010d1
  402914:	20400a64 	.word	0x20400a64
  402918:	20400adc 	.word	0x20400adc
  40291c:	00401085 	.word	0x00401085

00402920 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402920:	4b05      	ldr	r3, [pc, #20]	; (402938 <pvTaskIncrementMutexHeldCount+0x18>)
  402922:	681b      	ldr	r3, [r3, #0]
  402924:	b123      	cbz	r3, 402930 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402926:	4b04      	ldr	r3, [pc, #16]	; (402938 <pvTaskIncrementMutexHeldCount+0x18>)
  402928:	681a      	ldr	r2, [r3, #0]
  40292a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  40292c:	3301      	adds	r3, #1
  40292e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402930:	4b01      	ldr	r3, [pc, #4]	; (402938 <pvTaskIncrementMutexHeldCount+0x18>)
  402932:	6818      	ldr	r0, [r3, #0]
	}
  402934:	4770      	bx	lr
  402936:	bf00      	nop
  402938:	20400a58 	.word	0x20400a58

0040293c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40293c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40293e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402940:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402942:	4291      	cmp	r1, r2
  402944:	d80c      	bhi.n	402960 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402946:	1ad2      	subs	r2, r2, r3
  402948:	6983      	ldr	r3, [r0, #24]
  40294a:	429a      	cmp	r2, r3
  40294c:	d301      	bcc.n	402952 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40294e:	2001      	movs	r0, #1
  402950:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402952:	1d01      	adds	r1, r0, #4
  402954:	4b09      	ldr	r3, [pc, #36]	; (40297c <prvInsertTimerInActiveList+0x40>)
  402956:	6818      	ldr	r0, [r3, #0]
  402958:	4b09      	ldr	r3, [pc, #36]	; (402980 <prvInsertTimerInActiveList+0x44>)
  40295a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40295c:	2000      	movs	r0, #0
  40295e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402960:	429a      	cmp	r2, r3
  402962:	d203      	bcs.n	40296c <prvInsertTimerInActiveList+0x30>
  402964:	4299      	cmp	r1, r3
  402966:	d301      	bcc.n	40296c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402968:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40296a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40296c:	1d01      	adds	r1, r0, #4
  40296e:	4b05      	ldr	r3, [pc, #20]	; (402984 <prvInsertTimerInActiveList+0x48>)
  402970:	6818      	ldr	r0, [r3, #0]
  402972:	4b03      	ldr	r3, [pc, #12]	; (402980 <prvInsertTimerInActiveList+0x44>)
  402974:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402976:	2000      	movs	r0, #0
  402978:	bd08      	pop	{r3, pc}
  40297a:	bf00      	nop
  40297c:	20400b5c 	.word	0x20400b5c
  402980:	0040109d 	.word	0x0040109d
  402984:	20400b58 	.word	0x20400b58

00402988 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402988:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40298a:	4b15      	ldr	r3, [pc, #84]	; (4029e0 <prvCheckForValidListAndQueue+0x58>)
  40298c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40298e:	4b15      	ldr	r3, [pc, #84]	; (4029e4 <prvCheckForValidListAndQueue+0x5c>)
  402990:	681b      	ldr	r3, [r3, #0]
  402992:	b113      	cbz	r3, 40299a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402994:	4b14      	ldr	r3, [pc, #80]	; (4029e8 <prvCheckForValidListAndQueue+0x60>)
  402996:	4798      	blx	r3
  402998:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40299a:	4d14      	ldr	r5, [pc, #80]	; (4029ec <prvCheckForValidListAndQueue+0x64>)
  40299c:	4628      	mov	r0, r5
  40299e:	4e14      	ldr	r6, [pc, #80]	; (4029f0 <prvCheckForValidListAndQueue+0x68>)
  4029a0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4029a2:	4c14      	ldr	r4, [pc, #80]	; (4029f4 <prvCheckForValidListAndQueue+0x6c>)
  4029a4:	4620      	mov	r0, r4
  4029a6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4029a8:	4b13      	ldr	r3, [pc, #76]	; (4029f8 <prvCheckForValidListAndQueue+0x70>)
  4029aa:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4029ac:	4b13      	ldr	r3, [pc, #76]	; (4029fc <prvCheckForValidListAndQueue+0x74>)
  4029ae:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4029b0:	2200      	movs	r2, #0
  4029b2:	2110      	movs	r1, #16
  4029b4:	2005      	movs	r0, #5
  4029b6:	4b12      	ldr	r3, [pc, #72]	; (402a00 <prvCheckForValidListAndQueue+0x78>)
  4029b8:	4798      	blx	r3
  4029ba:	4b0a      	ldr	r3, [pc, #40]	; (4029e4 <prvCheckForValidListAndQueue+0x5c>)
  4029bc:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4029be:	b118      	cbz	r0, 4029c8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4029c0:	4910      	ldr	r1, [pc, #64]	; (402a04 <prvCheckForValidListAndQueue+0x7c>)
  4029c2:	4b11      	ldr	r3, [pc, #68]	; (402a08 <prvCheckForValidListAndQueue+0x80>)
  4029c4:	4798      	blx	r3
  4029c6:	e7e5      	b.n	402994 <prvCheckForValidListAndQueue+0xc>
  4029c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029cc:	b672      	cpsid	i
  4029ce:	f383 8811 	msr	BASEPRI, r3
  4029d2:	f3bf 8f6f 	isb	sy
  4029d6:	f3bf 8f4f 	dsb	sy
  4029da:	b662      	cpsie	i
  4029dc:	e7fe      	b.n	4029dc <prvCheckForValidListAndQueue+0x54>
  4029de:	bf00      	nop
  4029e0:	004011b5 	.word	0x004011b5
  4029e4:	20400b8c 	.word	0x20400b8c
  4029e8:	00401201 	.word	0x00401201
  4029ec:	20400b60 	.word	0x20400b60
  4029f0:	00401069 	.word	0x00401069
  4029f4:	20400b74 	.word	0x20400b74
  4029f8:	20400b58 	.word	0x20400b58
  4029fc:	20400b5c 	.word	0x20400b5c
  402a00:	004016d5 	.word	0x004016d5
  402a04:	00409e90 	.word	0x00409e90
  402a08:	00401ce5 	.word	0x00401ce5

00402a0c <xTimerCreateTimerTask>:
{
  402a0c:	b510      	push	{r4, lr}
  402a0e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402a10:	4b0f      	ldr	r3, [pc, #60]	; (402a50 <xTimerCreateTimerTask+0x44>)
  402a12:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402a14:	4b0f      	ldr	r3, [pc, #60]	; (402a54 <xTimerCreateTimerTask+0x48>)
  402a16:	681b      	ldr	r3, [r3, #0]
  402a18:	b173      	cbz	r3, 402a38 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402a1a:	2300      	movs	r3, #0
  402a1c:	9303      	str	r3, [sp, #12]
  402a1e:	9302      	str	r3, [sp, #8]
  402a20:	9301      	str	r3, [sp, #4]
  402a22:	2204      	movs	r2, #4
  402a24:	9200      	str	r2, [sp, #0]
  402a26:	f44f 7282 	mov.w	r2, #260	; 0x104
  402a2a:	490b      	ldr	r1, [pc, #44]	; (402a58 <xTimerCreateTimerTask+0x4c>)
  402a2c:	480b      	ldr	r0, [pc, #44]	; (402a5c <xTimerCreateTimerTask+0x50>)
  402a2e:	4c0c      	ldr	r4, [pc, #48]	; (402a60 <xTimerCreateTimerTask+0x54>)
  402a30:	47a0      	blx	r4
	configASSERT( xReturn );
  402a32:	b108      	cbz	r0, 402a38 <xTimerCreateTimerTask+0x2c>
}
  402a34:	b004      	add	sp, #16
  402a36:	bd10      	pop	{r4, pc}
  402a38:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a3c:	b672      	cpsid	i
  402a3e:	f383 8811 	msr	BASEPRI, r3
  402a42:	f3bf 8f6f 	isb	sy
  402a46:	f3bf 8f4f 	dsb	sy
  402a4a:	b662      	cpsie	i
  402a4c:	e7fe      	b.n	402a4c <xTimerCreateTimerTask+0x40>
  402a4e:	bf00      	nop
  402a50:	00402989 	.word	0x00402989
  402a54:	20400b8c 	.word	0x20400b8c
  402a58:	00409e98 	.word	0x00409e98
  402a5c:	00402b8d 	.word	0x00402b8d
  402a60:	00401df5 	.word	0x00401df5

00402a64 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402a64:	b1d8      	cbz	r0, 402a9e <xTimerGenericCommand+0x3a>
{
  402a66:	b530      	push	{r4, r5, lr}
  402a68:	b085      	sub	sp, #20
  402a6a:	4615      	mov	r5, r2
  402a6c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402a6e:	4a15      	ldr	r2, [pc, #84]	; (402ac4 <xTimerGenericCommand+0x60>)
  402a70:	6810      	ldr	r0, [r2, #0]
  402a72:	b320      	cbz	r0, 402abe <xTimerGenericCommand+0x5a>
  402a74:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402a76:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402a78:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402a7a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402a7c:	2905      	cmp	r1, #5
  402a7e:	dc19      	bgt.n	402ab4 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402a80:	4b11      	ldr	r3, [pc, #68]	; (402ac8 <xTimerGenericCommand+0x64>)
  402a82:	4798      	blx	r3
  402a84:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402a86:	f04f 0300 	mov.w	r3, #0
  402a8a:	bf0c      	ite	eq
  402a8c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402a8e:	461a      	movne	r2, r3
  402a90:	4669      	mov	r1, sp
  402a92:	480c      	ldr	r0, [pc, #48]	; (402ac4 <xTimerGenericCommand+0x60>)
  402a94:	6800      	ldr	r0, [r0, #0]
  402a96:	4c0d      	ldr	r4, [pc, #52]	; (402acc <xTimerGenericCommand+0x68>)
  402a98:	47a0      	blx	r4
}
  402a9a:	b005      	add	sp, #20
  402a9c:	bd30      	pop	{r4, r5, pc}
  402a9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402aa2:	b672      	cpsid	i
  402aa4:	f383 8811 	msr	BASEPRI, r3
  402aa8:	f3bf 8f6f 	isb	sy
  402aac:	f3bf 8f4f 	dsb	sy
  402ab0:	b662      	cpsie	i
  402ab2:	e7fe      	b.n	402ab2 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402ab4:	2300      	movs	r3, #0
  402ab6:	4669      	mov	r1, sp
  402ab8:	4c05      	ldr	r4, [pc, #20]	; (402ad0 <xTimerGenericCommand+0x6c>)
  402aba:	47a0      	blx	r4
  402abc:	e7ed      	b.n	402a9a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402abe:	2000      	movs	r0, #0
	return xReturn;
  402ac0:	e7eb      	b.n	402a9a <xTimerGenericCommand+0x36>
  402ac2:	bf00      	nop
  402ac4:	20400b8c 	.word	0x20400b8c
  402ac8:	004027a1 	.word	0x004027a1
  402acc:	00401751 	.word	0x00401751
  402ad0:	00401935 	.word	0x00401935

00402ad4 <prvSampleTimeNow>:
{
  402ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ad8:	b082      	sub	sp, #8
  402ada:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402adc:	4b24      	ldr	r3, [pc, #144]	; (402b70 <prvSampleTimeNow+0x9c>)
  402ade:	4798      	blx	r3
  402ae0:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402ae2:	4b24      	ldr	r3, [pc, #144]	; (402b74 <prvSampleTimeNow+0xa0>)
  402ae4:	681b      	ldr	r3, [r3, #0]
  402ae6:	4298      	cmp	r0, r3
  402ae8:	d31b      	bcc.n	402b22 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402aea:	2300      	movs	r3, #0
  402aec:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402af0:	4b20      	ldr	r3, [pc, #128]	; (402b74 <prvSampleTimeNow+0xa0>)
  402af2:	601f      	str	r7, [r3, #0]
}
  402af4:	4638      	mov	r0, r7
  402af6:	b002      	add	sp, #8
  402af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402afc:	2100      	movs	r1, #0
  402afe:	9100      	str	r1, [sp, #0]
  402b00:	460b      	mov	r3, r1
  402b02:	4652      	mov	r2, sl
  402b04:	4620      	mov	r0, r4
  402b06:	4c1c      	ldr	r4, [pc, #112]	; (402b78 <prvSampleTimeNow+0xa4>)
  402b08:	47a0      	blx	r4
				configASSERT( xResult );
  402b0a:	b960      	cbnz	r0, 402b26 <prvSampleTimeNow+0x52>
  402b0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b10:	b672      	cpsid	i
  402b12:	f383 8811 	msr	BASEPRI, r3
  402b16:	f3bf 8f6f 	isb	sy
  402b1a:	f3bf 8f4f 	dsb	sy
  402b1e:	b662      	cpsie	i
  402b20:	e7fe      	b.n	402b20 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b22:	4d16      	ldr	r5, [pc, #88]	; (402b7c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b24:	4e16      	ldr	r6, [pc, #88]	; (402b80 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b26:	682b      	ldr	r3, [r5, #0]
  402b28:	681a      	ldr	r2, [r3, #0]
  402b2a:	b1c2      	cbz	r2, 402b5e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b2c:	68db      	ldr	r3, [r3, #12]
  402b2e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b32:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b34:	f104 0904 	add.w	r9, r4, #4
  402b38:	4648      	mov	r0, r9
  402b3a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b3e:	4620      	mov	r0, r4
  402b40:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b42:	69e3      	ldr	r3, [r4, #28]
  402b44:	2b01      	cmp	r3, #1
  402b46:	d1ee      	bne.n	402b26 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402b48:	69a3      	ldr	r3, [r4, #24]
  402b4a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402b4c:	459a      	cmp	sl, r3
  402b4e:	d2d5      	bcs.n	402afc <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402b50:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402b52:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402b54:	4649      	mov	r1, r9
  402b56:	6828      	ldr	r0, [r5, #0]
  402b58:	4b0a      	ldr	r3, [pc, #40]	; (402b84 <prvSampleTimeNow+0xb0>)
  402b5a:	4798      	blx	r3
  402b5c:	e7e3      	b.n	402b26 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402b5e:	4a0a      	ldr	r2, [pc, #40]	; (402b88 <prvSampleTimeNow+0xb4>)
  402b60:	6810      	ldr	r0, [r2, #0]
  402b62:	4906      	ldr	r1, [pc, #24]	; (402b7c <prvSampleTimeNow+0xa8>)
  402b64:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402b66:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402b68:	2301      	movs	r3, #1
  402b6a:	f8c8 3000 	str.w	r3, [r8]
  402b6e:	e7bf      	b.n	402af0 <prvSampleTimeNow+0x1c>
  402b70:	004020c5 	.word	0x004020c5
  402b74:	20400b88 	.word	0x20400b88
  402b78:	00402a65 	.word	0x00402a65
  402b7c:	20400b58 	.word	0x20400b58
  402b80:	004010d1 	.word	0x004010d1
  402b84:	0040109d 	.word	0x0040109d
  402b88:	20400b5c 	.word	0x20400b5c

00402b8c <prvTimerTask>:
{
  402b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b90:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402b92:	4e75      	ldr	r6, [pc, #468]	; (402d68 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402b94:	4f75      	ldr	r7, [pc, #468]	; (402d6c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402b96:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402d94 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b9a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402d98 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402b9e:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402ba0:	681a      	ldr	r2, [r3, #0]
  402ba2:	2a00      	cmp	r2, #0
  402ba4:	f000 80ce 	beq.w	402d44 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ba8:	68db      	ldr	r3, [r3, #12]
  402baa:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402bac:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bae:	a804      	add	r0, sp, #16
  402bb0:	4b6f      	ldr	r3, [pc, #444]	; (402d70 <prvTimerTask+0x1e4>)
  402bb2:	4798      	blx	r3
  402bb4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402bb6:	9b04      	ldr	r3, [sp, #16]
  402bb8:	2b00      	cmp	r3, #0
  402bba:	d144      	bne.n	402c46 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402bbc:	42a0      	cmp	r0, r4
  402bbe:	d212      	bcs.n	402be6 <prvTimerTask+0x5a>
  402bc0:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402bc2:	1b61      	subs	r1, r4, r5
  402bc4:	4b6b      	ldr	r3, [pc, #428]	; (402d74 <prvTimerTask+0x1e8>)
  402bc6:	6818      	ldr	r0, [r3, #0]
  402bc8:	4b6b      	ldr	r3, [pc, #428]	; (402d78 <prvTimerTask+0x1ec>)
  402bca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402bcc:	4b6b      	ldr	r3, [pc, #428]	; (402d7c <prvTimerTask+0x1f0>)
  402bce:	4798      	blx	r3
  402bd0:	2800      	cmp	r0, #0
  402bd2:	d13a      	bne.n	402c4a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402bd8:	f8c9 3000 	str.w	r3, [r9]
  402bdc:	f3bf 8f4f 	dsb	sy
  402be0:	f3bf 8f6f 	isb	sy
  402be4:	e031      	b.n	402c4a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402be6:	4b65      	ldr	r3, [pc, #404]	; (402d7c <prvTimerTask+0x1f0>)
  402be8:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402bea:	6833      	ldr	r3, [r6, #0]
  402bec:	68db      	ldr	r3, [r3, #12]
  402bee:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402bf2:	f10a 0004 	add.w	r0, sl, #4
  402bf6:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402bf8:	f8da 301c 	ldr.w	r3, [sl, #28]
  402bfc:	2b01      	cmp	r3, #1
  402bfe:	d004      	beq.n	402c0a <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c00:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c04:	4650      	mov	r0, sl
  402c06:	4798      	blx	r3
  402c08:	e01f      	b.n	402c4a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402c0a:	f8da 1018 	ldr.w	r1, [sl, #24]
  402c0e:	4623      	mov	r3, r4
  402c10:	462a      	mov	r2, r5
  402c12:	4421      	add	r1, r4
  402c14:	4650      	mov	r0, sl
  402c16:	4d5a      	ldr	r5, [pc, #360]	; (402d80 <prvTimerTask+0x1f4>)
  402c18:	47a8      	blx	r5
  402c1a:	2801      	cmp	r0, #1
  402c1c:	d1f0      	bne.n	402c00 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402c1e:	2100      	movs	r1, #0
  402c20:	9100      	str	r1, [sp, #0]
  402c22:	460b      	mov	r3, r1
  402c24:	4622      	mov	r2, r4
  402c26:	4650      	mov	r0, sl
  402c28:	4c56      	ldr	r4, [pc, #344]	; (402d84 <prvTimerTask+0x1f8>)
  402c2a:	47a0      	blx	r4
			configASSERT( xResult );
  402c2c:	2800      	cmp	r0, #0
  402c2e:	d1e7      	bne.n	402c00 <prvTimerTask+0x74>
  402c30:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c34:	b672      	cpsid	i
  402c36:	f383 8811 	msr	BASEPRI, r3
  402c3a:	f3bf 8f6f 	isb	sy
  402c3e:	f3bf 8f4f 	dsb	sy
  402c42:	b662      	cpsie	i
  402c44:	e7fe      	b.n	402c44 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402c46:	4b4d      	ldr	r3, [pc, #308]	; (402d7c <prvTimerTask+0x1f0>)
  402c48:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c4a:	4d4a      	ldr	r5, [pc, #296]	; (402d74 <prvTimerTask+0x1e8>)
  402c4c:	4c4e      	ldr	r4, [pc, #312]	; (402d88 <prvTimerTask+0x1fc>)
  402c4e:	e006      	b.n	402c5e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402c50:	9907      	ldr	r1, [sp, #28]
  402c52:	9806      	ldr	r0, [sp, #24]
  402c54:	9b05      	ldr	r3, [sp, #20]
  402c56:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402c58:	9b04      	ldr	r3, [sp, #16]
  402c5a:	2b00      	cmp	r3, #0
  402c5c:	da09      	bge.n	402c72 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c5e:	2300      	movs	r3, #0
  402c60:	461a      	mov	r2, r3
  402c62:	a904      	add	r1, sp, #16
  402c64:	6828      	ldr	r0, [r5, #0]
  402c66:	47a0      	blx	r4
  402c68:	2800      	cmp	r0, #0
  402c6a:	d098      	beq.n	402b9e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402c6c:	9b04      	ldr	r3, [sp, #16]
  402c6e:	2b00      	cmp	r3, #0
  402c70:	dbee      	blt.n	402c50 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402c72:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402c76:	f8da 3014 	ldr.w	r3, [sl, #20]
  402c7a:	b113      	cbz	r3, 402c82 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c7c:	f10a 0004 	add.w	r0, sl, #4
  402c80:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c82:	a803      	add	r0, sp, #12
  402c84:	4b3a      	ldr	r3, [pc, #232]	; (402d70 <prvTimerTask+0x1e4>)
  402c86:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402c88:	9b04      	ldr	r3, [sp, #16]
  402c8a:	2b09      	cmp	r3, #9
  402c8c:	d8e7      	bhi.n	402c5e <prvTimerTask+0xd2>
  402c8e:	a201      	add	r2, pc, #4	; (adr r2, 402c94 <prvTimerTask+0x108>)
  402c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c94:	00402cbd 	.word	0x00402cbd
  402c98:	00402cbd 	.word	0x00402cbd
  402c9c:	00402cbd 	.word	0x00402cbd
  402ca0:	00402c5f 	.word	0x00402c5f
  402ca4:	00402d11 	.word	0x00402d11
  402ca8:	00402d3d 	.word	0x00402d3d
  402cac:	00402cbd 	.word	0x00402cbd
  402cb0:	00402cbd 	.word	0x00402cbd
  402cb4:	00402c5f 	.word	0x00402c5f
  402cb8:	00402d11 	.word	0x00402d11
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402cbc:	9c05      	ldr	r4, [sp, #20]
  402cbe:	f8da 1018 	ldr.w	r1, [sl, #24]
  402cc2:	4623      	mov	r3, r4
  402cc4:	4602      	mov	r2, r0
  402cc6:	4421      	add	r1, r4
  402cc8:	4650      	mov	r0, sl
  402cca:	4c2d      	ldr	r4, [pc, #180]	; (402d80 <prvTimerTask+0x1f4>)
  402ccc:	47a0      	blx	r4
  402cce:	2801      	cmp	r0, #1
  402cd0:	d1bc      	bne.n	402c4c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402cd2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402cd6:	4650      	mov	r0, sl
  402cd8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402cda:	f8da 301c 	ldr.w	r3, [sl, #28]
  402cde:	2b01      	cmp	r3, #1
  402ce0:	d1b4      	bne.n	402c4c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402ce2:	f8da 2018 	ldr.w	r2, [sl, #24]
  402ce6:	2100      	movs	r1, #0
  402ce8:	9100      	str	r1, [sp, #0]
  402cea:	460b      	mov	r3, r1
  402cec:	9805      	ldr	r0, [sp, #20]
  402cee:	4402      	add	r2, r0
  402cf0:	4650      	mov	r0, sl
  402cf2:	4c24      	ldr	r4, [pc, #144]	; (402d84 <prvTimerTask+0x1f8>)
  402cf4:	47a0      	blx	r4
							configASSERT( xResult );
  402cf6:	2800      	cmp	r0, #0
  402cf8:	d1a8      	bne.n	402c4c <prvTimerTask+0xc0>
  402cfa:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cfe:	b672      	cpsid	i
  402d00:	f383 8811 	msr	BASEPRI, r3
  402d04:	f3bf 8f6f 	isb	sy
  402d08:	f3bf 8f4f 	dsb	sy
  402d0c:	b662      	cpsie	i
  402d0e:	e7fe      	b.n	402d0e <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402d10:	9905      	ldr	r1, [sp, #20]
  402d12:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402d16:	b131      	cbz	r1, 402d26 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402d18:	4603      	mov	r3, r0
  402d1a:	4602      	mov	r2, r0
  402d1c:	4401      	add	r1, r0
  402d1e:	4650      	mov	r0, sl
  402d20:	4c17      	ldr	r4, [pc, #92]	; (402d80 <prvTimerTask+0x1f4>)
  402d22:	47a0      	blx	r4
  402d24:	e792      	b.n	402c4c <prvTimerTask+0xc0>
  402d26:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d2a:	b672      	cpsid	i
  402d2c:	f383 8811 	msr	BASEPRI, r3
  402d30:	f3bf 8f6f 	isb	sy
  402d34:	f3bf 8f4f 	dsb	sy
  402d38:	b662      	cpsie	i
  402d3a:	e7fe      	b.n	402d3a <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402d3c:	4650      	mov	r0, sl
  402d3e:	4b13      	ldr	r3, [pc, #76]	; (402d8c <prvTimerTask+0x200>)
  402d40:	4798      	blx	r3
  402d42:	e783      	b.n	402c4c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402d44:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402d46:	a804      	add	r0, sp, #16
  402d48:	4b09      	ldr	r3, [pc, #36]	; (402d70 <prvTimerTask+0x1e4>)
  402d4a:	4798      	blx	r3
  402d4c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402d4e:	9b04      	ldr	r3, [sp, #16]
  402d50:	2b00      	cmp	r3, #0
  402d52:	f47f af78 	bne.w	402c46 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402d56:	4b0e      	ldr	r3, [pc, #56]	; (402d90 <prvTimerTask+0x204>)
  402d58:	681b      	ldr	r3, [r3, #0]
  402d5a:	681a      	ldr	r2, [r3, #0]
  402d5c:	fab2 f282 	clz	r2, r2
  402d60:	0952      	lsrs	r2, r2, #5
  402d62:	2400      	movs	r4, #0
  402d64:	e72d      	b.n	402bc2 <prvTimerTask+0x36>
  402d66:	bf00      	nop
  402d68:	20400b58 	.word	0x20400b58
  402d6c:	004020b5 	.word	0x004020b5
  402d70:	00402ad5 	.word	0x00402ad5
  402d74:	20400b8c 	.word	0x20400b8c
  402d78:	00401d19 	.word	0x00401d19
  402d7c:	0040221d 	.word	0x0040221d
  402d80:	0040293d 	.word	0x0040293d
  402d84:	00402a65 	.word	0x00402a65
  402d88:	00401b15 	.word	0x00401b15
  402d8c:	00401441 	.word	0x00401441
  402d90:	20400b5c 	.word	0x20400b5c
  402d94:	e000ed04 	.word	0xe000ed04
  402d98:	004010d1 	.word	0x004010d1

00402d9c <butA_callback>:
	
	g_res_value1 = afec_channel_get_value(AFEC0, AFEC_CHANNEL_RES_PIN1);
	xQueueSendFromISR( xQueueAnalogY, &g_res_value1, 0);
}
void butA_callback(void)
{
  402d9c:	b500      	push	{lr}
  402d9e:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402da0:	a902      	add	r1, sp, #8
  402da2:	2300      	movs	r3, #0
  402da4:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreA, &xHigherPriorityTaskWoken);
  402da8:	4b03      	ldr	r3, [pc, #12]	; (402db8 <butA_callback+0x1c>)
  402daa:	6818      	ldr	r0, [r3, #0]
  402dac:	4b03      	ldr	r3, [pc, #12]	; (402dbc <butA_callback+0x20>)
  402dae:	4798      	blx	r3
}
  402db0:	b003      	add	sp, #12
  402db2:	f85d fb04 	ldr.w	pc, [sp], #4
  402db6:	bf00      	nop
  402db8:	20400ca4 	.word	0x20400ca4
  402dbc:	00401a35 	.word	0x00401a35

00402dc0 <butB_callback>:

void butB_callback(void)
{
  402dc0:	b500      	push	{lr}
  402dc2:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402dc4:	a902      	add	r1, sp, #8
  402dc6:	2300      	movs	r3, #0
  402dc8:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreB, &xHigherPriorityTaskWoken);
  402dcc:	4b03      	ldr	r3, [pc, #12]	; (402ddc <butB_callback+0x1c>)
  402dce:	6818      	ldr	r0, [r3, #0]
  402dd0:	4b03      	ldr	r3, [pc, #12]	; (402de0 <butB_callback+0x20>)
  402dd2:	4798      	blx	r3
}
  402dd4:	b003      	add	sp, #12
  402dd6:	f85d fb04 	ldr.w	pc, [sp], #4
  402dda:	bf00      	nop
  402ddc:	20400ce4 	.word	0x20400ce4
  402de0:	00401a35 	.word	0x00401a35

00402de4 <butZ_callback>:

void butZ_callback(void)
{
  402de4:	b500      	push	{lr}
  402de6:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402de8:	a902      	add	r1, sp, #8
  402dea:	2300      	movs	r3, #0
  402dec:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreZ, &xHigherPriorityTaskWoken);
  402df0:	4b03      	ldr	r3, [pc, #12]	; (402e00 <butZ_callback+0x1c>)
  402df2:	6818      	ldr	r0, [r3, #0]
  402df4:	4b03      	ldr	r3, [pc, #12]	; (402e04 <butZ_callback+0x20>)
  402df6:	4798      	blx	r3
}
  402df8:	b003      	add	sp, #12
  402dfa:	f85d fb04 	ldr.w	pc, [sp], #4
  402dfe:	bf00      	nop
  402e00:	20400cdc 	.word	0x20400cdc
  402e04:	00401a35 	.word	0x00401a35

00402e08 <butStart_callback>:

void butStart_callback(void)
{
  402e08:	b500      	push	{lr}
  402e0a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e0c:	a902      	add	r1, sp, #8
  402e0e:	2300      	movs	r3, #0
  402e10:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreStart, &xHigherPriorityTaskWoken);
  402e14:	4b03      	ldr	r3, [pc, #12]	; (402e24 <butStart_callback+0x1c>)
  402e16:	6818      	ldr	r0, [r3, #0]
  402e18:	4b03      	ldr	r3, [pc, #12]	; (402e28 <butStart_callback+0x20>)
  402e1a:	4798      	blx	r3
}
  402e1c:	b003      	add	sp, #12
  402e1e:	f85d fb04 	ldr.w	pc, [sp], #4
  402e22:	bf00      	nop
  402e24:	20400cd4 	.word	0x20400cd4
  402e28:	00401a35 	.word	0x00401a35

00402e2c <usart_serial_putchar>:
{
  402e2c:	b570      	push	{r4, r5, r6, lr}
  402e2e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402e30:	4b2a      	ldr	r3, [pc, #168]	; (402edc <usart_serial_putchar+0xb0>)
  402e32:	4298      	cmp	r0, r3
  402e34:	d013      	beq.n	402e5e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402e36:	4b2a      	ldr	r3, [pc, #168]	; (402ee0 <usart_serial_putchar+0xb4>)
  402e38:	4298      	cmp	r0, r3
  402e3a:	d019      	beq.n	402e70 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402e3c:	4b29      	ldr	r3, [pc, #164]	; (402ee4 <usart_serial_putchar+0xb8>)
  402e3e:	4298      	cmp	r0, r3
  402e40:	d01f      	beq.n	402e82 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402e42:	4b29      	ldr	r3, [pc, #164]	; (402ee8 <usart_serial_putchar+0xbc>)
  402e44:	4298      	cmp	r0, r3
  402e46:	d025      	beq.n	402e94 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402e48:	4b28      	ldr	r3, [pc, #160]	; (402eec <usart_serial_putchar+0xc0>)
  402e4a:	4298      	cmp	r0, r3
  402e4c:	d02b      	beq.n	402ea6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402e4e:	4b28      	ldr	r3, [pc, #160]	; (402ef0 <usart_serial_putchar+0xc4>)
  402e50:	4298      	cmp	r0, r3
  402e52:	d031      	beq.n	402eb8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402e54:	4b27      	ldr	r3, [pc, #156]	; (402ef4 <usart_serial_putchar+0xc8>)
  402e56:	4298      	cmp	r0, r3
  402e58:	d037      	beq.n	402eca <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402e5a:	2000      	movs	r0, #0
}
  402e5c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e5e:	461e      	mov	r6, r3
  402e60:	4d25      	ldr	r5, [pc, #148]	; (402ef8 <usart_serial_putchar+0xcc>)
  402e62:	4621      	mov	r1, r4
  402e64:	4630      	mov	r0, r6
  402e66:	47a8      	blx	r5
  402e68:	2800      	cmp	r0, #0
  402e6a:	d1fa      	bne.n	402e62 <usart_serial_putchar+0x36>
		return 1;
  402e6c:	2001      	movs	r0, #1
  402e6e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e70:	461e      	mov	r6, r3
  402e72:	4d21      	ldr	r5, [pc, #132]	; (402ef8 <usart_serial_putchar+0xcc>)
  402e74:	4621      	mov	r1, r4
  402e76:	4630      	mov	r0, r6
  402e78:	47a8      	blx	r5
  402e7a:	2800      	cmp	r0, #0
  402e7c:	d1fa      	bne.n	402e74 <usart_serial_putchar+0x48>
		return 1;
  402e7e:	2001      	movs	r0, #1
  402e80:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e82:	461e      	mov	r6, r3
  402e84:	4d1c      	ldr	r5, [pc, #112]	; (402ef8 <usart_serial_putchar+0xcc>)
  402e86:	4621      	mov	r1, r4
  402e88:	4630      	mov	r0, r6
  402e8a:	47a8      	blx	r5
  402e8c:	2800      	cmp	r0, #0
  402e8e:	d1fa      	bne.n	402e86 <usart_serial_putchar+0x5a>
		return 1;
  402e90:	2001      	movs	r0, #1
  402e92:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e94:	461e      	mov	r6, r3
  402e96:	4d18      	ldr	r5, [pc, #96]	; (402ef8 <usart_serial_putchar+0xcc>)
  402e98:	4621      	mov	r1, r4
  402e9a:	4630      	mov	r0, r6
  402e9c:	47a8      	blx	r5
  402e9e:	2800      	cmp	r0, #0
  402ea0:	d1fa      	bne.n	402e98 <usart_serial_putchar+0x6c>
		return 1;
  402ea2:	2001      	movs	r0, #1
  402ea4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402ea6:	461e      	mov	r6, r3
  402ea8:	4d14      	ldr	r5, [pc, #80]	; (402efc <usart_serial_putchar+0xd0>)
  402eaa:	4621      	mov	r1, r4
  402eac:	4630      	mov	r0, r6
  402eae:	47a8      	blx	r5
  402eb0:	2800      	cmp	r0, #0
  402eb2:	d1fa      	bne.n	402eaa <usart_serial_putchar+0x7e>
		return 1;
  402eb4:	2001      	movs	r0, #1
  402eb6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402eb8:	461e      	mov	r6, r3
  402eba:	4d10      	ldr	r5, [pc, #64]	; (402efc <usart_serial_putchar+0xd0>)
  402ebc:	4621      	mov	r1, r4
  402ebe:	4630      	mov	r0, r6
  402ec0:	47a8      	blx	r5
  402ec2:	2800      	cmp	r0, #0
  402ec4:	d1fa      	bne.n	402ebc <usart_serial_putchar+0x90>
		return 1;
  402ec6:	2001      	movs	r0, #1
  402ec8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402eca:	461e      	mov	r6, r3
  402ecc:	4d0b      	ldr	r5, [pc, #44]	; (402efc <usart_serial_putchar+0xd0>)
  402ece:	4621      	mov	r1, r4
  402ed0:	4630      	mov	r0, r6
  402ed2:	47a8      	blx	r5
  402ed4:	2800      	cmp	r0, #0
  402ed6:	d1fa      	bne.n	402ece <usart_serial_putchar+0xa2>
		return 1;
  402ed8:	2001      	movs	r0, #1
  402eda:	bd70      	pop	{r4, r5, r6, pc}
  402edc:	400e0800 	.word	0x400e0800
  402ee0:	400e0a00 	.word	0x400e0a00
  402ee4:	400e1a00 	.word	0x400e1a00
  402ee8:	400e1c00 	.word	0x400e1c00
  402eec:	40024000 	.word	0x40024000
  402ef0:	40028000 	.word	0x40028000
  402ef4:	4002c000 	.word	0x4002c000
  402ef8:	00400c79 	.word	0x00400c79
  402efc:	00400d89 	.word	0x00400d89

00402f00 <task_afec>:
		vTaskDelay(50);
		
	}
}

void task_afec(void){
  402f00:	b580      	push	{r7, lr}
  402f02:	b08c      	sub	sp, #48	; 0x30
	xQueueAnalogX = xQueueCreate( 10, sizeof( int32_t ) );
  402f04:	2200      	movs	r2, #0
  402f06:	2104      	movs	r1, #4
  402f08:	200a      	movs	r0, #10
  402f0a:	4c38      	ldr	r4, [pc, #224]	; (402fec <task_afec+0xec>)
  402f0c:	47a0      	blx	r4
  402f0e:	4b38      	ldr	r3, [pc, #224]	; (402ff0 <task_afec+0xf0>)
  402f10:	6018      	str	r0, [r3, #0]
	xQueueAnalogY = xQueueCreate( 10, sizeof( int32_t ) );
  402f12:	2200      	movs	r2, #0
  402f14:	2104      	movs	r1, #4
  402f16:	200a      	movs	r0, #10
  402f18:	47a0      	blx	r4
  402f1a:	4b36      	ldr	r3, [pc, #216]	; (402ff4 <task_afec+0xf4>)
  402f1c:	6018      	str	r0, [r3, #0]
	afec_enable(AFEC0);
  402f1e:	4c36      	ldr	r4, [pc, #216]	; (402ff8 <task_afec+0xf8>)
  402f20:	4620      	mov	r0, r4
  402f22:	4b36      	ldr	r3, [pc, #216]	; (402ffc <task_afec+0xfc>)
  402f24:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  402f26:	a804      	add	r0, sp, #16
  402f28:	4b35      	ldr	r3, [pc, #212]	; (403000 <task_afec+0x100>)
  402f2a:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  402f2c:	a904      	add	r1, sp, #16
  402f2e:	4620      	mov	r0, r4
  402f30:	4b34      	ldr	r3, [pc, #208]	; (403004 <task_afec+0x104>)
  402f32:	4798      	blx	r3
	reg = afec->AFEC_MR;
  402f34:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402f36:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402f3a:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0, AFEC_Res_callback, 5);
  402f3c:	2305      	movs	r3, #5
  402f3e:	4a32      	ldr	r2, [pc, #200]	; (403008 <task_afec+0x108>)
  402f40:	2100      	movs	r1, #0
  402f42:	4620      	mov	r0, r4
  402f44:	4d31      	ldr	r5, [pc, #196]	; (40300c <task_afec+0x10c>)
  402f46:	47a8      	blx	r5
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_8, AFEC_Res_callback1, 5);
  402f48:	2305      	movs	r3, #5
  402f4a:	4a31      	ldr	r2, [pc, #196]	; (403010 <task_afec+0x110>)
  402f4c:	2108      	movs	r1, #8
  402f4e:	4620      	mov	r0, r4
  402f50:	47a8      	blx	r5
	afec_ch_get_config_defaults(&afec_ch_cfg);
  402f52:	a801      	add	r0, sp, #4
  402f54:	4b2f      	ldr	r3, [pc, #188]	; (403014 <task_afec+0x114>)
  402f56:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402f58:	2500      	movs	r5, #0
  402f5a:	f88d 5005 	strb.w	r5, [sp, #5]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_RES_PIN, &afec_ch_cfg);
  402f5e:	aa01      	add	r2, sp, #4
  402f60:	4629      	mov	r1, r5
  402f62:	4620      	mov	r0, r4
  402f64:	4b2c      	ldr	r3, [pc, #176]	; (403018 <task_afec+0x118>)
  402f66:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  402f68:	2308      	movs	r3, #8
  402f6a:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
  402f70:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  402f72:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402f74:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402f76:	a802      	add	r0, sp, #8
  402f78:	4b28      	ldr	r3, [pc, #160]	; (40301c <task_afec+0x11c>)
  402f7a:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  402f7c:	a902      	add	r1, sp, #8
  402f7e:	4620      	mov	r0, r4
  402f80:	4b27      	ldr	r3, [pc, #156]	; (403020 <task_afec+0x120>)
  402f82:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402f84:	2301      	movs	r3, #1
  402f86:	6163      	str	r3, [r4, #20]
  402f88:	f44f 7380 	mov.w	r3, #256	; 0x100
  402f8c:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402f8e:	2302      	movs	r3, #2
  402f90:	6023      	str	r3, [r4, #0]
	char analog_x[32];
	char analog_y[32];
	
	
	while(1){
		if (xQueueReceive( xQueueAnalogX, &(Jx), ( TickType_t )  10 / portTICK_PERIOD_MS)) {
  402f92:	4e17      	ldr	r6, [pc, #92]	; (402ff0 <task_afec+0xf0>)
  402f94:	462c      	mov	r4, r5
  402f96:	4d23      	ldr	r5, [pc, #140]	; (403024 <task_afec+0x124>)
  402f98:	e00d      	b.n	402fb6 <task_afec+0xb6>
  402f9a:	2202      	movs	r2, #2
  402f9c:	4b16      	ldr	r3, [pc, #88]	; (402ff8 <task_afec+0xf8>)
  402f9e:	601a      	str	r2, [r3, #0]
			//sprintf(analog_x,";%d;",Jx);
			//printf("%s",analog_x);
		
			afec_start_software_conversion(AFEC0);
			xQueueSend( xQueueJX, &Jx, 0);
  402fa0:	4623      	mov	r3, r4
  402fa2:	4622      	mov	r2, r4
  402fa4:	a90b      	add	r1, sp, #44	; 0x2c
  402fa6:	4820      	ldr	r0, [pc, #128]	; (403028 <task_afec+0x128>)
  402fa8:	6800      	ldr	r0, [r0, #0]
  402faa:	4f20      	ldr	r7, [pc, #128]	; (40302c <task_afec+0x12c>)
  402fac:	47b8      	blx	r7
  402fae:	e009      	b.n	402fc4 <task_afec+0xc4>
			afec_start_software_conversion(AFEC0);
			xQueueSend( xQueueJY, &Jy, 0);
			//vTaskDelay(1/portTICK_PERIOD_MS);

		}
		vTaskDelay(100);
  402fb0:	2064      	movs	r0, #100	; 0x64
  402fb2:	4b1f      	ldr	r3, [pc, #124]	; (403030 <task_afec+0x130>)
  402fb4:	4798      	blx	r3
		if (xQueueReceive( xQueueAnalogX, &(Jx), ( TickType_t )  10 / portTICK_PERIOD_MS)) {
  402fb6:	4623      	mov	r3, r4
  402fb8:	220a      	movs	r2, #10
  402fba:	a90b      	add	r1, sp, #44	; 0x2c
  402fbc:	6830      	ldr	r0, [r6, #0]
  402fbe:	47a8      	blx	r5
  402fc0:	2800      	cmp	r0, #0
  402fc2:	d1ea      	bne.n	402f9a <task_afec+0x9a>
		if (xQueueReceive( xQueueAnalogY, &(Jy), ( TickType_t )  10 / portTICK_PERIOD_MS)) {
  402fc4:	4623      	mov	r3, r4
  402fc6:	220a      	movs	r2, #10
  402fc8:	a90a      	add	r1, sp, #40	; 0x28
  402fca:	480a      	ldr	r0, [pc, #40]	; (402ff4 <task_afec+0xf4>)
  402fcc:	6800      	ldr	r0, [r0, #0]
  402fce:	47a8      	blx	r5
  402fd0:	2800      	cmp	r0, #0
  402fd2:	d0ed      	beq.n	402fb0 <task_afec+0xb0>
  402fd4:	2202      	movs	r2, #2
  402fd6:	4b08      	ldr	r3, [pc, #32]	; (402ff8 <task_afec+0xf8>)
  402fd8:	601a      	str	r2, [r3, #0]
			xQueueSend( xQueueJY, &Jy, 0);
  402fda:	4623      	mov	r3, r4
  402fdc:	4622      	mov	r2, r4
  402fde:	a90a      	add	r1, sp, #40	; 0x28
  402fe0:	4814      	ldr	r0, [pc, #80]	; (403034 <task_afec+0x134>)
  402fe2:	6800      	ldr	r0, [r0, #0]
  402fe4:	4f11      	ldr	r7, [pc, #68]	; (40302c <task_afec+0x12c>)
  402fe6:	47b8      	blx	r7
  402fe8:	e7e2      	b.n	402fb0 <task_afec+0xb0>
  402fea:	bf00      	nop
  402fec:	004016d5 	.word	0x004016d5
  402ff0:	20400cd0 	.word	0x20400cd0
  402ff4:	20400cb4 	.word	0x20400cb4
  402ff8:	4003c000 	.word	0x4003c000
  402ffc:	004007b5 	.word	0x004007b5
  403000:	004005e5 	.word	0x004005e5
  403004:	00400635 	.word	0x00400635
  403008:	00403065 	.word	0x00403065
  40300c:	00400735 	.word	0x00400735
  403010:	00403039 	.word	0x00403039
  403014:	00400615 	.word	0x00400615
  403018:	004005a1 	.word	0x004005a1
  40301c:	0040061f 	.word	0x0040061f
  403020:	004005d1 	.word	0x004005d1
  403024:	00401b15 	.word	0x00401b15
  403028:	20400ca8 	.word	0x20400ca8
  40302c:	00401751 	.word	0x00401751
  403030:	0040233d 	.word	0x0040233d
  403034:	20400cac 	.word	0x20400cac

00403038 <AFEC_Res_callback1>:
{
  403038:	b510      	push	{r4, lr}
	afec->AFEC_CSELR = afec_ch;
  40303a:	4b06      	ldr	r3, [pc, #24]	; (403054 <AFEC_Res_callback1+0x1c>)
  40303c:	2208      	movs	r2, #8
  40303e:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	g_res_value1 = afec_channel_get_value(AFEC0, AFEC_CHANNEL_RES_PIN1);
  403042:	4905      	ldr	r1, [pc, #20]	; (403058 <AFEC_Res_callback1+0x20>)
  403044:	600b      	str	r3, [r1, #0]
	xQueueSendFromISR( xQueueAnalogY, &g_res_value1, 0);
  403046:	2300      	movs	r3, #0
  403048:	461a      	mov	r2, r3
  40304a:	4804      	ldr	r0, [pc, #16]	; (40305c <AFEC_Res_callback1+0x24>)
  40304c:	6800      	ldr	r0, [r0, #0]
  40304e:	4c04      	ldr	r4, [pc, #16]	; (403060 <AFEC_Res_callback1+0x28>)
  403050:	47a0      	blx	r4
  403052:	bd10      	pop	{r4, pc}
  403054:	4003c000 	.word	0x4003c000
  403058:	20400b94 	.word	0x20400b94
  40305c:	20400cb4 	.word	0x20400cb4
  403060:	00401935 	.word	0x00401935

00403064 <AFEC_Res_callback>:
{
  403064:	b510      	push	{r4, lr}
	afec->AFEC_CSELR = afec_ch;
  403066:	4b06      	ldr	r3, [pc, #24]	; (403080 <AFEC_Res_callback+0x1c>)
  403068:	2200      	movs	r2, #0
  40306a:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40306c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	g_res_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_RES_PIN);
  40306e:	4905      	ldr	r1, [pc, #20]	; (403084 <AFEC_Res_callback+0x20>)
  403070:	600b      	str	r3, [r1, #0]
	xQueueSendFromISR( xQueueAnalogX, &g_res_value, 0);
  403072:	4613      	mov	r3, r2
  403074:	4804      	ldr	r0, [pc, #16]	; (403088 <AFEC_Res_callback+0x24>)
  403076:	6800      	ldr	r0, [r0, #0]
  403078:	4c04      	ldr	r4, [pc, #16]	; (40308c <AFEC_Res_callback+0x28>)
  40307a:	47a0      	blx	r4
  40307c:	bd10      	pop	{r4, pc}
  40307e:	bf00      	nop
  403080:	4003c000 	.word	0x4003c000
  403084:	20400b90 	.word	0x20400b90
  403088:	20400cd0 	.word	0x20400cd0
  40308c:	00401935 	.word	0x00401935

00403090 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403090:	b5f0      	push	{r4, r5, r6, r7, lr}
  403092:	b083      	sub	sp, #12
  403094:	4605      	mov	r5, r0
  403096:	460c      	mov	r4, r1
	uint32_t val = 0;
  403098:	2300      	movs	r3, #0
  40309a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40309c:	4b2a      	ldr	r3, [pc, #168]	; (403148 <usart_serial_getchar+0xb8>)
  40309e:	4298      	cmp	r0, r3
  4030a0:	d013      	beq.n	4030ca <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4030a2:	4b2a      	ldr	r3, [pc, #168]	; (40314c <usart_serial_getchar+0xbc>)
  4030a4:	4298      	cmp	r0, r3
  4030a6:	d018      	beq.n	4030da <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4030a8:	4b29      	ldr	r3, [pc, #164]	; (403150 <usart_serial_getchar+0xc0>)
  4030aa:	4298      	cmp	r0, r3
  4030ac:	d01d      	beq.n	4030ea <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4030ae:	4b29      	ldr	r3, [pc, #164]	; (403154 <usart_serial_getchar+0xc4>)
  4030b0:	429d      	cmp	r5, r3
  4030b2:	d022      	beq.n	4030fa <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4030b4:	4b28      	ldr	r3, [pc, #160]	; (403158 <usart_serial_getchar+0xc8>)
  4030b6:	429d      	cmp	r5, r3
  4030b8:	d027      	beq.n	40310a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4030ba:	4b28      	ldr	r3, [pc, #160]	; (40315c <usart_serial_getchar+0xcc>)
  4030bc:	429d      	cmp	r5, r3
  4030be:	d02e      	beq.n	40311e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4030c0:	4b27      	ldr	r3, [pc, #156]	; (403160 <usart_serial_getchar+0xd0>)
  4030c2:	429d      	cmp	r5, r3
  4030c4:	d035      	beq.n	403132 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4030c6:	b003      	add	sp, #12
  4030c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4030ca:	461f      	mov	r7, r3
  4030cc:	4e25      	ldr	r6, [pc, #148]	; (403164 <usart_serial_getchar+0xd4>)
  4030ce:	4621      	mov	r1, r4
  4030d0:	4638      	mov	r0, r7
  4030d2:	47b0      	blx	r6
  4030d4:	2800      	cmp	r0, #0
  4030d6:	d1fa      	bne.n	4030ce <usart_serial_getchar+0x3e>
  4030d8:	e7e9      	b.n	4030ae <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4030da:	461f      	mov	r7, r3
  4030dc:	4e21      	ldr	r6, [pc, #132]	; (403164 <usart_serial_getchar+0xd4>)
  4030de:	4621      	mov	r1, r4
  4030e0:	4638      	mov	r0, r7
  4030e2:	47b0      	blx	r6
  4030e4:	2800      	cmp	r0, #0
  4030e6:	d1fa      	bne.n	4030de <usart_serial_getchar+0x4e>
  4030e8:	e7e4      	b.n	4030b4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4030ea:	461f      	mov	r7, r3
  4030ec:	4e1d      	ldr	r6, [pc, #116]	; (403164 <usart_serial_getchar+0xd4>)
  4030ee:	4621      	mov	r1, r4
  4030f0:	4638      	mov	r0, r7
  4030f2:	47b0      	blx	r6
  4030f4:	2800      	cmp	r0, #0
  4030f6:	d1fa      	bne.n	4030ee <usart_serial_getchar+0x5e>
  4030f8:	e7df      	b.n	4030ba <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4030fa:	461f      	mov	r7, r3
  4030fc:	4e19      	ldr	r6, [pc, #100]	; (403164 <usart_serial_getchar+0xd4>)
  4030fe:	4621      	mov	r1, r4
  403100:	4638      	mov	r0, r7
  403102:	47b0      	blx	r6
  403104:	2800      	cmp	r0, #0
  403106:	d1fa      	bne.n	4030fe <usart_serial_getchar+0x6e>
  403108:	e7da      	b.n	4030c0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40310a:	461e      	mov	r6, r3
  40310c:	4d16      	ldr	r5, [pc, #88]	; (403168 <usart_serial_getchar+0xd8>)
  40310e:	a901      	add	r1, sp, #4
  403110:	4630      	mov	r0, r6
  403112:	47a8      	blx	r5
  403114:	2800      	cmp	r0, #0
  403116:	d1fa      	bne.n	40310e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403118:	9b01      	ldr	r3, [sp, #4]
  40311a:	7023      	strb	r3, [r4, #0]
  40311c:	e7d3      	b.n	4030c6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40311e:	461e      	mov	r6, r3
  403120:	4d11      	ldr	r5, [pc, #68]	; (403168 <usart_serial_getchar+0xd8>)
  403122:	a901      	add	r1, sp, #4
  403124:	4630      	mov	r0, r6
  403126:	47a8      	blx	r5
  403128:	2800      	cmp	r0, #0
  40312a:	d1fa      	bne.n	403122 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40312c:	9b01      	ldr	r3, [sp, #4]
  40312e:	7023      	strb	r3, [r4, #0]
  403130:	e7c9      	b.n	4030c6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403132:	461e      	mov	r6, r3
  403134:	4d0c      	ldr	r5, [pc, #48]	; (403168 <usart_serial_getchar+0xd8>)
  403136:	a901      	add	r1, sp, #4
  403138:	4630      	mov	r0, r6
  40313a:	47a8      	blx	r5
  40313c:	2800      	cmp	r0, #0
  40313e:	d1fa      	bne.n	403136 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403140:	9b01      	ldr	r3, [sp, #4]
  403142:	7023      	strb	r3, [r4, #0]
}
  403144:	e7bf      	b.n	4030c6 <usart_serial_getchar+0x36>
  403146:	bf00      	nop
  403148:	400e0800 	.word	0x400e0800
  40314c:	400e0a00 	.word	0x400e0a00
  403150:	400e1a00 	.word	0x400e1a00
  403154:	400e1c00 	.word	0x400e1c00
  403158:	40024000 	.word	0x40024000
  40315c:	40028000 	.word	0x40028000
  403160:	4002c000 	.word	0x4002c000
  403164:	00400c8b 	.word	0x00400c8b
  403168:	00400d9f 	.word	0x00400d9f

0040316c <vApplicationStackOverflowHook>:
{
  40316c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40316e:	460a      	mov	r2, r1
  403170:	4601      	mov	r1, r0
  403172:	4802      	ldr	r0, [pc, #8]	; (40317c <vApplicationStackOverflowHook+0x10>)
  403174:	4b02      	ldr	r3, [pc, #8]	; (403180 <vApplicationStackOverflowHook+0x14>)
  403176:	4798      	blx	r3
  403178:	e7fe      	b.n	403178 <vApplicationStackOverflowHook+0xc>
  40317a:	bf00      	nop
  40317c:	00409f4c 	.word	0x00409f4c
  403180:	00403a81 	.word	0x00403a81

00403184 <vApplicationTickHook>:
{
  403184:	4770      	bx	lr

00403186 <vApplicationMallocFailedHook>:
  403186:	f04f 0380 	mov.w	r3, #128	; 0x80
  40318a:	b672      	cpsid	i
  40318c:	f383 8811 	msr	BASEPRI, r3
  403190:	f3bf 8f6f 	isb	sy
  403194:	f3bf 8f4f 	dsb	sy
  403198:	b662      	cpsie	i
  40319a:	e7fe      	b.n	40319a <vApplicationMallocFailedHook+0x14>

0040319c <pisca_led>:
void pisca_led(uint LED_PIO, uint LED_IDX_MASK){
  40319c:	b538      	push	{r3, r4, r5, lr}
  40319e:	4604      	mov	r4, r0
  4031a0:	460d      	mov	r5, r1
	pio_set(LED_PIO, LED_IDX_MASK);
  4031a2:	4b05      	ldr	r3, [pc, #20]	; (4031b8 <pisca_led+0x1c>)
  4031a4:	4798      	blx	r3
	vTaskDelay(50);
  4031a6:	2032      	movs	r0, #50	; 0x32
  4031a8:	4b04      	ldr	r3, [pc, #16]	; (4031bc <pisca_led+0x20>)
  4031aa:	4798      	blx	r3
	pio_clear(LED_PIO, LED_IDX_MASK);
  4031ac:	4629      	mov	r1, r5
  4031ae:	4620      	mov	r0, r4
  4031b0:	4b03      	ldr	r3, [pc, #12]	; (4031c0 <pisca_led+0x24>)
  4031b2:	4798      	blx	r3
  4031b4:	bd38      	pop	{r3, r4, r5, pc}
  4031b6:	bf00      	nop
  4031b8:	00400819 	.word	0x00400819
  4031bc:	0040233d 	.word	0x0040233d
  4031c0:	0040081d 	.word	0x0040081d

004031c4 <task_buttons>:
{
  4031c4:	b580      	push	{r7, lr}
  4031c6:	b082      	sub	sp, #8
	xSemaphoreA = xSemaphoreCreateBinary();
  4031c8:	2203      	movs	r2, #3
  4031ca:	2100      	movs	r1, #0
  4031cc:	2001      	movs	r0, #1
  4031ce:	4c4f      	ldr	r4, [pc, #316]	; (40330c <task_buttons+0x148>)
  4031d0:	47a0      	blx	r4
  4031d2:	4d4f      	ldr	r5, [pc, #316]	; (403310 <task_buttons+0x14c>)
  4031d4:	6028      	str	r0, [r5, #0]
	xSemaphoreB = xSemaphoreCreateBinary();
  4031d6:	2203      	movs	r2, #3
  4031d8:	2100      	movs	r1, #0
  4031da:	2001      	movs	r0, #1
  4031dc:	47a0      	blx	r4
  4031de:	4b4d      	ldr	r3, [pc, #308]	; (403314 <task_buttons+0x150>)
  4031e0:	6018      	str	r0, [r3, #0]
	xSemaphoreZ = xSemaphoreCreateBinary();
  4031e2:	2203      	movs	r2, #3
  4031e4:	2100      	movs	r1, #0
  4031e6:	2001      	movs	r0, #1
  4031e8:	47a0      	blx	r4
  4031ea:	4b4b      	ldr	r3, [pc, #300]	; (403318 <task_buttons+0x154>)
  4031ec:	6018      	str	r0, [r3, #0]
	xSemaphoreStart = xSemaphoreCreateBinary();
  4031ee:	2203      	movs	r2, #3
  4031f0:	2100      	movs	r1, #0
  4031f2:	2001      	movs	r0, #1
  4031f4:	47a0      	blx	r4
  4031f6:	4b49      	ldr	r3, [pc, #292]	; (40331c <task_buttons+0x158>)
  4031f8:	6018      	str	r0, [r3, #0]
	char buttonA = '0';
  4031fa:	2330      	movs	r3, #48	; 0x30
  4031fc:	f88d 3007 	strb.w	r3, [sp, #7]
	char buttonB = '0'; 
  403200:	f88d 3006 	strb.w	r3, [sp, #6]
	char buttonStart = '0';
  403204:	f88d 3005 	strb.w	r3, [sp, #5]
	char buttonZ = '0';
  403208:	f88d 3004 	strb.w	r3, [sp, #4]
	if (xSemaphoreA == NULL) {
  40320c:	682b      	ldr	r3, [r5, #0]
  40320e:	b18b      	cbz	r3, 403234 <task_buttons+0x70>
	if (xSemaphoreB == NULL) {
  403210:	4b40      	ldr	r3, [pc, #256]	; (403314 <task_buttons+0x150>)
  403212:	681b      	ldr	r3, [r3, #0]
  403214:	b193      	cbz	r3, 40323c <task_buttons+0x78>
	if (xSemaphoreZ == NULL) {
  403216:	4b40      	ldr	r3, [pc, #256]	; (403318 <task_buttons+0x154>)
  403218:	681b      	ldr	r3, [r3, #0]
  40321a:	b19b      	cbz	r3, 403244 <task_buttons+0x80>
	if (xSemaphoreStart == NULL) {
  40321c:	4b3f      	ldr	r3, [pc, #252]	; (40331c <task_buttons+0x158>)
  40321e:	681b      	ldr	r3, [r3, #0]
  403220:	b1a3      	cbz	r3, 40324c <task_buttons+0x88>
		if( xSemaphoreTake(xSemaphoreA, ( TickType_t ) 1) == pdTRUE){
  403222:	4f3b      	ldr	r7, [pc, #236]	; (403310 <task_buttons+0x14c>)
  403224:	2500      	movs	r5, #0
  403226:	2401      	movs	r4, #1
  403228:	4e3d      	ldr	r6, [pc, #244]	; (403320 <task_buttons+0x15c>)
			pisca_led(LEDA_PIO,LEDA_PIO_IDX_MASK);
  40322a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 403348 <task_buttons+0x184>
			pisca_led(LEDZ_PIO,LEDZ_PIO_IDX_MASK);
  40322e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 40334c <task_buttons+0x188>
  403232:	e03c      	b.n	4032ae <task_buttons+0xea>
		printf("falha em criar o semaforo A\n");
  403234:	483b      	ldr	r0, [pc, #236]	; (403324 <task_buttons+0x160>)
  403236:	4b3c      	ldr	r3, [pc, #240]	; (403328 <task_buttons+0x164>)
  403238:	4798      	blx	r3
  40323a:	e7e9      	b.n	403210 <task_buttons+0x4c>
		printf("falha em criar o semaforo B\n");
  40323c:	483b      	ldr	r0, [pc, #236]	; (40332c <task_buttons+0x168>)
  40323e:	4b3a      	ldr	r3, [pc, #232]	; (403328 <task_buttons+0x164>)
  403240:	4798      	blx	r3
  403242:	e7e8      	b.n	403216 <task_buttons+0x52>
		printf("falha em criar o semaforo B\n");
  403244:	4839      	ldr	r0, [pc, #228]	; (40332c <task_buttons+0x168>)
  403246:	4b38      	ldr	r3, [pc, #224]	; (403328 <task_buttons+0x164>)
  403248:	4798      	blx	r3
  40324a:	e7e7      	b.n	40321c <task_buttons+0x58>
		printf("falha em criar o semaforo B\n");
  40324c:	4837      	ldr	r0, [pc, #220]	; (40332c <task_buttons+0x168>)
  40324e:	4b36      	ldr	r3, [pc, #216]	; (403328 <task_buttons+0x164>)
  403250:	4798      	blx	r3
  403252:	e7e6      	b.n	403222 <task_buttons+0x5e>
			pisca_led(LEDA_PIO,LEDA_PIO_IDX_MASK);
  403254:	2104      	movs	r1, #4
  403256:	4648      	mov	r0, r9
  403258:	4b35      	ldr	r3, [pc, #212]	; (403330 <task_buttons+0x16c>)
  40325a:	4798      	blx	r3
			xQueueSend(xQueueBUTA, &buttonA,1);
  40325c:	462b      	mov	r3, r5
  40325e:	4622      	mov	r2, r4
  403260:	f10d 0107 	add.w	r1, sp, #7
  403264:	4833      	ldr	r0, [pc, #204]	; (403334 <task_buttons+0x170>)
  403266:	6800      	ldr	r0, [r0, #0]
  403268:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 403350 <task_buttons+0x18c>
  40326c:	47d0      	blx	sl
  40326e:	e025      	b.n	4032bc <task_buttons+0xf8>
			pisca_led(LEDB_PIO,LEDB_PIO_IDX_MASK);
  403270:	2108      	movs	r1, #8
  403272:	4648      	mov	r0, r9
  403274:	4b2e      	ldr	r3, [pc, #184]	; (403330 <task_buttons+0x16c>)
  403276:	4798      	blx	r3
			xQueueSend(xQueueBUTB, &buttonB,1);
  403278:	462b      	mov	r3, r5
  40327a:	4622      	mov	r2, r4
  40327c:	f10d 0106 	add.w	r1, sp, #6
  403280:	482d      	ldr	r0, [pc, #180]	; (403338 <task_buttons+0x174>)
  403282:	6800      	ldr	r0, [r0, #0]
  403284:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 403350 <task_buttons+0x18c>
  403288:	47d0      	blx	sl
  40328a:	e01f      	b.n	4032cc <task_buttons+0x108>
			pisca_led(LEDZ_PIO,LEDZ_PIO_IDX_MASK);
  40328c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403290:	4640      	mov	r0, r8
  403292:	4b27      	ldr	r3, [pc, #156]	; (403330 <task_buttons+0x16c>)
  403294:	4798      	blx	r3
			xQueueSend(xQueueBUTZ, &buttonZ,1);
  403296:	462b      	mov	r3, r5
  403298:	4622      	mov	r2, r4
  40329a:	a901      	add	r1, sp, #4
  40329c:	4827      	ldr	r0, [pc, #156]	; (40333c <task_buttons+0x178>)
  40329e:	6800      	ldr	r0, [r0, #0]
  4032a0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 403350 <task_buttons+0x18c>
  4032a4:	47d0      	blx	sl
  4032a6:	e019      	b.n	4032dc <task_buttons+0x118>
		vTaskDelay(50);
  4032a8:	2032      	movs	r0, #50	; 0x32
  4032aa:	4b25      	ldr	r3, [pc, #148]	; (403340 <task_buttons+0x17c>)
  4032ac:	4798      	blx	r3
		if( xSemaphoreTake(xSemaphoreA, ( TickType_t ) 1) == pdTRUE){
  4032ae:	462b      	mov	r3, r5
  4032b0:	4622      	mov	r2, r4
  4032b2:	4629      	mov	r1, r5
  4032b4:	6838      	ldr	r0, [r7, #0]
  4032b6:	47b0      	blx	r6
  4032b8:	2801      	cmp	r0, #1
  4032ba:	d0cb      	beq.n	403254 <task_buttons+0x90>
		if( xSemaphoreTake(xSemaphoreB, ( TickType_t ) 1) == pdTRUE ){
  4032bc:	462b      	mov	r3, r5
  4032be:	4622      	mov	r2, r4
  4032c0:	4629      	mov	r1, r5
  4032c2:	4814      	ldr	r0, [pc, #80]	; (403314 <task_buttons+0x150>)
  4032c4:	6800      	ldr	r0, [r0, #0]
  4032c6:	47b0      	blx	r6
  4032c8:	2801      	cmp	r0, #1
  4032ca:	d0d1      	beq.n	403270 <task_buttons+0xac>
		if( xSemaphoreTake(xSemaphoreZ, ( TickType_t ) 1) == pdTRUE ){
  4032cc:	462b      	mov	r3, r5
  4032ce:	4622      	mov	r2, r4
  4032d0:	4629      	mov	r1, r5
  4032d2:	4811      	ldr	r0, [pc, #68]	; (403318 <task_buttons+0x154>)
  4032d4:	6800      	ldr	r0, [r0, #0]
  4032d6:	47b0      	blx	r6
  4032d8:	2801      	cmp	r0, #1
  4032da:	d0d7      	beq.n	40328c <task_buttons+0xc8>
		if( xSemaphoreTake(xSemaphoreStart, ( TickType_t ) 1) == pdTRUE ){
  4032dc:	462b      	mov	r3, r5
  4032de:	4622      	mov	r2, r4
  4032e0:	4629      	mov	r1, r5
  4032e2:	480e      	ldr	r0, [pc, #56]	; (40331c <task_buttons+0x158>)
  4032e4:	6800      	ldr	r0, [r0, #0]
  4032e6:	47b0      	blx	r6
  4032e8:	2801      	cmp	r0, #1
  4032ea:	d1dd      	bne.n	4032a8 <task_buttons+0xe4>
			pisca_led(LEDSTART_PIO,LEDSTART_PIO_IDX_MASK);
  4032ec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4032f0:	4640      	mov	r0, r8
  4032f2:	4b0f      	ldr	r3, [pc, #60]	; (403330 <task_buttons+0x16c>)
  4032f4:	4798      	blx	r3
			xQueueSend(xQueueBUTSTART, &buttonStart,1);
  4032f6:	462b      	mov	r3, r5
  4032f8:	4622      	mov	r2, r4
  4032fa:	f10d 0105 	add.w	r1, sp, #5
  4032fe:	4811      	ldr	r0, [pc, #68]	; (403344 <task_buttons+0x180>)
  403300:	6800      	ldr	r0, [r0, #0]
  403302:	f8df a04c 	ldr.w	sl, [pc, #76]	; 403350 <task_buttons+0x18c>
  403306:	47d0      	blx	sl
  403308:	e7ce      	b.n	4032a8 <task_buttons+0xe4>
  40330a:	bf00      	nop
  40330c:	004016d5 	.word	0x004016d5
  403310:	20400ca4 	.word	0x20400ca4
  403314:	20400ce4 	.word	0x20400ce4
  403318:	20400cdc 	.word	0x20400cdc
  40331c:	20400cd4 	.word	0x20400cd4
  403320:	00401b15 	.word	0x00401b15
  403324:	00409f0c 	.word	0x00409f0c
  403328:	00403a81 	.word	0x00403a81
  40332c:	00409f2c 	.word	0x00409f2c
  403330:	0040319d 	.word	0x0040319d
  403334:	20400cb0 	.word	0x20400cb0
  403338:	20400ca0 	.word	0x20400ca0
  40333c:	20400cd8 	.word	0x20400cd8
  403340:	0040233d 	.word	0x0040233d
  403344:	20400cc8 	.word	0x20400cc8
  403348:	400e1000 	.word	0x400e1000
  40334c:	400e1200 	.word	0x400e1200
  403350:	00401751 	.word	0x00401751

00403354 <send_command>:
void send_command(char buttonStart , char buttonA, char buttonB, char buttonZ,char analog_x[], char analog_y[],char eof ){
  403354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403358:	4683      	mov	fp, r0
  40335a:	468a      	mov	sl, r1
  40335c:	4691      	mov	r9, r2
  40335e:	4698      	mov	r8, r3
  403360:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	while(!usart_is_tx_ready(USART_COM));
  403362:	4e42      	ldr	r6, [pc, #264]	; (40346c <send_command+0x118>)
  403364:	4c42      	ldr	r4, [pc, #264]	; (403470 <send_command+0x11c>)
  403366:	4630      	mov	r0, r6
  403368:	47a0      	blx	r4
  40336a:	2800      	cmp	r0, #0
  40336c:	d0fb      	beq.n	403366 <send_command+0x12>
	usart_write(USART_COM, buttonStart);
  40336e:	4659      	mov	r1, fp
  403370:	483e      	ldr	r0, [pc, #248]	; (40346c <send_command+0x118>)
  403372:	4b40      	ldr	r3, [pc, #256]	; (403474 <send_command+0x120>)
  403374:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  403376:	4e3d      	ldr	r6, [pc, #244]	; (40346c <send_command+0x118>)
  403378:	4c3d      	ldr	r4, [pc, #244]	; (403470 <send_command+0x11c>)
  40337a:	4630      	mov	r0, r6
  40337c:	47a0      	blx	r4
  40337e:	2800      	cmp	r0, #0
  403380:	d0fb      	beq.n	40337a <send_command+0x26>
	usart_write(USART_COM, buttonA);
  403382:	4651      	mov	r1, sl
  403384:	4839      	ldr	r0, [pc, #228]	; (40346c <send_command+0x118>)
  403386:	4b3b      	ldr	r3, [pc, #236]	; (403474 <send_command+0x120>)
  403388:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  40338a:	4e38      	ldr	r6, [pc, #224]	; (40346c <send_command+0x118>)
  40338c:	4c38      	ldr	r4, [pc, #224]	; (403470 <send_command+0x11c>)
  40338e:	4630      	mov	r0, r6
  403390:	47a0      	blx	r4
  403392:	2800      	cmp	r0, #0
  403394:	d0fb      	beq.n	40338e <send_command+0x3a>
	usart_write(USART_COM, buttonB);
  403396:	4649      	mov	r1, r9
  403398:	4834      	ldr	r0, [pc, #208]	; (40346c <send_command+0x118>)
  40339a:	4b36      	ldr	r3, [pc, #216]	; (403474 <send_command+0x120>)
  40339c:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  40339e:	4e33      	ldr	r6, [pc, #204]	; (40346c <send_command+0x118>)
  4033a0:	4c33      	ldr	r4, [pc, #204]	; (403470 <send_command+0x11c>)
  4033a2:	4630      	mov	r0, r6
  4033a4:	47a0      	blx	r4
  4033a6:	2800      	cmp	r0, #0
  4033a8:	d0fb      	beq.n	4033a2 <send_command+0x4e>
	usart_write(USART_COM, buttonZ);
  4033aa:	4641      	mov	r1, r8
  4033ac:	482f      	ldr	r0, [pc, #188]	; (40346c <send_command+0x118>)
  4033ae:	4b31      	ldr	r3, [pc, #196]	; (403474 <send_command+0x120>)
  4033b0:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  4033b2:	4e2e      	ldr	r6, [pc, #184]	; (40346c <send_command+0x118>)
  4033b4:	4c2e      	ldr	r4, [pc, #184]	; (403470 <send_command+0x11c>)
  4033b6:	4630      	mov	r0, r6
  4033b8:	47a0      	blx	r4
  4033ba:	2800      	cmp	r0, #0
  4033bc:	d0fb      	beq.n	4033b6 <send_command+0x62>
	usart_write(USART_COM, analog_x[0]);
  4033be:	462e      	mov	r6, r5
  4033c0:	f816 1b01 	ldrb.w	r1, [r6], #1
  4033c4:	4829      	ldr	r0, [pc, #164]	; (40346c <send_command+0x118>)
  4033c6:	4b2b      	ldr	r3, [pc, #172]	; (403474 <send_command+0x120>)
  4033c8:	4798      	blx	r3
	while(analog_x[x]!= ';'){
  4033ca:	786b      	ldrb	r3, [r5, #1]
  4033cc:	2b3b      	cmp	r3, #59	; 0x3b
  4033ce:	d00d      	beq.n	4033ec <send_command+0x98>
		while(!usart_is_tx_ready(USART_COM));
  4033d0:	4c26      	ldr	r4, [pc, #152]	; (40346c <send_command+0x118>)
  4033d2:	4d27      	ldr	r5, [pc, #156]	; (403470 <send_command+0x11c>)
		usart_write(USART_COM, analog_x[x]);
  4033d4:	4f27      	ldr	r7, [pc, #156]	; (403474 <send_command+0x120>)
		while(!usart_is_tx_ready(USART_COM));
  4033d6:	4620      	mov	r0, r4
  4033d8:	47a8      	blx	r5
  4033da:	2800      	cmp	r0, #0
  4033dc:	d0fb      	beq.n	4033d6 <send_command+0x82>
		usart_write(USART_COM, analog_x[x]);
  4033de:	7831      	ldrb	r1, [r6, #0]
  4033e0:	4620      	mov	r0, r4
  4033e2:	47b8      	blx	r7
	while(analog_x[x]!= ';'){
  4033e4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  4033e8:	2b3b      	cmp	r3, #59	; 0x3b
  4033ea:	d1f4      	bne.n	4033d6 <send_command+0x82>
	while(!usart_is_tx_ready(USART_COM));
  4033ec:	4d1f      	ldr	r5, [pc, #124]	; (40346c <send_command+0x118>)
  4033ee:	4c20      	ldr	r4, [pc, #128]	; (403470 <send_command+0x11c>)
  4033f0:	4628      	mov	r0, r5
  4033f2:	47a0      	blx	r4
  4033f4:	2800      	cmp	r0, #0
  4033f6:	d0fb      	beq.n	4033f0 <send_command+0x9c>
	usart_write(USART_COM, analog_x[x]);
  4033f8:	7831      	ldrb	r1, [r6, #0]
  4033fa:	481c      	ldr	r0, [pc, #112]	; (40346c <send_command+0x118>)
  4033fc:	4b1d      	ldr	r3, [pc, #116]	; (403474 <send_command+0x120>)
  4033fe:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  403400:	4d1a      	ldr	r5, [pc, #104]	; (40346c <send_command+0x118>)
  403402:	4c1b      	ldr	r4, [pc, #108]	; (403470 <send_command+0x11c>)
  403404:	4628      	mov	r0, r5
  403406:	47a0      	blx	r4
  403408:	2800      	cmp	r0, #0
  40340a:	d0fb      	beq.n	403404 <send_command+0xb0>
	usart_write(USART_COM, analog_y[0]);
  40340c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40340e:	f816 1b01 	ldrb.w	r1, [r6], #1
  403412:	4816      	ldr	r0, [pc, #88]	; (40346c <send_command+0x118>)
  403414:	4b17      	ldr	r3, [pc, #92]	; (403474 <send_command+0x120>)
  403416:	4798      	blx	r3
	while(analog_y[y]!= ';'){
  403418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40341a:	785b      	ldrb	r3, [r3, #1]
  40341c:	2b3b      	cmp	r3, #59	; 0x3b
  40341e:	d00d      	beq.n	40343c <send_command+0xe8>
		while(!usart_is_tx_ready(USART_COM));
  403420:	4c12      	ldr	r4, [pc, #72]	; (40346c <send_command+0x118>)
  403422:	4d13      	ldr	r5, [pc, #76]	; (403470 <send_command+0x11c>)
		usart_write(USART_COM, analog_y[y]);
  403424:	4f13      	ldr	r7, [pc, #76]	; (403474 <send_command+0x120>)
		while(!usart_is_tx_ready(USART_COM));
  403426:	4620      	mov	r0, r4
  403428:	47a8      	blx	r5
  40342a:	2800      	cmp	r0, #0
  40342c:	d0fb      	beq.n	403426 <send_command+0xd2>
		usart_write(USART_COM, analog_y[y]);
  40342e:	7831      	ldrb	r1, [r6, #0]
  403430:	4620      	mov	r0, r4
  403432:	47b8      	blx	r7
	while(analog_y[y]!= ';'){
  403434:	f816 3f01 	ldrb.w	r3, [r6, #1]!
  403438:	2b3b      	cmp	r3, #59	; 0x3b
  40343a:	d1f4      	bne.n	403426 <send_command+0xd2>
	while(!usart_is_tx_ready(USART_COM));
  40343c:	4d0b      	ldr	r5, [pc, #44]	; (40346c <send_command+0x118>)
  40343e:	4c0c      	ldr	r4, [pc, #48]	; (403470 <send_command+0x11c>)
  403440:	4628      	mov	r0, r5
  403442:	47a0      	blx	r4
  403444:	2800      	cmp	r0, #0
  403446:	d0fb      	beq.n	403440 <send_command+0xec>
	usart_write(USART_COM, analog_y[y]);
  403448:	7831      	ldrb	r1, [r6, #0]
  40344a:	4808      	ldr	r0, [pc, #32]	; (40346c <send_command+0x118>)
  40344c:	4b09      	ldr	r3, [pc, #36]	; (403474 <send_command+0x120>)
  40344e:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM));
  403450:	4d06      	ldr	r5, [pc, #24]	; (40346c <send_command+0x118>)
  403452:	4c07      	ldr	r4, [pc, #28]	; (403470 <send_command+0x11c>)
  403454:	4628      	mov	r0, r5
  403456:	47a0      	blx	r4
  403458:	2800      	cmp	r0, #0
  40345a:	d0fb      	beq.n	403454 <send_command+0x100>
	usart_write(USART_COM, eof);
  40345c:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
  403460:	4802      	ldr	r0, [pc, #8]	; (40346c <send_command+0x118>)
  403462:	4b04      	ldr	r3, [pc, #16]	; (403474 <send_command+0x120>)
  403464:	4798      	blx	r3
  403466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40346a:	bf00      	nop
  40346c:	40024000 	.word	0x40024000
  403470:	00400d81 	.word	0x00400d81
  403474:	00400d89 	.word	0x00400d89

00403478 <io_init>:
void io_init(void){
  403478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40347c:	b083      	sub	sp, #12
	WDT->WDT_MR = WDT_MR_WDDIS;
  40347e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403482:	4b49      	ldr	r3, [pc, #292]	; (4035a8 <io_init+0x130>)
  403484:	605a      	str	r2, [r3, #4]
	pmc_enable_periph_clk(BUTA_PIO_ID);
  403486:	2010      	movs	r0, #16
  403488:	4d48      	ldr	r5, [pc, #288]	; (4035ac <io_init+0x134>)
  40348a:	47a8      	blx	r5
	pio_configure(BUTA_PIO, PIO_INPUT, BUTA_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  40348c:	4e48      	ldr	r6, [pc, #288]	; (4035b0 <io_init+0x138>)
  40348e:	2309      	movs	r3, #9
  403490:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403494:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403498:	4630      	mov	r0, r6
  40349a:	4c46      	ldr	r4, [pc, #280]	; (4035b4 <io_init+0x13c>)
  40349c:	47a0      	blx	r4
  pio_handler_set(BUTA_PIO,
  40349e:	4b46      	ldr	r3, [pc, #280]	; (4035b8 <io_init+0x140>)
  4034a0:	9300      	str	r3, [sp, #0]
  4034a2:	2350      	movs	r3, #80	; 0x50
  4034a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4034a8:	2110      	movs	r1, #16
  4034aa:	4630      	mov	r0, r6
  4034ac:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4035d4 <io_init+0x15c>
  4034b0:	47c8      	blx	r9
  pio_enable_interrupt(BUTA_PIO, BUTA_PIO_IDX_MASK);
  4034b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4034b6:	4630      	mov	r0, r6
  4034b8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 4035d8 <io_init+0x160>
  4034bc:	47c0      	blx	r8
  4034be:	4e3f      	ldr	r6, [pc, #252]	; (4035bc <io_init+0x144>)
  4034c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4034c4:	6033      	str	r3, [r6, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034c6:	2780      	movs	r7, #128	; 0x80
  4034c8:	f886 7310 	strb.w	r7, [r6, #784]	; 0x310
    pmc_enable_periph_clk(LEDA_PIO_ID);
  4034cc:	200b      	movs	r0, #11
  4034ce:	47a8      	blx	r5
    pio_configure(LEDA_PIO, PIO_OUTPUT_0, LEDA_PIO_IDX_MASK, PIO_DEFAULT);
  4034d0:	2300      	movs	r3, #0
  4034d2:	2204      	movs	r2, #4
  4034d4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4034d8:	4839      	ldr	r0, [pc, #228]	; (4035c0 <io_init+0x148>)
  4034da:	47a0      	blx	r4
	pmc_enable_periph_clk(BUTB_PIO_ID);
  4034dc:	200a      	movs	r0, #10
  4034de:	47a8      	blx	r5
	pio_configure(BUTB_PIO, PIO_INPUT, BUTB_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4034e0:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 4035dc <io_init+0x164>
  4034e4:	2309      	movs	r3, #9
  4034e6:	2240      	movs	r2, #64	; 0x40
  4034e8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4034ec:	4658      	mov	r0, fp
  4034ee:	47a0      	blx	r4
  pio_handler_set(BUTB_PIO,
  4034f0:	4b34      	ldr	r3, [pc, #208]	; (4035c4 <io_init+0x14c>)
  4034f2:	9300      	str	r3, [sp, #0]
  4034f4:	2350      	movs	r3, #80	; 0x50
  4034f6:	2240      	movs	r2, #64	; 0x40
  4034f8:	210a      	movs	r1, #10
  4034fa:	4658      	mov	r0, fp
  4034fc:	47c8      	blx	r9
  pio_enable_interrupt(BUTB_PIO, BUTB_PIO_IDX_MASK);
  4034fe:	2140      	movs	r1, #64	; 0x40
  403500:	4658      	mov	r0, fp
  403502:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403504:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  403508:	f8c6 a000 	str.w	sl, [r6]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40350c:	f886 730a 	strb.w	r7, [r6, #778]	; 0x30a
  pmc_enable_periph_clk(LEDB_PIO_ID);
  403510:	200b      	movs	r0, #11
  403512:	47a8      	blx	r5
  pio_configure(LEDB_PIO, PIO_OUTPUT_0, LEDB_PIO_IDX_MASK, PIO_DEFAULT);
  403514:	2300      	movs	r3, #0
  403516:	2208      	movs	r2, #8
  403518:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40351c:	4828      	ldr	r0, [pc, #160]	; (4035c0 <io_init+0x148>)
  40351e:	47a0      	blx	r4
	pmc_enable_periph_clk(BUTZ_PIO_ID);
  403520:	200a      	movs	r0, #10
  403522:	47a8      	blx	r5
	pio_configure(BUTZ_PIO, PIO_INPUT, BUTZ_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403524:	2309      	movs	r3, #9
  403526:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40352a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40352e:	4658      	mov	r0, fp
  403530:	47a0      	blx	r4
  pio_handler_set(BUTZ_PIO,
  403532:	4b25      	ldr	r3, [pc, #148]	; (4035c8 <io_init+0x150>)
  403534:	9300      	str	r3, [sp, #0]
  403536:	2350      	movs	r3, #80	; 0x50
  403538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40353c:	210a      	movs	r1, #10
  40353e:	4658      	mov	r0, fp
  403540:	47c8      	blx	r9
  pio_enable_interrupt(BUTZ_PIO, BUTZ_PIO_IDX_MASK);
  403542:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  403546:	4658      	mov	r0, fp
  403548:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40354a:	f8c6 a000 	str.w	sl, [r6]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40354e:	f886 730a 	strb.w	r7, [r6, #778]	; 0x30a
  pmc_enable_periph_clk(LEDZ_PIO_ID);
  403552:	200c      	movs	r0, #12
  403554:	47a8      	blx	r5
  pio_configure(LEDZ_PIO, PIO_OUTPUT_0, LEDZ_PIO_IDX_MASK, PIO_DEFAULT);
  403556:	2300      	movs	r3, #0
  403558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40355c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403560:	481a      	ldr	r0, [pc, #104]	; (4035cc <io_init+0x154>)
  403562:	47a0      	blx	r4
	pmc_enable_periph_clk(BUTSTART_PIO_ID);
  403564:	200a      	movs	r0, #10
  403566:	47a8      	blx	r5
	pio_configure(BUTSTART_PIO, PIO_INPUT, BUTSTART_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403568:	2309      	movs	r3, #9
  40356a:	2204      	movs	r2, #4
  40356c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403570:	4658      	mov	r0, fp
  403572:	47a0      	blx	r4
  pio_handler_set(BUTSTART_PIO,
  403574:	4b16      	ldr	r3, [pc, #88]	; (4035d0 <io_init+0x158>)
  403576:	9300      	str	r3, [sp, #0]
  403578:	2350      	movs	r3, #80	; 0x50
  40357a:	2204      	movs	r2, #4
  40357c:	210a      	movs	r1, #10
  40357e:	4658      	mov	r0, fp
  403580:	47c8      	blx	r9
  pio_enable_interrupt(BUTSTART_PIO, BUTSTART_PIO_IDX_MASK);
  403582:	2104      	movs	r1, #4
  403584:	4658      	mov	r0, fp
  403586:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403588:	f8c6 a000 	str.w	sl, [r6]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40358c:	f886 730a 	strb.w	r7, [r6, #778]	; 0x30a
	pmc_enable_periph_clk(LEDSTART_PIO);
  403590:	480e      	ldr	r0, [pc, #56]	; (4035cc <io_init+0x154>)
  403592:	47a8      	blx	r5
	pio_configure(LEDSTART_PIO, PIO_OUTPUT_0, LEDSTART_PIO_IDX_MASK, PIO_DEFAULT);
  403594:	2300      	movs	r3, #0
  403596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40359a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40359e:	480b      	ldr	r0, [pc, #44]	; (4035cc <io_init+0x154>)
  4035a0:	47a0      	blx	r4
}
  4035a2:	b003      	add	sp, #12
  4035a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035a8:	400e1850 	.word	0x400e1850
  4035ac:	00400c25 	.word	0x00400c25
  4035b0:	400e1400 	.word	0x400e1400
  4035b4:	00400911 	.word	0x00400911
  4035b8:	00402d9d 	.word	0x00402d9d
  4035bc:	e000e100 	.word	0xe000e100
  4035c0:	400e1000 	.word	0x400e1000
  4035c4:	00402dc1 	.word	0x00402dc1
  4035c8:	00402de5 	.word	0x00402de5
  4035cc:	400e1200 	.word	0x400e1200
  4035d0:	00402e09 	.word	0x00402e09
  4035d4:	00400a31 	.word	0x00400a31
  4035d8:	004009d3 	.word	0x004009d3
  4035dc:	400e0e00 	.word	0x400e0e00

004035e0 <usart_put_string>:
void usart_put_string(Usart *usart, char str[]) {
  4035e0:	b538      	push	{r3, r4, r5, lr}
  4035e2:	4605      	mov	r5, r0
  4035e4:	460c      	mov	r4, r1
  usart_serial_write_packet(usart, str, strlen(str));
  4035e6:	4608      	mov	r0, r1
  4035e8:	4b03      	ldr	r3, [pc, #12]	; (4035f8 <usart_put_string+0x18>)
  4035ea:	4798      	blx	r3
  4035ec:	4602      	mov	r2, r0
  4035ee:	4621      	mov	r1, r4
  4035f0:	4628      	mov	r0, r5
  4035f2:	4b02      	ldr	r3, [pc, #8]	; (4035fc <usart_put_string+0x1c>)
  4035f4:	4798      	blx	r3
  4035f6:	bd38      	pop	{r3, r4, r5, pc}
  4035f8:	00404441 	.word	0x00404441
  4035fc:	0040021d 	.word	0x0040021d

00403600 <usart_get_string>:
int usart_get_string(Usart *usart, char buffer[], int bufferlen, uint timeout_ms) {
  403600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403604:	b085      	sub	sp, #20
  403606:	9001      	str	r0, [sp, #4]
  403608:	468b      	mov	fp, r1
  40360a:	4615      	mov	r5, r2
  40360c:	4698      	mov	r8, r3
  uint32_t start = xTaskGetTickCount();
  40360e:	4b10      	ldr	r3, [pc, #64]	; (403650 <usart_get_string+0x50>)
  403610:	4798      	blx	r3
  403612:	4607      	mov	r7, r0
  403614:	f10b 3aff 	add.w	sl, fp, #4294967295
  403618:	3d01      	subs	r5, #1
  uint32_t counter = 0;
  40361a:	2400      	movs	r4, #0
  while( (xTaskGetTickCount() - start < timeout_ms) && (counter < bufferlen - 1)) {
  40361c:	4e0c      	ldr	r6, [pc, #48]	; (403650 <usart_get_string+0x50>)
    if(usart_read(usart, &rx) == 0) {
  40361e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 403654 <usart_get_string+0x54>
  while( (xTaskGetTickCount() - start < timeout_ms) && (counter < bufferlen - 1)) {
  403622:	47b0      	blx	r6
  403624:	1bc0      	subs	r0, r0, r7
  403626:	4540      	cmp	r0, r8
  403628:	d20b      	bcs.n	403642 <usart_get_string+0x42>
  40362a:	42ac      	cmp	r4, r5
  40362c:	d009      	beq.n	403642 <usart_get_string+0x42>
    if(usart_read(usart, &rx) == 0) {
  40362e:	a903      	add	r1, sp, #12
  403630:	9801      	ldr	r0, [sp, #4]
  403632:	47c8      	blx	r9
  403634:	2800      	cmp	r0, #0
  403636:	d1f4      	bne.n	403622 <usart_get_string+0x22>
      buffer[counter++] = rx;
  403638:	3401      	adds	r4, #1
  40363a:	9b03      	ldr	r3, [sp, #12]
  40363c:	f80a 3f01 	strb.w	r3, [sl, #1]!
  403640:	e7ef      	b.n	403622 <usart_get_string+0x22>
  buffer[counter] = 0x00;
  403642:	2300      	movs	r3, #0
  403644:	f80b 3004 	strb.w	r3, [fp, r4]
}
  403648:	4620      	mov	r0, r4
  40364a:	b005      	add	sp, #20
  40364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403650:	004020c5 	.word	0x004020c5
  403654:	00400d9f 	.word	0x00400d9f

00403658 <usart_send_command>:
void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  403658:	b570      	push	{r4, r5, r6, lr}
  40365a:	4604      	mov	r4, r0
  40365c:	460d      	mov	r5, r1
  40365e:	4616      	mov	r6, r2
  usart_put_string(usart, buffer_tx);
  403660:	4619      	mov	r1, r3
  403662:	4b04      	ldr	r3, [pc, #16]	; (403674 <usart_send_command+0x1c>)
  403664:	4798      	blx	r3
  usart_get_string(usart, buffer_rx, bufferlen, timeout);
  403666:	9b04      	ldr	r3, [sp, #16]
  403668:	4632      	mov	r2, r6
  40366a:	4629      	mov	r1, r5
  40366c:	4620      	mov	r0, r4
  40366e:	4c02      	ldr	r4, [pc, #8]	; (403678 <usart_send_command+0x20>)
  403670:	47a0      	blx	r4
  403672:	bd70      	pop	{r4, r5, r6, pc}
  403674:	004035e1 	.word	0x004035e1
  403678:	00403601 	.word	0x00403601

0040367c <hc05_config_server>:
void hc05_config_server(void) {
  40367c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40367e:	b087      	sub	sp, #28
  403680:	200d      	movs	r0, #13
  403682:	4c17      	ldr	r4, [pc, #92]	; (4036e0 <hc05_config_server+0x64>)
  403684:	47a0      	blx	r4
	usart_settings.baudrate = opt->baudrate;
  403686:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  40368a:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40368c:	23c0      	movs	r3, #192	; 0xc0
  40368e:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  403690:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403694:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  403696:	2500      	movs	r5, #0
  403698:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40369a:	9504      	str	r5, [sp, #16]
  40369c:	200d      	movs	r0, #13
  40369e:	47a0      	blx	r4
		usart_init_rs232(p_usart, &usart_settings,
  4036a0:	4c10      	ldr	r4, [pc, #64]	; (4036e4 <hc05_config_server+0x68>)
  4036a2:	4a11      	ldr	r2, [pc, #68]	; (4036e8 <hc05_config_server+0x6c>)
  4036a4:	4669      	mov	r1, sp
  4036a6:	4620      	mov	r0, r4
  4036a8:	4b10      	ldr	r3, [pc, #64]	; (4036ec <hc05_config_server+0x70>)
  4036aa:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4036ac:	4620      	mov	r0, r4
  4036ae:	4f10      	ldr	r7, [pc, #64]	; (4036f0 <hc05_config_server+0x74>)
  4036b0:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  4036b2:	4620      	mov	r0, r4
  4036b4:	4e0f      	ldr	r6, [pc, #60]	; (4036f4 <hc05_config_server+0x78>)
  4036b6:	47b0      	blx	r6
  usart_enable_tx(USART_COM);
  4036b8:	4620      	mov	r0, r4
  4036ba:	47b8      	blx	r7
  usart_enable_rx(USART_COM);
  4036bc:	4620      	mov	r0, r4
  4036be:	47b0      	blx	r6
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  4036c0:	4e0d      	ldr	r6, [pc, #52]	; (4036f8 <hc05_config_server+0x7c>)
  4036c2:	462b      	mov	r3, r5
  4036c4:	2201      	movs	r2, #1
  4036c6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4036ca:	4630      	mov	r0, r6
  4036cc:	4c0b      	ldr	r4, [pc, #44]	; (4036fc <hc05_config_server+0x80>)
  4036ce:	47a0      	blx	r4
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  4036d0:	462b      	mov	r3, r5
  4036d2:	2202      	movs	r2, #2
  4036d4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4036d8:	4630      	mov	r0, r6
  4036da:	47a0      	blx	r4
}
  4036dc:	b007      	add	sp, #28
  4036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036e0:	00400c25 	.word	0x00400c25
  4036e4:	40024000 	.word	0x40024000
  4036e8:	08f0d180 	.word	0x08f0d180
  4036ec:	00400d21 	.word	0x00400d21
  4036f0:	00400d75 	.word	0x00400d75
  4036f4:	00400d7b 	.word	0x00400d7b
  4036f8:	400e1000 	.word	0x400e1000
  4036fc:	00400911 	.word	0x00400911

00403700 <hc05_server_init>:
int hc05_server_init(void) {
  403700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403704:	b0a2      	sub	sp, #136	; 0x88
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf(buffer_rx);
  403706:	f8df 8090 	ldr.w	r8, [pc, #144]	; 403798 <hc05_server_init+0x98>
  40370a:	4e1e      	ldr	r6, [pc, #120]	; (403784 <hc05_server_init+0x84>)
  40370c:	2764      	movs	r7, #100	; 0x64
  40370e:	9700      	str	r7, [sp, #0]
  403710:	4643      	mov	r3, r8
  403712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403716:	a902      	add	r1, sp, #8
  403718:	4630      	mov	r0, r6
  40371a:	4d1b      	ldr	r5, [pc, #108]	; (403788 <hc05_server_init+0x88>)
  40371c:	47a8      	blx	r5
  40371e:	a802      	add	r0, sp, #8
  403720:	4c1a      	ldr	r4, [pc, #104]	; (40378c <hc05_server_init+0x8c>)
  403722:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf(buffer_rx);
  403724:	9700      	str	r7, [sp, #0]
  403726:	4643      	mov	r3, r8
  403728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40372c:	a902      	add	r1, sp, #8
  40372e:	4630      	mov	r0, r6
  403730:	47a8      	blx	r5
  403732:	a802      	add	r0, sp, #8
  403734:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100);printf(buffer_rx);
  403736:	9700      	str	r7, [sp, #0]
  403738:	4643      	mov	r3, r8
  40373a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40373e:	a902      	add	r1, sp, #8
  403740:	4630      	mov	r0, r6
  403742:	47a8      	blx	r5
  403744:	a802      	add	r0, sp, #8
  403746:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+NAMEPedro", 1000);printf(buffer_rx);
  403748:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  40374c:	9700      	str	r7, [sp, #0]
  40374e:	4b10      	ldr	r3, [pc, #64]	; (403790 <hc05_server_init+0x90>)
  403750:	463a      	mov	r2, r7
  403752:	a902      	add	r1, sp, #8
  403754:	4630      	mov	r0, r6
  403756:	47a8      	blx	r5
  403758:	a802      	add	r0, sp, #8
  40375a:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 1000);printf(buffer_rx);
  40375c:	9700      	str	r7, [sp, #0]
  40375e:	4643      	mov	r3, r8
  403760:	463a      	mov	r2, r7
  403762:	a902      	add	r1, sp, #8
  403764:	4630      	mov	r0, r6
  403766:	47a8      	blx	r5
  403768:	a802      	add	r0, sp, #8
  40376a:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+PIN5555", 1000);printf(buffer_rx);
  40376c:	9700      	str	r7, [sp, #0]
  40376e:	4b09      	ldr	r3, [pc, #36]	; (403794 <hc05_server_init+0x94>)
  403770:	463a      	mov	r2, r7
  403772:	a902      	add	r1, sp, #8
  403774:	4630      	mov	r0, r6
  403776:	47a8      	blx	r5
  403778:	a802      	add	r0, sp, #8
  40377a:	47a0      	blx	r4
}
  40377c:	b022      	add	sp, #136	; 0x88
  40377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403782:	bf00      	nop
  403784:	40024000 	.word	0x40024000
  403788:	00403659 	.word	0x00403659
  40378c:	00403a81 	.word	0x00403a81
  403790:	00409ea4 	.word	0x00409ea4
  403794:	00409eb4 	.word	0x00409eb4
  403798:	00409ea0 	.word	0x00409ea0

0040379c <task_bluetooth>:
void task_bluetooth(void){
  40379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4037a0:	b098      	sub	sp, #96	; 0x60
		xQueueBUTA = xQueueCreate( 10, sizeof( char ) );
  4037a2:	2200      	movs	r2, #0
  4037a4:	2101      	movs	r1, #1
  4037a6:	200a      	movs	r0, #10
  4037a8:	4c4b      	ldr	r4, [pc, #300]	; (4038d8 <task_bluetooth+0x13c>)
  4037aa:	47a0      	blx	r4
  4037ac:	4b4b      	ldr	r3, [pc, #300]	; (4038dc <task_bluetooth+0x140>)
  4037ae:	6018      	str	r0, [r3, #0]
		xQueueBUTB = xQueueCreate( 10, sizeof( int32_t ) );
  4037b0:	2200      	movs	r2, #0
  4037b2:	2104      	movs	r1, #4
  4037b4:	200a      	movs	r0, #10
  4037b6:	47a0      	blx	r4
  4037b8:	4b49      	ldr	r3, [pc, #292]	; (4038e0 <task_bluetooth+0x144>)
  4037ba:	6018      	str	r0, [r3, #0]
		xQueueBUTZ = xQueueCreate( 10, sizeof( int32_t ) );
  4037bc:	2200      	movs	r2, #0
  4037be:	2104      	movs	r1, #4
  4037c0:	200a      	movs	r0, #10
  4037c2:	47a0      	blx	r4
  4037c4:	4b47      	ldr	r3, [pc, #284]	; (4038e4 <task_bluetooth+0x148>)
  4037c6:	6018      	str	r0, [r3, #0]
		xQueueBUTSTART = xQueueCreate( 10, sizeof( int32_t ) );
  4037c8:	2200      	movs	r2, #0
  4037ca:	2104      	movs	r1, #4
  4037cc:	200a      	movs	r0, #10
  4037ce:	47a0      	blx	r4
  4037d0:	4b45      	ldr	r3, [pc, #276]	; (4038e8 <task_bluetooth+0x14c>)
  4037d2:	6018      	str	r0, [r3, #0]
		xQueueJX = xQueueCreate(10, sizeof(int32_t));
  4037d4:	2200      	movs	r2, #0
  4037d6:	2104      	movs	r1, #4
  4037d8:	200a      	movs	r0, #10
  4037da:	47a0      	blx	r4
  4037dc:	4b43      	ldr	r3, [pc, #268]	; (4038ec <task_bluetooth+0x150>)
  4037de:	6018      	str	r0, [r3, #0]
		xQueueJY = xQueueCreate(10,sizeof(int32_t));
  4037e0:	2200      	movs	r2, #0
  4037e2:	2104      	movs	r1, #4
  4037e4:	200a      	movs	r0, #10
  4037e6:	47a0      	blx	r4
  4037e8:	4b41      	ldr	r3, [pc, #260]	; (4038f0 <task_bluetooth+0x154>)
  4037ea:	6018      	str	r0, [r3, #0]
  printf("Bluetooth initializing \n");
  4037ec:	4841      	ldr	r0, [pc, #260]	; (4038f4 <task_bluetooth+0x158>)
  4037ee:	4c42      	ldr	r4, [pc, #264]	; (4038f8 <task_bluetooth+0x15c>)
  4037f0:	47a0      	blx	r4
  hc05_config_server();
  4037f2:	4b42      	ldr	r3, [pc, #264]	; (4038fc <task_bluetooth+0x160>)
  4037f4:	4798      	blx	r3
  hc05_server_init();
  4037f6:	4b42      	ldr	r3, [pc, #264]	; (403900 <task_bluetooth+0x164>)
  4037f8:	4798      	blx	r3
  printf("Config done \n");
  4037fa:	4842      	ldr	r0, [pc, #264]	; (403904 <task_bluetooth+0x168>)
  4037fc:	47a0      	blx	r4
  io_init();
  4037fe:	4b42      	ldr	r3, [pc, #264]	; (403908 <task_bluetooth+0x16c>)
  403800:	4798      	blx	r3
	if (xQueueReceive( xQueueBUTA, &(buttonA), ( TickType_t ) 10 / portTICK_PERIOD_MS) || xQueueReceive( xQueueBUTB, &(buttonB), ( TickType_t ) 10 / portTICK_PERIOD_MS) || xQueueReceive( xQueueBUTZ, &(buttonZ), ( TickType_t ) 10 / portTICK_PERIOD_MS)|| xQueueReceive( xQueueBUTSTART, &(buttonStart), ( TickType_t ) 10 / portTICK_PERIOD_MS)|| xQueueReceive( xQueueJX, &(Jx), ( TickType_t ) 10 / portTICK_PERIOD_MS)|| xQueueReceive( xQueueJY, &(Jy), ( TickType_t ) 10 / portTICK_PERIOD_MS)) { 
  403802:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 4038dc <task_bluetooth+0x140>
  403806:	f04f 080a 	mov.w	r8, #10
  40380a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 403920 <task_bluetooth+0x184>
  40380e:	e026      	b.n	40385e <task_bluetooth+0xc2>
		sprintf(analog_x,";%d;",Jx);
  403810:	4f3e      	ldr	r7, [pc, #248]	; (40390c <task_bluetooth+0x170>)
  403812:	ac08      	add	r4, sp, #32
  403814:	9a06      	ldr	r2, [sp, #24]
  403816:	4639      	mov	r1, r7
  403818:	4620      	mov	r0, r4
  40381a:	4e3d      	ldr	r6, [pc, #244]	; (403910 <task_bluetooth+0x174>)
  40381c:	47b0      	blx	r6
		sprintf(analog_y,";%d;",Jy);
  40381e:	ad10      	add	r5, sp, #64	; 0x40
  403820:	9a07      	ldr	r2, [sp, #28]
  403822:	4639      	mov	r1, r7
  403824:	4628      	mov	r0, r5
  403826:	47b0      	blx	r6
		printf("%c",buttonB);printf("%c",buttonA);
  403828:	4f3a      	ldr	r7, [pc, #232]	; (403914 <task_bluetooth+0x178>)
  40382a:	f89d 1015 	ldrb.w	r1, [sp, #21]
  40382e:	4638      	mov	r0, r7
  403830:	4e31      	ldr	r6, [pc, #196]	; (4038f8 <task_bluetooth+0x15c>)
  403832:	47b0      	blx	r6
  403834:	f89d 1014 	ldrb.w	r1, [sp, #20]
  403838:	4638      	mov	r0, r7
  40383a:	47b0      	blx	r6
		send_command(buttonStart,buttonA,buttonB,buttonZ,analog_x,analog_y,eof);
  40383c:	f89d 3016 	ldrb.w	r3, [sp, #22]
  403840:	f89d 2015 	ldrb.w	r2, [sp, #21]
  403844:	f89d 1014 	ldrb.w	r1, [sp, #20]
  403848:	f89d 0017 	ldrb.w	r0, [sp, #23]
  40384c:	2658      	movs	r6, #88	; 0x58
  40384e:	9602      	str	r6, [sp, #8]
  403850:	9501      	str	r5, [sp, #4]
  403852:	9400      	str	r4, [sp, #0]
  403854:	4c30      	ldr	r4, [pc, #192]	; (403918 <task_bluetooth+0x17c>)
  403856:	47a0      	blx	r4
    vTaskDelay( 10 / portTICK_PERIOD_MS);
  403858:	4640      	mov	r0, r8
  40385a:	4b30      	ldr	r3, [pc, #192]	; (40391c <task_bluetooth+0x180>)
  40385c:	4798      	blx	r3
	char buttonA = '0';
  40385e:	2330      	movs	r3, #48	; 0x30
  403860:	f88d 3014 	strb.w	r3, [sp, #20]
	char buttonB = '0';
  403864:	f88d 3015 	strb.w	r3, [sp, #21]
	char buttonZ = '0';
  403868:	f88d 3016 	strb.w	r3, [sp, #22]
	char buttonStart = '0';
  40386c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (xQueueReceive( xQueueBUTA, &(buttonA), ( TickType_t ) 10 / portTICK_PERIOD_MS) || xQueueReceive( xQueueBUTB, &(buttonB), ( TickType_t ) 10 / portTICK_PERIOD_MS) || xQueueReceive( xQueueBUTZ, &(buttonZ), ( TickType_t ) 10 / portTICK_PERIOD_MS)|| xQueueReceive( xQueueBUTSTART, &(buttonStart), ( TickType_t ) 10 / portTICK_PERIOD_MS)|| xQueueReceive( xQueueJX, &(Jx), ( TickType_t ) 10 / portTICK_PERIOD_MS)|| xQueueReceive( xQueueJY, &(Jy), ( TickType_t ) 10 / portTICK_PERIOD_MS)) { 
  403870:	2300      	movs	r3, #0
  403872:	4642      	mov	r2, r8
  403874:	a905      	add	r1, sp, #20
  403876:	f8da 0000 	ldr.w	r0, [sl]
  40387a:	47c8      	blx	r9
  40387c:	2800      	cmp	r0, #0
  40387e:	d1c7      	bne.n	403810 <task_bluetooth+0x74>
  403880:	2300      	movs	r3, #0
  403882:	4642      	mov	r2, r8
  403884:	f10d 0115 	add.w	r1, sp, #21
  403888:	4815      	ldr	r0, [pc, #84]	; (4038e0 <task_bluetooth+0x144>)
  40388a:	6800      	ldr	r0, [r0, #0]
  40388c:	47c8      	blx	r9
  40388e:	2800      	cmp	r0, #0
  403890:	d1be      	bne.n	403810 <task_bluetooth+0x74>
  403892:	2300      	movs	r3, #0
  403894:	4642      	mov	r2, r8
  403896:	f10d 0116 	add.w	r1, sp, #22
  40389a:	4812      	ldr	r0, [pc, #72]	; (4038e4 <task_bluetooth+0x148>)
  40389c:	6800      	ldr	r0, [r0, #0]
  40389e:	47c8      	blx	r9
  4038a0:	2800      	cmp	r0, #0
  4038a2:	d1b5      	bne.n	403810 <task_bluetooth+0x74>
  4038a4:	2300      	movs	r3, #0
  4038a6:	4642      	mov	r2, r8
  4038a8:	f10d 0117 	add.w	r1, sp, #23
  4038ac:	480e      	ldr	r0, [pc, #56]	; (4038e8 <task_bluetooth+0x14c>)
  4038ae:	6800      	ldr	r0, [r0, #0]
  4038b0:	47c8      	blx	r9
  4038b2:	2800      	cmp	r0, #0
  4038b4:	d1ac      	bne.n	403810 <task_bluetooth+0x74>
  4038b6:	2300      	movs	r3, #0
  4038b8:	4642      	mov	r2, r8
  4038ba:	a906      	add	r1, sp, #24
  4038bc:	480b      	ldr	r0, [pc, #44]	; (4038ec <task_bluetooth+0x150>)
  4038be:	6800      	ldr	r0, [r0, #0]
  4038c0:	47c8      	blx	r9
  4038c2:	2800      	cmp	r0, #0
  4038c4:	d1a4      	bne.n	403810 <task_bluetooth+0x74>
  4038c6:	2300      	movs	r3, #0
  4038c8:	4642      	mov	r2, r8
  4038ca:	a907      	add	r1, sp, #28
  4038cc:	4808      	ldr	r0, [pc, #32]	; (4038f0 <task_bluetooth+0x154>)
  4038ce:	6800      	ldr	r0, [r0, #0]
  4038d0:	47c8      	blx	r9
  4038d2:	2800      	cmp	r0, #0
  4038d4:	d0c0      	beq.n	403858 <task_bluetooth+0xbc>
  4038d6:	e79b      	b.n	403810 <task_bluetooth+0x74>
  4038d8:	004016d5 	.word	0x004016d5
  4038dc:	20400cb0 	.word	0x20400cb0
  4038e0:	20400ca0 	.word	0x20400ca0
  4038e4:	20400cd8 	.word	0x20400cd8
  4038e8:	20400cc8 	.word	0x20400cc8
  4038ec:	20400ca8 	.word	0x20400ca8
  4038f0:	20400cac 	.word	0x20400cac
  4038f4:	00409ed4 	.word	0x00409ed4
  4038f8:	00403a81 	.word	0x00403a81
  4038fc:	0040367d 	.word	0x0040367d
  403900:	00403701 	.word	0x00403701
  403904:	00409ef0 	.word	0x00409ef0
  403908:	00403479 	.word	0x00403479
  40390c:	00409f00 	.word	0x00409f00
  403910:	004043d5 	.word	0x004043d5
  403914:	00409f08 	.word	0x00409f08
  403918:	00403355 	.word	0x00403355
  40391c:	0040233d 	.word	0x0040233d
  403920:	00401b15 	.word	0x00401b15

00403924 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void){
  403924:	b500      	push	{lr}
  403926:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  403928:	4b2a      	ldr	r3, [pc, #168]	; (4039d4 <main+0xb0>)
  40392a:	4798      	blx	r3
	board_init();
  40392c:	4b2a      	ldr	r3, [pc, #168]	; (4039d8 <main+0xb4>)
  40392e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403930:	4d2a      	ldr	r5, [pc, #168]	; (4039dc <main+0xb8>)
  403932:	4b2b      	ldr	r3, [pc, #172]	; (4039e0 <main+0xbc>)
  403934:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403936:	4a2b      	ldr	r2, [pc, #172]	; (4039e4 <main+0xc0>)
  403938:	4b2b      	ldr	r3, [pc, #172]	; (4039e8 <main+0xc4>)
  40393a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40393c:	4a2b      	ldr	r2, [pc, #172]	; (4039ec <main+0xc8>)
  40393e:	4b2c      	ldr	r3, [pc, #176]	; (4039f0 <main+0xcc>)
  403940:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403942:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403946:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403948:	23c0      	movs	r3, #192	; 0xc0
  40394a:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  40394c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403950:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403952:	2400      	movs	r4, #0
  403954:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403956:	9408      	str	r4, [sp, #32]
  403958:	200e      	movs	r0, #14
  40395a:	4b26      	ldr	r3, [pc, #152]	; (4039f4 <main+0xd0>)
  40395c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40395e:	4a26      	ldr	r2, [pc, #152]	; (4039f8 <main+0xd4>)
  403960:	a904      	add	r1, sp, #16
  403962:	4628      	mov	r0, r5
  403964:	4b25      	ldr	r3, [pc, #148]	; (4039fc <main+0xd8>)
  403966:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403968:	4628      	mov	r0, r5
  40396a:	4b25      	ldr	r3, [pc, #148]	; (403a00 <main+0xdc>)
  40396c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40396e:	4628      	mov	r0, r5
  403970:	4b24      	ldr	r3, [pc, #144]	; (403a04 <main+0xe0>)
  403972:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403974:	4e24      	ldr	r6, [pc, #144]	; (403a08 <main+0xe4>)
  403976:	6833      	ldr	r3, [r6, #0]
  403978:	4621      	mov	r1, r4
  40397a:	6898      	ldr	r0, [r3, #8]
  40397c:	4d23      	ldr	r5, [pc, #140]	; (403a0c <main+0xe8>)
  40397e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403980:	6833      	ldr	r3, [r6, #0]
  403982:	4621      	mov	r1, r4
  403984:	6858      	ldr	r0, [r3, #4]
  403986:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403988:	6833      	ldr	r3, [r6, #0]
  40398a:	4621      	mov	r1, r4
  40398c:	6898      	ldr	r0, [r3, #8]
  40398e:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Create task to make led blink */
	xTaskCreate(task_bluetooth, "BLT", TASK_PROCESS_STACK_SIZE, NULL,	TASK_PROCESS_STACK_PRIORITY, NULL);
  403990:	9403      	str	r4, [sp, #12]
  403992:	9402      	str	r4, [sp, #8]
  403994:	9401      	str	r4, [sp, #4]
  403996:	9400      	str	r4, [sp, #0]
  403998:	4623      	mov	r3, r4
  40399a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40399e:	491c      	ldr	r1, [pc, #112]	; (403a10 <main+0xec>)
  4039a0:	481c      	ldr	r0, [pc, #112]	; (403a14 <main+0xf0>)
  4039a2:	4d1d      	ldr	r5, [pc, #116]	; (403a18 <main+0xf4>)
  4039a4:	47a8      	blx	r5
	
	
	/* Create task to make buttons work */
	xTaskCreate(task_buttons, "BUTS", TASK_PROCESS_STACK_SIZE, NULL,	TASK_PROCESS_STACK_PRIORITY, NULL);
  4039a6:	9403      	str	r4, [sp, #12]
  4039a8:	9402      	str	r4, [sp, #8]
  4039aa:	9401      	str	r4, [sp, #4]
  4039ac:	9400      	str	r4, [sp, #0]
  4039ae:	4623      	mov	r3, r4
  4039b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4039b4:	4919      	ldr	r1, [pc, #100]	; (403a1c <main+0xf8>)
  4039b6:	481a      	ldr	r0, [pc, #104]	; (403a20 <main+0xfc>)
  4039b8:	47a8      	blx	r5
  
  	/* Create task to make buttons work */
  	xTaskCreate(task_afec, "AFEC", TASK_PROCESS_STACK_SIZE, NULL,	TASK_PROCESS_STACK_PRIORITY, NULL);
  4039ba:	9403      	str	r4, [sp, #12]
  4039bc:	9402      	str	r4, [sp, #8]
  4039be:	9401      	str	r4, [sp, #4]
  4039c0:	9400      	str	r4, [sp, #0]
  4039c2:	4623      	mov	r3, r4
  4039c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4039c8:	4916      	ldr	r1, [pc, #88]	; (403a24 <main+0x100>)
  4039ca:	4817      	ldr	r0, [pc, #92]	; (403a28 <main+0x104>)
  4039cc:	47a8      	blx	r5
  	
  
	/* Start the scheduler. */
	vTaskStartScheduler();
  4039ce:	4b17      	ldr	r3, [pc, #92]	; (403a2c <main+0x108>)
  4039d0:	4798      	blx	r3
  4039d2:	e7fe      	b.n	4039d2 <main+0xae>
  4039d4:	004001ad 	.word	0x004001ad
  4039d8:	00400381 	.word	0x00400381
  4039dc:	40028000 	.word	0x40028000
  4039e0:	20400bdc 	.word	0x20400bdc
  4039e4:	00402e2d 	.word	0x00402e2d
  4039e8:	20400bd8 	.word	0x20400bd8
  4039ec:	00403091 	.word	0x00403091
  4039f0:	20400bd4 	.word	0x20400bd4
  4039f4:	00400c25 	.word	0x00400c25
  4039f8:	08f0d180 	.word	0x08f0d180
  4039fc:	00400d21 	.word	0x00400d21
  403a00:	00400d75 	.word	0x00400d75
  403a04:	00400d7b 	.word	0x00400d7b
  403a08:	2040000c 	.word	0x2040000c
  403a0c:	00404235 	.word	0x00404235
  403a10:	00409ec0 	.word	0x00409ec0
  403a14:	0040379d 	.word	0x0040379d
  403a18:	00401df5 	.word	0x00401df5
  403a1c:	00409ec4 	.word	0x00409ec4
  403a20:	004031c5 	.word	0x004031c5
  403a24:	00409ecc 	.word	0x00409ecc
  403a28:	00402f01 	.word	0x00402f01
  403a2c:	00402029 	.word	0x00402029

00403a30 <__libc_init_array>:
  403a30:	b570      	push	{r4, r5, r6, lr}
  403a32:	4e0f      	ldr	r6, [pc, #60]	; (403a70 <__libc_init_array+0x40>)
  403a34:	4d0f      	ldr	r5, [pc, #60]	; (403a74 <__libc_init_array+0x44>)
  403a36:	1b76      	subs	r6, r6, r5
  403a38:	10b6      	asrs	r6, r6, #2
  403a3a:	bf18      	it	ne
  403a3c:	2400      	movne	r4, #0
  403a3e:	d005      	beq.n	403a4c <__libc_init_array+0x1c>
  403a40:	3401      	adds	r4, #1
  403a42:	f855 3b04 	ldr.w	r3, [r5], #4
  403a46:	4798      	blx	r3
  403a48:	42a6      	cmp	r6, r4
  403a4a:	d1f9      	bne.n	403a40 <__libc_init_array+0x10>
  403a4c:	4e0a      	ldr	r6, [pc, #40]	; (403a78 <__libc_init_array+0x48>)
  403a4e:	4d0b      	ldr	r5, [pc, #44]	; (403a7c <__libc_init_array+0x4c>)
  403a50:	1b76      	subs	r6, r6, r5
  403a52:	f006 fbdd 	bl	40a210 <_init>
  403a56:	10b6      	asrs	r6, r6, #2
  403a58:	bf18      	it	ne
  403a5a:	2400      	movne	r4, #0
  403a5c:	d006      	beq.n	403a6c <__libc_init_array+0x3c>
  403a5e:	3401      	adds	r4, #1
  403a60:	f855 3b04 	ldr.w	r3, [r5], #4
  403a64:	4798      	blx	r3
  403a66:	42a6      	cmp	r6, r4
  403a68:	d1f9      	bne.n	403a5e <__libc_init_array+0x2e>
  403a6a:	bd70      	pop	{r4, r5, r6, pc}
  403a6c:	bd70      	pop	{r4, r5, r6, pc}
  403a6e:	bf00      	nop
  403a70:	0040a21c 	.word	0x0040a21c
  403a74:	0040a21c 	.word	0x0040a21c
  403a78:	0040a224 	.word	0x0040a224
  403a7c:	0040a21c 	.word	0x0040a21c

00403a80 <iprintf>:
  403a80:	b40f      	push	{r0, r1, r2, r3}
  403a82:	b500      	push	{lr}
  403a84:	4907      	ldr	r1, [pc, #28]	; (403aa4 <iprintf+0x24>)
  403a86:	b083      	sub	sp, #12
  403a88:	ab04      	add	r3, sp, #16
  403a8a:	6808      	ldr	r0, [r1, #0]
  403a8c:	f853 2b04 	ldr.w	r2, [r3], #4
  403a90:	6881      	ldr	r1, [r0, #8]
  403a92:	9301      	str	r3, [sp, #4]
  403a94:	f001 ffb0 	bl	4059f8 <_vfiprintf_r>
  403a98:	b003      	add	sp, #12
  403a9a:	f85d eb04 	ldr.w	lr, [sp], #4
  403a9e:	b004      	add	sp, #16
  403aa0:	4770      	bx	lr
  403aa2:	bf00      	nop
  403aa4:	2040000c 	.word	0x2040000c

00403aa8 <malloc>:
  403aa8:	4b02      	ldr	r3, [pc, #8]	; (403ab4 <malloc+0xc>)
  403aaa:	4601      	mov	r1, r0
  403aac:	6818      	ldr	r0, [r3, #0]
  403aae:	f000 b80b 	b.w	403ac8 <_malloc_r>
  403ab2:	bf00      	nop
  403ab4:	2040000c 	.word	0x2040000c

00403ab8 <free>:
  403ab8:	4b02      	ldr	r3, [pc, #8]	; (403ac4 <free+0xc>)
  403aba:	4601      	mov	r1, r0
  403abc:	6818      	ldr	r0, [r3, #0]
  403abe:	f004 b877 	b.w	407bb0 <_free_r>
  403ac2:	bf00      	nop
  403ac4:	2040000c 	.word	0x2040000c

00403ac8 <_malloc_r>:
  403ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403acc:	f101 060b 	add.w	r6, r1, #11
  403ad0:	2e16      	cmp	r6, #22
  403ad2:	b083      	sub	sp, #12
  403ad4:	4605      	mov	r5, r0
  403ad6:	f240 809e 	bls.w	403c16 <_malloc_r+0x14e>
  403ada:	f036 0607 	bics.w	r6, r6, #7
  403ade:	f100 80bd 	bmi.w	403c5c <_malloc_r+0x194>
  403ae2:	42b1      	cmp	r1, r6
  403ae4:	f200 80ba 	bhi.w	403c5c <_malloc_r+0x194>
  403ae8:	f000 fb86 	bl	4041f8 <__malloc_lock>
  403aec:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403af0:	f0c0 8293 	bcc.w	40401a <_malloc_r+0x552>
  403af4:	0a73      	lsrs	r3, r6, #9
  403af6:	f000 80b8 	beq.w	403c6a <_malloc_r+0x1a2>
  403afa:	2b04      	cmp	r3, #4
  403afc:	f200 8179 	bhi.w	403df2 <_malloc_r+0x32a>
  403b00:	09b3      	lsrs	r3, r6, #6
  403b02:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403b06:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403b0a:	00c3      	lsls	r3, r0, #3
  403b0c:	4fbf      	ldr	r7, [pc, #764]	; (403e0c <_malloc_r+0x344>)
  403b0e:	443b      	add	r3, r7
  403b10:	f1a3 0108 	sub.w	r1, r3, #8
  403b14:	685c      	ldr	r4, [r3, #4]
  403b16:	42a1      	cmp	r1, r4
  403b18:	d106      	bne.n	403b28 <_malloc_r+0x60>
  403b1a:	e00c      	b.n	403b36 <_malloc_r+0x6e>
  403b1c:	2a00      	cmp	r2, #0
  403b1e:	f280 80aa 	bge.w	403c76 <_malloc_r+0x1ae>
  403b22:	68e4      	ldr	r4, [r4, #12]
  403b24:	42a1      	cmp	r1, r4
  403b26:	d006      	beq.n	403b36 <_malloc_r+0x6e>
  403b28:	6863      	ldr	r3, [r4, #4]
  403b2a:	f023 0303 	bic.w	r3, r3, #3
  403b2e:	1b9a      	subs	r2, r3, r6
  403b30:	2a0f      	cmp	r2, #15
  403b32:	ddf3      	ble.n	403b1c <_malloc_r+0x54>
  403b34:	4670      	mov	r0, lr
  403b36:	693c      	ldr	r4, [r7, #16]
  403b38:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403e20 <_malloc_r+0x358>
  403b3c:	4574      	cmp	r4, lr
  403b3e:	f000 81ab 	beq.w	403e98 <_malloc_r+0x3d0>
  403b42:	6863      	ldr	r3, [r4, #4]
  403b44:	f023 0303 	bic.w	r3, r3, #3
  403b48:	1b9a      	subs	r2, r3, r6
  403b4a:	2a0f      	cmp	r2, #15
  403b4c:	f300 8190 	bgt.w	403e70 <_malloc_r+0x3a8>
  403b50:	2a00      	cmp	r2, #0
  403b52:	f8c7 e014 	str.w	lr, [r7, #20]
  403b56:	f8c7 e010 	str.w	lr, [r7, #16]
  403b5a:	f280 809d 	bge.w	403c98 <_malloc_r+0x1d0>
  403b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403b62:	f080 8161 	bcs.w	403e28 <_malloc_r+0x360>
  403b66:	08db      	lsrs	r3, r3, #3
  403b68:	f103 0c01 	add.w	ip, r3, #1
  403b6c:	1099      	asrs	r1, r3, #2
  403b6e:	687a      	ldr	r2, [r7, #4]
  403b70:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403b74:	f8c4 8008 	str.w	r8, [r4, #8]
  403b78:	2301      	movs	r3, #1
  403b7a:	408b      	lsls	r3, r1
  403b7c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403b80:	4313      	orrs	r3, r2
  403b82:	3908      	subs	r1, #8
  403b84:	60e1      	str	r1, [r4, #12]
  403b86:	607b      	str	r3, [r7, #4]
  403b88:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403b8c:	f8c8 400c 	str.w	r4, [r8, #12]
  403b90:	1082      	asrs	r2, r0, #2
  403b92:	2401      	movs	r4, #1
  403b94:	4094      	lsls	r4, r2
  403b96:	429c      	cmp	r4, r3
  403b98:	f200 808b 	bhi.w	403cb2 <_malloc_r+0x1ea>
  403b9c:	421c      	tst	r4, r3
  403b9e:	d106      	bne.n	403bae <_malloc_r+0xe6>
  403ba0:	f020 0003 	bic.w	r0, r0, #3
  403ba4:	0064      	lsls	r4, r4, #1
  403ba6:	421c      	tst	r4, r3
  403ba8:	f100 0004 	add.w	r0, r0, #4
  403bac:	d0fa      	beq.n	403ba4 <_malloc_r+0xdc>
  403bae:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403bb2:	46cc      	mov	ip, r9
  403bb4:	4680      	mov	r8, r0
  403bb6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403bba:	459c      	cmp	ip, r3
  403bbc:	d107      	bne.n	403bce <_malloc_r+0x106>
  403bbe:	e16d      	b.n	403e9c <_malloc_r+0x3d4>
  403bc0:	2a00      	cmp	r2, #0
  403bc2:	f280 817b 	bge.w	403ebc <_malloc_r+0x3f4>
  403bc6:	68db      	ldr	r3, [r3, #12]
  403bc8:	459c      	cmp	ip, r3
  403bca:	f000 8167 	beq.w	403e9c <_malloc_r+0x3d4>
  403bce:	6859      	ldr	r1, [r3, #4]
  403bd0:	f021 0103 	bic.w	r1, r1, #3
  403bd4:	1b8a      	subs	r2, r1, r6
  403bd6:	2a0f      	cmp	r2, #15
  403bd8:	ddf2      	ble.n	403bc0 <_malloc_r+0xf8>
  403bda:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403bde:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403be2:	9300      	str	r3, [sp, #0]
  403be4:	199c      	adds	r4, r3, r6
  403be6:	4628      	mov	r0, r5
  403be8:	f046 0601 	orr.w	r6, r6, #1
  403bec:	f042 0501 	orr.w	r5, r2, #1
  403bf0:	605e      	str	r6, [r3, #4]
  403bf2:	f8c8 c00c 	str.w	ip, [r8, #12]
  403bf6:	f8cc 8008 	str.w	r8, [ip, #8]
  403bfa:	617c      	str	r4, [r7, #20]
  403bfc:	613c      	str	r4, [r7, #16]
  403bfe:	f8c4 e00c 	str.w	lr, [r4, #12]
  403c02:	f8c4 e008 	str.w	lr, [r4, #8]
  403c06:	6065      	str	r5, [r4, #4]
  403c08:	505a      	str	r2, [r3, r1]
  403c0a:	f000 fafb 	bl	404204 <__malloc_unlock>
  403c0e:	9b00      	ldr	r3, [sp, #0]
  403c10:	f103 0408 	add.w	r4, r3, #8
  403c14:	e01e      	b.n	403c54 <_malloc_r+0x18c>
  403c16:	2910      	cmp	r1, #16
  403c18:	d820      	bhi.n	403c5c <_malloc_r+0x194>
  403c1a:	f000 faed 	bl	4041f8 <__malloc_lock>
  403c1e:	2610      	movs	r6, #16
  403c20:	2318      	movs	r3, #24
  403c22:	2002      	movs	r0, #2
  403c24:	4f79      	ldr	r7, [pc, #484]	; (403e0c <_malloc_r+0x344>)
  403c26:	443b      	add	r3, r7
  403c28:	f1a3 0208 	sub.w	r2, r3, #8
  403c2c:	685c      	ldr	r4, [r3, #4]
  403c2e:	4294      	cmp	r4, r2
  403c30:	f000 813d 	beq.w	403eae <_malloc_r+0x3e6>
  403c34:	6863      	ldr	r3, [r4, #4]
  403c36:	68e1      	ldr	r1, [r4, #12]
  403c38:	68a6      	ldr	r6, [r4, #8]
  403c3a:	f023 0303 	bic.w	r3, r3, #3
  403c3e:	4423      	add	r3, r4
  403c40:	4628      	mov	r0, r5
  403c42:	685a      	ldr	r2, [r3, #4]
  403c44:	60f1      	str	r1, [r6, #12]
  403c46:	f042 0201 	orr.w	r2, r2, #1
  403c4a:	608e      	str	r6, [r1, #8]
  403c4c:	605a      	str	r2, [r3, #4]
  403c4e:	f000 fad9 	bl	404204 <__malloc_unlock>
  403c52:	3408      	adds	r4, #8
  403c54:	4620      	mov	r0, r4
  403c56:	b003      	add	sp, #12
  403c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c5c:	2400      	movs	r4, #0
  403c5e:	230c      	movs	r3, #12
  403c60:	4620      	mov	r0, r4
  403c62:	602b      	str	r3, [r5, #0]
  403c64:	b003      	add	sp, #12
  403c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c6a:	2040      	movs	r0, #64	; 0x40
  403c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
  403c70:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403c74:	e74a      	b.n	403b0c <_malloc_r+0x44>
  403c76:	4423      	add	r3, r4
  403c78:	68e1      	ldr	r1, [r4, #12]
  403c7a:	685a      	ldr	r2, [r3, #4]
  403c7c:	68a6      	ldr	r6, [r4, #8]
  403c7e:	f042 0201 	orr.w	r2, r2, #1
  403c82:	60f1      	str	r1, [r6, #12]
  403c84:	4628      	mov	r0, r5
  403c86:	608e      	str	r6, [r1, #8]
  403c88:	605a      	str	r2, [r3, #4]
  403c8a:	f000 fabb 	bl	404204 <__malloc_unlock>
  403c8e:	3408      	adds	r4, #8
  403c90:	4620      	mov	r0, r4
  403c92:	b003      	add	sp, #12
  403c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c98:	4423      	add	r3, r4
  403c9a:	4628      	mov	r0, r5
  403c9c:	685a      	ldr	r2, [r3, #4]
  403c9e:	f042 0201 	orr.w	r2, r2, #1
  403ca2:	605a      	str	r2, [r3, #4]
  403ca4:	f000 faae 	bl	404204 <__malloc_unlock>
  403ca8:	3408      	adds	r4, #8
  403caa:	4620      	mov	r0, r4
  403cac:	b003      	add	sp, #12
  403cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cb2:	68bc      	ldr	r4, [r7, #8]
  403cb4:	6863      	ldr	r3, [r4, #4]
  403cb6:	f023 0803 	bic.w	r8, r3, #3
  403cba:	45b0      	cmp	r8, r6
  403cbc:	d304      	bcc.n	403cc8 <_malloc_r+0x200>
  403cbe:	eba8 0306 	sub.w	r3, r8, r6
  403cc2:	2b0f      	cmp	r3, #15
  403cc4:	f300 8085 	bgt.w	403dd2 <_malloc_r+0x30a>
  403cc8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403e24 <_malloc_r+0x35c>
  403ccc:	4b50      	ldr	r3, [pc, #320]	; (403e10 <_malloc_r+0x348>)
  403cce:	f8d9 2000 	ldr.w	r2, [r9]
  403cd2:	681b      	ldr	r3, [r3, #0]
  403cd4:	3201      	adds	r2, #1
  403cd6:	4433      	add	r3, r6
  403cd8:	eb04 0a08 	add.w	sl, r4, r8
  403cdc:	f000 8155 	beq.w	403f8a <_malloc_r+0x4c2>
  403ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403ce4:	330f      	adds	r3, #15
  403ce6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403cea:	f02b 0b0f 	bic.w	fp, fp, #15
  403cee:	4659      	mov	r1, fp
  403cf0:	4628      	mov	r0, r5
  403cf2:	f000 fa8d 	bl	404210 <_sbrk_r>
  403cf6:	1c41      	adds	r1, r0, #1
  403cf8:	4602      	mov	r2, r0
  403cfa:	f000 80fc 	beq.w	403ef6 <_malloc_r+0x42e>
  403cfe:	4582      	cmp	sl, r0
  403d00:	f200 80f7 	bhi.w	403ef2 <_malloc_r+0x42a>
  403d04:	4b43      	ldr	r3, [pc, #268]	; (403e14 <_malloc_r+0x34c>)
  403d06:	6819      	ldr	r1, [r3, #0]
  403d08:	4459      	add	r1, fp
  403d0a:	6019      	str	r1, [r3, #0]
  403d0c:	f000 814d 	beq.w	403faa <_malloc_r+0x4e2>
  403d10:	f8d9 0000 	ldr.w	r0, [r9]
  403d14:	3001      	adds	r0, #1
  403d16:	bf1b      	ittet	ne
  403d18:	eba2 0a0a 	subne.w	sl, r2, sl
  403d1c:	4451      	addne	r1, sl
  403d1e:	f8c9 2000 	streq.w	r2, [r9]
  403d22:	6019      	strne	r1, [r3, #0]
  403d24:	f012 0107 	ands.w	r1, r2, #7
  403d28:	f000 8115 	beq.w	403f56 <_malloc_r+0x48e>
  403d2c:	f1c1 0008 	rsb	r0, r1, #8
  403d30:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403d34:	4402      	add	r2, r0
  403d36:	3108      	adds	r1, #8
  403d38:	eb02 090b 	add.w	r9, r2, fp
  403d3c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403d40:	eba1 0909 	sub.w	r9, r1, r9
  403d44:	4649      	mov	r1, r9
  403d46:	4628      	mov	r0, r5
  403d48:	9301      	str	r3, [sp, #4]
  403d4a:	9200      	str	r2, [sp, #0]
  403d4c:	f000 fa60 	bl	404210 <_sbrk_r>
  403d50:	1c43      	adds	r3, r0, #1
  403d52:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403d56:	f000 8143 	beq.w	403fe0 <_malloc_r+0x518>
  403d5a:	1a80      	subs	r0, r0, r2
  403d5c:	4448      	add	r0, r9
  403d5e:	f040 0001 	orr.w	r0, r0, #1
  403d62:	6819      	ldr	r1, [r3, #0]
  403d64:	60ba      	str	r2, [r7, #8]
  403d66:	4449      	add	r1, r9
  403d68:	42bc      	cmp	r4, r7
  403d6a:	6050      	str	r0, [r2, #4]
  403d6c:	6019      	str	r1, [r3, #0]
  403d6e:	d017      	beq.n	403da0 <_malloc_r+0x2d8>
  403d70:	f1b8 0f0f 	cmp.w	r8, #15
  403d74:	f240 80fb 	bls.w	403f6e <_malloc_r+0x4a6>
  403d78:	6860      	ldr	r0, [r4, #4]
  403d7a:	f1a8 020c 	sub.w	r2, r8, #12
  403d7e:	f022 0207 	bic.w	r2, r2, #7
  403d82:	eb04 0e02 	add.w	lr, r4, r2
  403d86:	f000 0001 	and.w	r0, r0, #1
  403d8a:	f04f 0c05 	mov.w	ip, #5
  403d8e:	4310      	orrs	r0, r2
  403d90:	2a0f      	cmp	r2, #15
  403d92:	6060      	str	r0, [r4, #4]
  403d94:	f8ce c004 	str.w	ip, [lr, #4]
  403d98:	f8ce c008 	str.w	ip, [lr, #8]
  403d9c:	f200 8117 	bhi.w	403fce <_malloc_r+0x506>
  403da0:	4b1d      	ldr	r3, [pc, #116]	; (403e18 <_malloc_r+0x350>)
  403da2:	68bc      	ldr	r4, [r7, #8]
  403da4:	681a      	ldr	r2, [r3, #0]
  403da6:	4291      	cmp	r1, r2
  403da8:	bf88      	it	hi
  403daa:	6019      	strhi	r1, [r3, #0]
  403dac:	4b1b      	ldr	r3, [pc, #108]	; (403e1c <_malloc_r+0x354>)
  403dae:	681a      	ldr	r2, [r3, #0]
  403db0:	4291      	cmp	r1, r2
  403db2:	6862      	ldr	r2, [r4, #4]
  403db4:	bf88      	it	hi
  403db6:	6019      	strhi	r1, [r3, #0]
  403db8:	f022 0203 	bic.w	r2, r2, #3
  403dbc:	4296      	cmp	r6, r2
  403dbe:	eba2 0306 	sub.w	r3, r2, r6
  403dc2:	d801      	bhi.n	403dc8 <_malloc_r+0x300>
  403dc4:	2b0f      	cmp	r3, #15
  403dc6:	dc04      	bgt.n	403dd2 <_malloc_r+0x30a>
  403dc8:	4628      	mov	r0, r5
  403dca:	f000 fa1b 	bl	404204 <__malloc_unlock>
  403dce:	2400      	movs	r4, #0
  403dd0:	e740      	b.n	403c54 <_malloc_r+0x18c>
  403dd2:	19a2      	adds	r2, r4, r6
  403dd4:	f043 0301 	orr.w	r3, r3, #1
  403dd8:	f046 0601 	orr.w	r6, r6, #1
  403ddc:	6066      	str	r6, [r4, #4]
  403dde:	4628      	mov	r0, r5
  403de0:	60ba      	str	r2, [r7, #8]
  403de2:	6053      	str	r3, [r2, #4]
  403de4:	f000 fa0e 	bl	404204 <__malloc_unlock>
  403de8:	3408      	adds	r4, #8
  403dea:	4620      	mov	r0, r4
  403dec:	b003      	add	sp, #12
  403dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403df2:	2b14      	cmp	r3, #20
  403df4:	d971      	bls.n	403eda <_malloc_r+0x412>
  403df6:	2b54      	cmp	r3, #84	; 0x54
  403df8:	f200 80a3 	bhi.w	403f42 <_malloc_r+0x47a>
  403dfc:	0b33      	lsrs	r3, r6, #12
  403dfe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403e02:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403e06:	00c3      	lsls	r3, r0, #3
  403e08:	e680      	b.n	403b0c <_malloc_r+0x44>
  403e0a:	bf00      	nop
  403e0c:	20400438 	.word	0x20400438
  403e10:	20400bc8 	.word	0x20400bc8
  403e14:	20400b98 	.word	0x20400b98
  403e18:	20400bc0 	.word	0x20400bc0
  403e1c:	20400bc4 	.word	0x20400bc4
  403e20:	20400440 	.word	0x20400440
  403e24:	20400840 	.word	0x20400840
  403e28:	0a5a      	lsrs	r2, r3, #9
  403e2a:	2a04      	cmp	r2, #4
  403e2c:	d95b      	bls.n	403ee6 <_malloc_r+0x41e>
  403e2e:	2a14      	cmp	r2, #20
  403e30:	f200 80ae 	bhi.w	403f90 <_malloc_r+0x4c8>
  403e34:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403e38:	00c9      	lsls	r1, r1, #3
  403e3a:	325b      	adds	r2, #91	; 0x5b
  403e3c:	eb07 0c01 	add.w	ip, r7, r1
  403e40:	5879      	ldr	r1, [r7, r1]
  403e42:	f1ac 0c08 	sub.w	ip, ip, #8
  403e46:	458c      	cmp	ip, r1
  403e48:	f000 8088 	beq.w	403f5c <_malloc_r+0x494>
  403e4c:	684a      	ldr	r2, [r1, #4]
  403e4e:	f022 0203 	bic.w	r2, r2, #3
  403e52:	4293      	cmp	r3, r2
  403e54:	d273      	bcs.n	403f3e <_malloc_r+0x476>
  403e56:	6889      	ldr	r1, [r1, #8]
  403e58:	458c      	cmp	ip, r1
  403e5a:	d1f7      	bne.n	403e4c <_malloc_r+0x384>
  403e5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403e60:	687b      	ldr	r3, [r7, #4]
  403e62:	60e2      	str	r2, [r4, #12]
  403e64:	f8c4 c008 	str.w	ip, [r4, #8]
  403e68:	6094      	str	r4, [r2, #8]
  403e6a:	f8cc 400c 	str.w	r4, [ip, #12]
  403e6e:	e68f      	b.n	403b90 <_malloc_r+0xc8>
  403e70:	19a1      	adds	r1, r4, r6
  403e72:	f046 0c01 	orr.w	ip, r6, #1
  403e76:	f042 0601 	orr.w	r6, r2, #1
  403e7a:	f8c4 c004 	str.w	ip, [r4, #4]
  403e7e:	4628      	mov	r0, r5
  403e80:	6179      	str	r1, [r7, #20]
  403e82:	6139      	str	r1, [r7, #16]
  403e84:	f8c1 e00c 	str.w	lr, [r1, #12]
  403e88:	f8c1 e008 	str.w	lr, [r1, #8]
  403e8c:	604e      	str	r6, [r1, #4]
  403e8e:	50e2      	str	r2, [r4, r3]
  403e90:	f000 f9b8 	bl	404204 <__malloc_unlock>
  403e94:	3408      	adds	r4, #8
  403e96:	e6dd      	b.n	403c54 <_malloc_r+0x18c>
  403e98:	687b      	ldr	r3, [r7, #4]
  403e9a:	e679      	b.n	403b90 <_malloc_r+0xc8>
  403e9c:	f108 0801 	add.w	r8, r8, #1
  403ea0:	f018 0f03 	tst.w	r8, #3
  403ea4:	f10c 0c08 	add.w	ip, ip, #8
  403ea8:	f47f ae85 	bne.w	403bb6 <_malloc_r+0xee>
  403eac:	e02d      	b.n	403f0a <_malloc_r+0x442>
  403eae:	68dc      	ldr	r4, [r3, #12]
  403eb0:	42a3      	cmp	r3, r4
  403eb2:	bf08      	it	eq
  403eb4:	3002      	addeq	r0, #2
  403eb6:	f43f ae3e 	beq.w	403b36 <_malloc_r+0x6e>
  403eba:	e6bb      	b.n	403c34 <_malloc_r+0x16c>
  403ebc:	4419      	add	r1, r3
  403ebe:	461c      	mov	r4, r3
  403ec0:	684a      	ldr	r2, [r1, #4]
  403ec2:	68db      	ldr	r3, [r3, #12]
  403ec4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403ec8:	f042 0201 	orr.w	r2, r2, #1
  403ecc:	604a      	str	r2, [r1, #4]
  403ece:	4628      	mov	r0, r5
  403ed0:	60f3      	str	r3, [r6, #12]
  403ed2:	609e      	str	r6, [r3, #8]
  403ed4:	f000 f996 	bl	404204 <__malloc_unlock>
  403ed8:	e6bc      	b.n	403c54 <_malloc_r+0x18c>
  403eda:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403ede:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403ee2:	00c3      	lsls	r3, r0, #3
  403ee4:	e612      	b.n	403b0c <_malloc_r+0x44>
  403ee6:	099a      	lsrs	r2, r3, #6
  403ee8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403eec:	00c9      	lsls	r1, r1, #3
  403eee:	3238      	adds	r2, #56	; 0x38
  403ef0:	e7a4      	b.n	403e3c <_malloc_r+0x374>
  403ef2:	42bc      	cmp	r4, r7
  403ef4:	d054      	beq.n	403fa0 <_malloc_r+0x4d8>
  403ef6:	68bc      	ldr	r4, [r7, #8]
  403ef8:	6862      	ldr	r2, [r4, #4]
  403efa:	f022 0203 	bic.w	r2, r2, #3
  403efe:	e75d      	b.n	403dbc <_malloc_r+0x2f4>
  403f00:	f859 3908 	ldr.w	r3, [r9], #-8
  403f04:	4599      	cmp	r9, r3
  403f06:	f040 8086 	bne.w	404016 <_malloc_r+0x54e>
  403f0a:	f010 0f03 	tst.w	r0, #3
  403f0e:	f100 30ff 	add.w	r0, r0, #4294967295
  403f12:	d1f5      	bne.n	403f00 <_malloc_r+0x438>
  403f14:	687b      	ldr	r3, [r7, #4]
  403f16:	ea23 0304 	bic.w	r3, r3, r4
  403f1a:	607b      	str	r3, [r7, #4]
  403f1c:	0064      	lsls	r4, r4, #1
  403f1e:	429c      	cmp	r4, r3
  403f20:	f63f aec7 	bhi.w	403cb2 <_malloc_r+0x1ea>
  403f24:	2c00      	cmp	r4, #0
  403f26:	f43f aec4 	beq.w	403cb2 <_malloc_r+0x1ea>
  403f2a:	421c      	tst	r4, r3
  403f2c:	4640      	mov	r0, r8
  403f2e:	f47f ae3e 	bne.w	403bae <_malloc_r+0xe6>
  403f32:	0064      	lsls	r4, r4, #1
  403f34:	421c      	tst	r4, r3
  403f36:	f100 0004 	add.w	r0, r0, #4
  403f3a:	d0fa      	beq.n	403f32 <_malloc_r+0x46a>
  403f3c:	e637      	b.n	403bae <_malloc_r+0xe6>
  403f3e:	468c      	mov	ip, r1
  403f40:	e78c      	b.n	403e5c <_malloc_r+0x394>
  403f42:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403f46:	d815      	bhi.n	403f74 <_malloc_r+0x4ac>
  403f48:	0bf3      	lsrs	r3, r6, #15
  403f4a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403f4e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403f52:	00c3      	lsls	r3, r0, #3
  403f54:	e5da      	b.n	403b0c <_malloc_r+0x44>
  403f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403f5a:	e6ed      	b.n	403d38 <_malloc_r+0x270>
  403f5c:	687b      	ldr	r3, [r7, #4]
  403f5e:	1092      	asrs	r2, r2, #2
  403f60:	2101      	movs	r1, #1
  403f62:	fa01 f202 	lsl.w	r2, r1, r2
  403f66:	4313      	orrs	r3, r2
  403f68:	607b      	str	r3, [r7, #4]
  403f6a:	4662      	mov	r2, ip
  403f6c:	e779      	b.n	403e62 <_malloc_r+0x39a>
  403f6e:	2301      	movs	r3, #1
  403f70:	6053      	str	r3, [r2, #4]
  403f72:	e729      	b.n	403dc8 <_malloc_r+0x300>
  403f74:	f240 5254 	movw	r2, #1364	; 0x554
  403f78:	4293      	cmp	r3, r2
  403f7a:	d822      	bhi.n	403fc2 <_malloc_r+0x4fa>
  403f7c:	0cb3      	lsrs	r3, r6, #18
  403f7e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403f82:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403f86:	00c3      	lsls	r3, r0, #3
  403f88:	e5c0      	b.n	403b0c <_malloc_r+0x44>
  403f8a:	f103 0b10 	add.w	fp, r3, #16
  403f8e:	e6ae      	b.n	403cee <_malloc_r+0x226>
  403f90:	2a54      	cmp	r2, #84	; 0x54
  403f92:	d829      	bhi.n	403fe8 <_malloc_r+0x520>
  403f94:	0b1a      	lsrs	r2, r3, #12
  403f96:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403f9a:	00c9      	lsls	r1, r1, #3
  403f9c:	326e      	adds	r2, #110	; 0x6e
  403f9e:	e74d      	b.n	403e3c <_malloc_r+0x374>
  403fa0:	4b20      	ldr	r3, [pc, #128]	; (404024 <_malloc_r+0x55c>)
  403fa2:	6819      	ldr	r1, [r3, #0]
  403fa4:	4459      	add	r1, fp
  403fa6:	6019      	str	r1, [r3, #0]
  403fa8:	e6b2      	b.n	403d10 <_malloc_r+0x248>
  403faa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403fae:	2800      	cmp	r0, #0
  403fb0:	f47f aeae 	bne.w	403d10 <_malloc_r+0x248>
  403fb4:	eb08 030b 	add.w	r3, r8, fp
  403fb8:	68ba      	ldr	r2, [r7, #8]
  403fba:	f043 0301 	orr.w	r3, r3, #1
  403fbe:	6053      	str	r3, [r2, #4]
  403fc0:	e6ee      	b.n	403da0 <_malloc_r+0x2d8>
  403fc2:	207f      	movs	r0, #127	; 0x7f
  403fc4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403fc8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403fcc:	e59e      	b.n	403b0c <_malloc_r+0x44>
  403fce:	f104 0108 	add.w	r1, r4, #8
  403fd2:	4628      	mov	r0, r5
  403fd4:	9300      	str	r3, [sp, #0]
  403fd6:	f003 fdeb 	bl	407bb0 <_free_r>
  403fda:	9b00      	ldr	r3, [sp, #0]
  403fdc:	6819      	ldr	r1, [r3, #0]
  403fde:	e6df      	b.n	403da0 <_malloc_r+0x2d8>
  403fe0:	2001      	movs	r0, #1
  403fe2:	f04f 0900 	mov.w	r9, #0
  403fe6:	e6bc      	b.n	403d62 <_malloc_r+0x29a>
  403fe8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403fec:	d805      	bhi.n	403ffa <_malloc_r+0x532>
  403fee:	0bda      	lsrs	r2, r3, #15
  403ff0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403ff4:	00c9      	lsls	r1, r1, #3
  403ff6:	3277      	adds	r2, #119	; 0x77
  403ff8:	e720      	b.n	403e3c <_malloc_r+0x374>
  403ffa:	f240 5154 	movw	r1, #1364	; 0x554
  403ffe:	428a      	cmp	r2, r1
  404000:	d805      	bhi.n	40400e <_malloc_r+0x546>
  404002:	0c9a      	lsrs	r2, r3, #18
  404004:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404008:	00c9      	lsls	r1, r1, #3
  40400a:	327c      	adds	r2, #124	; 0x7c
  40400c:	e716      	b.n	403e3c <_malloc_r+0x374>
  40400e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404012:	227e      	movs	r2, #126	; 0x7e
  404014:	e712      	b.n	403e3c <_malloc_r+0x374>
  404016:	687b      	ldr	r3, [r7, #4]
  404018:	e780      	b.n	403f1c <_malloc_r+0x454>
  40401a:	08f0      	lsrs	r0, r6, #3
  40401c:	f106 0308 	add.w	r3, r6, #8
  404020:	e600      	b.n	403c24 <_malloc_r+0x15c>
  404022:	bf00      	nop
  404024:	20400b98 	.word	0x20400b98

00404028 <memcpy>:
  404028:	4684      	mov	ip, r0
  40402a:	ea41 0300 	orr.w	r3, r1, r0
  40402e:	f013 0303 	ands.w	r3, r3, #3
  404032:	d16d      	bne.n	404110 <memcpy+0xe8>
  404034:	3a40      	subs	r2, #64	; 0x40
  404036:	d341      	bcc.n	4040bc <memcpy+0x94>
  404038:	f851 3b04 	ldr.w	r3, [r1], #4
  40403c:	f840 3b04 	str.w	r3, [r0], #4
  404040:	f851 3b04 	ldr.w	r3, [r1], #4
  404044:	f840 3b04 	str.w	r3, [r0], #4
  404048:	f851 3b04 	ldr.w	r3, [r1], #4
  40404c:	f840 3b04 	str.w	r3, [r0], #4
  404050:	f851 3b04 	ldr.w	r3, [r1], #4
  404054:	f840 3b04 	str.w	r3, [r0], #4
  404058:	f851 3b04 	ldr.w	r3, [r1], #4
  40405c:	f840 3b04 	str.w	r3, [r0], #4
  404060:	f851 3b04 	ldr.w	r3, [r1], #4
  404064:	f840 3b04 	str.w	r3, [r0], #4
  404068:	f851 3b04 	ldr.w	r3, [r1], #4
  40406c:	f840 3b04 	str.w	r3, [r0], #4
  404070:	f851 3b04 	ldr.w	r3, [r1], #4
  404074:	f840 3b04 	str.w	r3, [r0], #4
  404078:	f851 3b04 	ldr.w	r3, [r1], #4
  40407c:	f840 3b04 	str.w	r3, [r0], #4
  404080:	f851 3b04 	ldr.w	r3, [r1], #4
  404084:	f840 3b04 	str.w	r3, [r0], #4
  404088:	f851 3b04 	ldr.w	r3, [r1], #4
  40408c:	f840 3b04 	str.w	r3, [r0], #4
  404090:	f851 3b04 	ldr.w	r3, [r1], #4
  404094:	f840 3b04 	str.w	r3, [r0], #4
  404098:	f851 3b04 	ldr.w	r3, [r1], #4
  40409c:	f840 3b04 	str.w	r3, [r0], #4
  4040a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040a4:	f840 3b04 	str.w	r3, [r0], #4
  4040a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040ac:	f840 3b04 	str.w	r3, [r0], #4
  4040b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040b4:	f840 3b04 	str.w	r3, [r0], #4
  4040b8:	3a40      	subs	r2, #64	; 0x40
  4040ba:	d2bd      	bcs.n	404038 <memcpy+0x10>
  4040bc:	3230      	adds	r2, #48	; 0x30
  4040be:	d311      	bcc.n	4040e4 <memcpy+0xbc>
  4040c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c4:	f840 3b04 	str.w	r3, [r0], #4
  4040c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040cc:	f840 3b04 	str.w	r3, [r0], #4
  4040d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040d4:	f840 3b04 	str.w	r3, [r0], #4
  4040d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040dc:	f840 3b04 	str.w	r3, [r0], #4
  4040e0:	3a10      	subs	r2, #16
  4040e2:	d2ed      	bcs.n	4040c0 <memcpy+0x98>
  4040e4:	320c      	adds	r2, #12
  4040e6:	d305      	bcc.n	4040f4 <memcpy+0xcc>
  4040e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040ec:	f840 3b04 	str.w	r3, [r0], #4
  4040f0:	3a04      	subs	r2, #4
  4040f2:	d2f9      	bcs.n	4040e8 <memcpy+0xc0>
  4040f4:	3204      	adds	r2, #4
  4040f6:	d008      	beq.n	40410a <memcpy+0xe2>
  4040f8:	07d2      	lsls	r2, r2, #31
  4040fa:	bf1c      	itt	ne
  4040fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404100:	f800 3b01 	strbne.w	r3, [r0], #1
  404104:	d301      	bcc.n	40410a <memcpy+0xe2>
  404106:	880b      	ldrh	r3, [r1, #0]
  404108:	8003      	strh	r3, [r0, #0]
  40410a:	4660      	mov	r0, ip
  40410c:	4770      	bx	lr
  40410e:	bf00      	nop
  404110:	2a08      	cmp	r2, #8
  404112:	d313      	bcc.n	40413c <memcpy+0x114>
  404114:	078b      	lsls	r3, r1, #30
  404116:	d08d      	beq.n	404034 <memcpy+0xc>
  404118:	f010 0303 	ands.w	r3, r0, #3
  40411c:	d08a      	beq.n	404034 <memcpy+0xc>
  40411e:	f1c3 0304 	rsb	r3, r3, #4
  404122:	1ad2      	subs	r2, r2, r3
  404124:	07db      	lsls	r3, r3, #31
  404126:	bf1c      	itt	ne
  404128:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40412c:	f800 3b01 	strbne.w	r3, [r0], #1
  404130:	d380      	bcc.n	404034 <memcpy+0xc>
  404132:	f831 3b02 	ldrh.w	r3, [r1], #2
  404136:	f820 3b02 	strh.w	r3, [r0], #2
  40413a:	e77b      	b.n	404034 <memcpy+0xc>
  40413c:	3a04      	subs	r2, #4
  40413e:	d3d9      	bcc.n	4040f4 <memcpy+0xcc>
  404140:	3a01      	subs	r2, #1
  404142:	f811 3b01 	ldrb.w	r3, [r1], #1
  404146:	f800 3b01 	strb.w	r3, [r0], #1
  40414a:	d2f9      	bcs.n	404140 <memcpy+0x118>
  40414c:	780b      	ldrb	r3, [r1, #0]
  40414e:	7003      	strb	r3, [r0, #0]
  404150:	784b      	ldrb	r3, [r1, #1]
  404152:	7043      	strb	r3, [r0, #1]
  404154:	788b      	ldrb	r3, [r1, #2]
  404156:	7083      	strb	r3, [r0, #2]
  404158:	4660      	mov	r0, ip
  40415a:	4770      	bx	lr

0040415c <memset>:
  40415c:	b470      	push	{r4, r5, r6}
  40415e:	0786      	lsls	r6, r0, #30
  404160:	d046      	beq.n	4041f0 <memset+0x94>
  404162:	1e54      	subs	r4, r2, #1
  404164:	2a00      	cmp	r2, #0
  404166:	d041      	beq.n	4041ec <memset+0x90>
  404168:	b2ca      	uxtb	r2, r1
  40416a:	4603      	mov	r3, r0
  40416c:	e002      	b.n	404174 <memset+0x18>
  40416e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404172:	d33b      	bcc.n	4041ec <memset+0x90>
  404174:	f803 2b01 	strb.w	r2, [r3], #1
  404178:	079d      	lsls	r5, r3, #30
  40417a:	d1f8      	bne.n	40416e <memset+0x12>
  40417c:	2c03      	cmp	r4, #3
  40417e:	d92e      	bls.n	4041de <memset+0x82>
  404180:	b2cd      	uxtb	r5, r1
  404182:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404186:	2c0f      	cmp	r4, #15
  404188:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40418c:	d919      	bls.n	4041c2 <memset+0x66>
  40418e:	f103 0210 	add.w	r2, r3, #16
  404192:	4626      	mov	r6, r4
  404194:	3e10      	subs	r6, #16
  404196:	2e0f      	cmp	r6, #15
  404198:	f842 5c10 	str.w	r5, [r2, #-16]
  40419c:	f842 5c0c 	str.w	r5, [r2, #-12]
  4041a0:	f842 5c08 	str.w	r5, [r2, #-8]
  4041a4:	f842 5c04 	str.w	r5, [r2, #-4]
  4041a8:	f102 0210 	add.w	r2, r2, #16
  4041ac:	d8f2      	bhi.n	404194 <memset+0x38>
  4041ae:	f1a4 0210 	sub.w	r2, r4, #16
  4041b2:	f022 020f 	bic.w	r2, r2, #15
  4041b6:	f004 040f 	and.w	r4, r4, #15
  4041ba:	3210      	adds	r2, #16
  4041bc:	2c03      	cmp	r4, #3
  4041be:	4413      	add	r3, r2
  4041c0:	d90d      	bls.n	4041de <memset+0x82>
  4041c2:	461e      	mov	r6, r3
  4041c4:	4622      	mov	r2, r4
  4041c6:	3a04      	subs	r2, #4
  4041c8:	2a03      	cmp	r2, #3
  4041ca:	f846 5b04 	str.w	r5, [r6], #4
  4041ce:	d8fa      	bhi.n	4041c6 <memset+0x6a>
  4041d0:	1f22      	subs	r2, r4, #4
  4041d2:	f022 0203 	bic.w	r2, r2, #3
  4041d6:	3204      	adds	r2, #4
  4041d8:	4413      	add	r3, r2
  4041da:	f004 0403 	and.w	r4, r4, #3
  4041de:	b12c      	cbz	r4, 4041ec <memset+0x90>
  4041e0:	b2c9      	uxtb	r1, r1
  4041e2:	441c      	add	r4, r3
  4041e4:	f803 1b01 	strb.w	r1, [r3], #1
  4041e8:	429c      	cmp	r4, r3
  4041ea:	d1fb      	bne.n	4041e4 <memset+0x88>
  4041ec:	bc70      	pop	{r4, r5, r6}
  4041ee:	4770      	bx	lr
  4041f0:	4614      	mov	r4, r2
  4041f2:	4603      	mov	r3, r0
  4041f4:	e7c2      	b.n	40417c <memset+0x20>
  4041f6:	bf00      	nop

004041f8 <__malloc_lock>:
  4041f8:	4801      	ldr	r0, [pc, #4]	; (404200 <__malloc_lock+0x8>)
  4041fa:	f003 bf81 	b.w	408100 <__retarget_lock_acquire_recursive>
  4041fe:	bf00      	nop
  404200:	20400cf8 	.word	0x20400cf8

00404204 <__malloc_unlock>:
  404204:	4801      	ldr	r0, [pc, #4]	; (40420c <__malloc_unlock+0x8>)
  404206:	f003 bf7d 	b.w	408104 <__retarget_lock_release_recursive>
  40420a:	bf00      	nop
  40420c:	20400cf8 	.word	0x20400cf8

00404210 <_sbrk_r>:
  404210:	b538      	push	{r3, r4, r5, lr}
  404212:	4c07      	ldr	r4, [pc, #28]	; (404230 <_sbrk_r+0x20>)
  404214:	2300      	movs	r3, #0
  404216:	4605      	mov	r5, r0
  404218:	4608      	mov	r0, r1
  40421a:	6023      	str	r3, [r4, #0]
  40421c:	f7fc fefc 	bl	401018 <_sbrk>
  404220:	1c43      	adds	r3, r0, #1
  404222:	d000      	beq.n	404226 <_sbrk_r+0x16>
  404224:	bd38      	pop	{r3, r4, r5, pc}
  404226:	6823      	ldr	r3, [r4, #0]
  404228:	2b00      	cmp	r3, #0
  40422a:	d0fb      	beq.n	404224 <_sbrk_r+0x14>
  40422c:	602b      	str	r3, [r5, #0]
  40422e:	bd38      	pop	{r3, r4, r5, pc}
  404230:	20400d0c 	.word	0x20400d0c

00404234 <setbuf>:
  404234:	2900      	cmp	r1, #0
  404236:	bf0c      	ite	eq
  404238:	2202      	moveq	r2, #2
  40423a:	2200      	movne	r2, #0
  40423c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404240:	f000 b800 	b.w	404244 <setvbuf>

00404244 <setvbuf>:
  404244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404248:	4c61      	ldr	r4, [pc, #388]	; (4043d0 <setvbuf+0x18c>)
  40424a:	6825      	ldr	r5, [r4, #0]
  40424c:	b083      	sub	sp, #12
  40424e:	4604      	mov	r4, r0
  404250:	460f      	mov	r7, r1
  404252:	4690      	mov	r8, r2
  404254:	461e      	mov	r6, r3
  404256:	b115      	cbz	r5, 40425e <setvbuf+0x1a>
  404258:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40425a:	2b00      	cmp	r3, #0
  40425c:	d064      	beq.n	404328 <setvbuf+0xe4>
  40425e:	f1b8 0f02 	cmp.w	r8, #2
  404262:	d006      	beq.n	404272 <setvbuf+0x2e>
  404264:	f1b8 0f01 	cmp.w	r8, #1
  404268:	f200 809f 	bhi.w	4043aa <setvbuf+0x166>
  40426c:	2e00      	cmp	r6, #0
  40426e:	f2c0 809c 	blt.w	4043aa <setvbuf+0x166>
  404272:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404274:	07d8      	lsls	r0, r3, #31
  404276:	d534      	bpl.n	4042e2 <setvbuf+0x9e>
  404278:	4621      	mov	r1, r4
  40427a:	4628      	mov	r0, r5
  40427c:	f003 fb1a 	bl	4078b4 <_fflush_r>
  404280:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404282:	b141      	cbz	r1, 404296 <setvbuf+0x52>
  404284:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404288:	4299      	cmp	r1, r3
  40428a:	d002      	beq.n	404292 <setvbuf+0x4e>
  40428c:	4628      	mov	r0, r5
  40428e:	f003 fc8f 	bl	407bb0 <_free_r>
  404292:	2300      	movs	r3, #0
  404294:	6323      	str	r3, [r4, #48]	; 0x30
  404296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40429a:	2200      	movs	r2, #0
  40429c:	61a2      	str	r2, [r4, #24]
  40429e:	6062      	str	r2, [r4, #4]
  4042a0:	061a      	lsls	r2, r3, #24
  4042a2:	d43a      	bmi.n	40431a <setvbuf+0xd6>
  4042a4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4042a8:	f023 0303 	bic.w	r3, r3, #3
  4042ac:	f1b8 0f02 	cmp.w	r8, #2
  4042b0:	81a3      	strh	r3, [r4, #12]
  4042b2:	d01d      	beq.n	4042f0 <setvbuf+0xac>
  4042b4:	ab01      	add	r3, sp, #4
  4042b6:	466a      	mov	r2, sp
  4042b8:	4621      	mov	r1, r4
  4042ba:	4628      	mov	r0, r5
  4042bc:	f003 ff24 	bl	408108 <__swhatbuf_r>
  4042c0:	89a3      	ldrh	r3, [r4, #12]
  4042c2:	4318      	orrs	r0, r3
  4042c4:	81a0      	strh	r0, [r4, #12]
  4042c6:	2e00      	cmp	r6, #0
  4042c8:	d132      	bne.n	404330 <setvbuf+0xec>
  4042ca:	9e00      	ldr	r6, [sp, #0]
  4042cc:	4630      	mov	r0, r6
  4042ce:	f7ff fbeb 	bl	403aa8 <malloc>
  4042d2:	4607      	mov	r7, r0
  4042d4:	2800      	cmp	r0, #0
  4042d6:	d06b      	beq.n	4043b0 <setvbuf+0x16c>
  4042d8:	89a3      	ldrh	r3, [r4, #12]
  4042da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4042de:	81a3      	strh	r3, [r4, #12]
  4042e0:	e028      	b.n	404334 <setvbuf+0xf0>
  4042e2:	89a3      	ldrh	r3, [r4, #12]
  4042e4:	0599      	lsls	r1, r3, #22
  4042e6:	d4c7      	bmi.n	404278 <setvbuf+0x34>
  4042e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4042ea:	f003 ff09 	bl	408100 <__retarget_lock_acquire_recursive>
  4042ee:	e7c3      	b.n	404278 <setvbuf+0x34>
  4042f0:	2500      	movs	r5, #0
  4042f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4042f4:	2600      	movs	r6, #0
  4042f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4042fa:	f043 0302 	orr.w	r3, r3, #2
  4042fe:	2001      	movs	r0, #1
  404300:	60a6      	str	r6, [r4, #8]
  404302:	07ce      	lsls	r6, r1, #31
  404304:	81a3      	strh	r3, [r4, #12]
  404306:	6022      	str	r2, [r4, #0]
  404308:	6122      	str	r2, [r4, #16]
  40430a:	6160      	str	r0, [r4, #20]
  40430c:	d401      	bmi.n	404312 <setvbuf+0xce>
  40430e:	0598      	lsls	r0, r3, #22
  404310:	d53e      	bpl.n	404390 <setvbuf+0x14c>
  404312:	4628      	mov	r0, r5
  404314:	b003      	add	sp, #12
  404316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40431a:	6921      	ldr	r1, [r4, #16]
  40431c:	4628      	mov	r0, r5
  40431e:	f003 fc47 	bl	407bb0 <_free_r>
  404322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404326:	e7bd      	b.n	4042a4 <setvbuf+0x60>
  404328:	4628      	mov	r0, r5
  40432a:	f003 fb1b 	bl	407964 <__sinit>
  40432e:	e796      	b.n	40425e <setvbuf+0x1a>
  404330:	2f00      	cmp	r7, #0
  404332:	d0cb      	beq.n	4042cc <setvbuf+0x88>
  404334:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404336:	2b00      	cmp	r3, #0
  404338:	d033      	beq.n	4043a2 <setvbuf+0x15e>
  40433a:	9b00      	ldr	r3, [sp, #0]
  40433c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404340:	6027      	str	r7, [r4, #0]
  404342:	429e      	cmp	r6, r3
  404344:	bf1c      	itt	ne
  404346:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40434a:	81a2      	strhne	r2, [r4, #12]
  40434c:	f1b8 0f01 	cmp.w	r8, #1
  404350:	bf04      	itt	eq
  404352:	f042 0201 	orreq.w	r2, r2, #1
  404356:	81a2      	strheq	r2, [r4, #12]
  404358:	b292      	uxth	r2, r2
  40435a:	f012 0308 	ands.w	r3, r2, #8
  40435e:	6127      	str	r7, [r4, #16]
  404360:	6166      	str	r6, [r4, #20]
  404362:	d00e      	beq.n	404382 <setvbuf+0x13e>
  404364:	07d1      	lsls	r1, r2, #31
  404366:	d51a      	bpl.n	40439e <setvbuf+0x15a>
  404368:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40436a:	4276      	negs	r6, r6
  40436c:	2300      	movs	r3, #0
  40436e:	f015 0501 	ands.w	r5, r5, #1
  404372:	61a6      	str	r6, [r4, #24]
  404374:	60a3      	str	r3, [r4, #8]
  404376:	d009      	beq.n	40438c <setvbuf+0x148>
  404378:	2500      	movs	r5, #0
  40437a:	4628      	mov	r0, r5
  40437c:	b003      	add	sp, #12
  40437e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404382:	60a3      	str	r3, [r4, #8]
  404384:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404386:	f015 0501 	ands.w	r5, r5, #1
  40438a:	d1f5      	bne.n	404378 <setvbuf+0x134>
  40438c:	0593      	lsls	r3, r2, #22
  40438e:	d4c0      	bmi.n	404312 <setvbuf+0xce>
  404390:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404392:	f003 feb7 	bl	408104 <__retarget_lock_release_recursive>
  404396:	4628      	mov	r0, r5
  404398:	b003      	add	sp, #12
  40439a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40439e:	60a6      	str	r6, [r4, #8]
  4043a0:	e7f0      	b.n	404384 <setvbuf+0x140>
  4043a2:	4628      	mov	r0, r5
  4043a4:	f003 fade 	bl	407964 <__sinit>
  4043a8:	e7c7      	b.n	40433a <setvbuf+0xf6>
  4043aa:	f04f 35ff 	mov.w	r5, #4294967295
  4043ae:	e7b0      	b.n	404312 <setvbuf+0xce>
  4043b0:	f8dd 9000 	ldr.w	r9, [sp]
  4043b4:	45b1      	cmp	r9, r6
  4043b6:	d004      	beq.n	4043c2 <setvbuf+0x17e>
  4043b8:	4648      	mov	r0, r9
  4043ba:	f7ff fb75 	bl	403aa8 <malloc>
  4043be:	4607      	mov	r7, r0
  4043c0:	b920      	cbnz	r0, 4043cc <setvbuf+0x188>
  4043c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043c6:	f04f 35ff 	mov.w	r5, #4294967295
  4043ca:	e792      	b.n	4042f2 <setvbuf+0xae>
  4043cc:	464e      	mov	r6, r9
  4043ce:	e783      	b.n	4042d8 <setvbuf+0x94>
  4043d0:	2040000c 	.word	0x2040000c

004043d4 <sprintf>:
  4043d4:	b40e      	push	{r1, r2, r3}
  4043d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4043d8:	b09c      	sub	sp, #112	; 0x70
  4043da:	ab21      	add	r3, sp, #132	; 0x84
  4043dc:	490f      	ldr	r1, [pc, #60]	; (40441c <sprintf+0x48>)
  4043de:	f853 2b04 	ldr.w	r2, [r3], #4
  4043e2:	9301      	str	r3, [sp, #4]
  4043e4:	4605      	mov	r5, r0
  4043e6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4043ea:	6808      	ldr	r0, [r1, #0]
  4043ec:	9502      	str	r5, [sp, #8]
  4043ee:	f44f 7702 	mov.w	r7, #520	; 0x208
  4043f2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4043f6:	a902      	add	r1, sp, #8
  4043f8:	9506      	str	r5, [sp, #24]
  4043fa:	f8ad 7014 	strh.w	r7, [sp, #20]
  4043fe:	9404      	str	r4, [sp, #16]
  404400:	9407      	str	r4, [sp, #28]
  404402:	f8ad 6016 	strh.w	r6, [sp, #22]
  404406:	f000 f889 	bl	40451c <_svfprintf_r>
  40440a:	9b02      	ldr	r3, [sp, #8]
  40440c:	2200      	movs	r2, #0
  40440e:	701a      	strb	r2, [r3, #0]
  404410:	b01c      	add	sp, #112	; 0x70
  404412:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404416:	b003      	add	sp, #12
  404418:	4770      	bx	lr
  40441a:	bf00      	nop
  40441c:	2040000c 	.word	0x2040000c
	...

00404440 <strlen>:
  404440:	f890 f000 	pld	[r0]
  404444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404448:	f020 0107 	bic.w	r1, r0, #7
  40444c:	f06f 0c00 	mvn.w	ip, #0
  404450:	f010 0407 	ands.w	r4, r0, #7
  404454:	f891 f020 	pld	[r1, #32]
  404458:	f040 8049 	bne.w	4044ee <strlen+0xae>
  40445c:	f04f 0400 	mov.w	r4, #0
  404460:	f06f 0007 	mvn.w	r0, #7
  404464:	e9d1 2300 	ldrd	r2, r3, [r1]
  404468:	f891 f040 	pld	[r1, #64]	; 0x40
  40446c:	f100 0008 	add.w	r0, r0, #8
  404470:	fa82 f24c 	uadd8	r2, r2, ip
  404474:	faa4 f28c 	sel	r2, r4, ip
  404478:	fa83 f34c 	uadd8	r3, r3, ip
  40447c:	faa2 f38c 	sel	r3, r2, ip
  404480:	bb4b      	cbnz	r3, 4044d6 <strlen+0x96>
  404482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404486:	fa82 f24c 	uadd8	r2, r2, ip
  40448a:	f100 0008 	add.w	r0, r0, #8
  40448e:	faa4 f28c 	sel	r2, r4, ip
  404492:	fa83 f34c 	uadd8	r3, r3, ip
  404496:	faa2 f38c 	sel	r3, r2, ip
  40449a:	b9e3      	cbnz	r3, 4044d6 <strlen+0x96>
  40449c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4044a0:	fa82 f24c 	uadd8	r2, r2, ip
  4044a4:	f100 0008 	add.w	r0, r0, #8
  4044a8:	faa4 f28c 	sel	r2, r4, ip
  4044ac:	fa83 f34c 	uadd8	r3, r3, ip
  4044b0:	faa2 f38c 	sel	r3, r2, ip
  4044b4:	b97b      	cbnz	r3, 4044d6 <strlen+0x96>
  4044b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4044ba:	f101 0120 	add.w	r1, r1, #32
  4044be:	fa82 f24c 	uadd8	r2, r2, ip
  4044c2:	f100 0008 	add.w	r0, r0, #8
  4044c6:	faa4 f28c 	sel	r2, r4, ip
  4044ca:	fa83 f34c 	uadd8	r3, r3, ip
  4044ce:	faa2 f38c 	sel	r3, r2, ip
  4044d2:	2b00      	cmp	r3, #0
  4044d4:	d0c6      	beq.n	404464 <strlen+0x24>
  4044d6:	2a00      	cmp	r2, #0
  4044d8:	bf04      	itt	eq
  4044da:	3004      	addeq	r0, #4
  4044dc:	461a      	moveq	r2, r3
  4044de:	ba12      	rev	r2, r2
  4044e0:	fab2 f282 	clz	r2, r2
  4044e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4044e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4044ec:	4770      	bx	lr
  4044ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4044f2:	f004 0503 	and.w	r5, r4, #3
  4044f6:	f1c4 0000 	rsb	r0, r4, #0
  4044fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4044fe:	f014 0f04 	tst.w	r4, #4
  404502:	f891 f040 	pld	[r1, #64]	; 0x40
  404506:	fa0c f505 	lsl.w	r5, ip, r5
  40450a:	ea62 0205 	orn	r2, r2, r5
  40450e:	bf1c      	itt	ne
  404510:	ea63 0305 	ornne	r3, r3, r5
  404514:	4662      	movne	r2, ip
  404516:	f04f 0400 	mov.w	r4, #0
  40451a:	e7a9      	b.n	404470 <strlen+0x30>

0040451c <_svfprintf_r>:
  40451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404520:	b0c3      	sub	sp, #268	; 0x10c
  404522:	460c      	mov	r4, r1
  404524:	910b      	str	r1, [sp, #44]	; 0x2c
  404526:	4692      	mov	sl, r2
  404528:	930f      	str	r3, [sp, #60]	; 0x3c
  40452a:	900c      	str	r0, [sp, #48]	; 0x30
  40452c:	f003 fdd6 	bl	4080dc <_localeconv_r>
  404530:	6803      	ldr	r3, [r0, #0]
  404532:	931a      	str	r3, [sp, #104]	; 0x68
  404534:	4618      	mov	r0, r3
  404536:	f7ff ff83 	bl	404440 <strlen>
  40453a:	89a3      	ldrh	r3, [r4, #12]
  40453c:	9019      	str	r0, [sp, #100]	; 0x64
  40453e:	0619      	lsls	r1, r3, #24
  404540:	d503      	bpl.n	40454a <_svfprintf_r+0x2e>
  404542:	6923      	ldr	r3, [r4, #16]
  404544:	2b00      	cmp	r3, #0
  404546:	f001 8003 	beq.w	405550 <_svfprintf_r+0x1034>
  40454a:	2300      	movs	r3, #0
  40454c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404550:	9313      	str	r3, [sp, #76]	; 0x4c
  404552:	9315      	str	r3, [sp, #84]	; 0x54
  404554:	9314      	str	r3, [sp, #80]	; 0x50
  404556:	9327      	str	r3, [sp, #156]	; 0x9c
  404558:	9326      	str	r3, [sp, #152]	; 0x98
  40455a:	9318      	str	r3, [sp, #96]	; 0x60
  40455c:	931b      	str	r3, [sp, #108]	; 0x6c
  40455e:	9309      	str	r3, [sp, #36]	; 0x24
  404560:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404564:	46c8      	mov	r8, r9
  404566:	9316      	str	r3, [sp, #88]	; 0x58
  404568:	9317      	str	r3, [sp, #92]	; 0x5c
  40456a:	f89a 3000 	ldrb.w	r3, [sl]
  40456e:	4654      	mov	r4, sl
  404570:	b1e3      	cbz	r3, 4045ac <_svfprintf_r+0x90>
  404572:	2b25      	cmp	r3, #37	; 0x25
  404574:	d102      	bne.n	40457c <_svfprintf_r+0x60>
  404576:	e019      	b.n	4045ac <_svfprintf_r+0x90>
  404578:	2b25      	cmp	r3, #37	; 0x25
  40457a:	d003      	beq.n	404584 <_svfprintf_r+0x68>
  40457c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404580:	2b00      	cmp	r3, #0
  404582:	d1f9      	bne.n	404578 <_svfprintf_r+0x5c>
  404584:	eba4 050a 	sub.w	r5, r4, sl
  404588:	b185      	cbz	r5, 4045ac <_svfprintf_r+0x90>
  40458a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40458c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40458e:	f8c8 a000 	str.w	sl, [r8]
  404592:	3301      	adds	r3, #1
  404594:	442a      	add	r2, r5
  404596:	2b07      	cmp	r3, #7
  404598:	f8c8 5004 	str.w	r5, [r8, #4]
  40459c:	9227      	str	r2, [sp, #156]	; 0x9c
  40459e:	9326      	str	r3, [sp, #152]	; 0x98
  4045a0:	dc7f      	bgt.n	4046a2 <_svfprintf_r+0x186>
  4045a2:	f108 0808 	add.w	r8, r8, #8
  4045a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4045a8:	442b      	add	r3, r5
  4045aa:	9309      	str	r3, [sp, #36]	; 0x24
  4045ac:	7823      	ldrb	r3, [r4, #0]
  4045ae:	2b00      	cmp	r3, #0
  4045b0:	d07f      	beq.n	4046b2 <_svfprintf_r+0x196>
  4045b2:	2300      	movs	r3, #0
  4045b4:	461a      	mov	r2, r3
  4045b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4045ba:	4619      	mov	r1, r3
  4045bc:	930d      	str	r3, [sp, #52]	; 0x34
  4045be:	469b      	mov	fp, r3
  4045c0:	f04f 30ff 	mov.w	r0, #4294967295
  4045c4:	7863      	ldrb	r3, [r4, #1]
  4045c6:	900a      	str	r0, [sp, #40]	; 0x28
  4045c8:	f104 0a01 	add.w	sl, r4, #1
  4045cc:	f10a 0a01 	add.w	sl, sl, #1
  4045d0:	f1a3 0020 	sub.w	r0, r3, #32
  4045d4:	2858      	cmp	r0, #88	; 0x58
  4045d6:	f200 83c1 	bhi.w	404d5c <_svfprintf_r+0x840>
  4045da:	e8df f010 	tbh	[pc, r0, lsl #1]
  4045de:	0238      	.short	0x0238
  4045e0:	03bf03bf 	.word	0x03bf03bf
  4045e4:	03bf0240 	.word	0x03bf0240
  4045e8:	03bf03bf 	.word	0x03bf03bf
  4045ec:	03bf03bf 	.word	0x03bf03bf
  4045f0:	024503bf 	.word	0x024503bf
  4045f4:	03bf0203 	.word	0x03bf0203
  4045f8:	026b005d 	.word	0x026b005d
  4045fc:	028603bf 	.word	0x028603bf
  404600:	039d039d 	.word	0x039d039d
  404604:	039d039d 	.word	0x039d039d
  404608:	039d039d 	.word	0x039d039d
  40460c:	039d039d 	.word	0x039d039d
  404610:	03bf039d 	.word	0x03bf039d
  404614:	03bf03bf 	.word	0x03bf03bf
  404618:	03bf03bf 	.word	0x03bf03bf
  40461c:	03bf03bf 	.word	0x03bf03bf
  404620:	03bf03bf 	.word	0x03bf03bf
  404624:	033703bf 	.word	0x033703bf
  404628:	03bf0357 	.word	0x03bf0357
  40462c:	03bf0357 	.word	0x03bf0357
  404630:	03bf03bf 	.word	0x03bf03bf
  404634:	039803bf 	.word	0x039803bf
  404638:	03bf03bf 	.word	0x03bf03bf
  40463c:	03bf03ad 	.word	0x03bf03ad
  404640:	03bf03bf 	.word	0x03bf03bf
  404644:	03bf03bf 	.word	0x03bf03bf
  404648:	03bf0259 	.word	0x03bf0259
  40464c:	031e03bf 	.word	0x031e03bf
  404650:	03bf03bf 	.word	0x03bf03bf
  404654:	03bf03bf 	.word	0x03bf03bf
  404658:	03bf03bf 	.word	0x03bf03bf
  40465c:	03bf03bf 	.word	0x03bf03bf
  404660:	03bf03bf 	.word	0x03bf03bf
  404664:	02db02c6 	.word	0x02db02c6
  404668:	03570357 	.word	0x03570357
  40466c:	028b0357 	.word	0x028b0357
  404670:	03bf02db 	.word	0x03bf02db
  404674:	029003bf 	.word	0x029003bf
  404678:	029d03bf 	.word	0x029d03bf
  40467c:	02b401cc 	.word	0x02b401cc
  404680:	03bf0208 	.word	0x03bf0208
  404684:	03bf01e1 	.word	0x03bf01e1
  404688:	03bf007e 	.word	0x03bf007e
  40468c:	020d03bf 	.word	0x020d03bf
  404690:	980d      	ldr	r0, [sp, #52]	; 0x34
  404692:	930f      	str	r3, [sp, #60]	; 0x3c
  404694:	4240      	negs	r0, r0
  404696:	900d      	str	r0, [sp, #52]	; 0x34
  404698:	f04b 0b04 	orr.w	fp, fp, #4
  40469c:	f89a 3000 	ldrb.w	r3, [sl]
  4046a0:	e794      	b.n	4045cc <_svfprintf_r+0xb0>
  4046a2:	aa25      	add	r2, sp, #148	; 0x94
  4046a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046a8:	f004 fb5a 	bl	408d60 <__ssprint_r>
  4046ac:	b940      	cbnz	r0, 4046c0 <_svfprintf_r+0x1a4>
  4046ae:	46c8      	mov	r8, r9
  4046b0:	e779      	b.n	4045a6 <_svfprintf_r+0x8a>
  4046b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4046b4:	b123      	cbz	r3, 4046c0 <_svfprintf_r+0x1a4>
  4046b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046ba:	aa25      	add	r2, sp, #148	; 0x94
  4046bc:	f004 fb50 	bl	408d60 <__ssprint_r>
  4046c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4046c2:	899b      	ldrh	r3, [r3, #12]
  4046c4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4046c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4046ca:	bf18      	it	ne
  4046cc:	f04f 33ff 	movne.w	r3, #4294967295
  4046d0:	9309      	str	r3, [sp, #36]	; 0x24
  4046d2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4046d4:	b043      	add	sp, #268	; 0x10c
  4046d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046da:	f01b 0f20 	tst.w	fp, #32
  4046de:	9311      	str	r3, [sp, #68]	; 0x44
  4046e0:	f040 81dd 	bne.w	404a9e <_svfprintf_r+0x582>
  4046e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4046e6:	f01b 0f10 	tst.w	fp, #16
  4046ea:	4613      	mov	r3, r2
  4046ec:	f040 856e 	bne.w	4051cc <_svfprintf_r+0xcb0>
  4046f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4046f4:	f000 856a 	beq.w	4051cc <_svfprintf_r+0xcb0>
  4046f8:	8814      	ldrh	r4, [r2, #0]
  4046fa:	3204      	adds	r2, #4
  4046fc:	2500      	movs	r5, #0
  4046fe:	2301      	movs	r3, #1
  404700:	920f      	str	r2, [sp, #60]	; 0x3c
  404702:	2700      	movs	r7, #0
  404704:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404708:	990a      	ldr	r1, [sp, #40]	; 0x28
  40470a:	1c4a      	adds	r2, r1, #1
  40470c:	f000 8265 	beq.w	404bda <_svfprintf_r+0x6be>
  404710:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404714:	9207      	str	r2, [sp, #28]
  404716:	ea54 0205 	orrs.w	r2, r4, r5
  40471a:	f040 8264 	bne.w	404be6 <_svfprintf_r+0x6ca>
  40471e:	2900      	cmp	r1, #0
  404720:	f040 843c 	bne.w	404f9c <_svfprintf_r+0xa80>
  404724:	2b00      	cmp	r3, #0
  404726:	f040 84d7 	bne.w	4050d8 <_svfprintf_r+0xbbc>
  40472a:	f01b 0301 	ands.w	r3, fp, #1
  40472e:	930e      	str	r3, [sp, #56]	; 0x38
  404730:	f000 8604 	beq.w	40533c <_svfprintf_r+0xe20>
  404734:	ae42      	add	r6, sp, #264	; 0x108
  404736:	2330      	movs	r3, #48	; 0x30
  404738:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40473c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40473e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404740:	4293      	cmp	r3, r2
  404742:	bfb8      	it	lt
  404744:	4613      	movlt	r3, r2
  404746:	9308      	str	r3, [sp, #32]
  404748:	2300      	movs	r3, #0
  40474a:	9312      	str	r3, [sp, #72]	; 0x48
  40474c:	b117      	cbz	r7, 404754 <_svfprintf_r+0x238>
  40474e:	9b08      	ldr	r3, [sp, #32]
  404750:	3301      	adds	r3, #1
  404752:	9308      	str	r3, [sp, #32]
  404754:	9b07      	ldr	r3, [sp, #28]
  404756:	f013 0302 	ands.w	r3, r3, #2
  40475a:	9310      	str	r3, [sp, #64]	; 0x40
  40475c:	d002      	beq.n	404764 <_svfprintf_r+0x248>
  40475e:	9b08      	ldr	r3, [sp, #32]
  404760:	3302      	adds	r3, #2
  404762:	9308      	str	r3, [sp, #32]
  404764:	9b07      	ldr	r3, [sp, #28]
  404766:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40476a:	f040 830e 	bne.w	404d8a <_svfprintf_r+0x86e>
  40476e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404770:	9a08      	ldr	r2, [sp, #32]
  404772:	eba3 0b02 	sub.w	fp, r3, r2
  404776:	f1bb 0f00 	cmp.w	fp, #0
  40477a:	f340 8306 	ble.w	404d8a <_svfprintf_r+0x86e>
  40477e:	f1bb 0f10 	cmp.w	fp, #16
  404782:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404784:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404786:	dd29      	ble.n	4047dc <_svfprintf_r+0x2c0>
  404788:	4643      	mov	r3, r8
  40478a:	4621      	mov	r1, r4
  40478c:	46a8      	mov	r8, r5
  40478e:	2710      	movs	r7, #16
  404790:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404792:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404794:	e006      	b.n	4047a4 <_svfprintf_r+0x288>
  404796:	f1ab 0b10 	sub.w	fp, fp, #16
  40479a:	f1bb 0f10 	cmp.w	fp, #16
  40479e:	f103 0308 	add.w	r3, r3, #8
  4047a2:	dd18      	ble.n	4047d6 <_svfprintf_r+0x2ba>
  4047a4:	3201      	adds	r2, #1
  4047a6:	48b7      	ldr	r0, [pc, #732]	; (404a84 <_svfprintf_r+0x568>)
  4047a8:	9226      	str	r2, [sp, #152]	; 0x98
  4047aa:	3110      	adds	r1, #16
  4047ac:	2a07      	cmp	r2, #7
  4047ae:	9127      	str	r1, [sp, #156]	; 0x9c
  4047b0:	e883 0081 	stmia.w	r3, {r0, r7}
  4047b4:	ddef      	ble.n	404796 <_svfprintf_r+0x27a>
  4047b6:	aa25      	add	r2, sp, #148	; 0x94
  4047b8:	4629      	mov	r1, r5
  4047ba:	4620      	mov	r0, r4
  4047bc:	f004 fad0 	bl	408d60 <__ssprint_r>
  4047c0:	2800      	cmp	r0, #0
  4047c2:	f47f af7d 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4047c6:	f1ab 0b10 	sub.w	fp, fp, #16
  4047ca:	f1bb 0f10 	cmp.w	fp, #16
  4047ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4047d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4047d2:	464b      	mov	r3, r9
  4047d4:	dce6      	bgt.n	4047a4 <_svfprintf_r+0x288>
  4047d6:	4645      	mov	r5, r8
  4047d8:	460c      	mov	r4, r1
  4047da:	4698      	mov	r8, r3
  4047dc:	3201      	adds	r2, #1
  4047de:	4ba9      	ldr	r3, [pc, #676]	; (404a84 <_svfprintf_r+0x568>)
  4047e0:	9226      	str	r2, [sp, #152]	; 0x98
  4047e2:	445c      	add	r4, fp
  4047e4:	2a07      	cmp	r2, #7
  4047e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4047e8:	e888 0808 	stmia.w	r8, {r3, fp}
  4047ec:	f300 8498 	bgt.w	405120 <_svfprintf_r+0xc04>
  4047f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4047f4:	f108 0808 	add.w	r8, r8, #8
  4047f8:	b177      	cbz	r7, 404818 <_svfprintf_r+0x2fc>
  4047fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047fc:	3301      	adds	r3, #1
  4047fe:	3401      	adds	r4, #1
  404800:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404804:	2201      	movs	r2, #1
  404806:	2b07      	cmp	r3, #7
  404808:	9427      	str	r4, [sp, #156]	; 0x9c
  40480a:	9326      	str	r3, [sp, #152]	; 0x98
  40480c:	e888 0006 	stmia.w	r8, {r1, r2}
  404810:	f300 83db 	bgt.w	404fca <_svfprintf_r+0xaae>
  404814:	f108 0808 	add.w	r8, r8, #8
  404818:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40481a:	b16b      	cbz	r3, 404838 <_svfprintf_r+0x31c>
  40481c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40481e:	3301      	adds	r3, #1
  404820:	3402      	adds	r4, #2
  404822:	a91e      	add	r1, sp, #120	; 0x78
  404824:	2202      	movs	r2, #2
  404826:	2b07      	cmp	r3, #7
  404828:	9427      	str	r4, [sp, #156]	; 0x9c
  40482a:	9326      	str	r3, [sp, #152]	; 0x98
  40482c:	e888 0006 	stmia.w	r8, {r1, r2}
  404830:	f300 83d6 	bgt.w	404fe0 <_svfprintf_r+0xac4>
  404834:	f108 0808 	add.w	r8, r8, #8
  404838:	2d80      	cmp	r5, #128	; 0x80
  40483a:	f000 8315 	beq.w	404e68 <_svfprintf_r+0x94c>
  40483e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404842:	1a9f      	subs	r7, r3, r2
  404844:	2f00      	cmp	r7, #0
  404846:	dd36      	ble.n	4048b6 <_svfprintf_r+0x39a>
  404848:	2f10      	cmp	r7, #16
  40484a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40484c:	4d8e      	ldr	r5, [pc, #568]	; (404a88 <_svfprintf_r+0x56c>)
  40484e:	dd27      	ble.n	4048a0 <_svfprintf_r+0x384>
  404850:	4642      	mov	r2, r8
  404852:	4621      	mov	r1, r4
  404854:	46b0      	mov	r8, r6
  404856:	f04f 0b10 	mov.w	fp, #16
  40485a:	462e      	mov	r6, r5
  40485c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40485e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404860:	e004      	b.n	40486c <_svfprintf_r+0x350>
  404862:	3f10      	subs	r7, #16
  404864:	2f10      	cmp	r7, #16
  404866:	f102 0208 	add.w	r2, r2, #8
  40486a:	dd15      	ble.n	404898 <_svfprintf_r+0x37c>
  40486c:	3301      	adds	r3, #1
  40486e:	3110      	adds	r1, #16
  404870:	2b07      	cmp	r3, #7
  404872:	9127      	str	r1, [sp, #156]	; 0x9c
  404874:	9326      	str	r3, [sp, #152]	; 0x98
  404876:	e882 0840 	stmia.w	r2, {r6, fp}
  40487a:	ddf2      	ble.n	404862 <_svfprintf_r+0x346>
  40487c:	aa25      	add	r2, sp, #148	; 0x94
  40487e:	4629      	mov	r1, r5
  404880:	4620      	mov	r0, r4
  404882:	f004 fa6d 	bl	408d60 <__ssprint_r>
  404886:	2800      	cmp	r0, #0
  404888:	f47f af1a 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  40488c:	3f10      	subs	r7, #16
  40488e:	2f10      	cmp	r7, #16
  404890:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404892:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404894:	464a      	mov	r2, r9
  404896:	dce9      	bgt.n	40486c <_svfprintf_r+0x350>
  404898:	4635      	mov	r5, r6
  40489a:	460c      	mov	r4, r1
  40489c:	4646      	mov	r6, r8
  40489e:	4690      	mov	r8, r2
  4048a0:	3301      	adds	r3, #1
  4048a2:	443c      	add	r4, r7
  4048a4:	2b07      	cmp	r3, #7
  4048a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4048a8:	9326      	str	r3, [sp, #152]	; 0x98
  4048aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048ae:	f300 8381 	bgt.w	404fb4 <_svfprintf_r+0xa98>
  4048b2:	f108 0808 	add.w	r8, r8, #8
  4048b6:	9b07      	ldr	r3, [sp, #28]
  4048b8:	05df      	lsls	r7, r3, #23
  4048ba:	f100 8268 	bmi.w	404d8e <_svfprintf_r+0x872>
  4048be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048c0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4048c2:	f8c8 6000 	str.w	r6, [r8]
  4048c6:	3301      	adds	r3, #1
  4048c8:	440c      	add	r4, r1
  4048ca:	2b07      	cmp	r3, #7
  4048cc:	9427      	str	r4, [sp, #156]	; 0x9c
  4048ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4048d2:	9326      	str	r3, [sp, #152]	; 0x98
  4048d4:	f300 834d 	bgt.w	404f72 <_svfprintf_r+0xa56>
  4048d8:	f108 0808 	add.w	r8, r8, #8
  4048dc:	9b07      	ldr	r3, [sp, #28]
  4048de:	075b      	lsls	r3, r3, #29
  4048e0:	d53a      	bpl.n	404958 <_svfprintf_r+0x43c>
  4048e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4048e4:	9a08      	ldr	r2, [sp, #32]
  4048e6:	1a9d      	subs	r5, r3, r2
  4048e8:	2d00      	cmp	r5, #0
  4048ea:	dd35      	ble.n	404958 <_svfprintf_r+0x43c>
  4048ec:	2d10      	cmp	r5, #16
  4048ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048f0:	dd20      	ble.n	404934 <_svfprintf_r+0x418>
  4048f2:	2610      	movs	r6, #16
  4048f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4048f6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4048fa:	e004      	b.n	404906 <_svfprintf_r+0x3ea>
  4048fc:	3d10      	subs	r5, #16
  4048fe:	2d10      	cmp	r5, #16
  404900:	f108 0808 	add.w	r8, r8, #8
  404904:	dd16      	ble.n	404934 <_svfprintf_r+0x418>
  404906:	3301      	adds	r3, #1
  404908:	4a5e      	ldr	r2, [pc, #376]	; (404a84 <_svfprintf_r+0x568>)
  40490a:	9326      	str	r3, [sp, #152]	; 0x98
  40490c:	3410      	adds	r4, #16
  40490e:	2b07      	cmp	r3, #7
  404910:	9427      	str	r4, [sp, #156]	; 0x9c
  404912:	e888 0044 	stmia.w	r8, {r2, r6}
  404916:	ddf1      	ble.n	4048fc <_svfprintf_r+0x3e0>
  404918:	aa25      	add	r2, sp, #148	; 0x94
  40491a:	4659      	mov	r1, fp
  40491c:	4638      	mov	r0, r7
  40491e:	f004 fa1f 	bl	408d60 <__ssprint_r>
  404922:	2800      	cmp	r0, #0
  404924:	f47f aecc 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  404928:	3d10      	subs	r5, #16
  40492a:	2d10      	cmp	r5, #16
  40492c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40492e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404930:	46c8      	mov	r8, r9
  404932:	dce8      	bgt.n	404906 <_svfprintf_r+0x3ea>
  404934:	3301      	adds	r3, #1
  404936:	4a53      	ldr	r2, [pc, #332]	; (404a84 <_svfprintf_r+0x568>)
  404938:	9326      	str	r3, [sp, #152]	; 0x98
  40493a:	442c      	add	r4, r5
  40493c:	2b07      	cmp	r3, #7
  40493e:	9427      	str	r4, [sp, #156]	; 0x9c
  404940:	e888 0024 	stmia.w	r8, {r2, r5}
  404944:	dd08      	ble.n	404958 <_svfprintf_r+0x43c>
  404946:	aa25      	add	r2, sp, #148	; 0x94
  404948:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40494a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40494c:	f004 fa08 	bl	408d60 <__ssprint_r>
  404950:	2800      	cmp	r0, #0
  404952:	f47f aeb5 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  404956:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404958:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40495a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40495c:	9908      	ldr	r1, [sp, #32]
  40495e:	428a      	cmp	r2, r1
  404960:	bfac      	ite	ge
  404962:	189b      	addge	r3, r3, r2
  404964:	185b      	addlt	r3, r3, r1
  404966:	9309      	str	r3, [sp, #36]	; 0x24
  404968:	2c00      	cmp	r4, #0
  40496a:	f040 830d 	bne.w	404f88 <_svfprintf_r+0xa6c>
  40496e:	2300      	movs	r3, #0
  404970:	9326      	str	r3, [sp, #152]	; 0x98
  404972:	46c8      	mov	r8, r9
  404974:	e5f9      	b.n	40456a <_svfprintf_r+0x4e>
  404976:	9311      	str	r3, [sp, #68]	; 0x44
  404978:	f01b 0320 	ands.w	r3, fp, #32
  40497c:	f040 81e3 	bne.w	404d46 <_svfprintf_r+0x82a>
  404980:	f01b 0210 	ands.w	r2, fp, #16
  404984:	f040 842e 	bne.w	4051e4 <_svfprintf_r+0xcc8>
  404988:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40498c:	f000 842a 	beq.w	4051e4 <_svfprintf_r+0xcc8>
  404990:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404992:	4613      	mov	r3, r2
  404994:	460a      	mov	r2, r1
  404996:	3204      	adds	r2, #4
  404998:	880c      	ldrh	r4, [r1, #0]
  40499a:	920f      	str	r2, [sp, #60]	; 0x3c
  40499c:	2500      	movs	r5, #0
  40499e:	e6b0      	b.n	404702 <_svfprintf_r+0x1e6>
  4049a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4049a2:	9311      	str	r3, [sp, #68]	; 0x44
  4049a4:	6816      	ldr	r6, [r2, #0]
  4049a6:	2400      	movs	r4, #0
  4049a8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4049ac:	1d15      	adds	r5, r2, #4
  4049ae:	2e00      	cmp	r6, #0
  4049b0:	f000 86a7 	beq.w	405702 <_svfprintf_r+0x11e6>
  4049b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4049b6:	1c53      	adds	r3, r2, #1
  4049b8:	f000 8609 	beq.w	4055ce <_svfprintf_r+0x10b2>
  4049bc:	4621      	mov	r1, r4
  4049be:	4630      	mov	r0, r6
  4049c0:	f003 fc36 	bl	408230 <memchr>
  4049c4:	2800      	cmp	r0, #0
  4049c6:	f000 86e1 	beq.w	40578c <_svfprintf_r+0x1270>
  4049ca:	1b83      	subs	r3, r0, r6
  4049cc:	930e      	str	r3, [sp, #56]	; 0x38
  4049ce:	940a      	str	r4, [sp, #40]	; 0x28
  4049d0:	950f      	str	r5, [sp, #60]	; 0x3c
  4049d2:	f8cd b01c 	str.w	fp, [sp, #28]
  4049d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4049da:	9308      	str	r3, [sp, #32]
  4049dc:	9412      	str	r4, [sp, #72]	; 0x48
  4049de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4049e2:	e6b3      	b.n	40474c <_svfprintf_r+0x230>
  4049e4:	f89a 3000 	ldrb.w	r3, [sl]
  4049e8:	2201      	movs	r2, #1
  4049ea:	212b      	movs	r1, #43	; 0x2b
  4049ec:	e5ee      	b.n	4045cc <_svfprintf_r+0xb0>
  4049ee:	f04b 0b20 	orr.w	fp, fp, #32
  4049f2:	f89a 3000 	ldrb.w	r3, [sl]
  4049f6:	e5e9      	b.n	4045cc <_svfprintf_r+0xb0>
  4049f8:	9311      	str	r3, [sp, #68]	; 0x44
  4049fa:	2a00      	cmp	r2, #0
  4049fc:	f040 8795 	bne.w	40592a <_svfprintf_r+0x140e>
  404a00:	4b22      	ldr	r3, [pc, #136]	; (404a8c <_svfprintf_r+0x570>)
  404a02:	9318      	str	r3, [sp, #96]	; 0x60
  404a04:	f01b 0f20 	tst.w	fp, #32
  404a08:	f040 8111 	bne.w	404c2e <_svfprintf_r+0x712>
  404a0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a0e:	f01b 0f10 	tst.w	fp, #16
  404a12:	4613      	mov	r3, r2
  404a14:	f040 83e1 	bne.w	4051da <_svfprintf_r+0xcbe>
  404a18:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404a1c:	f000 83dd 	beq.w	4051da <_svfprintf_r+0xcbe>
  404a20:	3304      	adds	r3, #4
  404a22:	8814      	ldrh	r4, [r2, #0]
  404a24:	930f      	str	r3, [sp, #60]	; 0x3c
  404a26:	2500      	movs	r5, #0
  404a28:	f01b 0f01 	tst.w	fp, #1
  404a2c:	f000 810c 	beq.w	404c48 <_svfprintf_r+0x72c>
  404a30:	ea54 0305 	orrs.w	r3, r4, r5
  404a34:	f000 8108 	beq.w	404c48 <_svfprintf_r+0x72c>
  404a38:	2330      	movs	r3, #48	; 0x30
  404a3a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404a3e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404a42:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404a46:	f04b 0b02 	orr.w	fp, fp, #2
  404a4a:	2302      	movs	r3, #2
  404a4c:	e659      	b.n	404702 <_svfprintf_r+0x1e6>
  404a4e:	f89a 3000 	ldrb.w	r3, [sl]
  404a52:	2900      	cmp	r1, #0
  404a54:	f47f adba 	bne.w	4045cc <_svfprintf_r+0xb0>
  404a58:	2201      	movs	r2, #1
  404a5a:	2120      	movs	r1, #32
  404a5c:	e5b6      	b.n	4045cc <_svfprintf_r+0xb0>
  404a5e:	f04b 0b01 	orr.w	fp, fp, #1
  404a62:	f89a 3000 	ldrb.w	r3, [sl]
  404a66:	e5b1      	b.n	4045cc <_svfprintf_r+0xb0>
  404a68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404a6a:	6823      	ldr	r3, [r4, #0]
  404a6c:	930d      	str	r3, [sp, #52]	; 0x34
  404a6e:	4618      	mov	r0, r3
  404a70:	2800      	cmp	r0, #0
  404a72:	4623      	mov	r3, r4
  404a74:	f103 0304 	add.w	r3, r3, #4
  404a78:	f6ff ae0a 	blt.w	404690 <_svfprintf_r+0x174>
  404a7c:	930f      	str	r3, [sp, #60]	; 0x3c
  404a7e:	f89a 3000 	ldrb.w	r3, [sl]
  404a82:	e5a3      	b.n	4045cc <_svfprintf_r+0xb0>
  404a84:	00409fac 	.word	0x00409fac
  404a88:	00409fbc 	.word	0x00409fbc
  404a8c:	00409f8c 	.word	0x00409f8c
  404a90:	f04b 0b10 	orr.w	fp, fp, #16
  404a94:	f01b 0f20 	tst.w	fp, #32
  404a98:	9311      	str	r3, [sp, #68]	; 0x44
  404a9a:	f43f ae23 	beq.w	4046e4 <_svfprintf_r+0x1c8>
  404a9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404aa0:	3507      	adds	r5, #7
  404aa2:	f025 0307 	bic.w	r3, r5, #7
  404aa6:	f103 0208 	add.w	r2, r3, #8
  404aaa:	e9d3 4500 	ldrd	r4, r5, [r3]
  404aae:	920f      	str	r2, [sp, #60]	; 0x3c
  404ab0:	2301      	movs	r3, #1
  404ab2:	e626      	b.n	404702 <_svfprintf_r+0x1e6>
  404ab4:	f89a 3000 	ldrb.w	r3, [sl]
  404ab8:	2b2a      	cmp	r3, #42	; 0x2a
  404aba:	f10a 0401 	add.w	r4, sl, #1
  404abe:	f000 8727 	beq.w	405910 <_svfprintf_r+0x13f4>
  404ac2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ac6:	2809      	cmp	r0, #9
  404ac8:	46a2      	mov	sl, r4
  404aca:	f200 86ad 	bhi.w	405828 <_svfprintf_r+0x130c>
  404ace:	2300      	movs	r3, #0
  404ad0:	461c      	mov	r4, r3
  404ad2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404ad6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404ada:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404ade:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ae2:	2809      	cmp	r0, #9
  404ae4:	d9f5      	bls.n	404ad2 <_svfprintf_r+0x5b6>
  404ae6:	940a      	str	r4, [sp, #40]	; 0x28
  404ae8:	e572      	b.n	4045d0 <_svfprintf_r+0xb4>
  404aea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404aee:	f89a 3000 	ldrb.w	r3, [sl]
  404af2:	e56b      	b.n	4045cc <_svfprintf_r+0xb0>
  404af4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404af8:	f89a 3000 	ldrb.w	r3, [sl]
  404afc:	e566      	b.n	4045cc <_svfprintf_r+0xb0>
  404afe:	f89a 3000 	ldrb.w	r3, [sl]
  404b02:	2b6c      	cmp	r3, #108	; 0x6c
  404b04:	bf03      	ittte	eq
  404b06:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404b0a:	f04b 0b20 	orreq.w	fp, fp, #32
  404b0e:	f10a 0a01 	addeq.w	sl, sl, #1
  404b12:	f04b 0b10 	orrne.w	fp, fp, #16
  404b16:	e559      	b.n	4045cc <_svfprintf_r+0xb0>
  404b18:	2a00      	cmp	r2, #0
  404b1a:	f040 8711 	bne.w	405940 <_svfprintf_r+0x1424>
  404b1e:	f01b 0f20 	tst.w	fp, #32
  404b22:	f040 84f9 	bne.w	405518 <_svfprintf_r+0xffc>
  404b26:	f01b 0f10 	tst.w	fp, #16
  404b2a:	f040 84ac 	bne.w	405486 <_svfprintf_r+0xf6a>
  404b2e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404b32:	f000 84a8 	beq.w	405486 <_svfprintf_r+0xf6a>
  404b36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b38:	6813      	ldr	r3, [r2, #0]
  404b3a:	3204      	adds	r2, #4
  404b3c:	920f      	str	r2, [sp, #60]	; 0x3c
  404b3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404b42:	801a      	strh	r2, [r3, #0]
  404b44:	e511      	b.n	40456a <_svfprintf_r+0x4e>
  404b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404b48:	4bb3      	ldr	r3, [pc, #716]	; (404e18 <_svfprintf_r+0x8fc>)
  404b4a:	680c      	ldr	r4, [r1, #0]
  404b4c:	9318      	str	r3, [sp, #96]	; 0x60
  404b4e:	2230      	movs	r2, #48	; 0x30
  404b50:	2378      	movs	r3, #120	; 0x78
  404b52:	3104      	adds	r1, #4
  404b54:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404b58:	9311      	str	r3, [sp, #68]	; 0x44
  404b5a:	f04b 0b02 	orr.w	fp, fp, #2
  404b5e:	910f      	str	r1, [sp, #60]	; 0x3c
  404b60:	2500      	movs	r5, #0
  404b62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404b66:	2302      	movs	r3, #2
  404b68:	e5cb      	b.n	404702 <_svfprintf_r+0x1e6>
  404b6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404b6c:	9311      	str	r3, [sp, #68]	; 0x44
  404b6e:	680a      	ldr	r2, [r1, #0]
  404b70:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404b74:	2300      	movs	r3, #0
  404b76:	460a      	mov	r2, r1
  404b78:	461f      	mov	r7, r3
  404b7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404b7e:	3204      	adds	r2, #4
  404b80:	2301      	movs	r3, #1
  404b82:	9308      	str	r3, [sp, #32]
  404b84:	f8cd b01c 	str.w	fp, [sp, #28]
  404b88:	970a      	str	r7, [sp, #40]	; 0x28
  404b8a:	9712      	str	r7, [sp, #72]	; 0x48
  404b8c:	920f      	str	r2, [sp, #60]	; 0x3c
  404b8e:	930e      	str	r3, [sp, #56]	; 0x38
  404b90:	ae28      	add	r6, sp, #160	; 0xa0
  404b92:	e5df      	b.n	404754 <_svfprintf_r+0x238>
  404b94:	9311      	str	r3, [sp, #68]	; 0x44
  404b96:	2a00      	cmp	r2, #0
  404b98:	f040 86ea 	bne.w	405970 <_svfprintf_r+0x1454>
  404b9c:	f01b 0f20 	tst.w	fp, #32
  404ba0:	d15d      	bne.n	404c5e <_svfprintf_r+0x742>
  404ba2:	f01b 0f10 	tst.w	fp, #16
  404ba6:	f040 8308 	bne.w	4051ba <_svfprintf_r+0xc9e>
  404baa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404bae:	f000 8304 	beq.w	4051ba <_svfprintf_r+0xc9e>
  404bb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404bb4:	f9b1 4000 	ldrsh.w	r4, [r1]
  404bb8:	3104      	adds	r1, #4
  404bba:	17e5      	asrs	r5, r4, #31
  404bbc:	4622      	mov	r2, r4
  404bbe:	462b      	mov	r3, r5
  404bc0:	910f      	str	r1, [sp, #60]	; 0x3c
  404bc2:	2a00      	cmp	r2, #0
  404bc4:	f173 0300 	sbcs.w	r3, r3, #0
  404bc8:	db58      	blt.n	404c7c <_svfprintf_r+0x760>
  404bca:	990a      	ldr	r1, [sp, #40]	; 0x28
  404bcc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404bd0:	1c4a      	adds	r2, r1, #1
  404bd2:	f04f 0301 	mov.w	r3, #1
  404bd6:	f47f ad9b 	bne.w	404710 <_svfprintf_r+0x1f4>
  404bda:	ea54 0205 	orrs.w	r2, r4, r5
  404bde:	f000 81df 	beq.w	404fa0 <_svfprintf_r+0xa84>
  404be2:	f8cd b01c 	str.w	fp, [sp, #28]
  404be6:	2b01      	cmp	r3, #1
  404be8:	f000 827b 	beq.w	4050e2 <_svfprintf_r+0xbc6>
  404bec:	2b02      	cmp	r3, #2
  404bee:	f040 8206 	bne.w	404ffe <_svfprintf_r+0xae2>
  404bf2:	9818      	ldr	r0, [sp, #96]	; 0x60
  404bf4:	464e      	mov	r6, r9
  404bf6:	0923      	lsrs	r3, r4, #4
  404bf8:	f004 010f 	and.w	r1, r4, #15
  404bfc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404c00:	092a      	lsrs	r2, r5, #4
  404c02:	461c      	mov	r4, r3
  404c04:	4615      	mov	r5, r2
  404c06:	5c43      	ldrb	r3, [r0, r1]
  404c08:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404c0c:	ea54 0305 	orrs.w	r3, r4, r5
  404c10:	d1f1      	bne.n	404bf6 <_svfprintf_r+0x6da>
  404c12:	eba9 0306 	sub.w	r3, r9, r6
  404c16:	930e      	str	r3, [sp, #56]	; 0x38
  404c18:	e590      	b.n	40473c <_svfprintf_r+0x220>
  404c1a:	9311      	str	r3, [sp, #68]	; 0x44
  404c1c:	2a00      	cmp	r2, #0
  404c1e:	f040 86a3 	bne.w	405968 <_svfprintf_r+0x144c>
  404c22:	4b7e      	ldr	r3, [pc, #504]	; (404e1c <_svfprintf_r+0x900>)
  404c24:	9318      	str	r3, [sp, #96]	; 0x60
  404c26:	f01b 0f20 	tst.w	fp, #32
  404c2a:	f43f aeef 	beq.w	404a0c <_svfprintf_r+0x4f0>
  404c2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404c30:	3507      	adds	r5, #7
  404c32:	f025 0307 	bic.w	r3, r5, #7
  404c36:	f103 0208 	add.w	r2, r3, #8
  404c3a:	f01b 0f01 	tst.w	fp, #1
  404c3e:	920f      	str	r2, [sp, #60]	; 0x3c
  404c40:	e9d3 4500 	ldrd	r4, r5, [r3]
  404c44:	f47f aef4 	bne.w	404a30 <_svfprintf_r+0x514>
  404c48:	2302      	movs	r3, #2
  404c4a:	e55a      	b.n	404702 <_svfprintf_r+0x1e6>
  404c4c:	9311      	str	r3, [sp, #68]	; 0x44
  404c4e:	2a00      	cmp	r2, #0
  404c50:	f040 8686 	bne.w	405960 <_svfprintf_r+0x1444>
  404c54:	f04b 0b10 	orr.w	fp, fp, #16
  404c58:	f01b 0f20 	tst.w	fp, #32
  404c5c:	d0a1      	beq.n	404ba2 <_svfprintf_r+0x686>
  404c5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404c60:	3507      	adds	r5, #7
  404c62:	f025 0507 	bic.w	r5, r5, #7
  404c66:	e9d5 2300 	ldrd	r2, r3, [r5]
  404c6a:	2a00      	cmp	r2, #0
  404c6c:	f105 0108 	add.w	r1, r5, #8
  404c70:	461d      	mov	r5, r3
  404c72:	f173 0300 	sbcs.w	r3, r3, #0
  404c76:	910f      	str	r1, [sp, #60]	; 0x3c
  404c78:	4614      	mov	r4, r2
  404c7a:	daa6      	bge.n	404bca <_svfprintf_r+0x6ae>
  404c7c:	272d      	movs	r7, #45	; 0x2d
  404c7e:	4264      	negs	r4, r4
  404c80:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404c84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404c88:	2301      	movs	r3, #1
  404c8a:	e53d      	b.n	404708 <_svfprintf_r+0x1ec>
  404c8c:	9311      	str	r3, [sp, #68]	; 0x44
  404c8e:	2a00      	cmp	r2, #0
  404c90:	f040 8662 	bne.w	405958 <_svfprintf_r+0x143c>
  404c94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404c96:	3507      	adds	r5, #7
  404c98:	f025 0307 	bic.w	r3, r5, #7
  404c9c:	f103 0208 	add.w	r2, r3, #8
  404ca0:	920f      	str	r2, [sp, #60]	; 0x3c
  404ca2:	681a      	ldr	r2, [r3, #0]
  404ca4:	9215      	str	r2, [sp, #84]	; 0x54
  404ca6:	685b      	ldr	r3, [r3, #4]
  404ca8:	9314      	str	r3, [sp, #80]	; 0x50
  404caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404cac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404cae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404cb2:	4628      	mov	r0, r5
  404cb4:	4621      	mov	r1, r4
  404cb6:	f04f 32ff 	mov.w	r2, #4294967295
  404cba:	4b59      	ldr	r3, [pc, #356]	; (404e20 <_svfprintf_r+0x904>)
  404cbc:	f004 ff1e 	bl	409afc <__aeabi_dcmpun>
  404cc0:	2800      	cmp	r0, #0
  404cc2:	f040 834a 	bne.w	40535a <_svfprintf_r+0xe3e>
  404cc6:	4628      	mov	r0, r5
  404cc8:	4621      	mov	r1, r4
  404cca:	f04f 32ff 	mov.w	r2, #4294967295
  404cce:	4b54      	ldr	r3, [pc, #336]	; (404e20 <_svfprintf_r+0x904>)
  404cd0:	f004 fef6 	bl	409ac0 <__aeabi_dcmple>
  404cd4:	2800      	cmp	r0, #0
  404cd6:	f040 8340 	bne.w	40535a <_svfprintf_r+0xe3e>
  404cda:	a815      	add	r0, sp, #84	; 0x54
  404cdc:	c80d      	ldmia	r0, {r0, r2, r3}
  404cde:	9914      	ldr	r1, [sp, #80]	; 0x50
  404ce0:	f004 fee4 	bl	409aac <__aeabi_dcmplt>
  404ce4:	2800      	cmp	r0, #0
  404ce6:	f040 8530 	bne.w	40574a <_svfprintf_r+0x122e>
  404cea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404cee:	4e4d      	ldr	r6, [pc, #308]	; (404e24 <_svfprintf_r+0x908>)
  404cf0:	4b4d      	ldr	r3, [pc, #308]	; (404e28 <_svfprintf_r+0x90c>)
  404cf2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404cf6:	9007      	str	r0, [sp, #28]
  404cf8:	9811      	ldr	r0, [sp, #68]	; 0x44
  404cfa:	2203      	movs	r2, #3
  404cfc:	2100      	movs	r1, #0
  404cfe:	9208      	str	r2, [sp, #32]
  404d00:	910a      	str	r1, [sp, #40]	; 0x28
  404d02:	2847      	cmp	r0, #71	; 0x47
  404d04:	bfd8      	it	le
  404d06:	461e      	movle	r6, r3
  404d08:	920e      	str	r2, [sp, #56]	; 0x38
  404d0a:	9112      	str	r1, [sp, #72]	; 0x48
  404d0c:	e51e      	b.n	40474c <_svfprintf_r+0x230>
  404d0e:	f04b 0b08 	orr.w	fp, fp, #8
  404d12:	f89a 3000 	ldrb.w	r3, [sl]
  404d16:	e459      	b.n	4045cc <_svfprintf_r+0xb0>
  404d18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d1c:	2300      	movs	r3, #0
  404d1e:	461c      	mov	r4, r3
  404d20:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404d24:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404d28:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404d2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d30:	2809      	cmp	r0, #9
  404d32:	d9f5      	bls.n	404d20 <_svfprintf_r+0x804>
  404d34:	940d      	str	r4, [sp, #52]	; 0x34
  404d36:	e44b      	b.n	4045d0 <_svfprintf_r+0xb4>
  404d38:	f04b 0b10 	orr.w	fp, fp, #16
  404d3c:	9311      	str	r3, [sp, #68]	; 0x44
  404d3e:	f01b 0320 	ands.w	r3, fp, #32
  404d42:	f43f ae1d 	beq.w	404980 <_svfprintf_r+0x464>
  404d46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404d48:	3507      	adds	r5, #7
  404d4a:	f025 0307 	bic.w	r3, r5, #7
  404d4e:	f103 0208 	add.w	r2, r3, #8
  404d52:	e9d3 4500 	ldrd	r4, r5, [r3]
  404d56:	920f      	str	r2, [sp, #60]	; 0x3c
  404d58:	2300      	movs	r3, #0
  404d5a:	e4d2      	b.n	404702 <_svfprintf_r+0x1e6>
  404d5c:	9311      	str	r3, [sp, #68]	; 0x44
  404d5e:	2a00      	cmp	r2, #0
  404d60:	f040 85e7 	bne.w	405932 <_svfprintf_r+0x1416>
  404d64:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d66:	2a00      	cmp	r2, #0
  404d68:	f43f aca3 	beq.w	4046b2 <_svfprintf_r+0x196>
  404d6c:	2300      	movs	r3, #0
  404d6e:	2101      	movs	r1, #1
  404d70:	461f      	mov	r7, r3
  404d72:	9108      	str	r1, [sp, #32]
  404d74:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404d78:	f8cd b01c 	str.w	fp, [sp, #28]
  404d7c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404d80:	930a      	str	r3, [sp, #40]	; 0x28
  404d82:	9312      	str	r3, [sp, #72]	; 0x48
  404d84:	910e      	str	r1, [sp, #56]	; 0x38
  404d86:	ae28      	add	r6, sp, #160	; 0xa0
  404d88:	e4e4      	b.n	404754 <_svfprintf_r+0x238>
  404d8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d8c:	e534      	b.n	4047f8 <_svfprintf_r+0x2dc>
  404d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d90:	2b65      	cmp	r3, #101	; 0x65
  404d92:	f340 80a7 	ble.w	404ee4 <_svfprintf_r+0x9c8>
  404d96:	a815      	add	r0, sp, #84	; 0x54
  404d98:	c80d      	ldmia	r0, {r0, r2, r3}
  404d9a:	9914      	ldr	r1, [sp, #80]	; 0x50
  404d9c:	f004 fe7c 	bl	409a98 <__aeabi_dcmpeq>
  404da0:	2800      	cmp	r0, #0
  404da2:	f000 8150 	beq.w	405046 <_svfprintf_r+0xb2a>
  404da6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404da8:	4a20      	ldr	r2, [pc, #128]	; (404e2c <_svfprintf_r+0x910>)
  404daa:	f8c8 2000 	str.w	r2, [r8]
  404dae:	3301      	adds	r3, #1
  404db0:	3401      	adds	r4, #1
  404db2:	2201      	movs	r2, #1
  404db4:	2b07      	cmp	r3, #7
  404db6:	9427      	str	r4, [sp, #156]	; 0x9c
  404db8:	9326      	str	r3, [sp, #152]	; 0x98
  404dba:	f8c8 2004 	str.w	r2, [r8, #4]
  404dbe:	f300 836a 	bgt.w	405496 <_svfprintf_r+0xf7a>
  404dc2:	f108 0808 	add.w	r8, r8, #8
  404dc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404dc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404dca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404dcc:	4293      	cmp	r3, r2
  404dce:	db03      	blt.n	404dd8 <_svfprintf_r+0x8bc>
  404dd0:	9b07      	ldr	r3, [sp, #28]
  404dd2:	07dd      	lsls	r5, r3, #31
  404dd4:	f57f ad82 	bpl.w	4048dc <_svfprintf_r+0x3c0>
  404dd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404dda:	9919      	ldr	r1, [sp, #100]	; 0x64
  404ddc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404dde:	f8c8 2000 	str.w	r2, [r8]
  404de2:	3301      	adds	r3, #1
  404de4:	440c      	add	r4, r1
  404de6:	2b07      	cmp	r3, #7
  404de8:	f8c8 1004 	str.w	r1, [r8, #4]
  404dec:	9427      	str	r4, [sp, #156]	; 0x9c
  404dee:	9326      	str	r3, [sp, #152]	; 0x98
  404df0:	f300 839e 	bgt.w	405530 <_svfprintf_r+0x1014>
  404df4:	f108 0808 	add.w	r8, r8, #8
  404df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404dfa:	1e5e      	subs	r6, r3, #1
  404dfc:	2e00      	cmp	r6, #0
  404dfe:	f77f ad6d 	ble.w	4048dc <_svfprintf_r+0x3c0>
  404e02:	2e10      	cmp	r6, #16
  404e04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e06:	4d0a      	ldr	r5, [pc, #40]	; (404e30 <_svfprintf_r+0x914>)
  404e08:	f340 81f5 	ble.w	4051f6 <_svfprintf_r+0xcda>
  404e0c:	4622      	mov	r2, r4
  404e0e:	2710      	movs	r7, #16
  404e10:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404e14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404e16:	e013      	b.n	404e40 <_svfprintf_r+0x924>
  404e18:	00409f8c 	.word	0x00409f8c
  404e1c:	00409f78 	.word	0x00409f78
  404e20:	7fefffff 	.word	0x7fefffff
  404e24:	00409f6c 	.word	0x00409f6c
  404e28:	00409f68 	.word	0x00409f68
  404e2c:	00409fa8 	.word	0x00409fa8
  404e30:	00409fbc 	.word	0x00409fbc
  404e34:	f108 0808 	add.w	r8, r8, #8
  404e38:	3e10      	subs	r6, #16
  404e3a:	2e10      	cmp	r6, #16
  404e3c:	f340 81da 	ble.w	4051f4 <_svfprintf_r+0xcd8>
  404e40:	3301      	adds	r3, #1
  404e42:	3210      	adds	r2, #16
  404e44:	2b07      	cmp	r3, #7
  404e46:	9227      	str	r2, [sp, #156]	; 0x9c
  404e48:	9326      	str	r3, [sp, #152]	; 0x98
  404e4a:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e4e:	ddf1      	ble.n	404e34 <_svfprintf_r+0x918>
  404e50:	aa25      	add	r2, sp, #148	; 0x94
  404e52:	4621      	mov	r1, r4
  404e54:	4658      	mov	r0, fp
  404e56:	f003 ff83 	bl	408d60 <__ssprint_r>
  404e5a:	2800      	cmp	r0, #0
  404e5c:	f47f ac30 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  404e60:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e64:	46c8      	mov	r8, r9
  404e66:	e7e7      	b.n	404e38 <_svfprintf_r+0x91c>
  404e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e6a:	9a08      	ldr	r2, [sp, #32]
  404e6c:	1a9f      	subs	r7, r3, r2
  404e6e:	2f00      	cmp	r7, #0
  404e70:	f77f ace5 	ble.w	40483e <_svfprintf_r+0x322>
  404e74:	2f10      	cmp	r7, #16
  404e76:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e78:	4db6      	ldr	r5, [pc, #728]	; (405154 <_svfprintf_r+0xc38>)
  404e7a:	dd27      	ble.n	404ecc <_svfprintf_r+0x9b0>
  404e7c:	4642      	mov	r2, r8
  404e7e:	4621      	mov	r1, r4
  404e80:	46b0      	mov	r8, r6
  404e82:	f04f 0b10 	mov.w	fp, #16
  404e86:	462e      	mov	r6, r5
  404e88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404e8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404e8c:	e004      	b.n	404e98 <_svfprintf_r+0x97c>
  404e8e:	3f10      	subs	r7, #16
  404e90:	2f10      	cmp	r7, #16
  404e92:	f102 0208 	add.w	r2, r2, #8
  404e96:	dd15      	ble.n	404ec4 <_svfprintf_r+0x9a8>
  404e98:	3301      	adds	r3, #1
  404e9a:	3110      	adds	r1, #16
  404e9c:	2b07      	cmp	r3, #7
  404e9e:	9127      	str	r1, [sp, #156]	; 0x9c
  404ea0:	9326      	str	r3, [sp, #152]	; 0x98
  404ea2:	e882 0840 	stmia.w	r2, {r6, fp}
  404ea6:	ddf2      	ble.n	404e8e <_svfprintf_r+0x972>
  404ea8:	aa25      	add	r2, sp, #148	; 0x94
  404eaa:	4629      	mov	r1, r5
  404eac:	4620      	mov	r0, r4
  404eae:	f003 ff57 	bl	408d60 <__ssprint_r>
  404eb2:	2800      	cmp	r0, #0
  404eb4:	f47f ac04 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  404eb8:	3f10      	subs	r7, #16
  404eba:	2f10      	cmp	r7, #16
  404ebc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ec0:	464a      	mov	r2, r9
  404ec2:	dce9      	bgt.n	404e98 <_svfprintf_r+0x97c>
  404ec4:	4635      	mov	r5, r6
  404ec6:	460c      	mov	r4, r1
  404ec8:	4646      	mov	r6, r8
  404eca:	4690      	mov	r8, r2
  404ecc:	3301      	adds	r3, #1
  404ece:	443c      	add	r4, r7
  404ed0:	2b07      	cmp	r3, #7
  404ed2:	9427      	str	r4, [sp, #156]	; 0x9c
  404ed4:	9326      	str	r3, [sp, #152]	; 0x98
  404ed6:	e888 00a0 	stmia.w	r8, {r5, r7}
  404eda:	f300 8232 	bgt.w	405342 <_svfprintf_r+0xe26>
  404ede:	f108 0808 	add.w	r8, r8, #8
  404ee2:	e4ac      	b.n	40483e <_svfprintf_r+0x322>
  404ee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ee6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404ee8:	2b01      	cmp	r3, #1
  404eea:	f340 81fe 	ble.w	4052ea <_svfprintf_r+0xdce>
  404eee:	3701      	adds	r7, #1
  404ef0:	3401      	adds	r4, #1
  404ef2:	2301      	movs	r3, #1
  404ef4:	2f07      	cmp	r7, #7
  404ef6:	9427      	str	r4, [sp, #156]	; 0x9c
  404ef8:	9726      	str	r7, [sp, #152]	; 0x98
  404efa:	f8c8 6000 	str.w	r6, [r8]
  404efe:	f8c8 3004 	str.w	r3, [r8, #4]
  404f02:	f300 8203 	bgt.w	40530c <_svfprintf_r+0xdf0>
  404f06:	f108 0808 	add.w	r8, r8, #8
  404f0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404f0e:	f8c8 3000 	str.w	r3, [r8]
  404f12:	3701      	adds	r7, #1
  404f14:	4414      	add	r4, r2
  404f16:	2f07      	cmp	r7, #7
  404f18:	9427      	str	r4, [sp, #156]	; 0x9c
  404f1a:	9726      	str	r7, [sp, #152]	; 0x98
  404f1c:	f8c8 2004 	str.w	r2, [r8, #4]
  404f20:	f300 8200 	bgt.w	405324 <_svfprintf_r+0xe08>
  404f24:	f108 0808 	add.w	r8, r8, #8
  404f28:	a815      	add	r0, sp, #84	; 0x54
  404f2a:	c80d      	ldmia	r0, {r0, r2, r3}
  404f2c:	9914      	ldr	r1, [sp, #80]	; 0x50
  404f2e:	f004 fdb3 	bl	409a98 <__aeabi_dcmpeq>
  404f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f34:	2800      	cmp	r0, #0
  404f36:	f040 8101 	bne.w	40513c <_svfprintf_r+0xc20>
  404f3a:	3b01      	subs	r3, #1
  404f3c:	3701      	adds	r7, #1
  404f3e:	3601      	adds	r6, #1
  404f40:	441c      	add	r4, r3
  404f42:	2f07      	cmp	r7, #7
  404f44:	9726      	str	r7, [sp, #152]	; 0x98
  404f46:	9427      	str	r4, [sp, #156]	; 0x9c
  404f48:	f8c8 6000 	str.w	r6, [r8]
  404f4c:	f8c8 3004 	str.w	r3, [r8, #4]
  404f50:	f300 8127 	bgt.w	4051a2 <_svfprintf_r+0xc86>
  404f54:	f108 0808 	add.w	r8, r8, #8
  404f58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404f5a:	f8c8 2004 	str.w	r2, [r8, #4]
  404f5e:	3701      	adds	r7, #1
  404f60:	4414      	add	r4, r2
  404f62:	ab21      	add	r3, sp, #132	; 0x84
  404f64:	2f07      	cmp	r7, #7
  404f66:	9427      	str	r4, [sp, #156]	; 0x9c
  404f68:	9726      	str	r7, [sp, #152]	; 0x98
  404f6a:	f8c8 3000 	str.w	r3, [r8]
  404f6e:	f77f acb3 	ble.w	4048d8 <_svfprintf_r+0x3bc>
  404f72:	aa25      	add	r2, sp, #148	; 0x94
  404f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f76:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f78:	f003 fef2 	bl	408d60 <__ssprint_r>
  404f7c:	2800      	cmp	r0, #0
  404f7e:	f47f ab9f 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  404f82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f84:	46c8      	mov	r8, r9
  404f86:	e4a9      	b.n	4048dc <_svfprintf_r+0x3c0>
  404f88:	aa25      	add	r2, sp, #148	; 0x94
  404f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f8c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f8e:	f003 fee7 	bl	408d60 <__ssprint_r>
  404f92:	2800      	cmp	r0, #0
  404f94:	f43f aceb 	beq.w	40496e <_svfprintf_r+0x452>
  404f98:	f7ff bb92 	b.w	4046c0 <_svfprintf_r+0x1a4>
  404f9c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404fa0:	2b01      	cmp	r3, #1
  404fa2:	f000 8134 	beq.w	40520e <_svfprintf_r+0xcf2>
  404fa6:	2b02      	cmp	r3, #2
  404fa8:	d125      	bne.n	404ff6 <_svfprintf_r+0xada>
  404faa:	f8cd b01c 	str.w	fp, [sp, #28]
  404fae:	2400      	movs	r4, #0
  404fb0:	2500      	movs	r5, #0
  404fb2:	e61e      	b.n	404bf2 <_svfprintf_r+0x6d6>
  404fb4:	aa25      	add	r2, sp, #148	; 0x94
  404fb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fba:	f003 fed1 	bl	408d60 <__ssprint_r>
  404fbe:	2800      	cmp	r0, #0
  404fc0:	f47f ab7e 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  404fc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fc6:	46c8      	mov	r8, r9
  404fc8:	e475      	b.n	4048b6 <_svfprintf_r+0x39a>
  404fca:	aa25      	add	r2, sp, #148	; 0x94
  404fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fce:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fd0:	f003 fec6 	bl	408d60 <__ssprint_r>
  404fd4:	2800      	cmp	r0, #0
  404fd6:	f47f ab73 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  404fda:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fdc:	46c8      	mov	r8, r9
  404fde:	e41b      	b.n	404818 <_svfprintf_r+0x2fc>
  404fe0:	aa25      	add	r2, sp, #148	; 0x94
  404fe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fe4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fe6:	f003 febb 	bl	408d60 <__ssprint_r>
  404fea:	2800      	cmp	r0, #0
  404fec:	f47f ab68 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  404ff0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ff2:	46c8      	mov	r8, r9
  404ff4:	e420      	b.n	404838 <_svfprintf_r+0x31c>
  404ff6:	f8cd b01c 	str.w	fp, [sp, #28]
  404ffa:	2400      	movs	r4, #0
  404ffc:	2500      	movs	r5, #0
  404ffe:	4649      	mov	r1, r9
  405000:	e000      	b.n	405004 <_svfprintf_r+0xae8>
  405002:	4631      	mov	r1, r6
  405004:	08e2      	lsrs	r2, r4, #3
  405006:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40500a:	08e8      	lsrs	r0, r5, #3
  40500c:	f004 0307 	and.w	r3, r4, #7
  405010:	4605      	mov	r5, r0
  405012:	4614      	mov	r4, r2
  405014:	3330      	adds	r3, #48	; 0x30
  405016:	ea54 0205 	orrs.w	r2, r4, r5
  40501a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40501e:	f101 36ff 	add.w	r6, r1, #4294967295
  405022:	d1ee      	bne.n	405002 <_svfprintf_r+0xae6>
  405024:	9a07      	ldr	r2, [sp, #28]
  405026:	07d2      	lsls	r2, r2, #31
  405028:	f57f adf3 	bpl.w	404c12 <_svfprintf_r+0x6f6>
  40502c:	2b30      	cmp	r3, #48	; 0x30
  40502e:	f43f adf0 	beq.w	404c12 <_svfprintf_r+0x6f6>
  405032:	3902      	subs	r1, #2
  405034:	2330      	movs	r3, #48	; 0x30
  405036:	f806 3c01 	strb.w	r3, [r6, #-1]
  40503a:	eba9 0301 	sub.w	r3, r9, r1
  40503e:	930e      	str	r3, [sp, #56]	; 0x38
  405040:	460e      	mov	r6, r1
  405042:	f7ff bb7b 	b.w	40473c <_svfprintf_r+0x220>
  405046:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405048:	2900      	cmp	r1, #0
  40504a:	f340 822e 	ble.w	4054aa <_svfprintf_r+0xf8e>
  40504e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405052:	4293      	cmp	r3, r2
  405054:	bfa8      	it	ge
  405056:	4613      	movge	r3, r2
  405058:	2b00      	cmp	r3, #0
  40505a:	461f      	mov	r7, r3
  40505c:	dd0d      	ble.n	40507a <_svfprintf_r+0xb5e>
  40505e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405060:	f8c8 6000 	str.w	r6, [r8]
  405064:	3301      	adds	r3, #1
  405066:	443c      	add	r4, r7
  405068:	2b07      	cmp	r3, #7
  40506a:	9427      	str	r4, [sp, #156]	; 0x9c
  40506c:	f8c8 7004 	str.w	r7, [r8, #4]
  405070:	9326      	str	r3, [sp, #152]	; 0x98
  405072:	f300 831f 	bgt.w	4056b4 <_svfprintf_r+0x1198>
  405076:	f108 0808 	add.w	r8, r8, #8
  40507a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40507c:	2f00      	cmp	r7, #0
  40507e:	bfa8      	it	ge
  405080:	1bdb      	subge	r3, r3, r7
  405082:	2b00      	cmp	r3, #0
  405084:	461f      	mov	r7, r3
  405086:	f340 80d6 	ble.w	405236 <_svfprintf_r+0xd1a>
  40508a:	2f10      	cmp	r7, #16
  40508c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40508e:	4d31      	ldr	r5, [pc, #196]	; (405154 <_svfprintf_r+0xc38>)
  405090:	f340 81ed 	ble.w	40546e <_svfprintf_r+0xf52>
  405094:	4642      	mov	r2, r8
  405096:	4621      	mov	r1, r4
  405098:	46b0      	mov	r8, r6
  40509a:	f04f 0b10 	mov.w	fp, #16
  40509e:	462e      	mov	r6, r5
  4050a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4050a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4050a4:	e004      	b.n	4050b0 <_svfprintf_r+0xb94>
  4050a6:	3208      	adds	r2, #8
  4050a8:	3f10      	subs	r7, #16
  4050aa:	2f10      	cmp	r7, #16
  4050ac:	f340 81db 	ble.w	405466 <_svfprintf_r+0xf4a>
  4050b0:	3301      	adds	r3, #1
  4050b2:	3110      	adds	r1, #16
  4050b4:	2b07      	cmp	r3, #7
  4050b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4050b8:	9326      	str	r3, [sp, #152]	; 0x98
  4050ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4050be:	ddf2      	ble.n	4050a6 <_svfprintf_r+0xb8a>
  4050c0:	aa25      	add	r2, sp, #148	; 0x94
  4050c2:	4629      	mov	r1, r5
  4050c4:	4620      	mov	r0, r4
  4050c6:	f003 fe4b 	bl	408d60 <__ssprint_r>
  4050ca:	2800      	cmp	r0, #0
  4050cc:	f47f aaf8 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4050d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4050d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050d4:	464a      	mov	r2, r9
  4050d6:	e7e7      	b.n	4050a8 <_svfprintf_r+0xb8c>
  4050d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050da:	930e      	str	r3, [sp, #56]	; 0x38
  4050dc:	464e      	mov	r6, r9
  4050de:	f7ff bb2d 	b.w	40473c <_svfprintf_r+0x220>
  4050e2:	2d00      	cmp	r5, #0
  4050e4:	bf08      	it	eq
  4050e6:	2c0a      	cmpeq	r4, #10
  4050e8:	f0c0 808f 	bcc.w	40520a <_svfprintf_r+0xcee>
  4050ec:	464e      	mov	r6, r9
  4050ee:	4620      	mov	r0, r4
  4050f0:	4629      	mov	r1, r5
  4050f2:	220a      	movs	r2, #10
  4050f4:	2300      	movs	r3, #0
  4050f6:	f004 fd3f 	bl	409b78 <__aeabi_uldivmod>
  4050fa:	3230      	adds	r2, #48	; 0x30
  4050fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405100:	4620      	mov	r0, r4
  405102:	4629      	mov	r1, r5
  405104:	2300      	movs	r3, #0
  405106:	220a      	movs	r2, #10
  405108:	f004 fd36 	bl	409b78 <__aeabi_uldivmod>
  40510c:	4604      	mov	r4, r0
  40510e:	460d      	mov	r5, r1
  405110:	ea54 0305 	orrs.w	r3, r4, r5
  405114:	d1eb      	bne.n	4050ee <_svfprintf_r+0xbd2>
  405116:	eba9 0306 	sub.w	r3, r9, r6
  40511a:	930e      	str	r3, [sp, #56]	; 0x38
  40511c:	f7ff bb0e 	b.w	40473c <_svfprintf_r+0x220>
  405120:	aa25      	add	r2, sp, #148	; 0x94
  405122:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405124:	980c      	ldr	r0, [sp, #48]	; 0x30
  405126:	f003 fe1b 	bl	408d60 <__ssprint_r>
  40512a:	2800      	cmp	r0, #0
  40512c:	f47f aac8 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  405130:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405134:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405136:	46c8      	mov	r8, r9
  405138:	f7ff bb5e 	b.w	4047f8 <_svfprintf_r+0x2dc>
  40513c:	1e5e      	subs	r6, r3, #1
  40513e:	2e00      	cmp	r6, #0
  405140:	f77f af0a 	ble.w	404f58 <_svfprintf_r+0xa3c>
  405144:	2e10      	cmp	r6, #16
  405146:	4d03      	ldr	r5, [pc, #12]	; (405154 <_svfprintf_r+0xc38>)
  405148:	dd22      	ble.n	405190 <_svfprintf_r+0xc74>
  40514a:	4622      	mov	r2, r4
  40514c:	f04f 0b10 	mov.w	fp, #16
  405150:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405152:	e006      	b.n	405162 <_svfprintf_r+0xc46>
  405154:	00409fbc 	.word	0x00409fbc
  405158:	3e10      	subs	r6, #16
  40515a:	2e10      	cmp	r6, #16
  40515c:	f108 0808 	add.w	r8, r8, #8
  405160:	dd15      	ble.n	40518e <_svfprintf_r+0xc72>
  405162:	3701      	adds	r7, #1
  405164:	3210      	adds	r2, #16
  405166:	2f07      	cmp	r7, #7
  405168:	9227      	str	r2, [sp, #156]	; 0x9c
  40516a:	9726      	str	r7, [sp, #152]	; 0x98
  40516c:	e888 0820 	stmia.w	r8, {r5, fp}
  405170:	ddf2      	ble.n	405158 <_svfprintf_r+0xc3c>
  405172:	aa25      	add	r2, sp, #148	; 0x94
  405174:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405176:	4620      	mov	r0, r4
  405178:	f003 fdf2 	bl	408d60 <__ssprint_r>
  40517c:	2800      	cmp	r0, #0
  40517e:	f47f aa9f 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  405182:	3e10      	subs	r6, #16
  405184:	2e10      	cmp	r6, #16
  405186:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405188:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40518a:	46c8      	mov	r8, r9
  40518c:	dce9      	bgt.n	405162 <_svfprintf_r+0xc46>
  40518e:	4614      	mov	r4, r2
  405190:	3701      	adds	r7, #1
  405192:	4434      	add	r4, r6
  405194:	2f07      	cmp	r7, #7
  405196:	9427      	str	r4, [sp, #156]	; 0x9c
  405198:	9726      	str	r7, [sp, #152]	; 0x98
  40519a:	e888 0060 	stmia.w	r8, {r5, r6}
  40519e:	f77f aed9 	ble.w	404f54 <_svfprintf_r+0xa38>
  4051a2:	aa25      	add	r2, sp, #148	; 0x94
  4051a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051a8:	f003 fdda 	bl	408d60 <__ssprint_r>
  4051ac:	2800      	cmp	r0, #0
  4051ae:	f47f aa87 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4051b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4051b4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4051b6:	46c8      	mov	r8, r9
  4051b8:	e6ce      	b.n	404f58 <_svfprintf_r+0xa3c>
  4051ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4051bc:	6814      	ldr	r4, [r2, #0]
  4051be:	4613      	mov	r3, r2
  4051c0:	3304      	adds	r3, #4
  4051c2:	17e5      	asrs	r5, r4, #31
  4051c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4051c6:	4622      	mov	r2, r4
  4051c8:	462b      	mov	r3, r5
  4051ca:	e4fa      	b.n	404bc2 <_svfprintf_r+0x6a6>
  4051cc:	3204      	adds	r2, #4
  4051ce:	681c      	ldr	r4, [r3, #0]
  4051d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4051d2:	2301      	movs	r3, #1
  4051d4:	2500      	movs	r5, #0
  4051d6:	f7ff ba94 	b.w	404702 <_svfprintf_r+0x1e6>
  4051da:	681c      	ldr	r4, [r3, #0]
  4051dc:	3304      	adds	r3, #4
  4051de:	930f      	str	r3, [sp, #60]	; 0x3c
  4051e0:	2500      	movs	r5, #0
  4051e2:	e421      	b.n	404a28 <_svfprintf_r+0x50c>
  4051e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4051e6:	460a      	mov	r2, r1
  4051e8:	3204      	adds	r2, #4
  4051ea:	680c      	ldr	r4, [r1, #0]
  4051ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4051ee:	2500      	movs	r5, #0
  4051f0:	f7ff ba87 	b.w	404702 <_svfprintf_r+0x1e6>
  4051f4:	4614      	mov	r4, r2
  4051f6:	3301      	adds	r3, #1
  4051f8:	4434      	add	r4, r6
  4051fa:	2b07      	cmp	r3, #7
  4051fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4051fe:	9326      	str	r3, [sp, #152]	; 0x98
  405200:	e888 0060 	stmia.w	r8, {r5, r6}
  405204:	f77f ab68 	ble.w	4048d8 <_svfprintf_r+0x3bc>
  405208:	e6b3      	b.n	404f72 <_svfprintf_r+0xa56>
  40520a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40520e:	f8cd b01c 	str.w	fp, [sp, #28]
  405212:	ae42      	add	r6, sp, #264	; 0x108
  405214:	3430      	adds	r4, #48	; 0x30
  405216:	2301      	movs	r3, #1
  405218:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40521c:	930e      	str	r3, [sp, #56]	; 0x38
  40521e:	f7ff ba8d 	b.w	40473c <_svfprintf_r+0x220>
  405222:	aa25      	add	r2, sp, #148	; 0x94
  405224:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405226:	980c      	ldr	r0, [sp, #48]	; 0x30
  405228:	f003 fd9a 	bl	408d60 <__ssprint_r>
  40522c:	2800      	cmp	r0, #0
  40522e:	f47f aa47 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  405232:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405234:	46c8      	mov	r8, r9
  405236:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40523a:	429a      	cmp	r2, r3
  40523c:	db44      	blt.n	4052c8 <_svfprintf_r+0xdac>
  40523e:	9b07      	ldr	r3, [sp, #28]
  405240:	07d9      	lsls	r1, r3, #31
  405242:	d441      	bmi.n	4052c8 <_svfprintf_r+0xdac>
  405244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405246:	9812      	ldr	r0, [sp, #72]	; 0x48
  405248:	1a9a      	subs	r2, r3, r2
  40524a:	1a1d      	subs	r5, r3, r0
  40524c:	4295      	cmp	r5, r2
  40524e:	bfa8      	it	ge
  405250:	4615      	movge	r5, r2
  405252:	2d00      	cmp	r5, #0
  405254:	dd0e      	ble.n	405274 <_svfprintf_r+0xd58>
  405256:	9926      	ldr	r1, [sp, #152]	; 0x98
  405258:	f8c8 5004 	str.w	r5, [r8, #4]
  40525c:	3101      	adds	r1, #1
  40525e:	4406      	add	r6, r0
  405260:	442c      	add	r4, r5
  405262:	2907      	cmp	r1, #7
  405264:	f8c8 6000 	str.w	r6, [r8]
  405268:	9427      	str	r4, [sp, #156]	; 0x9c
  40526a:	9126      	str	r1, [sp, #152]	; 0x98
  40526c:	f300 823b 	bgt.w	4056e6 <_svfprintf_r+0x11ca>
  405270:	f108 0808 	add.w	r8, r8, #8
  405274:	2d00      	cmp	r5, #0
  405276:	bfac      	ite	ge
  405278:	1b56      	subge	r6, r2, r5
  40527a:	4616      	movlt	r6, r2
  40527c:	2e00      	cmp	r6, #0
  40527e:	f77f ab2d 	ble.w	4048dc <_svfprintf_r+0x3c0>
  405282:	2e10      	cmp	r6, #16
  405284:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405286:	4db0      	ldr	r5, [pc, #704]	; (405548 <_svfprintf_r+0x102c>)
  405288:	ddb5      	ble.n	4051f6 <_svfprintf_r+0xcda>
  40528a:	4622      	mov	r2, r4
  40528c:	2710      	movs	r7, #16
  40528e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405292:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405294:	e004      	b.n	4052a0 <_svfprintf_r+0xd84>
  405296:	f108 0808 	add.w	r8, r8, #8
  40529a:	3e10      	subs	r6, #16
  40529c:	2e10      	cmp	r6, #16
  40529e:	dda9      	ble.n	4051f4 <_svfprintf_r+0xcd8>
  4052a0:	3301      	adds	r3, #1
  4052a2:	3210      	adds	r2, #16
  4052a4:	2b07      	cmp	r3, #7
  4052a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4052a8:	9326      	str	r3, [sp, #152]	; 0x98
  4052aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4052ae:	ddf2      	ble.n	405296 <_svfprintf_r+0xd7a>
  4052b0:	aa25      	add	r2, sp, #148	; 0x94
  4052b2:	4621      	mov	r1, r4
  4052b4:	4658      	mov	r0, fp
  4052b6:	f003 fd53 	bl	408d60 <__ssprint_r>
  4052ba:	2800      	cmp	r0, #0
  4052bc:	f47f aa00 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4052c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4052c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052c4:	46c8      	mov	r8, r9
  4052c6:	e7e8      	b.n	40529a <_svfprintf_r+0xd7e>
  4052c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052ca:	9819      	ldr	r0, [sp, #100]	; 0x64
  4052cc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4052ce:	f8c8 1000 	str.w	r1, [r8]
  4052d2:	3301      	adds	r3, #1
  4052d4:	4404      	add	r4, r0
  4052d6:	2b07      	cmp	r3, #7
  4052d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4052da:	f8c8 0004 	str.w	r0, [r8, #4]
  4052de:	9326      	str	r3, [sp, #152]	; 0x98
  4052e0:	f300 81f5 	bgt.w	4056ce <_svfprintf_r+0x11b2>
  4052e4:	f108 0808 	add.w	r8, r8, #8
  4052e8:	e7ac      	b.n	405244 <_svfprintf_r+0xd28>
  4052ea:	9b07      	ldr	r3, [sp, #28]
  4052ec:	07da      	lsls	r2, r3, #31
  4052ee:	f53f adfe 	bmi.w	404eee <_svfprintf_r+0x9d2>
  4052f2:	3701      	adds	r7, #1
  4052f4:	3401      	adds	r4, #1
  4052f6:	2301      	movs	r3, #1
  4052f8:	2f07      	cmp	r7, #7
  4052fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4052fc:	9726      	str	r7, [sp, #152]	; 0x98
  4052fe:	f8c8 6000 	str.w	r6, [r8]
  405302:	f8c8 3004 	str.w	r3, [r8, #4]
  405306:	f77f ae25 	ble.w	404f54 <_svfprintf_r+0xa38>
  40530a:	e74a      	b.n	4051a2 <_svfprintf_r+0xc86>
  40530c:	aa25      	add	r2, sp, #148	; 0x94
  40530e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405310:	980c      	ldr	r0, [sp, #48]	; 0x30
  405312:	f003 fd25 	bl	408d60 <__ssprint_r>
  405316:	2800      	cmp	r0, #0
  405318:	f47f a9d2 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  40531c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40531e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405320:	46c8      	mov	r8, r9
  405322:	e5f2      	b.n	404f0a <_svfprintf_r+0x9ee>
  405324:	aa25      	add	r2, sp, #148	; 0x94
  405326:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405328:	980c      	ldr	r0, [sp, #48]	; 0x30
  40532a:	f003 fd19 	bl	408d60 <__ssprint_r>
  40532e:	2800      	cmp	r0, #0
  405330:	f47f a9c6 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  405334:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405336:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405338:	46c8      	mov	r8, r9
  40533a:	e5f5      	b.n	404f28 <_svfprintf_r+0xa0c>
  40533c:	464e      	mov	r6, r9
  40533e:	f7ff b9fd 	b.w	40473c <_svfprintf_r+0x220>
  405342:	aa25      	add	r2, sp, #148	; 0x94
  405344:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405346:	980c      	ldr	r0, [sp, #48]	; 0x30
  405348:	f003 fd0a 	bl	408d60 <__ssprint_r>
  40534c:	2800      	cmp	r0, #0
  40534e:	f47f a9b7 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  405352:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405354:	46c8      	mov	r8, r9
  405356:	f7ff ba72 	b.w	40483e <_svfprintf_r+0x322>
  40535a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40535c:	4622      	mov	r2, r4
  40535e:	4620      	mov	r0, r4
  405360:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405362:	4623      	mov	r3, r4
  405364:	4621      	mov	r1, r4
  405366:	f004 fbc9 	bl	409afc <__aeabi_dcmpun>
  40536a:	2800      	cmp	r0, #0
  40536c:	f040 8286 	bne.w	40587c <_svfprintf_r+0x1360>
  405370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405372:	3301      	adds	r3, #1
  405374:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405376:	f023 0320 	bic.w	r3, r3, #32
  40537a:	930e      	str	r3, [sp, #56]	; 0x38
  40537c:	f000 81e2 	beq.w	405744 <_svfprintf_r+0x1228>
  405380:	2b47      	cmp	r3, #71	; 0x47
  405382:	f000 811e 	beq.w	4055c2 <_svfprintf_r+0x10a6>
  405386:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40538a:	9307      	str	r3, [sp, #28]
  40538c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40538e:	1e1f      	subs	r7, r3, #0
  405390:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405392:	9308      	str	r3, [sp, #32]
  405394:	bfbb      	ittet	lt
  405396:	463b      	movlt	r3, r7
  405398:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40539c:	2300      	movge	r3, #0
  40539e:	232d      	movlt	r3, #45	; 0x2d
  4053a0:	9310      	str	r3, [sp, #64]	; 0x40
  4053a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053a4:	2b66      	cmp	r3, #102	; 0x66
  4053a6:	f000 81bb 	beq.w	405720 <_svfprintf_r+0x1204>
  4053aa:	2b46      	cmp	r3, #70	; 0x46
  4053ac:	f000 80df 	beq.w	40556e <_svfprintf_r+0x1052>
  4053b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4053b2:	9a08      	ldr	r2, [sp, #32]
  4053b4:	2b45      	cmp	r3, #69	; 0x45
  4053b6:	bf0c      	ite	eq
  4053b8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4053ba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4053bc:	a823      	add	r0, sp, #140	; 0x8c
  4053be:	a920      	add	r1, sp, #128	; 0x80
  4053c0:	bf08      	it	eq
  4053c2:	1c5d      	addeq	r5, r3, #1
  4053c4:	9004      	str	r0, [sp, #16]
  4053c6:	9103      	str	r1, [sp, #12]
  4053c8:	a81f      	add	r0, sp, #124	; 0x7c
  4053ca:	2102      	movs	r1, #2
  4053cc:	463b      	mov	r3, r7
  4053ce:	9002      	str	r0, [sp, #8]
  4053d0:	9501      	str	r5, [sp, #4]
  4053d2:	9100      	str	r1, [sp, #0]
  4053d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053d6:	f001 faa3 	bl	406920 <_dtoa_r>
  4053da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053dc:	2b67      	cmp	r3, #103	; 0x67
  4053de:	4606      	mov	r6, r0
  4053e0:	f040 81e0 	bne.w	4057a4 <_svfprintf_r+0x1288>
  4053e4:	f01b 0f01 	tst.w	fp, #1
  4053e8:	f000 8246 	beq.w	405878 <_svfprintf_r+0x135c>
  4053ec:	1974      	adds	r4, r6, r5
  4053ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4053f0:	9808      	ldr	r0, [sp, #32]
  4053f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4053f4:	4639      	mov	r1, r7
  4053f6:	f004 fb4f 	bl	409a98 <__aeabi_dcmpeq>
  4053fa:	2800      	cmp	r0, #0
  4053fc:	f040 8165 	bne.w	4056ca <_svfprintf_r+0x11ae>
  405400:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405402:	42a3      	cmp	r3, r4
  405404:	d206      	bcs.n	405414 <_svfprintf_r+0xef8>
  405406:	2130      	movs	r1, #48	; 0x30
  405408:	1c5a      	adds	r2, r3, #1
  40540a:	9223      	str	r2, [sp, #140]	; 0x8c
  40540c:	7019      	strb	r1, [r3, #0]
  40540e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405410:	429c      	cmp	r4, r3
  405412:	d8f9      	bhi.n	405408 <_svfprintf_r+0xeec>
  405414:	1b9b      	subs	r3, r3, r6
  405416:	9313      	str	r3, [sp, #76]	; 0x4c
  405418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40541a:	2b47      	cmp	r3, #71	; 0x47
  40541c:	f000 80e9 	beq.w	4055f2 <_svfprintf_r+0x10d6>
  405420:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405422:	2b65      	cmp	r3, #101	; 0x65
  405424:	f340 81cd 	ble.w	4057c2 <_svfprintf_r+0x12a6>
  405428:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40542a:	2b66      	cmp	r3, #102	; 0x66
  40542c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40542e:	9312      	str	r3, [sp, #72]	; 0x48
  405430:	f000 819e 	beq.w	405770 <_svfprintf_r+0x1254>
  405434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405436:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405438:	4619      	mov	r1, r3
  40543a:	4291      	cmp	r1, r2
  40543c:	f300 818a 	bgt.w	405754 <_svfprintf_r+0x1238>
  405440:	f01b 0f01 	tst.w	fp, #1
  405444:	f040 8213 	bne.w	40586e <_svfprintf_r+0x1352>
  405448:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40544c:	9308      	str	r3, [sp, #32]
  40544e:	2367      	movs	r3, #103	; 0x67
  405450:	920e      	str	r2, [sp, #56]	; 0x38
  405452:	9311      	str	r3, [sp, #68]	; 0x44
  405454:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405456:	2b00      	cmp	r3, #0
  405458:	f040 80c4 	bne.w	4055e4 <_svfprintf_r+0x10c8>
  40545c:	930a      	str	r3, [sp, #40]	; 0x28
  40545e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405462:	f7ff b973 	b.w	40474c <_svfprintf_r+0x230>
  405466:	4635      	mov	r5, r6
  405468:	460c      	mov	r4, r1
  40546a:	4646      	mov	r6, r8
  40546c:	4690      	mov	r8, r2
  40546e:	3301      	adds	r3, #1
  405470:	443c      	add	r4, r7
  405472:	2b07      	cmp	r3, #7
  405474:	9427      	str	r4, [sp, #156]	; 0x9c
  405476:	9326      	str	r3, [sp, #152]	; 0x98
  405478:	e888 00a0 	stmia.w	r8, {r5, r7}
  40547c:	f73f aed1 	bgt.w	405222 <_svfprintf_r+0xd06>
  405480:	f108 0808 	add.w	r8, r8, #8
  405484:	e6d7      	b.n	405236 <_svfprintf_r+0xd1a>
  405486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405488:	6813      	ldr	r3, [r2, #0]
  40548a:	3204      	adds	r2, #4
  40548c:	920f      	str	r2, [sp, #60]	; 0x3c
  40548e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405490:	601a      	str	r2, [r3, #0]
  405492:	f7ff b86a 	b.w	40456a <_svfprintf_r+0x4e>
  405496:	aa25      	add	r2, sp, #148	; 0x94
  405498:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40549a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40549c:	f003 fc60 	bl	408d60 <__ssprint_r>
  4054a0:	2800      	cmp	r0, #0
  4054a2:	f47f a90d 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4054a6:	46c8      	mov	r8, r9
  4054a8:	e48d      	b.n	404dc6 <_svfprintf_r+0x8aa>
  4054aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054ac:	4a27      	ldr	r2, [pc, #156]	; (40554c <_svfprintf_r+0x1030>)
  4054ae:	f8c8 2000 	str.w	r2, [r8]
  4054b2:	3301      	adds	r3, #1
  4054b4:	3401      	adds	r4, #1
  4054b6:	2201      	movs	r2, #1
  4054b8:	2b07      	cmp	r3, #7
  4054ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4054bc:	9326      	str	r3, [sp, #152]	; 0x98
  4054be:	f8c8 2004 	str.w	r2, [r8, #4]
  4054c2:	dc72      	bgt.n	4055aa <_svfprintf_r+0x108e>
  4054c4:	f108 0808 	add.w	r8, r8, #8
  4054c8:	b929      	cbnz	r1, 4054d6 <_svfprintf_r+0xfba>
  4054ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4054cc:	b91b      	cbnz	r3, 4054d6 <_svfprintf_r+0xfba>
  4054ce:	9b07      	ldr	r3, [sp, #28]
  4054d0:	07d8      	lsls	r0, r3, #31
  4054d2:	f57f aa03 	bpl.w	4048dc <_svfprintf_r+0x3c0>
  4054d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054d8:	9819      	ldr	r0, [sp, #100]	; 0x64
  4054da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4054dc:	f8c8 2000 	str.w	r2, [r8]
  4054e0:	3301      	adds	r3, #1
  4054e2:	4602      	mov	r2, r0
  4054e4:	4422      	add	r2, r4
  4054e6:	2b07      	cmp	r3, #7
  4054e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4054ea:	f8c8 0004 	str.w	r0, [r8, #4]
  4054ee:	9326      	str	r3, [sp, #152]	; 0x98
  4054f0:	f300 818d 	bgt.w	40580e <_svfprintf_r+0x12f2>
  4054f4:	f108 0808 	add.w	r8, r8, #8
  4054f8:	2900      	cmp	r1, #0
  4054fa:	f2c0 8165 	blt.w	4057c8 <_svfprintf_r+0x12ac>
  4054fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405500:	f8c8 6000 	str.w	r6, [r8]
  405504:	3301      	adds	r3, #1
  405506:	188c      	adds	r4, r1, r2
  405508:	2b07      	cmp	r3, #7
  40550a:	9427      	str	r4, [sp, #156]	; 0x9c
  40550c:	9326      	str	r3, [sp, #152]	; 0x98
  40550e:	f8c8 1004 	str.w	r1, [r8, #4]
  405512:	f77f a9e1 	ble.w	4048d8 <_svfprintf_r+0x3bc>
  405516:	e52c      	b.n	404f72 <_svfprintf_r+0xa56>
  405518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40551a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40551c:	6813      	ldr	r3, [r2, #0]
  40551e:	17cd      	asrs	r5, r1, #31
  405520:	4608      	mov	r0, r1
  405522:	3204      	adds	r2, #4
  405524:	4629      	mov	r1, r5
  405526:	920f      	str	r2, [sp, #60]	; 0x3c
  405528:	e9c3 0100 	strd	r0, r1, [r3]
  40552c:	f7ff b81d 	b.w	40456a <_svfprintf_r+0x4e>
  405530:	aa25      	add	r2, sp, #148	; 0x94
  405532:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405534:	980c      	ldr	r0, [sp, #48]	; 0x30
  405536:	f003 fc13 	bl	408d60 <__ssprint_r>
  40553a:	2800      	cmp	r0, #0
  40553c:	f47f a8c0 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  405540:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405542:	46c8      	mov	r8, r9
  405544:	e458      	b.n	404df8 <_svfprintf_r+0x8dc>
  405546:	bf00      	nop
  405548:	00409fbc 	.word	0x00409fbc
  40554c:	00409fa8 	.word	0x00409fa8
  405550:	2140      	movs	r1, #64	; 0x40
  405552:	980c      	ldr	r0, [sp, #48]	; 0x30
  405554:	f7fe fab8 	bl	403ac8 <_malloc_r>
  405558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40555a:	6010      	str	r0, [r2, #0]
  40555c:	6110      	str	r0, [r2, #16]
  40555e:	2800      	cmp	r0, #0
  405560:	f000 81f2 	beq.w	405948 <_svfprintf_r+0x142c>
  405564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405566:	2340      	movs	r3, #64	; 0x40
  405568:	6153      	str	r3, [r2, #20]
  40556a:	f7fe bfee 	b.w	40454a <_svfprintf_r+0x2e>
  40556e:	a823      	add	r0, sp, #140	; 0x8c
  405570:	a920      	add	r1, sp, #128	; 0x80
  405572:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405574:	9004      	str	r0, [sp, #16]
  405576:	9103      	str	r1, [sp, #12]
  405578:	a81f      	add	r0, sp, #124	; 0x7c
  40557a:	2103      	movs	r1, #3
  40557c:	9002      	str	r0, [sp, #8]
  40557e:	9a08      	ldr	r2, [sp, #32]
  405580:	9401      	str	r4, [sp, #4]
  405582:	463b      	mov	r3, r7
  405584:	9100      	str	r1, [sp, #0]
  405586:	980c      	ldr	r0, [sp, #48]	; 0x30
  405588:	f001 f9ca 	bl	406920 <_dtoa_r>
  40558c:	4625      	mov	r5, r4
  40558e:	4606      	mov	r6, r0
  405590:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405592:	2b46      	cmp	r3, #70	; 0x46
  405594:	eb06 0405 	add.w	r4, r6, r5
  405598:	f47f af29 	bne.w	4053ee <_svfprintf_r+0xed2>
  40559c:	7833      	ldrb	r3, [r6, #0]
  40559e:	2b30      	cmp	r3, #48	; 0x30
  4055a0:	f000 8178 	beq.w	405894 <_svfprintf_r+0x1378>
  4055a4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4055a6:	442c      	add	r4, r5
  4055a8:	e721      	b.n	4053ee <_svfprintf_r+0xed2>
  4055aa:	aa25      	add	r2, sp, #148	; 0x94
  4055ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055b0:	f003 fbd6 	bl	408d60 <__ssprint_r>
  4055b4:	2800      	cmp	r0, #0
  4055b6:	f47f a883 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4055ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4055bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055be:	46c8      	mov	r8, r9
  4055c0:	e782      	b.n	4054c8 <_svfprintf_r+0xfac>
  4055c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055c4:	2b00      	cmp	r3, #0
  4055c6:	bf08      	it	eq
  4055c8:	2301      	moveq	r3, #1
  4055ca:	930a      	str	r3, [sp, #40]	; 0x28
  4055cc:	e6db      	b.n	405386 <_svfprintf_r+0xe6a>
  4055ce:	4630      	mov	r0, r6
  4055d0:	940a      	str	r4, [sp, #40]	; 0x28
  4055d2:	f7fe ff35 	bl	404440 <strlen>
  4055d6:	950f      	str	r5, [sp, #60]	; 0x3c
  4055d8:	900e      	str	r0, [sp, #56]	; 0x38
  4055da:	f8cd b01c 	str.w	fp, [sp, #28]
  4055de:	4603      	mov	r3, r0
  4055e0:	f7ff b9f9 	b.w	4049d6 <_svfprintf_r+0x4ba>
  4055e4:	272d      	movs	r7, #45	; 0x2d
  4055e6:	2300      	movs	r3, #0
  4055e8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4055ec:	930a      	str	r3, [sp, #40]	; 0x28
  4055ee:	f7ff b8ae 	b.w	40474e <_svfprintf_r+0x232>
  4055f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4055f4:	9312      	str	r3, [sp, #72]	; 0x48
  4055f6:	461a      	mov	r2, r3
  4055f8:	3303      	adds	r3, #3
  4055fa:	db04      	blt.n	405606 <_svfprintf_r+0x10ea>
  4055fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055fe:	4619      	mov	r1, r3
  405600:	4291      	cmp	r1, r2
  405602:	f6bf af17 	bge.w	405434 <_svfprintf_r+0xf18>
  405606:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405608:	3b02      	subs	r3, #2
  40560a:	9311      	str	r3, [sp, #68]	; 0x44
  40560c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405610:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405614:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405616:	3b01      	subs	r3, #1
  405618:	2b00      	cmp	r3, #0
  40561a:	931f      	str	r3, [sp, #124]	; 0x7c
  40561c:	bfbd      	ittte	lt
  40561e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405620:	f1c3 0301 	rsblt	r3, r3, #1
  405624:	222d      	movlt	r2, #45	; 0x2d
  405626:	222b      	movge	r2, #43	; 0x2b
  405628:	2b09      	cmp	r3, #9
  40562a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40562e:	f340 8116 	ble.w	40585e <_svfprintf_r+0x1342>
  405632:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405636:	4620      	mov	r0, r4
  405638:	4dab      	ldr	r5, [pc, #684]	; (4058e8 <_svfprintf_r+0x13cc>)
  40563a:	e000      	b.n	40563e <_svfprintf_r+0x1122>
  40563c:	4610      	mov	r0, r2
  40563e:	fb85 1203 	smull	r1, r2, r5, r3
  405642:	17d9      	asrs	r1, r3, #31
  405644:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405648:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40564c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405650:	3230      	adds	r2, #48	; 0x30
  405652:	2909      	cmp	r1, #9
  405654:	f800 2c01 	strb.w	r2, [r0, #-1]
  405658:	460b      	mov	r3, r1
  40565a:	f100 32ff 	add.w	r2, r0, #4294967295
  40565e:	dced      	bgt.n	40563c <_svfprintf_r+0x1120>
  405660:	3330      	adds	r3, #48	; 0x30
  405662:	3802      	subs	r0, #2
  405664:	b2d9      	uxtb	r1, r3
  405666:	4284      	cmp	r4, r0
  405668:	f802 1c01 	strb.w	r1, [r2, #-1]
  40566c:	f240 8165 	bls.w	40593a <_svfprintf_r+0x141e>
  405670:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405674:	4613      	mov	r3, r2
  405676:	e001      	b.n	40567c <_svfprintf_r+0x1160>
  405678:	f813 1b01 	ldrb.w	r1, [r3], #1
  40567c:	f800 1b01 	strb.w	r1, [r0], #1
  405680:	42a3      	cmp	r3, r4
  405682:	d1f9      	bne.n	405678 <_svfprintf_r+0x115c>
  405684:	3301      	adds	r3, #1
  405686:	1a9b      	subs	r3, r3, r2
  405688:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40568c:	4413      	add	r3, r2
  40568e:	aa21      	add	r2, sp, #132	; 0x84
  405690:	1a9b      	subs	r3, r3, r2
  405692:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405694:	931b      	str	r3, [sp, #108]	; 0x6c
  405696:	2a01      	cmp	r2, #1
  405698:	4413      	add	r3, r2
  40569a:	930e      	str	r3, [sp, #56]	; 0x38
  40569c:	f340 8119 	ble.w	4058d2 <_svfprintf_r+0x13b6>
  4056a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4056a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4056a4:	4413      	add	r3, r2
  4056a6:	930e      	str	r3, [sp, #56]	; 0x38
  4056a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4056ac:	9308      	str	r3, [sp, #32]
  4056ae:	2300      	movs	r3, #0
  4056b0:	9312      	str	r3, [sp, #72]	; 0x48
  4056b2:	e6cf      	b.n	405454 <_svfprintf_r+0xf38>
  4056b4:	aa25      	add	r2, sp, #148	; 0x94
  4056b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056ba:	f003 fb51 	bl	408d60 <__ssprint_r>
  4056be:	2800      	cmp	r0, #0
  4056c0:	f47e affe 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4056c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056c6:	46c8      	mov	r8, r9
  4056c8:	e4d7      	b.n	40507a <_svfprintf_r+0xb5e>
  4056ca:	4623      	mov	r3, r4
  4056cc:	e6a2      	b.n	405414 <_svfprintf_r+0xef8>
  4056ce:	aa25      	add	r2, sp, #148	; 0x94
  4056d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056d4:	f003 fb44 	bl	408d60 <__ssprint_r>
  4056d8:	2800      	cmp	r0, #0
  4056da:	f47e aff1 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4056de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4056e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056e2:	46c8      	mov	r8, r9
  4056e4:	e5ae      	b.n	405244 <_svfprintf_r+0xd28>
  4056e6:	aa25      	add	r2, sp, #148	; 0x94
  4056e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056ec:	f003 fb38 	bl	408d60 <__ssprint_r>
  4056f0:	2800      	cmp	r0, #0
  4056f2:	f47e afe5 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  4056f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4056f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4056fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056fc:	1a9a      	subs	r2, r3, r2
  4056fe:	46c8      	mov	r8, r9
  405700:	e5b8      	b.n	405274 <_svfprintf_r+0xd58>
  405702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405704:	9612      	str	r6, [sp, #72]	; 0x48
  405706:	2b06      	cmp	r3, #6
  405708:	bf28      	it	cs
  40570a:	2306      	movcs	r3, #6
  40570c:	960a      	str	r6, [sp, #40]	; 0x28
  40570e:	4637      	mov	r7, r6
  405710:	9308      	str	r3, [sp, #32]
  405712:	950f      	str	r5, [sp, #60]	; 0x3c
  405714:	f8cd b01c 	str.w	fp, [sp, #28]
  405718:	930e      	str	r3, [sp, #56]	; 0x38
  40571a:	4e74      	ldr	r6, [pc, #464]	; (4058ec <_svfprintf_r+0x13d0>)
  40571c:	f7ff b816 	b.w	40474c <_svfprintf_r+0x230>
  405720:	a823      	add	r0, sp, #140	; 0x8c
  405722:	a920      	add	r1, sp, #128	; 0x80
  405724:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405726:	9004      	str	r0, [sp, #16]
  405728:	9103      	str	r1, [sp, #12]
  40572a:	a81f      	add	r0, sp, #124	; 0x7c
  40572c:	2103      	movs	r1, #3
  40572e:	9002      	str	r0, [sp, #8]
  405730:	9a08      	ldr	r2, [sp, #32]
  405732:	9501      	str	r5, [sp, #4]
  405734:	463b      	mov	r3, r7
  405736:	9100      	str	r1, [sp, #0]
  405738:	980c      	ldr	r0, [sp, #48]	; 0x30
  40573a:	f001 f8f1 	bl	406920 <_dtoa_r>
  40573e:	4606      	mov	r6, r0
  405740:	1944      	adds	r4, r0, r5
  405742:	e72b      	b.n	40559c <_svfprintf_r+0x1080>
  405744:	2306      	movs	r3, #6
  405746:	930a      	str	r3, [sp, #40]	; 0x28
  405748:	e61d      	b.n	405386 <_svfprintf_r+0xe6a>
  40574a:	272d      	movs	r7, #45	; 0x2d
  40574c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405750:	f7ff bacd 	b.w	404cee <_svfprintf_r+0x7d2>
  405754:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405756:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405758:	4413      	add	r3, r2
  40575a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40575c:	930e      	str	r3, [sp, #56]	; 0x38
  40575e:	2a00      	cmp	r2, #0
  405760:	f340 80b0 	ble.w	4058c4 <_svfprintf_r+0x13a8>
  405764:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405768:	9308      	str	r3, [sp, #32]
  40576a:	2367      	movs	r3, #103	; 0x67
  40576c:	9311      	str	r3, [sp, #68]	; 0x44
  40576e:	e671      	b.n	405454 <_svfprintf_r+0xf38>
  405770:	2b00      	cmp	r3, #0
  405772:	f340 80c3 	ble.w	4058fc <_svfprintf_r+0x13e0>
  405776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405778:	2a00      	cmp	r2, #0
  40577a:	f040 8099 	bne.w	4058b0 <_svfprintf_r+0x1394>
  40577e:	f01b 0f01 	tst.w	fp, #1
  405782:	f040 8095 	bne.w	4058b0 <_svfprintf_r+0x1394>
  405786:	9308      	str	r3, [sp, #32]
  405788:	930e      	str	r3, [sp, #56]	; 0x38
  40578a:	e663      	b.n	405454 <_svfprintf_r+0xf38>
  40578c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40578e:	9308      	str	r3, [sp, #32]
  405790:	930e      	str	r3, [sp, #56]	; 0x38
  405792:	900a      	str	r0, [sp, #40]	; 0x28
  405794:	950f      	str	r5, [sp, #60]	; 0x3c
  405796:	f8cd b01c 	str.w	fp, [sp, #28]
  40579a:	9012      	str	r0, [sp, #72]	; 0x48
  40579c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4057a0:	f7fe bfd4 	b.w	40474c <_svfprintf_r+0x230>
  4057a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057a6:	2b47      	cmp	r3, #71	; 0x47
  4057a8:	f47f ae20 	bne.w	4053ec <_svfprintf_r+0xed0>
  4057ac:	f01b 0f01 	tst.w	fp, #1
  4057b0:	f47f aeee 	bne.w	405590 <_svfprintf_r+0x1074>
  4057b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4057b6:	1b9b      	subs	r3, r3, r6
  4057b8:	9313      	str	r3, [sp, #76]	; 0x4c
  4057ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4057bc:	2b47      	cmp	r3, #71	; 0x47
  4057be:	f43f af18 	beq.w	4055f2 <_svfprintf_r+0x10d6>
  4057c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4057c4:	9312      	str	r3, [sp, #72]	; 0x48
  4057c6:	e721      	b.n	40560c <_svfprintf_r+0x10f0>
  4057c8:	424f      	negs	r7, r1
  4057ca:	3110      	adds	r1, #16
  4057cc:	4d48      	ldr	r5, [pc, #288]	; (4058f0 <_svfprintf_r+0x13d4>)
  4057ce:	da2f      	bge.n	405830 <_svfprintf_r+0x1314>
  4057d0:	2410      	movs	r4, #16
  4057d2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4057d6:	e004      	b.n	4057e2 <_svfprintf_r+0x12c6>
  4057d8:	f108 0808 	add.w	r8, r8, #8
  4057dc:	3f10      	subs	r7, #16
  4057de:	2f10      	cmp	r7, #16
  4057e0:	dd26      	ble.n	405830 <_svfprintf_r+0x1314>
  4057e2:	3301      	adds	r3, #1
  4057e4:	3210      	adds	r2, #16
  4057e6:	2b07      	cmp	r3, #7
  4057e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4057ea:	9326      	str	r3, [sp, #152]	; 0x98
  4057ec:	f8c8 5000 	str.w	r5, [r8]
  4057f0:	f8c8 4004 	str.w	r4, [r8, #4]
  4057f4:	ddf0      	ble.n	4057d8 <_svfprintf_r+0x12bc>
  4057f6:	aa25      	add	r2, sp, #148	; 0x94
  4057f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057fa:	4658      	mov	r0, fp
  4057fc:	f003 fab0 	bl	408d60 <__ssprint_r>
  405800:	2800      	cmp	r0, #0
  405802:	f47e af5d 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  405806:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405808:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40580a:	46c8      	mov	r8, r9
  40580c:	e7e6      	b.n	4057dc <_svfprintf_r+0x12c0>
  40580e:	aa25      	add	r2, sp, #148	; 0x94
  405810:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405812:	980c      	ldr	r0, [sp, #48]	; 0x30
  405814:	f003 faa4 	bl	408d60 <__ssprint_r>
  405818:	2800      	cmp	r0, #0
  40581a:	f47e af51 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  40581e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405820:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405822:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405824:	46c8      	mov	r8, r9
  405826:	e667      	b.n	4054f8 <_svfprintf_r+0xfdc>
  405828:	2000      	movs	r0, #0
  40582a:	900a      	str	r0, [sp, #40]	; 0x28
  40582c:	f7fe bed0 	b.w	4045d0 <_svfprintf_r+0xb4>
  405830:	3301      	adds	r3, #1
  405832:	443a      	add	r2, r7
  405834:	2b07      	cmp	r3, #7
  405836:	e888 00a0 	stmia.w	r8, {r5, r7}
  40583a:	9227      	str	r2, [sp, #156]	; 0x9c
  40583c:	9326      	str	r3, [sp, #152]	; 0x98
  40583e:	f108 0808 	add.w	r8, r8, #8
  405842:	f77f ae5c 	ble.w	4054fe <_svfprintf_r+0xfe2>
  405846:	aa25      	add	r2, sp, #148	; 0x94
  405848:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40584a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40584c:	f003 fa88 	bl	408d60 <__ssprint_r>
  405850:	2800      	cmp	r0, #0
  405852:	f47e af35 	bne.w	4046c0 <_svfprintf_r+0x1a4>
  405856:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405858:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40585a:	46c8      	mov	r8, r9
  40585c:	e64f      	b.n	4054fe <_svfprintf_r+0xfe2>
  40585e:	3330      	adds	r3, #48	; 0x30
  405860:	2230      	movs	r2, #48	; 0x30
  405862:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405866:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40586a:	ab22      	add	r3, sp, #136	; 0x88
  40586c:	e70f      	b.n	40568e <_svfprintf_r+0x1172>
  40586e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405870:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405872:	4413      	add	r3, r2
  405874:	930e      	str	r3, [sp, #56]	; 0x38
  405876:	e775      	b.n	405764 <_svfprintf_r+0x1248>
  405878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40587a:	e5cb      	b.n	405414 <_svfprintf_r+0xef8>
  40587c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40587e:	4e1d      	ldr	r6, [pc, #116]	; (4058f4 <_svfprintf_r+0x13d8>)
  405880:	2b00      	cmp	r3, #0
  405882:	bfb6      	itet	lt
  405884:	272d      	movlt	r7, #45	; 0x2d
  405886:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40588a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40588e:	4b1a      	ldr	r3, [pc, #104]	; (4058f8 <_svfprintf_r+0x13dc>)
  405890:	f7ff ba2f 	b.w	404cf2 <_svfprintf_r+0x7d6>
  405894:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405896:	9808      	ldr	r0, [sp, #32]
  405898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40589a:	4639      	mov	r1, r7
  40589c:	f004 f8fc 	bl	409a98 <__aeabi_dcmpeq>
  4058a0:	2800      	cmp	r0, #0
  4058a2:	f47f ae7f 	bne.w	4055a4 <_svfprintf_r+0x1088>
  4058a6:	f1c5 0501 	rsb	r5, r5, #1
  4058aa:	951f      	str	r5, [sp, #124]	; 0x7c
  4058ac:	442c      	add	r4, r5
  4058ae:	e59e      	b.n	4053ee <_svfprintf_r+0xed2>
  4058b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4058b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4058b4:	4413      	add	r3, r2
  4058b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4058b8:	441a      	add	r2, r3
  4058ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4058be:	920e      	str	r2, [sp, #56]	; 0x38
  4058c0:	9308      	str	r3, [sp, #32]
  4058c2:	e5c7      	b.n	405454 <_svfprintf_r+0xf38>
  4058c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4058c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4058c8:	f1c3 0301 	rsb	r3, r3, #1
  4058cc:	441a      	add	r2, r3
  4058ce:	4613      	mov	r3, r2
  4058d0:	e7d0      	b.n	405874 <_svfprintf_r+0x1358>
  4058d2:	f01b 0301 	ands.w	r3, fp, #1
  4058d6:	9312      	str	r3, [sp, #72]	; 0x48
  4058d8:	f47f aee2 	bne.w	4056a0 <_svfprintf_r+0x1184>
  4058dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4058de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4058e2:	9308      	str	r3, [sp, #32]
  4058e4:	e5b6      	b.n	405454 <_svfprintf_r+0xf38>
  4058e6:	bf00      	nop
  4058e8:	66666667 	.word	0x66666667
  4058ec:	00409fa0 	.word	0x00409fa0
  4058f0:	00409fbc 	.word	0x00409fbc
  4058f4:	00409f74 	.word	0x00409f74
  4058f8:	00409f70 	.word	0x00409f70
  4058fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058fe:	b913      	cbnz	r3, 405906 <_svfprintf_r+0x13ea>
  405900:	f01b 0f01 	tst.w	fp, #1
  405904:	d002      	beq.n	40590c <_svfprintf_r+0x13f0>
  405906:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405908:	3301      	adds	r3, #1
  40590a:	e7d4      	b.n	4058b6 <_svfprintf_r+0x139a>
  40590c:	2301      	movs	r3, #1
  40590e:	e73a      	b.n	405786 <_svfprintf_r+0x126a>
  405910:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405912:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405916:	6828      	ldr	r0, [r5, #0]
  405918:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40591c:	900a      	str	r0, [sp, #40]	; 0x28
  40591e:	4628      	mov	r0, r5
  405920:	3004      	adds	r0, #4
  405922:	46a2      	mov	sl, r4
  405924:	900f      	str	r0, [sp, #60]	; 0x3c
  405926:	f7fe be51 	b.w	4045cc <_svfprintf_r+0xb0>
  40592a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40592e:	f7ff b867 	b.w	404a00 <_svfprintf_r+0x4e4>
  405932:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405936:	f7ff ba15 	b.w	404d64 <_svfprintf_r+0x848>
  40593a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40593e:	e6a6      	b.n	40568e <_svfprintf_r+0x1172>
  405940:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405944:	f7ff b8eb 	b.w	404b1e <_svfprintf_r+0x602>
  405948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40594a:	230c      	movs	r3, #12
  40594c:	6013      	str	r3, [r2, #0]
  40594e:	f04f 33ff 	mov.w	r3, #4294967295
  405952:	9309      	str	r3, [sp, #36]	; 0x24
  405954:	f7fe bebd 	b.w	4046d2 <_svfprintf_r+0x1b6>
  405958:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40595c:	f7ff b99a 	b.w	404c94 <_svfprintf_r+0x778>
  405960:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405964:	f7ff b976 	b.w	404c54 <_svfprintf_r+0x738>
  405968:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40596c:	f7ff b959 	b.w	404c22 <_svfprintf_r+0x706>
  405970:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405974:	f7ff b912 	b.w	404b9c <_svfprintf_r+0x680>

00405978 <__sprint_r.part.0>:
  405978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40597c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40597e:	049c      	lsls	r4, r3, #18
  405980:	4693      	mov	fp, r2
  405982:	d52f      	bpl.n	4059e4 <__sprint_r.part.0+0x6c>
  405984:	6893      	ldr	r3, [r2, #8]
  405986:	6812      	ldr	r2, [r2, #0]
  405988:	b353      	cbz	r3, 4059e0 <__sprint_r.part.0+0x68>
  40598a:	460e      	mov	r6, r1
  40598c:	4607      	mov	r7, r0
  40598e:	f102 0908 	add.w	r9, r2, #8
  405992:	e919 0420 	ldmdb	r9, {r5, sl}
  405996:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40599a:	d017      	beq.n	4059cc <__sprint_r.part.0+0x54>
  40599c:	3d04      	subs	r5, #4
  40599e:	2400      	movs	r4, #0
  4059a0:	e001      	b.n	4059a6 <__sprint_r.part.0+0x2e>
  4059a2:	45a0      	cmp	r8, r4
  4059a4:	d010      	beq.n	4059c8 <__sprint_r.part.0+0x50>
  4059a6:	4632      	mov	r2, r6
  4059a8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4059ac:	4638      	mov	r0, r7
  4059ae:	f002 f87b 	bl	407aa8 <_fputwc_r>
  4059b2:	1c43      	adds	r3, r0, #1
  4059b4:	f104 0401 	add.w	r4, r4, #1
  4059b8:	d1f3      	bne.n	4059a2 <__sprint_r.part.0+0x2a>
  4059ba:	2300      	movs	r3, #0
  4059bc:	f8cb 3008 	str.w	r3, [fp, #8]
  4059c0:	f8cb 3004 	str.w	r3, [fp, #4]
  4059c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059c8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4059cc:	f02a 0a03 	bic.w	sl, sl, #3
  4059d0:	eba3 030a 	sub.w	r3, r3, sl
  4059d4:	f8cb 3008 	str.w	r3, [fp, #8]
  4059d8:	f109 0908 	add.w	r9, r9, #8
  4059dc:	2b00      	cmp	r3, #0
  4059de:	d1d8      	bne.n	405992 <__sprint_r.part.0+0x1a>
  4059e0:	2000      	movs	r0, #0
  4059e2:	e7ea      	b.n	4059ba <__sprint_r.part.0+0x42>
  4059e4:	f002 f9ca 	bl	407d7c <__sfvwrite_r>
  4059e8:	2300      	movs	r3, #0
  4059ea:	f8cb 3008 	str.w	r3, [fp, #8]
  4059ee:	f8cb 3004 	str.w	r3, [fp, #4]
  4059f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059f6:	bf00      	nop

004059f8 <_vfiprintf_r>:
  4059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059fc:	b0ad      	sub	sp, #180	; 0xb4
  4059fe:	461d      	mov	r5, r3
  405a00:	468b      	mov	fp, r1
  405a02:	4690      	mov	r8, r2
  405a04:	9307      	str	r3, [sp, #28]
  405a06:	9006      	str	r0, [sp, #24]
  405a08:	b118      	cbz	r0, 405a12 <_vfiprintf_r+0x1a>
  405a0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405a0c:	2b00      	cmp	r3, #0
  405a0e:	f000 80f3 	beq.w	405bf8 <_vfiprintf_r+0x200>
  405a12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405a16:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405a1a:	07df      	lsls	r7, r3, #31
  405a1c:	b281      	uxth	r1, r0
  405a1e:	d402      	bmi.n	405a26 <_vfiprintf_r+0x2e>
  405a20:	058e      	lsls	r6, r1, #22
  405a22:	f140 80fc 	bpl.w	405c1e <_vfiprintf_r+0x226>
  405a26:	048c      	lsls	r4, r1, #18
  405a28:	d40a      	bmi.n	405a40 <_vfiprintf_r+0x48>
  405a2a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405a2e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405a36:	f8ab 100c 	strh.w	r1, [fp, #12]
  405a3a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405a3e:	b289      	uxth	r1, r1
  405a40:	0708      	lsls	r0, r1, #28
  405a42:	f140 80b3 	bpl.w	405bac <_vfiprintf_r+0x1b4>
  405a46:	f8db 3010 	ldr.w	r3, [fp, #16]
  405a4a:	2b00      	cmp	r3, #0
  405a4c:	f000 80ae 	beq.w	405bac <_vfiprintf_r+0x1b4>
  405a50:	f001 031a 	and.w	r3, r1, #26
  405a54:	2b0a      	cmp	r3, #10
  405a56:	f000 80b5 	beq.w	405bc4 <_vfiprintf_r+0x1cc>
  405a5a:	2300      	movs	r3, #0
  405a5c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405a60:	930b      	str	r3, [sp, #44]	; 0x2c
  405a62:	9311      	str	r3, [sp, #68]	; 0x44
  405a64:	9310      	str	r3, [sp, #64]	; 0x40
  405a66:	9303      	str	r3, [sp, #12]
  405a68:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405a6c:	46ca      	mov	sl, r9
  405a6e:	f8cd b010 	str.w	fp, [sp, #16]
  405a72:	f898 3000 	ldrb.w	r3, [r8]
  405a76:	4644      	mov	r4, r8
  405a78:	b1fb      	cbz	r3, 405aba <_vfiprintf_r+0xc2>
  405a7a:	2b25      	cmp	r3, #37	; 0x25
  405a7c:	d102      	bne.n	405a84 <_vfiprintf_r+0x8c>
  405a7e:	e01c      	b.n	405aba <_vfiprintf_r+0xc2>
  405a80:	2b25      	cmp	r3, #37	; 0x25
  405a82:	d003      	beq.n	405a8c <_vfiprintf_r+0x94>
  405a84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405a88:	2b00      	cmp	r3, #0
  405a8a:	d1f9      	bne.n	405a80 <_vfiprintf_r+0x88>
  405a8c:	eba4 0508 	sub.w	r5, r4, r8
  405a90:	b19d      	cbz	r5, 405aba <_vfiprintf_r+0xc2>
  405a92:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405a94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a96:	f8ca 8000 	str.w	r8, [sl]
  405a9a:	3301      	adds	r3, #1
  405a9c:	442a      	add	r2, r5
  405a9e:	2b07      	cmp	r3, #7
  405aa0:	f8ca 5004 	str.w	r5, [sl, #4]
  405aa4:	9211      	str	r2, [sp, #68]	; 0x44
  405aa6:	9310      	str	r3, [sp, #64]	; 0x40
  405aa8:	dd7a      	ble.n	405ba0 <_vfiprintf_r+0x1a8>
  405aaa:	2a00      	cmp	r2, #0
  405aac:	f040 84b0 	bne.w	406410 <_vfiprintf_r+0xa18>
  405ab0:	9b03      	ldr	r3, [sp, #12]
  405ab2:	9210      	str	r2, [sp, #64]	; 0x40
  405ab4:	442b      	add	r3, r5
  405ab6:	46ca      	mov	sl, r9
  405ab8:	9303      	str	r3, [sp, #12]
  405aba:	7823      	ldrb	r3, [r4, #0]
  405abc:	2b00      	cmp	r3, #0
  405abe:	f000 83e0 	beq.w	406282 <_vfiprintf_r+0x88a>
  405ac2:	2000      	movs	r0, #0
  405ac4:	f04f 0300 	mov.w	r3, #0
  405ac8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405acc:	f104 0801 	add.w	r8, r4, #1
  405ad0:	7862      	ldrb	r2, [r4, #1]
  405ad2:	4605      	mov	r5, r0
  405ad4:	4606      	mov	r6, r0
  405ad6:	4603      	mov	r3, r0
  405ad8:	f04f 34ff 	mov.w	r4, #4294967295
  405adc:	f108 0801 	add.w	r8, r8, #1
  405ae0:	f1a2 0120 	sub.w	r1, r2, #32
  405ae4:	2958      	cmp	r1, #88	; 0x58
  405ae6:	f200 82de 	bhi.w	4060a6 <_vfiprintf_r+0x6ae>
  405aea:	e8df f011 	tbh	[pc, r1, lsl #1]
  405aee:	0221      	.short	0x0221
  405af0:	02dc02dc 	.word	0x02dc02dc
  405af4:	02dc0229 	.word	0x02dc0229
  405af8:	02dc02dc 	.word	0x02dc02dc
  405afc:	02dc02dc 	.word	0x02dc02dc
  405b00:	028902dc 	.word	0x028902dc
  405b04:	02dc0295 	.word	0x02dc0295
  405b08:	02bd00a2 	.word	0x02bd00a2
  405b0c:	019f02dc 	.word	0x019f02dc
  405b10:	01a401a4 	.word	0x01a401a4
  405b14:	01a401a4 	.word	0x01a401a4
  405b18:	01a401a4 	.word	0x01a401a4
  405b1c:	01a401a4 	.word	0x01a401a4
  405b20:	02dc01a4 	.word	0x02dc01a4
  405b24:	02dc02dc 	.word	0x02dc02dc
  405b28:	02dc02dc 	.word	0x02dc02dc
  405b2c:	02dc02dc 	.word	0x02dc02dc
  405b30:	02dc02dc 	.word	0x02dc02dc
  405b34:	01b202dc 	.word	0x01b202dc
  405b38:	02dc02dc 	.word	0x02dc02dc
  405b3c:	02dc02dc 	.word	0x02dc02dc
  405b40:	02dc02dc 	.word	0x02dc02dc
  405b44:	02dc02dc 	.word	0x02dc02dc
  405b48:	02dc02dc 	.word	0x02dc02dc
  405b4c:	02dc0197 	.word	0x02dc0197
  405b50:	02dc02dc 	.word	0x02dc02dc
  405b54:	02dc02dc 	.word	0x02dc02dc
  405b58:	02dc019b 	.word	0x02dc019b
  405b5c:	025302dc 	.word	0x025302dc
  405b60:	02dc02dc 	.word	0x02dc02dc
  405b64:	02dc02dc 	.word	0x02dc02dc
  405b68:	02dc02dc 	.word	0x02dc02dc
  405b6c:	02dc02dc 	.word	0x02dc02dc
  405b70:	02dc02dc 	.word	0x02dc02dc
  405b74:	021b025a 	.word	0x021b025a
  405b78:	02dc02dc 	.word	0x02dc02dc
  405b7c:	026e02dc 	.word	0x026e02dc
  405b80:	02dc021b 	.word	0x02dc021b
  405b84:	027302dc 	.word	0x027302dc
  405b88:	01f502dc 	.word	0x01f502dc
  405b8c:	02090182 	.word	0x02090182
  405b90:	02dc02d7 	.word	0x02dc02d7
  405b94:	02dc029a 	.word	0x02dc029a
  405b98:	02dc00a7 	.word	0x02dc00a7
  405b9c:	022e02dc 	.word	0x022e02dc
  405ba0:	f10a 0a08 	add.w	sl, sl, #8
  405ba4:	9b03      	ldr	r3, [sp, #12]
  405ba6:	442b      	add	r3, r5
  405ba8:	9303      	str	r3, [sp, #12]
  405baa:	e786      	b.n	405aba <_vfiprintf_r+0xc2>
  405bac:	4659      	mov	r1, fp
  405bae:	9806      	ldr	r0, [sp, #24]
  405bb0:	f000 fdac 	bl	40670c <__swsetup_r>
  405bb4:	bb18      	cbnz	r0, 405bfe <_vfiprintf_r+0x206>
  405bb6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405bba:	f001 031a 	and.w	r3, r1, #26
  405bbe:	2b0a      	cmp	r3, #10
  405bc0:	f47f af4b 	bne.w	405a5a <_vfiprintf_r+0x62>
  405bc4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405bc8:	2b00      	cmp	r3, #0
  405bca:	f6ff af46 	blt.w	405a5a <_vfiprintf_r+0x62>
  405bce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405bd2:	07db      	lsls	r3, r3, #31
  405bd4:	d405      	bmi.n	405be2 <_vfiprintf_r+0x1ea>
  405bd6:	058f      	lsls	r7, r1, #22
  405bd8:	d403      	bmi.n	405be2 <_vfiprintf_r+0x1ea>
  405bda:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405bde:	f002 fa91 	bl	408104 <__retarget_lock_release_recursive>
  405be2:	462b      	mov	r3, r5
  405be4:	4642      	mov	r2, r8
  405be6:	4659      	mov	r1, fp
  405be8:	9806      	ldr	r0, [sp, #24]
  405bea:	f000 fd4d 	bl	406688 <__sbprintf>
  405bee:	9003      	str	r0, [sp, #12]
  405bf0:	9803      	ldr	r0, [sp, #12]
  405bf2:	b02d      	add	sp, #180	; 0xb4
  405bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bf8:	f001 feb4 	bl	407964 <__sinit>
  405bfc:	e709      	b.n	405a12 <_vfiprintf_r+0x1a>
  405bfe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405c02:	07d9      	lsls	r1, r3, #31
  405c04:	d404      	bmi.n	405c10 <_vfiprintf_r+0x218>
  405c06:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405c0a:	059a      	lsls	r2, r3, #22
  405c0c:	f140 84aa 	bpl.w	406564 <_vfiprintf_r+0xb6c>
  405c10:	f04f 33ff 	mov.w	r3, #4294967295
  405c14:	9303      	str	r3, [sp, #12]
  405c16:	9803      	ldr	r0, [sp, #12]
  405c18:	b02d      	add	sp, #180	; 0xb4
  405c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c1e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405c22:	f002 fa6d 	bl	408100 <__retarget_lock_acquire_recursive>
  405c26:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405c2a:	b281      	uxth	r1, r0
  405c2c:	e6fb      	b.n	405a26 <_vfiprintf_r+0x2e>
  405c2e:	4276      	negs	r6, r6
  405c30:	9207      	str	r2, [sp, #28]
  405c32:	f043 0304 	orr.w	r3, r3, #4
  405c36:	f898 2000 	ldrb.w	r2, [r8]
  405c3a:	e74f      	b.n	405adc <_vfiprintf_r+0xe4>
  405c3c:	9608      	str	r6, [sp, #32]
  405c3e:	069e      	lsls	r6, r3, #26
  405c40:	f100 8450 	bmi.w	4064e4 <_vfiprintf_r+0xaec>
  405c44:	9907      	ldr	r1, [sp, #28]
  405c46:	06dd      	lsls	r5, r3, #27
  405c48:	460a      	mov	r2, r1
  405c4a:	f100 83ef 	bmi.w	40642c <_vfiprintf_r+0xa34>
  405c4e:	0658      	lsls	r0, r3, #25
  405c50:	f140 83ec 	bpl.w	40642c <_vfiprintf_r+0xa34>
  405c54:	880e      	ldrh	r6, [r1, #0]
  405c56:	3104      	adds	r1, #4
  405c58:	2700      	movs	r7, #0
  405c5a:	2201      	movs	r2, #1
  405c5c:	9107      	str	r1, [sp, #28]
  405c5e:	f04f 0100 	mov.w	r1, #0
  405c62:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405c66:	2500      	movs	r5, #0
  405c68:	1c61      	adds	r1, r4, #1
  405c6a:	f000 8116 	beq.w	405e9a <_vfiprintf_r+0x4a2>
  405c6e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405c72:	9102      	str	r1, [sp, #8]
  405c74:	ea56 0107 	orrs.w	r1, r6, r7
  405c78:	f040 8114 	bne.w	405ea4 <_vfiprintf_r+0x4ac>
  405c7c:	2c00      	cmp	r4, #0
  405c7e:	f040 835c 	bne.w	40633a <_vfiprintf_r+0x942>
  405c82:	2a00      	cmp	r2, #0
  405c84:	f040 83b7 	bne.w	4063f6 <_vfiprintf_r+0x9fe>
  405c88:	f013 0301 	ands.w	r3, r3, #1
  405c8c:	9305      	str	r3, [sp, #20]
  405c8e:	f000 8457 	beq.w	406540 <_vfiprintf_r+0xb48>
  405c92:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405c96:	2330      	movs	r3, #48	; 0x30
  405c98:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405c9c:	9b05      	ldr	r3, [sp, #20]
  405c9e:	42a3      	cmp	r3, r4
  405ca0:	bfb8      	it	lt
  405ca2:	4623      	movlt	r3, r4
  405ca4:	9301      	str	r3, [sp, #4]
  405ca6:	b10d      	cbz	r5, 405cac <_vfiprintf_r+0x2b4>
  405ca8:	3301      	adds	r3, #1
  405caa:	9301      	str	r3, [sp, #4]
  405cac:	9b02      	ldr	r3, [sp, #8]
  405cae:	f013 0302 	ands.w	r3, r3, #2
  405cb2:	9309      	str	r3, [sp, #36]	; 0x24
  405cb4:	d002      	beq.n	405cbc <_vfiprintf_r+0x2c4>
  405cb6:	9b01      	ldr	r3, [sp, #4]
  405cb8:	3302      	adds	r3, #2
  405cba:	9301      	str	r3, [sp, #4]
  405cbc:	9b02      	ldr	r3, [sp, #8]
  405cbe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405cc2:	930a      	str	r3, [sp, #40]	; 0x28
  405cc4:	f040 8217 	bne.w	4060f6 <_vfiprintf_r+0x6fe>
  405cc8:	9b08      	ldr	r3, [sp, #32]
  405cca:	9a01      	ldr	r2, [sp, #4]
  405ccc:	1a9d      	subs	r5, r3, r2
  405cce:	2d00      	cmp	r5, #0
  405cd0:	f340 8211 	ble.w	4060f6 <_vfiprintf_r+0x6fe>
  405cd4:	2d10      	cmp	r5, #16
  405cd6:	f340 8490 	ble.w	4065fa <_vfiprintf_r+0xc02>
  405cda:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405cdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cde:	4ec4      	ldr	r6, [pc, #784]	; (405ff0 <_vfiprintf_r+0x5f8>)
  405ce0:	46d6      	mov	lr, sl
  405ce2:	2710      	movs	r7, #16
  405ce4:	46a2      	mov	sl, r4
  405ce6:	4619      	mov	r1, r3
  405ce8:	9c06      	ldr	r4, [sp, #24]
  405cea:	e007      	b.n	405cfc <_vfiprintf_r+0x304>
  405cec:	f101 0c02 	add.w	ip, r1, #2
  405cf0:	f10e 0e08 	add.w	lr, lr, #8
  405cf4:	4601      	mov	r1, r0
  405cf6:	3d10      	subs	r5, #16
  405cf8:	2d10      	cmp	r5, #16
  405cfa:	dd11      	ble.n	405d20 <_vfiprintf_r+0x328>
  405cfc:	1c48      	adds	r0, r1, #1
  405cfe:	3210      	adds	r2, #16
  405d00:	2807      	cmp	r0, #7
  405d02:	9211      	str	r2, [sp, #68]	; 0x44
  405d04:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405d08:	9010      	str	r0, [sp, #64]	; 0x40
  405d0a:	ddef      	ble.n	405cec <_vfiprintf_r+0x2f4>
  405d0c:	2a00      	cmp	r2, #0
  405d0e:	f040 81e4 	bne.w	4060da <_vfiprintf_r+0x6e2>
  405d12:	3d10      	subs	r5, #16
  405d14:	2d10      	cmp	r5, #16
  405d16:	4611      	mov	r1, r2
  405d18:	f04f 0c01 	mov.w	ip, #1
  405d1c:	46ce      	mov	lr, r9
  405d1e:	dced      	bgt.n	405cfc <_vfiprintf_r+0x304>
  405d20:	4654      	mov	r4, sl
  405d22:	4661      	mov	r1, ip
  405d24:	46f2      	mov	sl, lr
  405d26:	442a      	add	r2, r5
  405d28:	2907      	cmp	r1, #7
  405d2a:	9211      	str	r2, [sp, #68]	; 0x44
  405d2c:	f8ca 6000 	str.w	r6, [sl]
  405d30:	f8ca 5004 	str.w	r5, [sl, #4]
  405d34:	9110      	str	r1, [sp, #64]	; 0x40
  405d36:	f300 82ec 	bgt.w	406312 <_vfiprintf_r+0x91a>
  405d3a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405d3e:	f10a 0a08 	add.w	sl, sl, #8
  405d42:	1c48      	adds	r0, r1, #1
  405d44:	2d00      	cmp	r5, #0
  405d46:	f040 81de 	bne.w	406106 <_vfiprintf_r+0x70e>
  405d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d4c:	2b00      	cmp	r3, #0
  405d4e:	f000 81f8 	beq.w	406142 <_vfiprintf_r+0x74a>
  405d52:	3202      	adds	r2, #2
  405d54:	a90e      	add	r1, sp, #56	; 0x38
  405d56:	2302      	movs	r3, #2
  405d58:	2807      	cmp	r0, #7
  405d5a:	9211      	str	r2, [sp, #68]	; 0x44
  405d5c:	9010      	str	r0, [sp, #64]	; 0x40
  405d5e:	e88a 000a 	stmia.w	sl, {r1, r3}
  405d62:	f340 81ea 	ble.w	40613a <_vfiprintf_r+0x742>
  405d66:	2a00      	cmp	r2, #0
  405d68:	f040 838c 	bne.w	406484 <_vfiprintf_r+0xa8c>
  405d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d6e:	2b80      	cmp	r3, #128	; 0x80
  405d70:	f04f 0001 	mov.w	r0, #1
  405d74:	4611      	mov	r1, r2
  405d76:	46ca      	mov	sl, r9
  405d78:	f040 81e7 	bne.w	40614a <_vfiprintf_r+0x752>
  405d7c:	9b08      	ldr	r3, [sp, #32]
  405d7e:	9d01      	ldr	r5, [sp, #4]
  405d80:	1b5e      	subs	r6, r3, r5
  405d82:	2e00      	cmp	r6, #0
  405d84:	f340 81e1 	ble.w	40614a <_vfiprintf_r+0x752>
  405d88:	2e10      	cmp	r6, #16
  405d8a:	4d9a      	ldr	r5, [pc, #616]	; (405ff4 <_vfiprintf_r+0x5fc>)
  405d8c:	f340 8450 	ble.w	406630 <_vfiprintf_r+0xc38>
  405d90:	46d4      	mov	ip, sl
  405d92:	2710      	movs	r7, #16
  405d94:	46a2      	mov	sl, r4
  405d96:	9c06      	ldr	r4, [sp, #24]
  405d98:	e007      	b.n	405daa <_vfiprintf_r+0x3b2>
  405d9a:	f101 0e02 	add.w	lr, r1, #2
  405d9e:	f10c 0c08 	add.w	ip, ip, #8
  405da2:	4601      	mov	r1, r0
  405da4:	3e10      	subs	r6, #16
  405da6:	2e10      	cmp	r6, #16
  405da8:	dd11      	ble.n	405dce <_vfiprintf_r+0x3d6>
  405daa:	1c48      	adds	r0, r1, #1
  405dac:	3210      	adds	r2, #16
  405dae:	2807      	cmp	r0, #7
  405db0:	9211      	str	r2, [sp, #68]	; 0x44
  405db2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405db6:	9010      	str	r0, [sp, #64]	; 0x40
  405db8:	ddef      	ble.n	405d9a <_vfiprintf_r+0x3a2>
  405dba:	2a00      	cmp	r2, #0
  405dbc:	f040 829d 	bne.w	4062fa <_vfiprintf_r+0x902>
  405dc0:	3e10      	subs	r6, #16
  405dc2:	2e10      	cmp	r6, #16
  405dc4:	f04f 0e01 	mov.w	lr, #1
  405dc8:	4611      	mov	r1, r2
  405dca:	46cc      	mov	ip, r9
  405dcc:	dced      	bgt.n	405daa <_vfiprintf_r+0x3b2>
  405dce:	4654      	mov	r4, sl
  405dd0:	46e2      	mov	sl, ip
  405dd2:	4432      	add	r2, r6
  405dd4:	f1be 0f07 	cmp.w	lr, #7
  405dd8:	9211      	str	r2, [sp, #68]	; 0x44
  405dda:	e88a 0060 	stmia.w	sl, {r5, r6}
  405dde:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405de2:	f300 8369 	bgt.w	4064b8 <_vfiprintf_r+0xac0>
  405de6:	f10a 0a08 	add.w	sl, sl, #8
  405dea:	f10e 0001 	add.w	r0, lr, #1
  405dee:	4671      	mov	r1, lr
  405df0:	e1ab      	b.n	40614a <_vfiprintf_r+0x752>
  405df2:	9608      	str	r6, [sp, #32]
  405df4:	f013 0220 	ands.w	r2, r3, #32
  405df8:	f040 838c 	bne.w	406514 <_vfiprintf_r+0xb1c>
  405dfc:	f013 0110 	ands.w	r1, r3, #16
  405e00:	f040 831a 	bne.w	406438 <_vfiprintf_r+0xa40>
  405e04:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405e08:	f000 8316 	beq.w	406438 <_vfiprintf_r+0xa40>
  405e0c:	9807      	ldr	r0, [sp, #28]
  405e0e:	460a      	mov	r2, r1
  405e10:	4601      	mov	r1, r0
  405e12:	3104      	adds	r1, #4
  405e14:	8806      	ldrh	r6, [r0, #0]
  405e16:	9107      	str	r1, [sp, #28]
  405e18:	2700      	movs	r7, #0
  405e1a:	e720      	b.n	405c5e <_vfiprintf_r+0x266>
  405e1c:	9608      	str	r6, [sp, #32]
  405e1e:	f043 0310 	orr.w	r3, r3, #16
  405e22:	e7e7      	b.n	405df4 <_vfiprintf_r+0x3fc>
  405e24:	9608      	str	r6, [sp, #32]
  405e26:	f043 0310 	orr.w	r3, r3, #16
  405e2a:	e708      	b.n	405c3e <_vfiprintf_r+0x246>
  405e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405e30:	f898 2000 	ldrb.w	r2, [r8]
  405e34:	e652      	b.n	405adc <_vfiprintf_r+0xe4>
  405e36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405e3a:	2600      	movs	r6, #0
  405e3c:	f818 2b01 	ldrb.w	r2, [r8], #1
  405e40:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405e44:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405e48:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405e4c:	2909      	cmp	r1, #9
  405e4e:	d9f5      	bls.n	405e3c <_vfiprintf_r+0x444>
  405e50:	e646      	b.n	405ae0 <_vfiprintf_r+0xe8>
  405e52:	9608      	str	r6, [sp, #32]
  405e54:	2800      	cmp	r0, #0
  405e56:	f040 8408 	bne.w	40666a <_vfiprintf_r+0xc72>
  405e5a:	f043 0310 	orr.w	r3, r3, #16
  405e5e:	069e      	lsls	r6, r3, #26
  405e60:	f100 834c 	bmi.w	4064fc <_vfiprintf_r+0xb04>
  405e64:	06dd      	lsls	r5, r3, #27
  405e66:	f100 82f3 	bmi.w	406450 <_vfiprintf_r+0xa58>
  405e6a:	0658      	lsls	r0, r3, #25
  405e6c:	f140 82f0 	bpl.w	406450 <_vfiprintf_r+0xa58>
  405e70:	9d07      	ldr	r5, [sp, #28]
  405e72:	f9b5 6000 	ldrsh.w	r6, [r5]
  405e76:	462a      	mov	r2, r5
  405e78:	17f7      	asrs	r7, r6, #31
  405e7a:	3204      	adds	r2, #4
  405e7c:	4630      	mov	r0, r6
  405e7e:	4639      	mov	r1, r7
  405e80:	9207      	str	r2, [sp, #28]
  405e82:	2800      	cmp	r0, #0
  405e84:	f171 0200 	sbcs.w	r2, r1, #0
  405e88:	f2c0 835d 	blt.w	406546 <_vfiprintf_r+0xb4e>
  405e8c:	1c61      	adds	r1, r4, #1
  405e8e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405e92:	f04f 0201 	mov.w	r2, #1
  405e96:	f47f aeea 	bne.w	405c6e <_vfiprintf_r+0x276>
  405e9a:	ea56 0107 	orrs.w	r1, r6, r7
  405e9e:	f000 824d 	beq.w	40633c <_vfiprintf_r+0x944>
  405ea2:	9302      	str	r3, [sp, #8]
  405ea4:	2a01      	cmp	r2, #1
  405ea6:	f000 828c 	beq.w	4063c2 <_vfiprintf_r+0x9ca>
  405eaa:	2a02      	cmp	r2, #2
  405eac:	f040 825c 	bne.w	406368 <_vfiprintf_r+0x970>
  405eb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405eb2:	46cb      	mov	fp, r9
  405eb4:	0933      	lsrs	r3, r6, #4
  405eb6:	f006 010f 	and.w	r1, r6, #15
  405eba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405ebe:	093a      	lsrs	r2, r7, #4
  405ec0:	461e      	mov	r6, r3
  405ec2:	4617      	mov	r7, r2
  405ec4:	5c43      	ldrb	r3, [r0, r1]
  405ec6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405eca:	ea56 0307 	orrs.w	r3, r6, r7
  405ece:	d1f1      	bne.n	405eb4 <_vfiprintf_r+0x4bc>
  405ed0:	eba9 030b 	sub.w	r3, r9, fp
  405ed4:	9305      	str	r3, [sp, #20]
  405ed6:	e6e1      	b.n	405c9c <_vfiprintf_r+0x2a4>
  405ed8:	2800      	cmp	r0, #0
  405eda:	f040 83c0 	bne.w	40665e <_vfiprintf_r+0xc66>
  405ede:	0699      	lsls	r1, r3, #26
  405ee0:	f100 8367 	bmi.w	4065b2 <_vfiprintf_r+0xbba>
  405ee4:	06da      	lsls	r2, r3, #27
  405ee6:	f100 80f1 	bmi.w	4060cc <_vfiprintf_r+0x6d4>
  405eea:	065b      	lsls	r3, r3, #25
  405eec:	f140 80ee 	bpl.w	4060cc <_vfiprintf_r+0x6d4>
  405ef0:	9a07      	ldr	r2, [sp, #28]
  405ef2:	6813      	ldr	r3, [r2, #0]
  405ef4:	3204      	adds	r2, #4
  405ef6:	9207      	str	r2, [sp, #28]
  405ef8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405efc:	801a      	strh	r2, [r3, #0]
  405efe:	e5b8      	b.n	405a72 <_vfiprintf_r+0x7a>
  405f00:	9807      	ldr	r0, [sp, #28]
  405f02:	4a3d      	ldr	r2, [pc, #244]	; (405ff8 <_vfiprintf_r+0x600>)
  405f04:	9608      	str	r6, [sp, #32]
  405f06:	920b      	str	r2, [sp, #44]	; 0x2c
  405f08:	6806      	ldr	r6, [r0, #0]
  405f0a:	2278      	movs	r2, #120	; 0x78
  405f0c:	2130      	movs	r1, #48	; 0x30
  405f0e:	3004      	adds	r0, #4
  405f10:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405f14:	f043 0302 	orr.w	r3, r3, #2
  405f18:	9007      	str	r0, [sp, #28]
  405f1a:	2700      	movs	r7, #0
  405f1c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405f20:	2202      	movs	r2, #2
  405f22:	e69c      	b.n	405c5e <_vfiprintf_r+0x266>
  405f24:	9608      	str	r6, [sp, #32]
  405f26:	2800      	cmp	r0, #0
  405f28:	d099      	beq.n	405e5e <_vfiprintf_r+0x466>
  405f2a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405f2e:	e796      	b.n	405e5e <_vfiprintf_r+0x466>
  405f30:	f898 2000 	ldrb.w	r2, [r8]
  405f34:	2d00      	cmp	r5, #0
  405f36:	f47f add1 	bne.w	405adc <_vfiprintf_r+0xe4>
  405f3a:	2001      	movs	r0, #1
  405f3c:	2520      	movs	r5, #32
  405f3e:	e5cd      	b.n	405adc <_vfiprintf_r+0xe4>
  405f40:	f043 0301 	orr.w	r3, r3, #1
  405f44:	f898 2000 	ldrb.w	r2, [r8]
  405f48:	e5c8      	b.n	405adc <_vfiprintf_r+0xe4>
  405f4a:	9608      	str	r6, [sp, #32]
  405f4c:	2800      	cmp	r0, #0
  405f4e:	f040 8393 	bne.w	406678 <_vfiprintf_r+0xc80>
  405f52:	4929      	ldr	r1, [pc, #164]	; (405ff8 <_vfiprintf_r+0x600>)
  405f54:	910b      	str	r1, [sp, #44]	; 0x2c
  405f56:	069f      	lsls	r7, r3, #26
  405f58:	f100 82e8 	bmi.w	40652c <_vfiprintf_r+0xb34>
  405f5c:	9807      	ldr	r0, [sp, #28]
  405f5e:	06de      	lsls	r6, r3, #27
  405f60:	4601      	mov	r1, r0
  405f62:	f100 8270 	bmi.w	406446 <_vfiprintf_r+0xa4e>
  405f66:	065d      	lsls	r5, r3, #25
  405f68:	f140 826d 	bpl.w	406446 <_vfiprintf_r+0xa4e>
  405f6c:	3104      	adds	r1, #4
  405f6e:	8806      	ldrh	r6, [r0, #0]
  405f70:	9107      	str	r1, [sp, #28]
  405f72:	2700      	movs	r7, #0
  405f74:	07d8      	lsls	r0, r3, #31
  405f76:	f140 8222 	bpl.w	4063be <_vfiprintf_r+0x9c6>
  405f7a:	ea56 0107 	orrs.w	r1, r6, r7
  405f7e:	f000 821e 	beq.w	4063be <_vfiprintf_r+0x9c6>
  405f82:	2130      	movs	r1, #48	; 0x30
  405f84:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405f88:	f043 0302 	orr.w	r3, r3, #2
  405f8c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405f90:	2202      	movs	r2, #2
  405f92:	e664      	b.n	405c5e <_vfiprintf_r+0x266>
  405f94:	9608      	str	r6, [sp, #32]
  405f96:	2800      	cmp	r0, #0
  405f98:	f040 836b 	bne.w	406672 <_vfiprintf_r+0xc7a>
  405f9c:	4917      	ldr	r1, [pc, #92]	; (405ffc <_vfiprintf_r+0x604>)
  405f9e:	910b      	str	r1, [sp, #44]	; 0x2c
  405fa0:	e7d9      	b.n	405f56 <_vfiprintf_r+0x55e>
  405fa2:	9907      	ldr	r1, [sp, #28]
  405fa4:	9608      	str	r6, [sp, #32]
  405fa6:	680a      	ldr	r2, [r1, #0]
  405fa8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405fac:	f04f 0000 	mov.w	r0, #0
  405fb0:	460a      	mov	r2, r1
  405fb2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405fb6:	3204      	adds	r2, #4
  405fb8:	2001      	movs	r0, #1
  405fba:	9001      	str	r0, [sp, #4]
  405fbc:	9207      	str	r2, [sp, #28]
  405fbe:	9005      	str	r0, [sp, #20]
  405fc0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405fc4:	9302      	str	r3, [sp, #8]
  405fc6:	2400      	movs	r4, #0
  405fc8:	e670      	b.n	405cac <_vfiprintf_r+0x2b4>
  405fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405fce:	f898 2000 	ldrb.w	r2, [r8]
  405fd2:	e583      	b.n	405adc <_vfiprintf_r+0xe4>
  405fd4:	f898 2000 	ldrb.w	r2, [r8]
  405fd8:	2a6c      	cmp	r2, #108	; 0x6c
  405fda:	bf03      	ittte	eq
  405fdc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405fe0:	f043 0320 	orreq.w	r3, r3, #32
  405fe4:	f108 0801 	addeq.w	r8, r8, #1
  405fe8:	f043 0310 	orrne.w	r3, r3, #16
  405fec:	e576      	b.n	405adc <_vfiprintf_r+0xe4>
  405fee:	bf00      	nop
  405ff0:	00409fcc 	.word	0x00409fcc
  405ff4:	00409fdc 	.word	0x00409fdc
  405ff8:	00409f8c 	.word	0x00409f8c
  405ffc:	00409f78 	.word	0x00409f78
  406000:	9907      	ldr	r1, [sp, #28]
  406002:	680e      	ldr	r6, [r1, #0]
  406004:	460a      	mov	r2, r1
  406006:	2e00      	cmp	r6, #0
  406008:	f102 0204 	add.w	r2, r2, #4
  40600c:	f6ff ae0f 	blt.w	405c2e <_vfiprintf_r+0x236>
  406010:	9207      	str	r2, [sp, #28]
  406012:	f898 2000 	ldrb.w	r2, [r8]
  406016:	e561      	b.n	405adc <_vfiprintf_r+0xe4>
  406018:	f898 2000 	ldrb.w	r2, [r8]
  40601c:	2001      	movs	r0, #1
  40601e:	252b      	movs	r5, #43	; 0x2b
  406020:	e55c      	b.n	405adc <_vfiprintf_r+0xe4>
  406022:	9907      	ldr	r1, [sp, #28]
  406024:	9608      	str	r6, [sp, #32]
  406026:	f8d1 b000 	ldr.w	fp, [r1]
  40602a:	f04f 0200 	mov.w	r2, #0
  40602e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406032:	1d0e      	adds	r6, r1, #4
  406034:	f1bb 0f00 	cmp.w	fp, #0
  406038:	f000 82e5 	beq.w	406606 <_vfiprintf_r+0xc0e>
  40603c:	1c67      	adds	r7, r4, #1
  40603e:	f000 82c4 	beq.w	4065ca <_vfiprintf_r+0xbd2>
  406042:	4622      	mov	r2, r4
  406044:	2100      	movs	r1, #0
  406046:	4658      	mov	r0, fp
  406048:	9301      	str	r3, [sp, #4]
  40604a:	f002 f8f1 	bl	408230 <memchr>
  40604e:	9b01      	ldr	r3, [sp, #4]
  406050:	2800      	cmp	r0, #0
  406052:	f000 82e5 	beq.w	406620 <_vfiprintf_r+0xc28>
  406056:	eba0 020b 	sub.w	r2, r0, fp
  40605a:	9205      	str	r2, [sp, #20]
  40605c:	9607      	str	r6, [sp, #28]
  40605e:	9302      	str	r3, [sp, #8]
  406060:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406064:	2400      	movs	r4, #0
  406066:	e619      	b.n	405c9c <_vfiprintf_r+0x2a4>
  406068:	f898 2000 	ldrb.w	r2, [r8]
  40606c:	2a2a      	cmp	r2, #42	; 0x2a
  40606e:	f108 0701 	add.w	r7, r8, #1
  406072:	f000 82e9 	beq.w	406648 <_vfiprintf_r+0xc50>
  406076:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40607a:	2909      	cmp	r1, #9
  40607c:	46b8      	mov	r8, r7
  40607e:	f04f 0400 	mov.w	r4, #0
  406082:	f63f ad2d 	bhi.w	405ae0 <_vfiprintf_r+0xe8>
  406086:	f818 2b01 	ldrb.w	r2, [r8], #1
  40608a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40608e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406096:	2909      	cmp	r1, #9
  406098:	d9f5      	bls.n	406086 <_vfiprintf_r+0x68e>
  40609a:	e521      	b.n	405ae0 <_vfiprintf_r+0xe8>
  40609c:	f043 0320 	orr.w	r3, r3, #32
  4060a0:	f898 2000 	ldrb.w	r2, [r8]
  4060a4:	e51a      	b.n	405adc <_vfiprintf_r+0xe4>
  4060a6:	9608      	str	r6, [sp, #32]
  4060a8:	2800      	cmp	r0, #0
  4060aa:	f040 82db 	bne.w	406664 <_vfiprintf_r+0xc6c>
  4060ae:	2a00      	cmp	r2, #0
  4060b0:	f000 80e7 	beq.w	406282 <_vfiprintf_r+0x88a>
  4060b4:	2101      	movs	r1, #1
  4060b6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4060ba:	f04f 0200 	mov.w	r2, #0
  4060be:	9101      	str	r1, [sp, #4]
  4060c0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4060c4:	9105      	str	r1, [sp, #20]
  4060c6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4060ca:	e77b      	b.n	405fc4 <_vfiprintf_r+0x5cc>
  4060cc:	9a07      	ldr	r2, [sp, #28]
  4060ce:	6813      	ldr	r3, [r2, #0]
  4060d0:	3204      	adds	r2, #4
  4060d2:	9207      	str	r2, [sp, #28]
  4060d4:	9a03      	ldr	r2, [sp, #12]
  4060d6:	601a      	str	r2, [r3, #0]
  4060d8:	e4cb      	b.n	405a72 <_vfiprintf_r+0x7a>
  4060da:	aa0f      	add	r2, sp, #60	; 0x3c
  4060dc:	9904      	ldr	r1, [sp, #16]
  4060de:	4620      	mov	r0, r4
  4060e0:	f7ff fc4a 	bl	405978 <__sprint_r.part.0>
  4060e4:	2800      	cmp	r0, #0
  4060e6:	f040 8139 	bne.w	40635c <_vfiprintf_r+0x964>
  4060ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4060ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4060ee:	f101 0c01 	add.w	ip, r1, #1
  4060f2:	46ce      	mov	lr, r9
  4060f4:	e5ff      	b.n	405cf6 <_vfiprintf_r+0x2fe>
  4060f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4060f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4060fa:	1c48      	adds	r0, r1, #1
  4060fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406100:	2d00      	cmp	r5, #0
  406102:	f43f ae22 	beq.w	405d4a <_vfiprintf_r+0x352>
  406106:	3201      	adds	r2, #1
  406108:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40610c:	2101      	movs	r1, #1
  40610e:	2807      	cmp	r0, #7
  406110:	9211      	str	r2, [sp, #68]	; 0x44
  406112:	9010      	str	r0, [sp, #64]	; 0x40
  406114:	f8ca 5000 	str.w	r5, [sl]
  406118:	f8ca 1004 	str.w	r1, [sl, #4]
  40611c:	f340 8108 	ble.w	406330 <_vfiprintf_r+0x938>
  406120:	2a00      	cmp	r2, #0
  406122:	f040 81bc 	bne.w	40649e <_vfiprintf_r+0xaa6>
  406126:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406128:	2b00      	cmp	r3, #0
  40612a:	f43f ae1f 	beq.w	405d6c <_vfiprintf_r+0x374>
  40612e:	ab0e      	add	r3, sp, #56	; 0x38
  406130:	2202      	movs	r2, #2
  406132:	4608      	mov	r0, r1
  406134:	931c      	str	r3, [sp, #112]	; 0x70
  406136:	921d      	str	r2, [sp, #116]	; 0x74
  406138:	46ca      	mov	sl, r9
  40613a:	4601      	mov	r1, r0
  40613c:	f10a 0a08 	add.w	sl, sl, #8
  406140:	3001      	adds	r0, #1
  406142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406144:	2b80      	cmp	r3, #128	; 0x80
  406146:	f43f ae19 	beq.w	405d7c <_vfiprintf_r+0x384>
  40614a:	9b05      	ldr	r3, [sp, #20]
  40614c:	1ae4      	subs	r4, r4, r3
  40614e:	2c00      	cmp	r4, #0
  406150:	dd2e      	ble.n	4061b0 <_vfiprintf_r+0x7b8>
  406152:	2c10      	cmp	r4, #16
  406154:	4db3      	ldr	r5, [pc, #716]	; (406424 <_vfiprintf_r+0xa2c>)
  406156:	dd1e      	ble.n	406196 <_vfiprintf_r+0x79e>
  406158:	46d6      	mov	lr, sl
  40615a:	2610      	movs	r6, #16
  40615c:	9f06      	ldr	r7, [sp, #24]
  40615e:	f8dd a010 	ldr.w	sl, [sp, #16]
  406162:	e006      	b.n	406172 <_vfiprintf_r+0x77a>
  406164:	1c88      	adds	r0, r1, #2
  406166:	f10e 0e08 	add.w	lr, lr, #8
  40616a:	4619      	mov	r1, r3
  40616c:	3c10      	subs	r4, #16
  40616e:	2c10      	cmp	r4, #16
  406170:	dd10      	ble.n	406194 <_vfiprintf_r+0x79c>
  406172:	1c4b      	adds	r3, r1, #1
  406174:	3210      	adds	r2, #16
  406176:	2b07      	cmp	r3, #7
  406178:	9211      	str	r2, [sp, #68]	; 0x44
  40617a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40617e:	9310      	str	r3, [sp, #64]	; 0x40
  406180:	ddf0      	ble.n	406164 <_vfiprintf_r+0x76c>
  406182:	2a00      	cmp	r2, #0
  406184:	d165      	bne.n	406252 <_vfiprintf_r+0x85a>
  406186:	3c10      	subs	r4, #16
  406188:	2c10      	cmp	r4, #16
  40618a:	f04f 0001 	mov.w	r0, #1
  40618e:	4611      	mov	r1, r2
  406190:	46ce      	mov	lr, r9
  406192:	dcee      	bgt.n	406172 <_vfiprintf_r+0x77a>
  406194:	46f2      	mov	sl, lr
  406196:	4422      	add	r2, r4
  406198:	2807      	cmp	r0, #7
  40619a:	9211      	str	r2, [sp, #68]	; 0x44
  40619c:	f8ca 5000 	str.w	r5, [sl]
  4061a0:	f8ca 4004 	str.w	r4, [sl, #4]
  4061a4:	9010      	str	r0, [sp, #64]	; 0x40
  4061a6:	f300 8085 	bgt.w	4062b4 <_vfiprintf_r+0x8bc>
  4061aa:	f10a 0a08 	add.w	sl, sl, #8
  4061ae:	3001      	adds	r0, #1
  4061b0:	9905      	ldr	r1, [sp, #20]
  4061b2:	f8ca b000 	str.w	fp, [sl]
  4061b6:	440a      	add	r2, r1
  4061b8:	2807      	cmp	r0, #7
  4061ba:	9211      	str	r2, [sp, #68]	; 0x44
  4061bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4061c0:	9010      	str	r0, [sp, #64]	; 0x40
  4061c2:	f340 8082 	ble.w	4062ca <_vfiprintf_r+0x8d2>
  4061c6:	2a00      	cmp	r2, #0
  4061c8:	f040 8118 	bne.w	4063fc <_vfiprintf_r+0xa04>
  4061cc:	9b02      	ldr	r3, [sp, #8]
  4061ce:	9210      	str	r2, [sp, #64]	; 0x40
  4061d0:	0758      	lsls	r0, r3, #29
  4061d2:	d535      	bpl.n	406240 <_vfiprintf_r+0x848>
  4061d4:	9b08      	ldr	r3, [sp, #32]
  4061d6:	9901      	ldr	r1, [sp, #4]
  4061d8:	1a5c      	subs	r4, r3, r1
  4061da:	2c00      	cmp	r4, #0
  4061dc:	f340 80e7 	ble.w	4063ae <_vfiprintf_r+0x9b6>
  4061e0:	46ca      	mov	sl, r9
  4061e2:	2c10      	cmp	r4, #16
  4061e4:	f340 8218 	ble.w	406618 <_vfiprintf_r+0xc20>
  4061e8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4061ea:	4e8f      	ldr	r6, [pc, #572]	; (406428 <_vfiprintf_r+0xa30>)
  4061ec:	9f06      	ldr	r7, [sp, #24]
  4061ee:	f8dd b010 	ldr.w	fp, [sp, #16]
  4061f2:	2510      	movs	r5, #16
  4061f4:	e006      	b.n	406204 <_vfiprintf_r+0x80c>
  4061f6:	1c88      	adds	r0, r1, #2
  4061f8:	f10a 0a08 	add.w	sl, sl, #8
  4061fc:	4619      	mov	r1, r3
  4061fe:	3c10      	subs	r4, #16
  406200:	2c10      	cmp	r4, #16
  406202:	dd11      	ble.n	406228 <_vfiprintf_r+0x830>
  406204:	1c4b      	adds	r3, r1, #1
  406206:	3210      	adds	r2, #16
  406208:	2b07      	cmp	r3, #7
  40620a:	9211      	str	r2, [sp, #68]	; 0x44
  40620c:	f8ca 6000 	str.w	r6, [sl]
  406210:	f8ca 5004 	str.w	r5, [sl, #4]
  406214:	9310      	str	r3, [sp, #64]	; 0x40
  406216:	ddee      	ble.n	4061f6 <_vfiprintf_r+0x7fe>
  406218:	bb42      	cbnz	r2, 40626c <_vfiprintf_r+0x874>
  40621a:	3c10      	subs	r4, #16
  40621c:	2c10      	cmp	r4, #16
  40621e:	f04f 0001 	mov.w	r0, #1
  406222:	4611      	mov	r1, r2
  406224:	46ca      	mov	sl, r9
  406226:	dced      	bgt.n	406204 <_vfiprintf_r+0x80c>
  406228:	4422      	add	r2, r4
  40622a:	2807      	cmp	r0, #7
  40622c:	9211      	str	r2, [sp, #68]	; 0x44
  40622e:	f8ca 6000 	str.w	r6, [sl]
  406232:	f8ca 4004 	str.w	r4, [sl, #4]
  406236:	9010      	str	r0, [sp, #64]	; 0x40
  406238:	dd51      	ble.n	4062de <_vfiprintf_r+0x8e6>
  40623a:	2a00      	cmp	r2, #0
  40623c:	f040 819b 	bne.w	406576 <_vfiprintf_r+0xb7e>
  406240:	9b03      	ldr	r3, [sp, #12]
  406242:	9a08      	ldr	r2, [sp, #32]
  406244:	9901      	ldr	r1, [sp, #4]
  406246:	428a      	cmp	r2, r1
  406248:	bfac      	ite	ge
  40624a:	189b      	addge	r3, r3, r2
  40624c:	185b      	addlt	r3, r3, r1
  40624e:	9303      	str	r3, [sp, #12]
  406250:	e04e      	b.n	4062f0 <_vfiprintf_r+0x8f8>
  406252:	aa0f      	add	r2, sp, #60	; 0x3c
  406254:	4651      	mov	r1, sl
  406256:	4638      	mov	r0, r7
  406258:	f7ff fb8e 	bl	405978 <__sprint_r.part.0>
  40625c:	2800      	cmp	r0, #0
  40625e:	f040 813f 	bne.w	4064e0 <_vfiprintf_r+0xae8>
  406262:	9910      	ldr	r1, [sp, #64]	; 0x40
  406264:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406266:	1c48      	adds	r0, r1, #1
  406268:	46ce      	mov	lr, r9
  40626a:	e77f      	b.n	40616c <_vfiprintf_r+0x774>
  40626c:	aa0f      	add	r2, sp, #60	; 0x3c
  40626e:	4659      	mov	r1, fp
  406270:	4638      	mov	r0, r7
  406272:	f7ff fb81 	bl	405978 <__sprint_r.part.0>
  406276:	b960      	cbnz	r0, 406292 <_vfiprintf_r+0x89a>
  406278:	9910      	ldr	r1, [sp, #64]	; 0x40
  40627a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40627c:	1c48      	adds	r0, r1, #1
  40627e:	46ca      	mov	sl, r9
  406280:	e7bd      	b.n	4061fe <_vfiprintf_r+0x806>
  406282:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406284:	f8dd b010 	ldr.w	fp, [sp, #16]
  406288:	2b00      	cmp	r3, #0
  40628a:	f040 81d4 	bne.w	406636 <_vfiprintf_r+0xc3e>
  40628e:	2300      	movs	r3, #0
  406290:	9310      	str	r3, [sp, #64]	; 0x40
  406292:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406296:	f013 0f01 	tst.w	r3, #1
  40629a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40629e:	d102      	bne.n	4062a6 <_vfiprintf_r+0x8ae>
  4062a0:	059a      	lsls	r2, r3, #22
  4062a2:	f140 80de 	bpl.w	406462 <_vfiprintf_r+0xa6a>
  4062a6:	065b      	lsls	r3, r3, #25
  4062a8:	f53f acb2 	bmi.w	405c10 <_vfiprintf_r+0x218>
  4062ac:	9803      	ldr	r0, [sp, #12]
  4062ae:	b02d      	add	sp, #180	; 0xb4
  4062b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062b4:	2a00      	cmp	r2, #0
  4062b6:	f040 8106 	bne.w	4064c6 <_vfiprintf_r+0xace>
  4062ba:	9a05      	ldr	r2, [sp, #20]
  4062bc:	921d      	str	r2, [sp, #116]	; 0x74
  4062be:	2301      	movs	r3, #1
  4062c0:	9211      	str	r2, [sp, #68]	; 0x44
  4062c2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4062c6:	9310      	str	r3, [sp, #64]	; 0x40
  4062c8:	46ca      	mov	sl, r9
  4062ca:	f10a 0a08 	add.w	sl, sl, #8
  4062ce:	9b02      	ldr	r3, [sp, #8]
  4062d0:	0759      	lsls	r1, r3, #29
  4062d2:	d504      	bpl.n	4062de <_vfiprintf_r+0x8e6>
  4062d4:	9b08      	ldr	r3, [sp, #32]
  4062d6:	9901      	ldr	r1, [sp, #4]
  4062d8:	1a5c      	subs	r4, r3, r1
  4062da:	2c00      	cmp	r4, #0
  4062dc:	dc81      	bgt.n	4061e2 <_vfiprintf_r+0x7ea>
  4062de:	9b03      	ldr	r3, [sp, #12]
  4062e0:	9908      	ldr	r1, [sp, #32]
  4062e2:	9801      	ldr	r0, [sp, #4]
  4062e4:	4281      	cmp	r1, r0
  4062e6:	bfac      	ite	ge
  4062e8:	185b      	addge	r3, r3, r1
  4062ea:	181b      	addlt	r3, r3, r0
  4062ec:	9303      	str	r3, [sp, #12]
  4062ee:	bb72      	cbnz	r2, 40634e <_vfiprintf_r+0x956>
  4062f0:	2300      	movs	r3, #0
  4062f2:	9310      	str	r3, [sp, #64]	; 0x40
  4062f4:	46ca      	mov	sl, r9
  4062f6:	f7ff bbbc 	b.w	405a72 <_vfiprintf_r+0x7a>
  4062fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4062fc:	9904      	ldr	r1, [sp, #16]
  4062fe:	4620      	mov	r0, r4
  406300:	f7ff fb3a 	bl	405978 <__sprint_r.part.0>
  406304:	bb50      	cbnz	r0, 40635c <_vfiprintf_r+0x964>
  406306:	9910      	ldr	r1, [sp, #64]	; 0x40
  406308:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40630a:	f101 0e01 	add.w	lr, r1, #1
  40630e:	46cc      	mov	ip, r9
  406310:	e548      	b.n	405da4 <_vfiprintf_r+0x3ac>
  406312:	2a00      	cmp	r2, #0
  406314:	f040 8140 	bne.w	406598 <_vfiprintf_r+0xba0>
  406318:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40631c:	2900      	cmp	r1, #0
  40631e:	f000 811b 	beq.w	406558 <_vfiprintf_r+0xb60>
  406322:	2201      	movs	r2, #1
  406324:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406328:	4610      	mov	r0, r2
  40632a:	921d      	str	r2, [sp, #116]	; 0x74
  40632c:	911c      	str	r1, [sp, #112]	; 0x70
  40632e:	46ca      	mov	sl, r9
  406330:	4601      	mov	r1, r0
  406332:	f10a 0a08 	add.w	sl, sl, #8
  406336:	3001      	adds	r0, #1
  406338:	e507      	b.n	405d4a <_vfiprintf_r+0x352>
  40633a:	9b02      	ldr	r3, [sp, #8]
  40633c:	2a01      	cmp	r2, #1
  40633e:	f000 8098 	beq.w	406472 <_vfiprintf_r+0xa7a>
  406342:	2a02      	cmp	r2, #2
  406344:	d10d      	bne.n	406362 <_vfiprintf_r+0x96a>
  406346:	9302      	str	r3, [sp, #8]
  406348:	2600      	movs	r6, #0
  40634a:	2700      	movs	r7, #0
  40634c:	e5b0      	b.n	405eb0 <_vfiprintf_r+0x4b8>
  40634e:	aa0f      	add	r2, sp, #60	; 0x3c
  406350:	9904      	ldr	r1, [sp, #16]
  406352:	9806      	ldr	r0, [sp, #24]
  406354:	f7ff fb10 	bl	405978 <__sprint_r.part.0>
  406358:	2800      	cmp	r0, #0
  40635a:	d0c9      	beq.n	4062f0 <_vfiprintf_r+0x8f8>
  40635c:	f8dd b010 	ldr.w	fp, [sp, #16]
  406360:	e797      	b.n	406292 <_vfiprintf_r+0x89a>
  406362:	9302      	str	r3, [sp, #8]
  406364:	2600      	movs	r6, #0
  406366:	2700      	movs	r7, #0
  406368:	4649      	mov	r1, r9
  40636a:	e000      	b.n	40636e <_vfiprintf_r+0x976>
  40636c:	4659      	mov	r1, fp
  40636e:	08f2      	lsrs	r2, r6, #3
  406370:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406374:	08f8      	lsrs	r0, r7, #3
  406376:	f006 0307 	and.w	r3, r6, #7
  40637a:	4607      	mov	r7, r0
  40637c:	4616      	mov	r6, r2
  40637e:	3330      	adds	r3, #48	; 0x30
  406380:	ea56 0207 	orrs.w	r2, r6, r7
  406384:	f801 3c01 	strb.w	r3, [r1, #-1]
  406388:	f101 3bff 	add.w	fp, r1, #4294967295
  40638c:	d1ee      	bne.n	40636c <_vfiprintf_r+0x974>
  40638e:	9a02      	ldr	r2, [sp, #8]
  406390:	07d6      	lsls	r6, r2, #31
  406392:	f57f ad9d 	bpl.w	405ed0 <_vfiprintf_r+0x4d8>
  406396:	2b30      	cmp	r3, #48	; 0x30
  406398:	f43f ad9a 	beq.w	405ed0 <_vfiprintf_r+0x4d8>
  40639c:	3902      	subs	r1, #2
  40639e:	2330      	movs	r3, #48	; 0x30
  4063a0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4063a4:	eba9 0301 	sub.w	r3, r9, r1
  4063a8:	9305      	str	r3, [sp, #20]
  4063aa:	468b      	mov	fp, r1
  4063ac:	e476      	b.n	405c9c <_vfiprintf_r+0x2a4>
  4063ae:	9b03      	ldr	r3, [sp, #12]
  4063b0:	9a08      	ldr	r2, [sp, #32]
  4063b2:	428a      	cmp	r2, r1
  4063b4:	bfac      	ite	ge
  4063b6:	189b      	addge	r3, r3, r2
  4063b8:	185b      	addlt	r3, r3, r1
  4063ba:	9303      	str	r3, [sp, #12]
  4063bc:	e798      	b.n	4062f0 <_vfiprintf_r+0x8f8>
  4063be:	2202      	movs	r2, #2
  4063c0:	e44d      	b.n	405c5e <_vfiprintf_r+0x266>
  4063c2:	2f00      	cmp	r7, #0
  4063c4:	bf08      	it	eq
  4063c6:	2e0a      	cmpeq	r6, #10
  4063c8:	d352      	bcc.n	406470 <_vfiprintf_r+0xa78>
  4063ca:	46cb      	mov	fp, r9
  4063cc:	4630      	mov	r0, r6
  4063ce:	4639      	mov	r1, r7
  4063d0:	220a      	movs	r2, #10
  4063d2:	2300      	movs	r3, #0
  4063d4:	f003 fbd0 	bl	409b78 <__aeabi_uldivmod>
  4063d8:	3230      	adds	r2, #48	; 0x30
  4063da:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4063de:	4630      	mov	r0, r6
  4063e0:	4639      	mov	r1, r7
  4063e2:	2300      	movs	r3, #0
  4063e4:	220a      	movs	r2, #10
  4063e6:	f003 fbc7 	bl	409b78 <__aeabi_uldivmod>
  4063ea:	4606      	mov	r6, r0
  4063ec:	460f      	mov	r7, r1
  4063ee:	ea56 0307 	orrs.w	r3, r6, r7
  4063f2:	d1eb      	bne.n	4063cc <_vfiprintf_r+0x9d4>
  4063f4:	e56c      	b.n	405ed0 <_vfiprintf_r+0x4d8>
  4063f6:	9405      	str	r4, [sp, #20]
  4063f8:	46cb      	mov	fp, r9
  4063fa:	e44f      	b.n	405c9c <_vfiprintf_r+0x2a4>
  4063fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4063fe:	9904      	ldr	r1, [sp, #16]
  406400:	9806      	ldr	r0, [sp, #24]
  406402:	f7ff fab9 	bl	405978 <__sprint_r.part.0>
  406406:	2800      	cmp	r0, #0
  406408:	d1a8      	bne.n	40635c <_vfiprintf_r+0x964>
  40640a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40640c:	46ca      	mov	sl, r9
  40640e:	e75e      	b.n	4062ce <_vfiprintf_r+0x8d6>
  406410:	aa0f      	add	r2, sp, #60	; 0x3c
  406412:	9904      	ldr	r1, [sp, #16]
  406414:	9806      	ldr	r0, [sp, #24]
  406416:	f7ff faaf 	bl	405978 <__sprint_r.part.0>
  40641a:	2800      	cmp	r0, #0
  40641c:	d19e      	bne.n	40635c <_vfiprintf_r+0x964>
  40641e:	46ca      	mov	sl, r9
  406420:	f7ff bbc0 	b.w	405ba4 <_vfiprintf_r+0x1ac>
  406424:	00409fdc 	.word	0x00409fdc
  406428:	00409fcc 	.word	0x00409fcc
  40642c:	3104      	adds	r1, #4
  40642e:	6816      	ldr	r6, [r2, #0]
  406430:	9107      	str	r1, [sp, #28]
  406432:	2201      	movs	r2, #1
  406434:	2700      	movs	r7, #0
  406436:	e412      	b.n	405c5e <_vfiprintf_r+0x266>
  406438:	9807      	ldr	r0, [sp, #28]
  40643a:	4601      	mov	r1, r0
  40643c:	3104      	adds	r1, #4
  40643e:	6806      	ldr	r6, [r0, #0]
  406440:	9107      	str	r1, [sp, #28]
  406442:	2700      	movs	r7, #0
  406444:	e40b      	b.n	405c5e <_vfiprintf_r+0x266>
  406446:	680e      	ldr	r6, [r1, #0]
  406448:	3104      	adds	r1, #4
  40644a:	9107      	str	r1, [sp, #28]
  40644c:	2700      	movs	r7, #0
  40644e:	e591      	b.n	405f74 <_vfiprintf_r+0x57c>
  406450:	9907      	ldr	r1, [sp, #28]
  406452:	680e      	ldr	r6, [r1, #0]
  406454:	460a      	mov	r2, r1
  406456:	17f7      	asrs	r7, r6, #31
  406458:	3204      	adds	r2, #4
  40645a:	9207      	str	r2, [sp, #28]
  40645c:	4630      	mov	r0, r6
  40645e:	4639      	mov	r1, r7
  406460:	e50f      	b.n	405e82 <_vfiprintf_r+0x48a>
  406462:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406466:	f001 fe4d 	bl	408104 <__retarget_lock_release_recursive>
  40646a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40646e:	e71a      	b.n	4062a6 <_vfiprintf_r+0x8ae>
  406470:	9b02      	ldr	r3, [sp, #8]
  406472:	9302      	str	r3, [sp, #8]
  406474:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406478:	3630      	adds	r6, #48	; 0x30
  40647a:	2301      	movs	r3, #1
  40647c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406480:	9305      	str	r3, [sp, #20]
  406482:	e40b      	b.n	405c9c <_vfiprintf_r+0x2a4>
  406484:	aa0f      	add	r2, sp, #60	; 0x3c
  406486:	9904      	ldr	r1, [sp, #16]
  406488:	9806      	ldr	r0, [sp, #24]
  40648a:	f7ff fa75 	bl	405978 <__sprint_r.part.0>
  40648e:	2800      	cmp	r0, #0
  406490:	f47f af64 	bne.w	40635c <_vfiprintf_r+0x964>
  406494:	9910      	ldr	r1, [sp, #64]	; 0x40
  406496:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406498:	1c48      	adds	r0, r1, #1
  40649a:	46ca      	mov	sl, r9
  40649c:	e651      	b.n	406142 <_vfiprintf_r+0x74a>
  40649e:	aa0f      	add	r2, sp, #60	; 0x3c
  4064a0:	9904      	ldr	r1, [sp, #16]
  4064a2:	9806      	ldr	r0, [sp, #24]
  4064a4:	f7ff fa68 	bl	405978 <__sprint_r.part.0>
  4064a8:	2800      	cmp	r0, #0
  4064aa:	f47f af57 	bne.w	40635c <_vfiprintf_r+0x964>
  4064ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4064b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064b2:	1c48      	adds	r0, r1, #1
  4064b4:	46ca      	mov	sl, r9
  4064b6:	e448      	b.n	405d4a <_vfiprintf_r+0x352>
  4064b8:	2a00      	cmp	r2, #0
  4064ba:	f040 8091 	bne.w	4065e0 <_vfiprintf_r+0xbe8>
  4064be:	2001      	movs	r0, #1
  4064c0:	4611      	mov	r1, r2
  4064c2:	46ca      	mov	sl, r9
  4064c4:	e641      	b.n	40614a <_vfiprintf_r+0x752>
  4064c6:	aa0f      	add	r2, sp, #60	; 0x3c
  4064c8:	9904      	ldr	r1, [sp, #16]
  4064ca:	9806      	ldr	r0, [sp, #24]
  4064cc:	f7ff fa54 	bl	405978 <__sprint_r.part.0>
  4064d0:	2800      	cmp	r0, #0
  4064d2:	f47f af43 	bne.w	40635c <_vfiprintf_r+0x964>
  4064d6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4064d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064da:	3001      	adds	r0, #1
  4064dc:	46ca      	mov	sl, r9
  4064de:	e667      	b.n	4061b0 <_vfiprintf_r+0x7b8>
  4064e0:	46d3      	mov	fp, sl
  4064e2:	e6d6      	b.n	406292 <_vfiprintf_r+0x89a>
  4064e4:	9e07      	ldr	r6, [sp, #28]
  4064e6:	3607      	adds	r6, #7
  4064e8:	f026 0207 	bic.w	r2, r6, #7
  4064ec:	f102 0108 	add.w	r1, r2, #8
  4064f0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4064f4:	9107      	str	r1, [sp, #28]
  4064f6:	2201      	movs	r2, #1
  4064f8:	f7ff bbb1 	b.w	405c5e <_vfiprintf_r+0x266>
  4064fc:	9e07      	ldr	r6, [sp, #28]
  4064fe:	3607      	adds	r6, #7
  406500:	f026 0607 	bic.w	r6, r6, #7
  406504:	e9d6 0100 	ldrd	r0, r1, [r6]
  406508:	f106 0208 	add.w	r2, r6, #8
  40650c:	9207      	str	r2, [sp, #28]
  40650e:	4606      	mov	r6, r0
  406510:	460f      	mov	r7, r1
  406512:	e4b6      	b.n	405e82 <_vfiprintf_r+0x48a>
  406514:	9e07      	ldr	r6, [sp, #28]
  406516:	3607      	adds	r6, #7
  406518:	f026 0207 	bic.w	r2, r6, #7
  40651c:	f102 0108 	add.w	r1, r2, #8
  406520:	e9d2 6700 	ldrd	r6, r7, [r2]
  406524:	9107      	str	r1, [sp, #28]
  406526:	2200      	movs	r2, #0
  406528:	f7ff bb99 	b.w	405c5e <_vfiprintf_r+0x266>
  40652c:	9e07      	ldr	r6, [sp, #28]
  40652e:	3607      	adds	r6, #7
  406530:	f026 0107 	bic.w	r1, r6, #7
  406534:	f101 0008 	add.w	r0, r1, #8
  406538:	9007      	str	r0, [sp, #28]
  40653a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40653e:	e519      	b.n	405f74 <_vfiprintf_r+0x57c>
  406540:	46cb      	mov	fp, r9
  406542:	f7ff bbab 	b.w	405c9c <_vfiprintf_r+0x2a4>
  406546:	252d      	movs	r5, #45	; 0x2d
  406548:	4276      	negs	r6, r6
  40654a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40654e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406552:	2201      	movs	r2, #1
  406554:	f7ff bb88 	b.w	405c68 <_vfiprintf_r+0x270>
  406558:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40655a:	b9b3      	cbnz	r3, 40658a <_vfiprintf_r+0xb92>
  40655c:	4611      	mov	r1, r2
  40655e:	2001      	movs	r0, #1
  406560:	46ca      	mov	sl, r9
  406562:	e5f2      	b.n	40614a <_vfiprintf_r+0x752>
  406564:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406568:	f001 fdcc 	bl	408104 <__retarget_lock_release_recursive>
  40656c:	f04f 33ff 	mov.w	r3, #4294967295
  406570:	9303      	str	r3, [sp, #12]
  406572:	f7ff bb50 	b.w	405c16 <_vfiprintf_r+0x21e>
  406576:	aa0f      	add	r2, sp, #60	; 0x3c
  406578:	9904      	ldr	r1, [sp, #16]
  40657a:	9806      	ldr	r0, [sp, #24]
  40657c:	f7ff f9fc 	bl	405978 <__sprint_r.part.0>
  406580:	2800      	cmp	r0, #0
  406582:	f47f aeeb 	bne.w	40635c <_vfiprintf_r+0x964>
  406586:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406588:	e6a9      	b.n	4062de <_vfiprintf_r+0x8e6>
  40658a:	ab0e      	add	r3, sp, #56	; 0x38
  40658c:	2202      	movs	r2, #2
  40658e:	931c      	str	r3, [sp, #112]	; 0x70
  406590:	921d      	str	r2, [sp, #116]	; 0x74
  406592:	2001      	movs	r0, #1
  406594:	46ca      	mov	sl, r9
  406596:	e5d0      	b.n	40613a <_vfiprintf_r+0x742>
  406598:	aa0f      	add	r2, sp, #60	; 0x3c
  40659a:	9904      	ldr	r1, [sp, #16]
  40659c:	9806      	ldr	r0, [sp, #24]
  40659e:	f7ff f9eb 	bl	405978 <__sprint_r.part.0>
  4065a2:	2800      	cmp	r0, #0
  4065a4:	f47f aeda 	bne.w	40635c <_vfiprintf_r+0x964>
  4065a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4065aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4065ac:	1c48      	adds	r0, r1, #1
  4065ae:	46ca      	mov	sl, r9
  4065b0:	e5a4      	b.n	4060fc <_vfiprintf_r+0x704>
  4065b2:	9a07      	ldr	r2, [sp, #28]
  4065b4:	9903      	ldr	r1, [sp, #12]
  4065b6:	6813      	ldr	r3, [r2, #0]
  4065b8:	17cd      	asrs	r5, r1, #31
  4065ba:	4608      	mov	r0, r1
  4065bc:	3204      	adds	r2, #4
  4065be:	4629      	mov	r1, r5
  4065c0:	9207      	str	r2, [sp, #28]
  4065c2:	e9c3 0100 	strd	r0, r1, [r3]
  4065c6:	f7ff ba54 	b.w	405a72 <_vfiprintf_r+0x7a>
  4065ca:	4658      	mov	r0, fp
  4065cc:	9607      	str	r6, [sp, #28]
  4065ce:	9302      	str	r3, [sp, #8]
  4065d0:	f7fd ff36 	bl	404440 <strlen>
  4065d4:	2400      	movs	r4, #0
  4065d6:	9005      	str	r0, [sp, #20]
  4065d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4065dc:	f7ff bb5e 	b.w	405c9c <_vfiprintf_r+0x2a4>
  4065e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4065e2:	9904      	ldr	r1, [sp, #16]
  4065e4:	9806      	ldr	r0, [sp, #24]
  4065e6:	f7ff f9c7 	bl	405978 <__sprint_r.part.0>
  4065ea:	2800      	cmp	r0, #0
  4065ec:	f47f aeb6 	bne.w	40635c <_vfiprintf_r+0x964>
  4065f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4065f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4065f4:	1c48      	adds	r0, r1, #1
  4065f6:	46ca      	mov	sl, r9
  4065f8:	e5a7      	b.n	40614a <_vfiprintf_r+0x752>
  4065fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4065fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4065fe:	4e20      	ldr	r6, [pc, #128]	; (406680 <_vfiprintf_r+0xc88>)
  406600:	3101      	adds	r1, #1
  406602:	f7ff bb90 	b.w	405d26 <_vfiprintf_r+0x32e>
  406606:	2c06      	cmp	r4, #6
  406608:	bf28      	it	cs
  40660a:	2406      	movcs	r4, #6
  40660c:	9405      	str	r4, [sp, #20]
  40660e:	9607      	str	r6, [sp, #28]
  406610:	9401      	str	r4, [sp, #4]
  406612:	f8df b070 	ldr.w	fp, [pc, #112]	; 406684 <_vfiprintf_r+0xc8c>
  406616:	e4d5      	b.n	405fc4 <_vfiprintf_r+0x5cc>
  406618:	9810      	ldr	r0, [sp, #64]	; 0x40
  40661a:	4e19      	ldr	r6, [pc, #100]	; (406680 <_vfiprintf_r+0xc88>)
  40661c:	3001      	adds	r0, #1
  40661e:	e603      	b.n	406228 <_vfiprintf_r+0x830>
  406620:	9405      	str	r4, [sp, #20]
  406622:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406626:	9607      	str	r6, [sp, #28]
  406628:	9302      	str	r3, [sp, #8]
  40662a:	4604      	mov	r4, r0
  40662c:	f7ff bb36 	b.w	405c9c <_vfiprintf_r+0x2a4>
  406630:	4686      	mov	lr, r0
  406632:	f7ff bbce 	b.w	405dd2 <_vfiprintf_r+0x3da>
  406636:	9806      	ldr	r0, [sp, #24]
  406638:	aa0f      	add	r2, sp, #60	; 0x3c
  40663a:	4659      	mov	r1, fp
  40663c:	f7ff f99c 	bl	405978 <__sprint_r.part.0>
  406640:	2800      	cmp	r0, #0
  406642:	f43f ae24 	beq.w	40628e <_vfiprintf_r+0x896>
  406646:	e624      	b.n	406292 <_vfiprintf_r+0x89a>
  406648:	9907      	ldr	r1, [sp, #28]
  40664a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40664e:	680c      	ldr	r4, [r1, #0]
  406650:	3104      	adds	r1, #4
  406652:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406656:	46b8      	mov	r8, r7
  406658:	9107      	str	r1, [sp, #28]
  40665a:	f7ff ba3f 	b.w	405adc <_vfiprintf_r+0xe4>
  40665e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406662:	e43c      	b.n	405ede <_vfiprintf_r+0x4e6>
  406664:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406668:	e521      	b.n	4060ae <_vfiprintf_r+0x6b6>
  40666a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40666e:	f7ff bbf4 	b.w	405e5a <_vfiprintf_r+0x462>
  406672:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406676:	e491      	b.n	405f9c <_vfiprintf_r+0x5a4>
  406678:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40667c:	e469      	b.n	405f52 <_vfiprintf_r+0x55a>
  40667e:	bf00      	nop
  406680:	00409fcc 	.word	0x00409fcc
  406684:	00409fa0 	.word	0x00409fa0

00406688 <__sbprintf>:
  406688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40668c:	460c      	mov	r4, r1
  40668e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406692:	8989      	ldrh	r1, [r1, #12]
  406694:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406696:	89e5      	ldrh	r5, [r4, #14]
  406698:	9619      	str	r6, [sp, #100]	; 0x64
  40669a:	f021 0102 	bic.w	r1, r1, #2
  40669e:	4606      	mov	r6, r0
  4066a0:	69e0      	ldr	r0, [r4, #28]
  4066a2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4066a6:	4617      	mov	r7, r2
  4066a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4066ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4066ae:	f8ad 500e 	strh.w	r5, [sp, #14]
  4066b2:	4698      	mov	r8, r3
  4066b4:	ad1a      	add	r5, sp, #104	; 0x68
  4066b6:	2300      	movs	r3, #0
  4066b8:	9007      	str	r0, [sp, #28]
  4066ba:	a816      	add	r0, sp, #88	; 0x58
  4066bc:	9209      	str	r2, [sp, #36]	; 0x24
  4066be:	9306      	str	r3, [sp, #24]
  4066c0:	9500      	str	r5, [sp, #0]
  4066c2:	9504      	str	r5, [sp, #16]
  4066c4:	9102      	str	r1, [sp, #8]
  4066c6:	9105      	str	r1, [sp, #20]
  4066c8:	f001 fd16 	bl	4080f8 <__retarget_lock_init_recursive>
  4066cc:	4643      	mov	r3, r8
  4066ce:	463a      	mov	r2, r7
  4066d0:	4669      	mov	r1, sp
  4066d2:	4630      	mov	r0, r6
  4066d4:	f7ff f990 	bl	4059f8 <_vfiprintf_r>
  4066d8:	1e05      	subs	r5, r0, #0
  4066da:	db07      	blt.n	4066ec <__sbprintf+0x64>
  4066dc:	4630      	mov	r0, r6
  4066de:	4669      	mov	r1, sp
  4066e0:	f001 f8e8 	bl	4078b4 <_fflush_r>
  4066e4:	2800      	cmp	r0, #0
  4066e6:	bf18      	it	ne
  4066e8:	f04f 35ff 	movne.w	r5, #4294967295
  4066ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4066f0:	065b      	lsls	r3, r3, #25
  4066f2:	d503      	bpl.n	4066fc <__sbprintf+0x74>
  4066f4:	89a3      	ldrh	r3, [r4, #12]
  4066f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4066fa:	81a3      	strh	r3, [r4, #12]
  4066fc:	9816      	ldr	r0, [sp, #88]	; 0x58
  4066fe:	f001 fcfd 	bl	4080fc <__retarget_lock_close_recursive>
  406702:	4628      	mov	r0, r5
  406704:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040670c <__swsetup_r>:
  40670c:	b538      	push	{r3, r4, r5, lr}
  40670e:	4b30      	ldr	r3, [pc, #192]	; (4067d0 <__swsetup_r+0xc4>)
  406710:	681b      	ldr	r3, [r3, #0]
  406712:	4605      	mov	r5, r0
  406714:	460c      	mov	r4, r1
  406716:	b113      	cbz	r3, 40671e <__swsetup_r+0x12>
  406718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40671a:	2a00      	cmp	r2, #0
  40671c:	d038      	beq.n	406790 <__swsetup_r+0x84>
  40671e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406722:	b293      	uxth	r3, r2
  406724:	0718      	lsls	r0, r3, #28
  406726:	d50c      	bpl.n	406742 <__swsetup_r+0x36>
  406728:	6920      	ldr	r0, [r4, #16]
  40672a:	b1a8      	cbz	r0, 406758 <__swsetup_r+0x4c>
  40672c:	f013 0201 	ands.w	r2, r3, #1
  406730:	d01e      	beq.n	406770 <__swsetup_r+0x64>
  406732:	6963      	ldr	r3, [r4, #20]
  406734:	2200      	movs	r2, #0
  406736:	425b      	negs	r3, r3
  406738:	61a3      	str	r3, [r4, #24]
  40673a:	60a2      	str	r2, [r4, #8]
  40673c:	b1f0      	cbz	r0, 40677c <__swsetup_r+0x70>
  40673e:	2000      	movs	r0, #0
  406740:	bd38      	pop	{r3, r4, r5, pc}
  406742:	06d9      	lsls	r1, r3, #27
  406744:	d53c      	bpl.n	4067c0 <__swsetup_r+0xb4>
  406746:	0758      	lsls	r0, r3, #29
  406748:	d426      	bmi.n	406798 <__swsetup_r+0x8c>
  40674a:	6920      	ldr	r0, [r4, #16]
  40674c:	f042 0308 	orr.w	r3, r2, #8
  406750:	81a3      	strh	r3, [r4, #12]
  406752:	b29b      	uxth	r3, r3
  406754:	2800      	cmp	r0, #0
  406756:	d1e9      	bne.n	40672c <__swsetup_r+0x20>
  406758:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40675c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406760:	d0e4      	beq.n	40672c <__swsetup_r+0x20>
  406762:	4628      	mov	r0, r5
  406764:	4621      	mov	r1, r4
  406766:	f001 fcfd 	bl	408164 <__smakebuf_r>
  40676a:	89a3      	ldrh	r3, [r4, #12]
  40676c:	6920      	ldr	r0, [r4, #16]
  40676e:	e7dd      	b.n	40672c <__swsetup_r+0x20>
  406770:	0799      	lsls	r1, r3, #30
  406772:	bf58      	it	pl
  406774:	6962      	ldrpl	r2, [r4, #20]
  406776:	60a2      	str	r2, [r4, #8]
  406778:	2800      	cmp	r0, #0
  40677a:	d1e0      	bne.n	40673e <__swsetup_r+0x32>
  40677c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406780:	061a      	lsls	r2, r3, #24
  406782:	d5dd      	bpl.n	406740 <__swsetup_r+0x34>
  406784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406788:	81a3      	strh	r3, [r4, #12]
  40678a:	f04f 30ff 	mov.w	r0, #4294967295
  40678e:	bd38      	pop	{r3, r4, r5, pc}
  406790:	4618      	mov	r0, r3
  406792:	f001 f8e7 	bl	407964 <__sinit>
  406796:	e7c2      	b.n	40671e <__swsetup_r+0x12>
  406798:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40679a:	b151      	cbz	r1, 4067b2 <__swsetup_r+0xa6>
  40679c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4067a0:	4299      	cmp	r1, r3
  4067a2:	d004      	beq.n	4067ae <__swsetup_r+0xa2>
  4067a4:	4628      	mov	r0, r5
  4067a6:	f001 fa03 	bl	407bb0 <_free_r>
  4067aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4067ae:	2300      	movs	r3, #0
  4067b0:	6323      	str	r3, [r4, #48]	; 0x30
  4067b2:	2300      	movs	r3, #0
  4067b4:	6920      	ldr	r0, [r4, #16]
  4067b6:	6063      	str	r3, [r4, #4]
  4067b8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4067bc:	6020      	str	r0, [r4, #0]
  4067be:	e7c5      	b.n	40674c <__swsetup_r+0x40>
  4067c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4067c4:	2309      	movs	r3, #9
  4067c6:	602b      	str	r3, [r5, #0]
  4067c8:	f04f 30ff 	mov.w	r0, #4294967295
  4067cc:	81a2      	strh	r2, [r4, #12]
  4067ce:	bd38      	pop	{r3, r4, r5, pc}
  4067d0:	2040000c 	.word	0x2040000c

004067d4 <register_fini>:
  4067d4:	4b02      	ldr	r3, [pc, #8]	; (4067e0 <register_fini+0xc>)
  4067d6:	b113      	cbz	r3, 4067de <register_fini+0xa>
  4067d8:	4802      	ldr	r0, [pc, #8]	; (4067e4 <register_fini+0x10>)
  4067da:	f000 b805 	b.w	4067e8 <atexit>
  4067de:	4770      	bx	lr
  4067e0:	00000000 	.word	0x00000000
  4067e4:	004079d5 	.word	0x004079d5

004067e8 <atexit>:
  4067e8:	2300      	movs	r3, #0
  4067ea:	4601      	mov	r1, r0
  4067ec:	461a      	mov	r2, r3
  4067ee:	4618      	mov	r0, r3
  4067f0:	f002 bbda 	b.w	408fa8 <__register_exitproc>

004067f4 <quorem>:
  4067f4:	6902      	ldr	r2, [r0, #16]
  4067f6:	690b      	ldr	r3, [r1, #16]
  4067f8:	4293      	cmp	r3, r2
  4067fa:	f300 808d 	bgt.w	406918 <quorem+0x124>
  4067fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406802:	f103 38ff 	add.w	r8, r3, #4294967295
  406806:	f101 0714 	add.w	r7, r1, #20
  40680a:	f100 0b14 	add.w	fp, r0, #20
  40680e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  406812:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406816:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40681a:	b083      	sub	sp, #12
  40681c:	3201      	adds	r2, #1
  40681e:	fbb3 f9f2 	udiv	r9, r3, r2
  406822:	eb0b 0304 	add.w	r3, fp, r4
  406826:	9400      	str	r4, [sp, #0]
  406828:	eb07 0a04 	add.w	sl, r7, r4
  40682c:	9301      	str	r3, [sp, #4]
  40682e:	f1b9 0f00 	cmp.w	r9, #0
  406832:	d039      	beq.n	4068a8 <quorem+0xb4>
  406834:	2500      	movs	r5, #0
  406836:	462e      	mov	r6, r5
  406838:	46bc      	mov	ip, r7
  40683a:	46de      	mov	lr, fp
  40683c:	f85c 4b04 	ldr.w	r4, [ip], #4
  406840:	f8de 3000 	ldr.w	r3, [lr]
  406844:	b2a2      	uxth	r2, r4
  406846:	fb09 5502 	mla	r5, r9, r2, r5
  40684a:	0c22      	lsrs	r2, r4, #16
  40684c:	0c2c      	lsrs	r4, r5, #16
  40684e:	fb09 4202 	mla	r2, r9, r2, r4
  406852:	b2ad      	uxth	r5, r5
  406854:	1b75      	subs	r5, r6, r5
  406856:	b296      	uxth	r6, r2
  406858:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40685c:	fa15 f383 	uxtah	r3, r5, r3
  406860:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406864:	b29b      	uxth	r3, r3
  406866:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40686a:	45e2      	cmp	sl, ip
  40686c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  406870:	f84e 3b04 	str.w	r3, [lr], #4
  406874:	ea4f 4626 	mov.w	r6, r6, asr #16
  406878:	d2e0      	bcs.n	40683c <quorem+0x48>
  40687a:	9b00      	ldr	r3, [sp, #0]
  40687c:	f85b 3003 	ldr.w	r3, [fp, r3]
  406880:	b993      	cbnz	r3, 4068a8 <quorem+0xb4>
  406882:	9c01      	ldr	r4, [sp, #4]
  406884:	1f23      	subs	r3, r4, #4
  406886:	459b      	cmp	fp, r3
  406888:	d20c      	bcs.n	4068a4 <quorem+0xb0>
  40688a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40688e:	b94b      	cbnz	r3, 4068a4 <quorem+0xb0>
  406890:	f1a4 0308 	sub.w	r3, r4, #8
  406894:	e002      	b.n	40689c <quorem+0xa8>
  406896:	681a      	ldr	r2, [r3, #0]
  406898:	3b04      	subs	r3, #4
  40689a:	b91a      	cbnz	r2, 4068a4 <quorem+0xb0>
  40689c:	459b      	cmp	fp, r3
  40689e:	f108 38ff 	add.w	r8, r8, #4294967295
  4068a2:	d3f8      	bcc.n	406896 <quorem+0xa2>
  4068a4:	f8c0 8010 	str.w	r8, [r0, #16]
  4068a8:	4604      	mov	r4, r0
  4068aa:	f001 ff73 	bl	408794 <__mcmp>
  4068ae:	2800      	cmp	r0, #0
  4068b0:	db2e      	blt.n	406910 <quorem+0x11c>
  4068b2:	f109 0901 	add.w	r9, r9, #1
  4068b6:	465d      	mov	r5, fp
  4068b8:	2300      	movs	r3, #0
  4068ba:	f857 1b04 	ldr.w	r1, [r7], #4
  4068be:	6828      	ldr	r0, [r5, #0]
  4068c0:	b28a      	uxth	r2, r1
  4068c2:	1a9a      	subs	r2, r3, r2
  4068c4:	0c0b      	lsrs	r3, r1, #16
  4068c6:	fa12 f280 	uxtah	r2, r2, r0
  4068ca:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4068ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4068d2:	b292      	uxth	r2, r2
  4068d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4068d8:	45ba      	cmp	sl, r7
  4068da:	f845 2b04 	str.w	r2, [r5], #4
  4068de:	ea4f 4323 	mov.w	r3, r3, asr #16
  4068e2:	d2ea      	bcs.n	4068ba <quorem+0xc6>
  4068e4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4068e8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4068ec:	b982      	cbnz	r2, 406910 <quorem+0x11c>
  4068ee:	1f1a      	subs	r2, r3, #4
  4068f0:	4593      	cmp	fp, r2
  4068f2:	d20b      	bcs.n	40690c <quorem+0x118>
  4068f4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4068f8:	b942      	cbnz	r2, 40690c <quorem+0x118>
  4068fa:	3b08      	subs	r3, #8
  4068fc:	e002      	b.n	406904 <quorem+0x110>
  4068fe:	681a      	ldr	r2, [r3, #0]
  406900:	3b04      	subs	r3, #4
  406902:	b91a      	cbnz	r2, 40690c <quorem+0x118>
  406904:	459b      	cmp	fp, r3
  406906:	f108 38ff 	add.w	r8, r8, #4294967295
  40690a:	d3f8      	bcc.n	4068fe <quorem+0x10a>
  40690c:	f8c4 8010 	str.w	r8, [r4, #16]
  406910:	4648      	mov	r0, r9
  406912:	b003      	add	sp, #12
  406914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406918:	2000      	movs	r0, #0
  40691a:	4770      	bx	lr
  40691c:	0000      	movs	r0, r0
	...

00406920 <_dtoa_r>:
  406920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406924:	6c01      	ldr	r1, [r0, #64]	; 0x40
  406926:	b09b      	sub	sp, #108	; 0x6c
  406928:	4604      	mov	r4, r0
  40692a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40692c:	4692      	mov	sl, r2
  40692e:	469b      	mov	fp, r3
  406930:	b141      	cbz	r1, 406944 <_dtoa_r+0x24>
  406932:	6c42      	ldr	r2, [r0, #68]	; 0x44
  406934:	604a      	str	r2, [r1, #4]
  406936:	2301      	movs	r3, #1
  406938:	4093      	lsls	r3, r2
  40693a:	608b      	str	r3, [r1, #8]
  40693c:	f001 fd52 	bl	4083e4 <_Bfree>
  406940:	2300      	movs	r3, #0
  406942:	6423      	str	r3, [r4, #64]	; 0x40
  406944:	f1bb 0f00 	cmp.w	fp, #0
  406948:	465d      	mov	r5, fp
  40694a:	db35      	blt.n	4069b8 <_dtoa_r+0x98>
  40694c:	2300      	movs	r3, #0
  40694e:	6033      	str	r3, [r6, #0]
  406950:	4b9d      	ldr	r3, [pc, #628]	; (406bc8 <_dtoa_r+0x2a8>)
  406952:	43ab      	bics	r3, r5
  406954:	d015      	beq.n	406982 <_dtoa_r+0x62>
  406956:	4650      	mov	r0, sl
  406958:	4659      	mov	r1, fp
  40695a:	2200      	movs	r2, #0
  40695c:	2300      	movs	r3, #0
  40695e:	f003 f89b 	bl	409a98 <__aeabi_dcmpeq>
  406962:	4680      	mov	r8, r0
  406964:	2800      	cmp	r0, #0
  406966:	d02d      	beq.n	4069c4 <_dtoa_r+0xa4>
  406968:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40696a:	2301      	movs	r3, #1
  40696c:	6013      	str	r3, [r2, #0]
  40696e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406970:	2b00      	cmp	r3, #0
  406972:	f000 80bd 	beq.w	406af0 <_dtoa_r+0x1d0>
  406976:	4895      	ldr	r0, [pc, #596]	; (406bcc <_dtoa_r+0x2ac>)
  406978:	6018      	str	r0, [r3, #0]
  40697a:	3801      	subs	r0, #1
  40697c:	b01b      	add	sp, #108	; 0x6c
  40697e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406982:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406984:	f242 730f 	movw	r3, #9999	; 0x270f
  406988:	6013      	str	r3, [r2, #0]
  40698a:	f1ba 0f00 	cmp.w	sl, #0
  40698e:	d10d      	bne.n	4069ac <_dtoa_r+0x8c>
  406990:	f3c5 0513 	ubfx	r5, r5, #0, #20
  406994:	b955      	cbnz	r5, 4069ac <_dtoa_r+0x8c>
  406996:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406998:	488d      	ldr	r0, [pc, #564]	; (406bd0 <_dtoa_r+0x2b0>)
  40699a:	2b00      	cmp	r3, #0
  40699c:	d0ee      	beq.n	40697c <_dtoa_r+0x5c>
  40699e:	f100 0308 	add.w	r3, r0, #8
  4069a2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4069a4:	6013      	str	r3, [r2, #0]
  4069a6:	b01b      	add	sp, #108	; 0x6c
  4069a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4069ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4069ae:	4889      	ldr	r0, [pc, #548]	; (406bd4 <_dtoa_r+0x2b4>)
  4069b0:	2b00      	cmp	r3, #0
  4069b2:	d0e3      	beq.n	40697c <_dtoa_r+0x5c>
  4069b4:	1cc3      	adds	r3, r0, #3
  4069b6:	e7f4      	b.n	4069a2 <_dtoa_r+0x82>
  4069b8:	2301      	movs	r3, #1
  4069ba:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4069be:	6033      	str	r3, [r6, #0]
  4069c0:	46ab      	mov	fp, r5
  4069c2:	e7c5      	b.n	406950 <_dtoa_r+0x30>
  4069c4:	aa18      	add	r2, sp, #96	; 0x60
  4069c6:	ab19      	add	r3, sp, #100	; 0x64
  4069c8:	9201      	str	r2, [sp, #4]
  4069ca:	9300      	str	r3, [sp, #0]
  4069cc:	4652      	mov	r2, sl
  4069ce:	465b      	mov	r3, fp
  4069d0:	4620      	mov	r0, r4
  4069d2:	f001 ff7f 	bl	4088d4 <__d2b>
  4069d6:	0d2b      	lsrs	r3, r5, #20
  4069d8:	4681      	mov	r9, r0
  4069da:	d071      	beq.n	406ac0 <_dtoa_r+0x1a0>
  4069dc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4069e0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4069e4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4069e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4069ea:	4650      	mov	r0, sl
  4069ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4069f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4069f4:	2200      	movs	r2, #0
  4069f6:	4b78      	ldr	r3, [pc, #480]	; (406bd8 <_dtoa_r+0x2b8>)
  4069f8:	f002 fc32 	bl	409260 <__aeabi_dsub>
  4069fc:	a36c      	add	r3, pc, #432	; (adr r3, 406bb0 <_dtoa_r+0x290>)
  4069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a02:	f002 fde1 	bl	4095c8 <__aeabi_dmul>
  406a06:	a36c      	add	r3, pc, #432	; (adr r3, 406bb8 <_dtoa_r+0x298>)
  406a08:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a0c:	f002 fc2a 	bl	409264 <__adddf3>
  406a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406a14:	4630      	mov	r0, r6
  406a16:	f002 fd71 	bl	4094fc <__aeabi_i2d>
  406a1a:	a369      	add	r3, pc, #420	; (adr r3, 406bc0 <_dtoa_r+0x2a0>)
  406a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a20:	f002 fdd2 	bl	4095c8 <__aeabi_dmul>
  406a24:	4602      	mov	r2, r0
  406a26:	460b      	mov	r3, r1
  406a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406a2c:	f002 fc1a 	bl	409264 <__adddf3>
  406a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406a34:	f003 f878 	bl	409b28 <__aeabi_d2iz>
  406a38:	2200      	movs	r2, #0
  406a3a:	9002      	str	r0, [sp, #8]
  406a3c:	2300      	movs	r3, #0
  406a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406a42:	f003 f833 	bl	409aac <__aeabi_dcmplt>
  406a46:	2800      	cmp	r0, #0
  406a48:	f040 8173 	bne.w	406d32 <_dtoa_r+0x412>
  406a4c:	9d02      	ldr	r5, [sp, #8]
  406a4e:	2d16      	cmp	r5, #22
  406a50:	f200 815d 	bhi.w	406d0e <_dtoa_r+0x3ee>
  406a54:	4b61      	ldr	r3, [pc, #388]	; (406bdc <_dtoa_r+0x2bc>)
  406a56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  406a5a:	e9d3 0100 	ldrd	r0, r1, [r3]
  406a5e:	4652      	mov	r2, sl
  406a60:	465b      	mov	r3, fp
  406a62:	f003 f841 	bl	409ae8 <__aeabi_dcmpgt>
  406a66:	2800      	cmp	r0, #0
  406a68:	f000 81c5 	beq.w	406df6 <_dtoa_r+0x4d6>
  406a6c:	1e6b      	subs	r3, r5, #1
  406a6e:	9302      	str	r3, [sp, #8]
  406a70:	2300      	movs	r3, #0
  406a72:	930e      	str	r3, [sp, #56]	; 0x38
  406a74:	1bbf      	subs	r7, r7, r6
  406a76:	1e7b      	subs	r3, r7, #1
  406a78:	9306      	str	r3, [sp, #24]
  406a7a:	f100 8154 	bmi.w	406d26 <_dtoa_r+0x406>
  406a7e:	2300      	movs	r3, #0
  406a80:	9308      	str	r3, [sp, #32]
  406a82:	9b02      	ldr	r3, [sp, #8]
  406a84:	2b00      	cmp	r3, #0
  406a86:	f2c0 8145 	blt.w	406d14 <_dtoa_r+0x3f4>
  406a8a:	9a06      	ldr	r2, [sp, #24]
  406a8c:	930d      	str	r3, [sp, #52]	; 0x34
  406a8e:	4611      	mov	r1, r2
  406a90:	4419      	add	r1, r3
  406a92:	2300      	movs	r3, #0
  406a94:	9106      	str	r1, [sp, #24]
  406a96:	930c      	str	r3, [sp, #48]	; 0x30
  406a98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a9a:	2b09      	cmp	r3, #9
  406a9c:	d82a      	bhi.n	406af4 <_dtoa_r+0x1d4>
  406a9e:	2b05      	cmp	r3, #5
  406aa0:	f340 865b 	ble.w	40775a <_dtoa_r+0xe3a>
  406aa4:	3b04      	subs	r3, #4
  406aa6:	9324      	str	r3, [sp, #144]	; 0x90
  406aa8:	2500      	movs	r5, #0
  406aaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406aac:	3b02      	subs	r3, #2
  406aae:	2b03      	cmp	r3, #3
  406ab0:	f200 8642 	bhi.w	407738 <_dtoa_r+0xe18>
  406ab4:	e8df f013 	tbh	[pc, r3, lsl #1]
  406ab8:	02c903d4 	.word	0x02c903d4
  406abc:	046103df 	.word	0x046103df
  406ac0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406ac2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  406ac4:	443e      	add	r6, r7
  406ac6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  406aca:	2b20      	cmp	r3, #32
  406acc:	f340 818e 	ble.w	406dec <_dtoa_r+0x4cc>
  406ad0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  406ad4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  406ad8:	409d      	lsls	r5, r3
  406ada:	fa2a f000 	lsr.w	r0, sl, r0
  406ade:	4328      	orrs	r0, r5
  406ae0:	f002 fcfc 	bl	4094dc <__aeabi_ui2d>
  406ae4:	2301      	movs	r3, #1
  406ae6:	3e01      	subs	r6, #1
  406ae8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406aec:	9314      	str	r3, [sp, #80]	; 0x50
  406aee:	e781      	b.n	4069f4 <_dtoa_r+0xd4>
  406af0:	483b      	ldr	r0, [pc, #236]	; (406be0 <_dtoa_r+0x2c0>)
  406af2:	e743      	b.n	40697c <_dtoa_r+0x5c>
  406af4:	2100      	movs	r1, #0
  406af6:	6461      	str	r1, [r4, #68]	; 0x44
  406af8:	4620      	mov	r0, r4
  406afa:	9125      	str	r1, [sp, #148]	; 0x94
  406afc:	f001 fc4c 	bl	408398 <_Balloc>
  406b00:	f04f 33ff 	mov.w	r3, #4294967295
  406b04:	930a      	str	r3, [sp, #40]	; 0x28
  406b06:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406b08:	930f      	str	r3, [sp, #60]	; 0x3c
  406b0a:	2301      	movs	r3, #1
  406b0c:	9004      	str	r0, [sp, #16]
  406b0e:	6420      	str	r0, [r4, #64]	; 0x40
  406b10:	9224      	str	r2, [sp, #144]	; 0x90
  406b12:	930b      	str	r3, [sp, #44]	; 0x2c
  406b14:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406b16:	2b00      	cmp	r3, #0
  406b18:	f2c0 80d9 	blt.w	406cce <_dtoa_r+0x3ae>
  406b1c:	9a02      	ldr	r2, [sp, #8]
  406b1e:	2a0e      	cmp	r2, #14
  406b20:	f300 80d5 	bgt.w	406cce <_dtoa_r+0x3ae>
  406b24:	4b2d      	ldr	r3, [pc, #180]	; (406bdc <_dtoa_r+0x2bc>)
  406b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406b2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406b32:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406b34:	2b00      	cmp	r3, #0
  406b36:	f2c0 83ba 	blt.w	4072ae <_dtoa_r+0x98e>
  406b3a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406b3e:	4650      	mov	r0, sl
  406b40:	462a      	mov	r2, r5
  406b42:	4633      	mov	r3, r6
  406b44:	4659      	mov	r1, fp
  406b46:	f002 fe69 	bl	40981c <__aeabi_ddiv>
  406b4a:	f002 ffed 	bl	409b28 <__aeabi_d2iz>
  406b4e:	4680      	mov	r8, r0
  406b50:	f002 fcd4 	bl	4094fc <__aeabi_i2d>
  406b54:	462a      	mov	r2, r5
  406b56:	4633      	mov	r3, r6
  406b58:	f002 fd36 	bl	4095c8 <__aeabi_dmul>
  406b5c:	460b      	mov	r3, r1
  406b5e:	4602      	mov	r2, r0
  406b60:	4659      	mov	r1, fp
  406b62:	4650      	mov	r0, sl
  406b64:	f002 fb7c 	bl	409260 <__aeabi_dsub>
  406b68:	9d04      	ldr	r5, [sp, #16]
  406b6a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406b6e:	702b      	strb	r3, [r5, #0]
  406b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406b72:	2b01      	cmp	r3, #1
  406b74:	4606      	mov	r6, r0
  406b76:	460f      	mov	r7, r1
  406b78:	f105 0501 	add.w	r5, r5, #1
  406b7c:	d068      	beq.n	406c50 <_dtoa_r+0x330>
  406b7e:	2200      	movs	r2, #0
  406b80:	4b18      	ldr	r3, [pc, #96]	; (406be4 <_dtoa_r+0x2c4>)
  406b82:	f002 fd21 	bl	4095c8 <__aeabi_dmul>
  406b86:	2200      	movs	r2, #0
  406b88:	2300      	movs	r3, #0
  406b8a:	4606      	mov	r6, r0
  406b8c:	460f      	mov	r7, r1
  406b8e:	f002 ff83 	bl	409a98 <__aeabi_dcmpeq>
  406b92:	2800      	cmp	r0, #0
  406b94:	f040 8088 	bne.w	406ca8 <_dtoa_r+0x388>
  406b98:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406b9c:	f04f 0a00 	mov.w	sl, #0
  406ba0:	f8df b040 	ldr.w	fp, [pc, #64]	; 406be4 <_dtoa_r+0x2c4>
  406ba4:	940c      	str	r4, [sp, #48]	; 0x30
  406ba6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406baa:	e028      	b.n	406bfe <_dtoa_r+0x2de>
  406bac:	f3af 8000 	nop.w
  406bb0:	636f4361 	.word	0x636f4361
  406bb4:	3fd287a7 	.word	0x3fd287a7
  406bb8:	8b60c8b3 	.word	0x8b60c8b3
  406bbc:	3fc68a28 	.word	0x3fc68a28
  406bc0:	509f79fb 	.word	0x509f79fb
  406bc4:	3fd34413 	.word	0x3fd34413
  406bc8:	7ff00000 	.word	0x7ff00000
  406bcc:	00409fa9 	.word	0x00409fa9
  406bd0:	00409fec 	.word	0x00409fec
  406bd4:	00409ff8 	.word	0x00409ff8
  406bd8:	3ff80000 	.word	0x3ff80000
  406bdc:	0040a038 	.word	0x0040a038
  406be0:	00409fa8 	.word	0x00409fa8
  406be4:	40240000 	.word	0x40240000
  406be8:	f002 fcee 	bl	4095c8 <__aeabi_dmul>
  406bec:	2200      	movs	r2, #0
  406bee:	2300      	movs	r3, #0
  406bf0:	4606      	mov	r6, r0
  406bf2:	460f      	mov	r7, r1
  406bf4:	f002 ff50 	bl	409a98 <__aeabi_dcmpeq>
  406bf8:	2800      	cmp	r0, #0
  406bfa:	f040 83c1 	bne.w	407380 <_dtoa_r+0xa60>
  406bfe:	4642      	mov	r2, r8
  406c00:	464b      	mov	r3, r9
  406c02:	4630      	mov	r0, r6
  406c04:	4639      	mov	r1, r7
  406c06:	f002 fe09 	bl	40981c <__aeabi_ddiv>
  406c0a:	f002 ff8d 	bl	409b28 <__aeabi_d2iz>
  406c0e:	4604      	mov	r4, r0
  406c10:	f002 fc74 	bl	4094fc <__aeabi_i2d>
  406c14:	4642      	mov	r2, r8
  406c16:	464b      	mov	r3, r9
  406c18:	f002 fcd6 	bl	4095c8 <__aeabi_dmul>
  406c1c:	4602      	mov	r2, r0
  406c1e:	460b      	mov	r3, r1
  406c20:	4630      	mov	r0, r6
  406c22:	4639      	mov	r1, r7
  406c24:	f002 fb1c 	bl	409260 <__aeabi_dsub>
  406c28:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406c2c:	9e04      	ldr	r6, [sp, #16]
  406c2e:	f805 eb01 	strb.w	lr, [r5], #1
  406c32:	eba5 0e06 	sub.w	lr, r5, r6
  406c36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406c38:	45b6      	cmp	lr, r6
  406c3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406c3e:	4652      	mov	r2, sl
  406c40:	465b      	mov	r3, fp
  406c42:	d1d1      	bne.n	406be8 <_dtoa_r+0x2c8>
  406c44:	46a0      	mov	r8, r4
  406c46:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406c4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406c4c:	4606      	mov	r6, r0
  406c4e:	460f      	mov	r7, r1
  406c50:	4632      	mov	r2, r6
  406c52:	463b      	mov	r3, r7
  406c54:	4630      	mov	r0, r6
  406c56:	4639      	mov	r1, r7
  406c58:	f002 fb04 	bl	409264 <__adddf3>
  406c5c:	4606      	mov	r6, r0
  406c5e:	460f      	mov	r7, r1
  406c60:	4602      	mov	r2, r0
  406c62:	460b      	mov	r3, r1
  406c64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406c68:	f002 ff20 	bl	409aac <__aeabi_dcmplt>
  406c6c:	b948      	cbnz	r0, 406c82 <_dtoa_r+0x362>
  406c6e:	4632      	mov	r2, r6
  406c70:	463b      	mov	r3, r7
  406c72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406c76:	f002 ff0f 	bl	409a98 <__aeabi_dcmpeq>
  406c7a:	b1a8      	cbz	r0, 406ca8 <_dtoa_r+0x388>
  406c7c:	f018 0f01 	tst.w	r8, #1
  406c80:	d012      	beq.n	406ca8 <_dtoa_r+0x388>
  406c82:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406c86:	9a04      	ldr	r2, [sp, #16]
  406c88:	1e6b      	subs	r3, r5, #1
  406c8a:	e004      	b.n	406c96 <_dtoa_r+0x376>
  406c8c:	429a      	cmp	r2, r3
  406c8e:	f000 8401 	beq.w	407494 <_dtoa_r+0xb74>
  406c92:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  406c96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406c9a:	f103 0501 	add.w	r5, r3, #1
  406c9e:	d0f5      	beq.n	406c8c <_dtoa_r+0x36c>
  406ca0:	f108 0801 	add.w	r8, r8, #1
  406ca4:	f883 8000 	strb.w	r8, [r3]
  406ca8:	4649      	mov	r1, r9
  406caa:	4620      	mov	r0, r4
  406cac:	f001 fb9a 	bl	4083e4 <_Bfree>
  406cb0:	2200      	movs	r2, #0
  406cb2:	9b02      	ldr	r3, [sp, #8]
  406cb4:	702a      	strb	r2, [r5, #0]
  406cb6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406cb8:	3301      	adds	r3, #1
  406cba:	6013      	str	r3, [r2, #0]
  406cbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406cbe:	2b00      	cmp	r3, #0
  406cc0:	f000 839e 	beq.w	407400 <_dtoa_r+0xae0>
  406cc4:	9804      	ldr	r0, [sp, #16]
  406cc6:	601d      	str	r5, [r3, #0]
  406cc8:	b01b      	add	sp, #108	; 0x6c
  406cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406cd0:	2a00      	cmp	r2, #0
  406cd2:	d03e      	beq.n	406d52 <_dtoa_r+0x432>
  406cd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406cd6:	2a01      	cmp	r2, #1
  406cd8:	f340 8311 	ble.w	4072fe <_dtoa_r+0x9de>
  406cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406ce0:	1e5f      	subs	r7, r3, #1
  406ce2:	42ba      	cmp	r2, r7
  406ce4:	f2c0 838f 	blt.w	407406 <_dtoa_r+0xae6>
  406ce8:	1bd7      	subs	r7, r2, r7
  406cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406cec:	2b00      	cmp	r3, #0
  406cee:	f2c0 848b 	blt.w	407608 <_dtoa_r+0xce8>
  406cf2:	9d08      	ldr	r5, [sp, #32]
  406cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406cf6:	9a08      	ldr	r2, [sp, #32]
  406cf8:	441a      	add	r2, r3
  406cfa:	9208      	str	r2, [sp, #32]
  406cfc:	9a06      	ldr	r2, [sp, #24]
  406cfe:	2101      	movs	r1, #1
  406d00:	441a      	add	r2, r3
  406d02:	4620      	mov	r0, r4
  406d04:	9206      	str	r2, [sp, #24]
  406d06:	f001 fc07 	bl	408518 <__i2b>
  406d0a:	4606      	mov	r6, r0
  406d0c:	e024      	b.n	406d58 <_dtoa_r+0x438>
  406d0e:	2301      	movs	r3, #1
  406d10:	930e      	str	r3, [sp, #56]	; 0x38
  406d12:	e6af      	b.n	406a74 <_dtoa_r+0x154>
  406d14:	9a08      	ldr	r2, [sp, #32]
  406d16:	9b02      	ldr	r3, [sp, #8]
  406d18:	1ad2      	subs	r2, r2, r3
  406d1a:	425b      	negs	r3, r3
  406d1c:	930c      	str	r3, [sp, #48]	; 0x30
  406d1e:	2300      	movs	r3, #0
  406d20:	9208      	str	r2, [sp, #32]
  406d22:	930d      	str	r3, [sp, #52]	; 0x34
  406d24:	e6b8      	b.n	406a98 <_dtoa_r+0x178>
  406d26:	f1c7 0301 	rsb	r3, r7, #1
  406d2a:	9308      	str	r3, [sp, #32]
  406d2c:	2300      	movs	r3, #0
  406d2e:	9306      	str	r3, [sp, #24]
  406d30:	e6a7      	b.n	406a82 <_dtoa_r+0x162>
  406d32:	9d02      	ldr	r5, [sp, #8]
  406d34:	4628      	mov	r0, r5
  406d36:	f002 fbe1 	bl	4094fc <__aeabi_i2d>
  406d3a:	4602      	mov	r2, r0
  406d3c:	460b      	mov	r3, r1
  406d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406d42:	f002 fea9 	bl	409a98 <__aeabi_dcmpeq>
  406d46:	2800      	cmp	r0, #0
  406d48:	f47f ae80 	bne.w	406a4c <_dtoa_r+0x12c>
  406d4c:	1e6b      	subs	r3, r5, #1
  406d4e:	9302      	str	r3, [sp, #8]
  406d50:	e67c      	b.n	406a4c <_dtoa_r+0x12c>
  406d52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406d54:	9d08      	ldr	r5, [sp, #32]
  406d56:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406d58:	2d00      	cmp	r5, #0
  406d5a:	dd0c      	ble.n	406d76 <_dtoa_r+0x456>
  406d5c:	9906      	ldr	r1, [sp, #24]
  406d5e:	2900      	cmp	r1, #0
  406d60:	460b      	mov	r3, r1
  406d62:	dd08      	ble.n	406d76 <_dtoa_r+0x456>
  406d64:	42a9      	cmp	r1, r5
  406d66:	9a08      	ldr	r2, [sp, #32]
  406d68:	bfa8      	it	ge
  406d6a:	462b      	movge	r3, r5
  406d6c:	1ad2      	subs	r2, r2, r3
  406d6e:	1aed      	subs	r5, r5, r3
  406d70:	1acb      	subs	r3, r1, r3
  406d72:	9208      	str	r2, [sp, #32]
  406d74:	9306      	str	r3, [sp, #24]
  406d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406d78:	b1d3      	cbz	r3, 406db0 <_dtoa_r+0x490>
  406d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406d7c:	2b00      	cmp	r3, #0
  406d7e:	f000 82b7 	beq.w	4072f0 <_dtoa_r+0x9d0>
  406d82:	2f00      	cmp	r7, #0
  406d84:	dd10      	ble.n	406da8 <_dtoa_r+0x488>
  406d86:	4631      	mov	r1, r6
  406d88:	463a      	mov	r2, r7
  406d8a:	4620      	mov	r0, r4
  406d8c:	f001 fc60 	bl	408650 <__pow5mult>
  406d90:	464a      	mov	r2, r9
  406d92:	4601      	mov	r1, r0
  406d94:	4606      	mov	r6, r0
  406d96:	4620      	mov	r0, r4
  406d98:	f001 fbc8 	bl	40852c <__multiply>
  406d9c:	4649      	mov	r1, r9
  406d9e:	4680      	mov	r8, r0
  406da0:	4620      	mov	r0, r4
  406da2:	f001 fb1f 	bl	4083e4 <_Bfree>
  406da6:	46c1      	mov	r9, r8
  406da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406daa:	1bda      	subs	r2, r3, r7
  406dac:	f040 82a1 	bne.w	4072f2 <_dtoa_r+0x9d2>
  406db0:	2101      	movs	r1, #1
  406db2:	4620      	mov	r0, r4
  406db4:	f001 fbb0 	bl	408518 <__i2b>
  406db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406dba:	2b00      	cmp	r3, #0
  406dbc:	4680      	mov	r8, r0
  406dbe:	dd1c      	ble.n	406dfa <_dtoa_r+0x4da>
  406dc0:	4601      	mov	r1, r0
  406dc2:	461a      	mov	r2, r3
  406dc4:	4620      	mov	r0, r4
  406dc6:	f001 fc43 	bl	408650 <__pow5mult>
  406dca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406dcc:	2b01      	cmp	r3, #1
  406dce:	4680      	mov	r8, r0
  406dd0:	f340 8254 	ble.w	40727c <_dtoa_r+0x95c>
  406dd4:	2300      	movs	r3, #0
  406dd6:	930c      	str	r3, [sp, #48]	; 0x30
  406dd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406ddc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406de0:	6918      	ldr	r0, [r3, #16]
  406de2:	f001 fb49 	bl	408478 <__hi0bits>
  406de6:	f1c0 0020 	rsb	r0, r0, #32
  406dea:	e010      	b.n	406e0e <_dtoa_r+0x4ee>
  406dec:	f1c3 0520 	rsb	r5, r3, #32
  406df0:	fa0a f005 	lsl.w	r0, sl, r5
  406df4:	e674      	b.n	406ae0 <_dtoa_r+0x1c0>
  406df6:	900e      	str	r0, [sp, #56]	; 0x38
  406df8:	e63c      	b.n	406a74 <_dtoa_r+0x154>
  406dfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406dfc:	2b01      	cmp	r3, #1
  406dfe:	f340 8287 	ble.w	407310 <_dtoa_r+0x9f0>
  406e02:	2300      	movs	r3, #0
  406e04:	930c      	str	r3, [sp, #48]	; 0x30
  406e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406e08:	2001      	movs	r0, #1
  406e0a:	2b00      	cmp	r3, #0
  406e0c:	d1e4      	bne.n	406dd8 <_dtoa_r+0x4b8>
  406e0e:	9a06      	ldr	r2, [sp, #24]
  406e10:	4410      	add	r0, r2
  406e12:	f010 001f 	ands.w	r0, r0, #31
  406e16:	f000 80a1 	beq.w	406f5c <_dtoa_r+0x63c>
  406e1a:	f1c0 0320 	rsb	r3, r0, #32
  406e1e:	2b04      	cmp	r3, #4
  406e20:	f340 849e 	ble.w	407760 <_dtoa_r+0xe40>
  406e24:	9b08      	ldr	r3, [sp, #32]
  406e26:	f1c0 001c 	rsb	r0, r0, #28
  406e2a:	4403      	add	r3, r0
  406e2c:	9308      	str	r3, [sp, #32]
  406e2e:	4613      	mov	r3, r2
  406e30:	4403      	add	r3, r0
  406e32:	4405      	add	r5, r0
  406e34:	9306      	str	r3, [sp, #24]
  406e36:	9b08      	ldr	r3, [sp, #32]
  406e38:	2b00      	cmp	r3, #0
  406e3a:	dd05      	ble.n	406e48 <_dtoa_r+0x528>
  406e3c:	4649      	mov	r1, r9
  406e3e:	461a      	mov	r2, r3
  406e40:	4620      	mov	r0, r4
  406e42:	f001 fc55 	bl	4086f0 <__lshift>
  406e46:	4681      	mov	r9, r0
  406e48:	9b06      	ldr	r3, [sp, #24]
  406e4a:	2b00      	cmp	r3, #0
  406e4c:	dd05      	ble.n	406e5a <_dtoa_r+0x53a>
  406e4e:	4641      	mov	r1, r8
  406e50:	461a      	mov	r2, r3
  406e52:	4620      	mov	r0, r4
  406e54:	f001 fc4c 	bl	4086f0 <__lshift>
  406e58:	4680      	mov	r8, r0
  406e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406e5c:	2b00      	cmp	r3, #0
  406e5e:	f040 8086 	bne.w	406f6e <_dtoa_r+0x64e>
  406e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e64:	2b00      	cmp	r3, #0
  406e66:	f340 8266 	ble.w	407336 <_dtoa_r+0xa16>
  406e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406e6c:	2b00      	cmp	r3, #0
  406e6e:	f000 8098 	beq.w	406fa2 <_dtoa_r+0x682>
  406e72:	2d00      	cmp	r5, #0
  406e74:	dd05      	ble.n	406e82 <_dtoa_r+0x562>
  406e76:	4631      	mov	r1, r6
  406e78:	462a      	mov	r2, r5
  406e7a:	4620      	mov	r0, r4
  406e7c:	f001 fc38 	bl	4086f0 <__lshift>
  406e80:	4606      	mov	r6, r0
  406e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406e84:	2b00      	cmp	r3, #0
  406e86:	f040 8337 	bne.w	4074f8 <_dtoa_r+0xbd8>
  406e8a:	9606      	str	r6, [sp, #24]
  406e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e8e:	9a04      	ldr	r2, [sp, #16]
  406e90:	f8dd b018 	ldr.w	fp, [sp, #24]
  406e94:	3b01      	subs	r3, #1
  406e96:	18d3      	adds	r3, r2, r3
  406e98:	930b      	str	r3, [sp, #44]	; 0x2c
  406e9a:	f00a 0301 	and.w	r3, sl, #1
  406e9e:	930c      	str	r3, [sp, #48]	; 0x30
  406ea0:	4617      	mov	r7, r2
  406ea2:	46c2      	mov	sl, r8
  406ea4:	4651      	mov	r1, sl
  406ea6:	4648      	mov	r0, r9
  406ea8:	f7ff fca4 	bl	4067f4 <quorem>
  406eac:	4631      	mov	r1, r6
  406eae:	4605      	mov	r5, r0
  406eb0:	4648      	mov	r0, r9
  406eb2:	f001 fc6f 	bl	408794 <__mcmp>
  406eb6:	465a      	mov	r2, fp
  406eb8:	900a      	str	r0, [sp, #40]	; 0x28
  406eba:	4651      	mov	r1, sl
  406ebc:	4620      	mov	r0, r4
  406ebe:	f001 fc85 	bl	4087cc <__mdiff>
  406ec2:	68c2      	ldr	r2, [r0, #12]
  406ec4:	4680      	mov	r8, r0
  406ec6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406eca:	2a00      	cmp	r2, #0
  406ecc:	f040 822b 	bne.w	407326 <_dtoa_r+0xa06>
  406ed0:	4601      	mov	r1, r0
  406ed2:	4648      	mov	r0, r9
  406ed4:	9308      	str	r3, [sp, #32]
  406ed6:	f001 fc5d 	bl	408794 <__mcmp>
  406eda:	4641      	mov	r1, r8
  406edc:	9006      	str	r0, [sp, #24]
  406ede:	4620      	mov	r0, r4
  406ee0:	f001 fa80 	bl	4083e4 <_Bfree>
  406ee4:	9a06      	ldr	r2, [sp, #24]
  406ee6:	9b08      	ldr	r3, [sp, #32]
  406ee8:	b932      	cbnz	r2, 406ef8 <_dtoa_r+0x5d8>
  406eea:	9924      	ldr	r1, [sp, #144]	; 0x90
  406eec:	b921      	cbnz	r1, 406ef8 <_dtoa_r+0x5d8>
  406eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406ef0:	2a00      	cmp	r2, #0
  406ef2:	f000 83ef 	beq.w	4076d4 <_dtoa_r+0xdb4>
  406ef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406ef8:	990a      	ldr	r1, [sp, #40]	; 0x28
  406efa:	2900      	cmp	r1, #0
  406efc:	f2c0 829f 	blt.w	40743e <_dtoa_r+0xb1e>
  406f00:	d105      	bne.n	406f0e <_dtoa_r+0x5ee>
  406f02:	9924      	ldr	r1, [sp, #144]	; 0x90
  406f04:	b919      	cbnz	r1, 406f0e <_dtoa_r+0x5ee>
  406f06:	990c      	ldr	r1, [sp, #48]	; 0x30
  406f08:	2900      	cmp	r1, #0
  406f0a:	f000 8298 	beq.w	40743e <_dtoa_r+0xb1e>
  406f0e:	2a00      	cmp	r2, #0
  406f10:	f300 8306 	bgt.w	407520 <_dtoa_r+0xc00>
  406f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406f16:	703b      	strb	r3, [r7, #0]
  406f18:	f107 0801 	add.w	r8, r7, #1
  406f1c:	4297      	cmp	r7, r2
  406f1e:	4645      	mov	r5, r8
  406f20:	f000 830c 	beq.w	40753c <_dtoa_r+0xc1c>
  406f24:	4649      	mov	r1, r9
  406f26:	2300      	movs	r3, #0
  406f28:	220a      	movs	r2, #10
  406f2a:	4620      	mov	r0, r4
  406f2c:	f001 fa64 	bl	4083f8 <__multadd>
  406f30:	455e      	cmp	r6, fp
  406f32:	4681      	mov	r9, r0
  406f34:	4631      	mov	r1, r6
  406f36:	f04f 0300 	mov.w	r3, #0
  406f3a:	f04f 020a 	mov.w	r2, #10
  406f3e:	4620      	mov	r0, r4
  406f40:	f000 81eb 	beq.w	40731a <_dtoa_r+0x9fa>
  406f44:	f001 fa58 	bl	4083f8 <__multadd>
  406f48:	4659      	mov	r1, fp
  406f4a:	4606      	mov	r6, r0
  406f4c:	2300      	movs	r3, #0
  406f4e:	220a      	movs	r2, #10
  406f50:	4620      	mov	r0, r4
  406f52:	f001 fa51 	bl	4083f8 <__multadd>
  406f56:	4647      	mov	r7, r8
  406f58:	4683      	mov	fp, r0
  406f5a:	e7a3      	b.n	406ea4 <_dtoa_r+0x584>
  406f5c:	201c      	movs	r0, #28
  406f5e:	9b08      	ldr	r3, [sp, #32]
  406f60:	4403      	add	r3, r0
  406f62:	9308      	str	r3, [sp, #32]
  406f64:	9b06      	ldr	r3, [sp, #24]
  406f66:	4403      	add	r3, r0
  406f68:	4405      	add	r5, r0
  406f6a:	9306      	str	r3, [sp, #24]
  406f6c:	e763      	b.n	406e36 <_dtoa_r+0x516>
  406f6e:	4641      	mov	r1, r8
  406f70:	4648      	mov	r0, r9
  406f72:	f001 fc0f 	bl	408794 <__mcmp>
  406f76:	2800      	cmp	r0, #0
  406f78:	f6bf af73 	bge.w	406e62 <_dtoa_r+0x542>
  406f7c:	9f02      	ldr	r7, [sp, #8]
  406f7e:	4649      	mov	r1, r9
  406f80:	2300      	movs	r3, #0
  406f82:	220a      	movs	r2, #10
  406f84:	4620      	mov	r0, r4
  406f86:	3f01      	subs	r7, #1
  406f88:	9702      	str	r7, [sp, #8]
  406f8a:	f001 fa35 	bl	4083f8 <__multadd>
  406f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406f90:	4681      	mov	r9, r0
  406f92:	2b00      	cmp	r3, #0
  406f94:	f040 83b6 	bne.w	407704 <_dtoa_r+0xde4>
  406f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406f9a:	2b00      	cmp	r3, #0
  406f9c:	f340 83bf 	ble.w	40771e <_dtoa_r+0xdfe>
  406fa0:	930a      	str	r3, [sp, #40]	; 0x28
  406fa2:	f8dd b010 	ldr.w	fp, [sp, #16]
  406fa6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406fa8:	465d      	mov	r5, fp
  406faa:	e002      	b.n	406fb2 <_dtoa_r+0x692>
  406fac:	f001 fa24 	bl	4083f8 <__multadd>
  406fb0:	4681      	mov	r9, r0
  406fb2:	4641      	mov	r1, r8
  406fb4:	4648      	mov	r0, r9
  406fb6:	f7ff fc1d 	bl	4067f4 <quorem>
  406fba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406fbe:	f805 ab01 	strb.w	sl, [r5], #1
  406fc2:	eba5 030b 	sub.w	r3, r5, fp
  406fc6:	42bb      	cmp	r3, r7
  406fc8:	f04f 020a 	mov.w	r2, #10
  406fcc:	f04f 0300 	mov.w	r3, #0
  406fd0:	4649      	mov	r1, r9
  406fd2:	4620      	mov	r0, r4
  406fd4:	dbea      	blt.n	406fac <_dtoa_r+0x68c>
  406fd6:	9b04      	ldr	r3, [sp, #16]
  406fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406fda:	2a01      	cmp	r2, #1
  406fdc:	bfac      	ite	ge
  406fde:	189b      	addge	r3, r3, r2
  406fe0:	3301      	addlt	r3, #1
  406fe2:	461d      	mov	r5, r3
  406fe4:	f04f 0b00 	mov.w	fp, #0
  406fe8:	4649      	mov	r1, r9
  406fea:	2201      	movs	r2, #1
  406fec:	4620      	mov	r0, r4
  406fee:	f001 fb7f 	bl	4086f0 <__lshift>
  406ff2:	4641      	mov	r1, r8
  406ff4:	4681      	mov	r9, r0
  406ff6:	f001 fbcd 	bl	408794 <__mcmp>
  406ffa:	2800      	cmp	r0, #0
  406ffc:	f340 823d 	ble.w	40747a <_dtoa_r+0xb5a>
  407000:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407004:	9904      	ldr	r1, [sp, #16]
  407006:	1e6b      	subs	r3, r5, #1
  407008:	e004      	b.n	407014 <_dtoa_r+0x6f4>
  40700a:	428b      	cmp	r3, r1
  40700c:	f000 81ae 	beq.w	40736c <_dtoa_r+0xa4c>
  407010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407014:	2a39      	cmp	r2, #57	; 0x39
  407016:	f103 0501 	add.w	r5, r3, #1
  40701a:	d0f6      	beq.n	40700a <_dtoa_r+0x6ea>
  40701c:	3201      	adds	r2, #1
  40701e:	701a      	strb	r2, [r3, #0]
  407020:	4641      	mov	r1, r8
  407022:	4620      	mov	r0, r4
  407024:	f001 f9de 	bl	4083e4 <_Bfree>
  407028:	2e00      	cmp	r6, #0
  40702a:	f43f ae3d 	beq.w	406ca8 <_dtoa_r+0x388>
  40702e:	f1bb 0f00 	cmp.w	fp, #0
  407032:	d005      	beq.n	407040 <_dtoa_r+0x720>
  407034:	45b3      	cmp	fp, r6
  407036:	d003      	beq.n	407040 <_dtoa_r+0x720>
  407038:	4659      	mov	r1, fp
  40703a:	4620      	mov	r0, r4
  40703c:	f001 f9d2 	bl	4083e4 <_Bfree>
  407040:	4631      	mov	r1, r6
  407042:	4620      	mov	r0, r4
  407044:	f001 f9ce 	bl	4083e4 <_Bfree>
  407048:	e62e      	b.n	406ca8 <_dtoa_r+0x388>
  40704a:	2300      	movs	r3, #0
  40704c:	930b      	str	r3, [sp, #44]	; 0x2c
  40704e:	9b02      	ldr	r3, [sp, #8]
  407050:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407052:	4413      	add	r3, r2
  407054:	930f      	str	r3, [sp, #60]	; 0x3c
  407056:	3301      	adds	r3, #1
  407058:	2b01      	cmp	r3, #1
  40705a:	461f      	mov	r7, r3
  40705c:	461e      	mov	r6, r3
  40705e:	930a      	str	r3, [sp, #40]	; 0x28
  407060:	bfb8      	it	lt
  407062:	2701      	movlt	r7, #1
  407064:	2100      	movs	r1, #0
  407066:	2f17      	cmp	r7, #23
  407068:	6461      	str	r1, [r4, #68]	; 0x44
  40706a:	d90a      	bls.n	407082 <_dtoa_r+0x762>
  40706c:	2201      	movs	r2, #1
  40706e:	2304      	movs	r3, #4
  407070:	005b      	lsls	r3, r3, #1
  407072:	f103 0014 	add.w	r0, r3, #20
  407076:	4287      	cmp	r7, r0
  407078:	4611      	mov	r1, r2
  40707a:	f102 0201 	add.w	r2, r2, #1
  40707e:	d2f7      	bcs.n	407070 <_dtoa_r+0x750>
  407080:	6461      	str	r1, [r4, #68]	; 0x44
  407082:	4620      	mov	r0, r4
  407084:	f001 f988 	bl	408398 <_Balloc>
  407088:	2e0e      	cmp	r6, #14
  40708a:	9004      	str	r0, [sp, #16]
  40708c:	6420      	str	r0, [r4, #64]	; 0x40
  40708e:	f63f ad41 	bhi.w	406b14 <_dtoa_r+0x1f4>
  407092:	2d00      	cmp	r5, #0
  407094:	f43f ad3e 	beq.w	406b14 <_dtoa_r+0x1f4>
  407098:	9902      	ldr	r1, [sp, #8]
  40709a:	2900      	cmp	r1, #0
  40709c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4070a0:	f340 8202 	ble.w	4074a8 <_dtoa_r+0xb88>
  4070a4:	4bb8      	ldr	r3, [pc, #736]	; (407388 <_dtoa_r+0xa68>)
  4070a6:	f001 020f 	and.w	r2, r1, #15
  4070aa:	110d      	asrs	r5, r1, #4
  4070ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4070b0:	06e9      	lsls	r1, r5, #27
  4070b2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4070b6:	f140 81ae 	bpl.w	407416 <_dtoa_r+0xaf6>
  4070ba:	4bb4      	ldr	r3, [pc, #720]	; (40738c <_dtoa_r+0xa6c>)
  4070bc:	4650      	mov	r0, sl
  4070be:	4659      	mov	r1, fp
  4070c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4070c4:	f002 fbaa 	bl	40981c <__aeabi_ddiv>
  4070c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4070cc:	f005 050f 	and.w	r5, r5, #15
  4070d0:	f04f 0a03 	mov.w	sl, #3
  4070d4:	b18d      	cbz	r5, 4070fa <_dtoa_r+0x7da>
  4070d6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40738c <_dtoa_r+0xa6c>
  4070da:	07ea      	lsls	r2, r5, #31
  4070dc:	d509      	bpl.n	4070f2 <_dtoa_r+0x7d2>
  4070de:	4630      	mov	r0, r6
  4070e0:	4639      	mov	r1, r7
  4070e2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4070e6:	f002 fa6f 	bl	4095c8 <__aeabi_dmul>
  4070ea:	f10a 0a01 	add.w	sl, sl, #1
  4070ee:	4606      	mov	r6, r0
  4070f0:	460f      	mov	r7, r1
  4070f2:	106d      	asrs	r5, r5, #1
  4070f4:	f108 0808 	add.w	r8, r8, #8
  4070f8:	d1ef      	bne.n	4070da <_dtoa_r+0x7ba>
  4070fa:	463b      	mov	r3, r7
  4070fc:	4632      	mov	r2, r6
  4070fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407102:	f002 fb8b 	bl	40981c <__aeabi_ddiv>
  407106:	4607      	mov	r7, r0
  407108:	4688      	mov	r8, r1
  40710a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40710c:	b143      	cbz	r3, 407120 <_dtoa_r+0x800>
  40710e:	2200      	movs	r2, #0
  407110:	4b9f      	ldr	r3, [pc, #636]	; (407390 <_dtoa_r+0xa70>)
  407112:	4638      	mov	r0, r7
  407114:	4641      	mov	r1, r8
  407116:	f002 fcc9 	bl	409aac <__aeabi_dcmplt>
  40711a:	2800      	cmp	r0, #0
  40711c:	f040 8286 	bne.w	40762c <_dtoa_r+0xd0c>
  407120:	4650      	mov	r0, sl
  407122:	f002 f9eb 	bl	4094fc <__aeabi_i2d>
  407126:	463a      	mov	r2, r7
  407128:	4643      	mov	r3, r8
  40712a:	f002 fa4d 	bl	4095c8 <__aeabi_dmul>
  40712e:	4b99      	ldr	r3, [pc, #612]	; (407394 <_dtoa_r+0xa74>)
  407130:	2200      	movs	r2, #0
  407132:	f002 f897 	bl	409264 <__adddf3>
  407136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407138:	4605      	mov	r5, r0
  40713a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40713e:	2b00      	cmp	r3, #0
  407140:	f000 813e 	beq.w	4073c0 <_dtoa_r+0xaa0>
  407144:	9b02      	ldr	r3, [sp, #8]
  407146:	9315      	str	r3, [sp, #84]	; 0x54
  407148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40714a:	9312      	str	r3, [sp, #72]	; 0x48
  40714c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40714e:	2b00      	cmp	r3, #0
  407150:	f000 81fa 	beq.w	407548 <_dtoa_r+0xc28>
  407154:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407156:	4b8c      	ldr	r3, [pc, #560]	; (407388 <_dtoa_r+0xa68>)
  407158:	498f      	ldr	r1, [pc, #572]	; (407398 <_dtoa_r+0xa78>)
  40715a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40715e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407162:	2000      	movs	r0, #0
  407164:	f002 fb5a 	bl	40981c <__aeabi_ddiv>
  407168:	462a      	mov	r2, r5
  40716a:	4633      	mov	r3, r6
  40716c:	f002 f878 	bl	409260 <__aeabi_dsub>
  407170:	4682      	mov	sl, r0
  407172:	468b      	mov	fp, r1
  407174:	4638      	mov	r0, r7
  407176:	4641      	mov	r1, r8
  407178:	f002 fcd6 	bl	409b28 <__aeabi_d2iz>
  40717c:	4605      	mov	r5, r0
  40717e:	f002 f9bd 	bl	4094fc <__aeabi_i2d>
  407182:	4602      	mov	r2, r0
  407184:	460b      	mov	r3, r1
  407186:	4638      	mov	r0, r7
  407188:	4641      	mov	r1, r8
  40718a:	f002 f869 	bl	409260 <__aeabi_dsub>
  40718e:	3530      	adds	r5, #48	; 0x30
  407190:	fa5f f885 	uxtb.w	r8, r5
  407194:	9d04      	ldr	r5, [sp, #16]
  407196:	4606      	mov	r6, r0
  407198:	460f      	mov	r7, r1
  40719a:	f885 8000 	strb.w	r8, [r5]
  40719e:	4602      	mov	r2, r0
  4071a0:	460b      	mov	r3, r1
  4071a2:	4650      	mov	r0, sl
  4071a4:	4659      	mov	r1, fp
  4071a6:	3501      	adds	r5, #1
  4071a8:	f002 fc9e 	bl	409ae8 <__aeabi_dcmpgt>
  4071ac:	2800      	cmp	r0, #0
  4071ae:	d154      	bne.n	40725a <_dtoa_r+0x93a>
  4071b0:	4632      	mov	r2, r6
  4071b2:	463b      	mov	r3, r7
  4071b4:	2000      	movs	r0, #0
  4071b6:	4976      	ldr	r1, [pc, #472]	; (407390 <_dtoa_r+0xa70>)
  4071b8:	f002 f852 	bl	409260 <__aeabi_dsub>
  4071bc:	4602      	mov	r2, r0
  4071be:	460b      	mov	r3, r1
  4071c0:	4650      	mov	r0, sl
  4071c2:	4659      	mov	r1, fp
  4071c4:	f002 fc90 	bl	409ae8 <__aeabi_dcmpgt>
  4071c8:	2800      	cmp	r0, #0
  4071ca:	f040 8270 	bne.w	4076ae <_dtoa_r+0xd8e>
  4071ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4071d0:	2a01      	cmp	r2, #1
  4071d2:	f000 8111 	beq.w	4073f8 <_dtoa_r+0xad8>
  4071d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4071d8:	9a04      	ldr	r2, [sp, #16]
  4071da:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4071de:	4413      	add	r3, r2
  4071e0:	4699      	mov	r9, r3
  4071e2:	e00d      	b.n	407200 <_dtoa_r+0x8e0>
  4071e4:	2000      	movs	r0, #0
  4071e6:	496a      	ldr	r1, [pc, #424]	; (407390 <_dtoa_r+0xa70>)
  4071e8:	f002 f83a 	bl	409260 <__aeabi_dsub>
  4071ec:	4652      	mov	r2, sl
  4071ee:	465b      	mov	r3, fp
  4071f0:	f002 fc5c 	bl	409aac <__aeabi_dcmplt>
  4071f4:	2800      	cmp	r0, #0
  4071f6:	f040 8258 	bne.w	4076aa <_dtoa_r+0xd8a>
  4071fa:	454d      	cmp	r5, r9
  4071fc:	f000 80fa 	beq.w	4073f4 <_dtoa_r+0xad4>
  407200:	4650      	mov	r0, sl
  407202:	4659      	mov	r1, fp
  407204:	2200      	movs	r2, #0
  407206:	4b65      	ldr	r3, [pc, #404]	; (40739c <_dtoa_r+0xa7c>)
  407208:	f002 f9de 	bl	4095c8 <__aeabi_dmul>
  40720c:	2200      	movs	r2, #0
  40720e:	4b63      	ldr	r3, [pc, #396]	; (40739c <_dtoa_r+0xa7c>)
  407210:	4682      	mov	sl, r0
  407212:	468b      	mov	fp, r1
  407214:	4630      	mov	r0, r6
  407216:	4639      	mov	r1, r7
  407218:	f002 f9d6 	bl	4095c8 <__aeabi_dmul>
  40721c:	460f      	mov	r7, r1
  40721e:	4606      	mov	r6, r0
  407220:	f002 fc82 	bl	409b28 <__aeabi_d2iz>
  407224:	4680      	mov	r8, r0
  407226:	f002 f969 	bl	4094fc <__aeabi_i2d>
  40722a:	4602      	mov	r2, r0
  40722c:	460b      	mov	r3, r1
  40722e:	4630      	mov	r0, r6
  407230:	4639      	mov	r1, r7
  407232:	f002 f815 	bl	409260 <__aeabi_dsub>
  407236:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40723a:	fa5f f888 	uxtb.w	r8, r8
  40723e:	4652      	mov	r2, sl
  407240:	465b      	mov	r3, fp
  407242:	f805 8b01 	strb.w	r8, [r5], #1
  407246:	4606      	mov	r6, r0
  407248:	460f      	mov	r7, r1
  40724a:	f002 fc2f 	bl	409aac <__aeabi_dcmplt>
  40724e:	4632      	mov	r2, r6
  407250:	463b      	mov	r3, r7
  407252:	2800      	cmp	r0, #0
  407254:	d0c6      	beq.n	4071e4 <_dtoa_r+0x8c4>
  407256:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40725a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40725c:	9302      	str	r3, [sp, #8]
  40725e:	e523      	b.n	406ca8 <_dtoa_r+0x388>
  407260:	2300      	movs	r3, #0
  407262:	930b      	str	r3, [sp, #44]	; 0x2c
  407264:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407266:	2b00      	cmp	r3, #0
  407268:	f340 80dc 	ble.w	407424 <_dtoa_r+0xb04>
  40726c:	461f      	mov	r7, r3
  40726e:	461e      	mov	r6, r3
  407270:	930f      	str	r3, [sp, #60]	; 0x3c
  407272:	930a      	str	r3, [sp, #40]	; 0x28
  407274:	e6f6      	b.n	407064 <_dtoa_r+0x744>
  407276:	2301      	movs	r3, #1
  407278:	930b      	str	r3, [sp, #44]	; 0x2c
  40727a:	e7f3      	b.n	407264 <_dtoa_r+0x944>
  40727c:	f1ba 0f00 	cmp.w	sl, #0
  407280:	f47f ada8 	bne.w	406dd4 <_dtoa_r+0x4b4>
  407284:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407288:	2b00      	cmp	r3, #0
  40728a:	f47f adba 	bne.w	406e02 <_dtoa_r+0x4e2>
  40728e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407292:	0d3f      	lsrs	r7, r7, #20
  407294:	053f      	lsls	r7, r7, #20
  407296:	2f00      	cmp	r7, #0
  407298:	f000 820d 	beq.w	4076b6 <_dtoa_r+0xd96>
  40729c:	9b08      	ldr	r3, [sp, #32]
  40729e:	3301      	adds	r3, #1
  4072a0:	9308      	str	r3, [sp, #32]
  4072a2:	9b06      	ldr	r3, [sp, #24]
  4072a4:	3301      	adds	r3, #1
  4072a6:	9306      	str	r3, [sp, #24]
  4072a8:	2301      	movs	r3, #1
  4072aa:	930c      	str	r3, [sp, #48]	; 0x30
  4072ac:	e5ab      	b.n	406e06 <_dtoa_r+0x4e6>
  4072ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4072b0:	2b00      	cmp	r3, #0
  4072b2:	f73f ac42 	bgt.w	406b3a <_dtoa_r+0x21a>
  4072b6:	f040 8221 	bne.w	4076fc <_dtoa_r+0xddc>
  4072ba:	2200      	movs	r2, #0
  4072bc:	4b38      	ldr	r3, [pc, #224]	; (4073a0 <_dtoa_r+0xa80>)
  4072be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4072c2:	f002 f981 	bl	4095c8 <__aeabi_dmul>
  4072c6:	4652      	mov	r2, sl
  4072c8:	465b      	mov	r3, fp
  4072ca:	f002 fc03 	bl	409ad4 <__aeabi_dcmpge>
  4072ce:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4072d2:	4646      	mov	r6, r8
  4072d4:	2800      	cmp	r0, #0
  4072d6:	d041      	beq.n	40735c <_dtoa_r+0xa3c>
  4072d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4072da:	9d04      	ldr	r5, [sp, #16]
  4072dc:	43db      	mvns	r3, r3
  4072de:	9302      	str	r3, [sp, #8]
  4072e0:	4641      	mov	r1, r8
  4072e2:	4620      	mov	r0, r4
  4072e4:	f001 f87e 	bl	4083e4 <_Bfree>
  4072e8:	2e00      	cmp	r6, #0
  4072ea:	f43f acdd 	beq.w	406ca8 <_dtoa_r+0x388>
  4072ee:	e6a7      	b.n	407040 <_dtoa_r+0x720>
  4072f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4072f2:	4649      	mov	r1, r9
  4072f4:	4620      	mov	r0, r4
  4072f6:	f001 f9ab 	bl	408650 <__pow5mult>
  4072fa:	4681      	mov	r9, r0
  4072fc:	e558      	b.n	406db0 <_dtoa_r+0x490>
  4072fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407300:	2a00      	cmp	r2, #0
  407302:	f000 8187 	beq.w	407614 <_dtoa_r+0xcf4>
  407306:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40730a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40730c:	9d08      	ldr	r5, [sp, #32]
  40730e:	e4f2      	b.n	406cf6 <_dtoa_r+0x3d6>
  407310:	f1ba 0f00 	cmp.w	sl, #0
  407314:	f47f ad75 	bne.w	406e02 <_dtoa_r+0x4e2>
  407318:	e7b4      	b.n	407284 <_dtoa_r+0x964>
  40731a:	f001 f86d 	bl	4083f8 <__multadd>
  40731e:	4647      	mov	r7, r8
  407320:	4606      	mov	r6, r0
  407322:	4683      	mov	fp, r0
  407324:	e5be      	b.n	406ea4 <_dtoa_r+0x584>
  407326:	4601      	mov	r1, r0
  407328:	4620      	mov	r0, r4
  40732a:	9306      	str	r3, [sp, #24]
  40732c:	f001 f85a 	bl	4083e4 <_Bfree>
  407330:	2201      	movs	r2, #1
  407332:	9b06      	ldr	r3, [sp, #24]
  407334:	e5e0      	b.n	406ef8 <_dtoa_r+0x5d8>
  407336:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407338:	2b02      	cmp	r3, #2
  40733a:	f77f ad96 	ble.w	406e6a <_dtoa_r+0x54a>
  40733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407340:	2b00      	cmp	r3, #0
  407342:	d1c9      	bne.n	4072d8 <_dtoa_r+0x9b8>
  407344:	4641      	mov	r1, r8
  407346:	2205      	movs	r2, #5
  407348:	4620      	mov	r0, r4
  40734a:	f001 f855 	bl	4083f8 <__multadd>
  40734e:	4601      	mov	r1, r0
  407350:	4680      	mov	r8, r0
  407352:	4648      	mov	r0, r9
  407354:	f001 fa1e 	bl	408794 <__mcmp>
  407358:	2800      	cmp	r0, #0
  40735a:	ddbd      	ble.n	4072d8 <_dtoa_r+0x9b8>
  40735c:	9a02      	ldr	r2, [sp, #8]
  40735e:	9904      	ldr	r1, [sp, #16]
  407360:	2331      	movs	r3, #49	; 0x31
  407362:	3201      	adds	r2, #1
  407364:	9202      	str	r2, [sp, #8]
  407366:	700b      	strb	r3, [r1, #0]
  407368:	1c4d      	adds	r5, r1, #1
  40736a:	e7b9      	b.n	4072e0 <_dtoa_r+0x9c0>
  40736c:	9a02      	ldr	r2, [sp, #8]
  40736e:	3201      	adds	r2, #1
  407370:	9202      	str	r2, [sp, #8]
  407372:	9a04      	ldr	r2, [sp, #16]
  407374:	2331      	movs	r3, #49	; 0x31
  407376:	7013      	strb	r3, [r2, #0]
  407378:	e652      	b.n	407020 <_dtoa_r+0x700>
  40737a:	2301      	movs	r3, #1
  40737c:	930b      	str	r3, [sp, #44]	; 0x2c
  40737e:	e666      	b.n	40704e <_dtoa_r+0x72e>
  407380:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407384:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407386:	e48f      	b.n	406ca8 <_dtoa_r+0x388>
  407388:	0040a038 	.word	0x0040a038
  40738c:	0040a010 	.word	0x0040a010
  407390:	3ff00000 	.word	0x3ff00000
  407394:	401c0000 	.word	0x401c0000
  407398:	3fe00000 	.word	0x3fe00000
  40739c:	40240000 	.word	0x40240000
  4073a0:	40140000 	.word	0x40140000
  4073a4:	4650      	mov	r0, sl
  4073a6:	f002 f8a9 	bl	4094fc <__aeabi_i2d>
  4073aa:	463a      	mov	r2, r7
  4073ac:	4643      	mov	r3, r8
  4073ae:	f002 f90b 	bl	4095c8 <__aeabi_dmul>
  4073b2:	2200      	movs	r2, #0
  4073b4:	4bc1      	ldr	r3, [pc, #772]	; (4076bc <_dtoa_r+0xd9c>)
  4073b6:	f001 ff55 	bl	409264 <__adddf3>
  4073ba:	4605      	mov	r5, r0
  4073bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4073c0:	4641      	mov	r1, r8
  4073c2:	2200      	movs	r2, #0
  4073c4:	4bbe      	ldr	r3, [pc, #760]	; (4076c0 <_dtoa_r+0xda0>)
  4073c6:	4638      	mov	r0, r7
  4073c8:	f001 ff4a 	bl	409260 <__aeabi_dsub>
  4073cc:	462a      	mov	r2, r5
  4073ce:	4633      	mov	r3, r6
  4073d0:	4682      	mov	sl, r0
  4073d2:	468b      	mov	fp, r1
  4073d4:	f002 fb88 	bl	409ae8 <__aeabi_dcmpgt>
  4073d8:	4680      	mov	r8, r0
  4073da:	2800      	cmp	r0, #0
  4073dc:	f040 8110 	bne.w	407600 <_dtoa_r+0xce0>
  4073e0:	462a      	mov	r2, r5
  4073e2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4073e6:	4650      	mov	r0, sl
  4073e8:	4659      	mov	r1, fp
  4073ea:	f002 fb5f 	bl	409aac <__aeabi_dcmplt>
  4073ee:	b118      	cbz	r0, 4073f8 <_dtoa_r+0xad8>
  4073f0:	4646      	mov	r6, r8
  4073f2:	e771      	b.n	4072d8 <_dtoa_r+0x9b8>
  4073f4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4073f8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4073fc:	f7ff bb8a 	b.w	406b14 <_dtoa_r+0x1f4>
  407400:	9804      	ldr	r0, [sp, #16]
  407402:	f7ff babb 	b.w	40697c <_dtoa_r+0x5c>
  407406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40740a:	970c      	str	r7, [sp, #48]	; 0x30
  40740c:	1afb      	subs	r3, r7, r3
  40740e:	441a      	add	r2, r3
  407410:	920d      	str	r2, [sp, #52]	; 0x34
  407412:	2700      	movs	r7, #0
  407414:	e469      	b.n	406cea <_dtoa_r+0x3ca>
  407416:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40741a:	f04f 0a02 	mov.w	sl, #2
  40741e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  407422:	e657      	b.n	4070d4 <_dtoa_r+0x7b4>
  407424:	2100      	movs	r1, #0
  407426:	2301      	movs	r3, #1
  407428:	6461      	str	r1, [r4, #68]	; 0x44
  40742a:	4620      	mov	r0, r4
  40742c:	9325      	str	r3, [sp, #148]	; 0x94
  40742e:	f000 ffb3 	bl	408398 <_Balloc>
  407432:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407434:	9004      	str	r0, [sp, #16]
  407436:	6420      	str	r0, [r4, #64]	; 0x40
  407438:	930a      	str	r3, [sp, #40]	; 0x28
  40743a:	930f      	str	r3, [sp, #60]	; 0x3c
  40743c:	e629      	b.n	407092 <_dtoa_r+0x772>
  40743e:	2a00      	cmp	r2, #0
  407440:	46d0      	mov	r8, sl
  407442:	f8cd b018 	str.w	fp, [sp, #24]
  407446:	469a      	mov	sl, r3
  407448:	dd11      	ble.n	40746e <_dtoa_r+0xb4e>
  40744a:	4649      	mov	r1, r9
  40744c:	2201      	movs	r2, #1
  40744e:	4620      	mov	r0, r4
  407450:	f001 f94e 	bl	4086f0 <__lshift>
  407454:	4641      	mov	r1, r8
  407456:	4681      	mov	r9, r0
  407458:	f001 f99c 	bl	408794 <__mcmp>
  40745c:	2800      	cmp	r0, #0
  40745e:	f340 8146 	ble.w	4076ee <_dtoa_r+0xdce>
  407462:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407466:	f000 8106 	beq.w	407676 <_dtoa_r+0xd56>
  40746a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40746e:	46b3      	mov	fp, r6
  407470:	f887 a000 	strb.w	sl, [r7]
  407474:	1c7d      	adds	r5, r7, #1
  407476:	9e06      	ldr	r6, [sp, #24]
  407478:	e5d2      	b.n	407020 <_dtoa_r+0x700>
  40747a:	d104      	bne.n	407486 <_dtoa_r+0xb66>
  40747c:	f01a 0f01 	tst.w	sl, #1
  407480:	d001      	beq.n	407486 <_dtoa_r+0xb66>
  407482:	e5bd      	b.n	407000 <_dtoa_r+0x6e0>
  407484:	4615      	mov	r5, r2
  407486:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40748a:	2b30      	cmp	r3, #48	; 0x30
  40748c:	f105 32ff 	add.w	r2, r5, #4294967295
  407490:	d0f8      	beq.n	407484 <_dtoa_r+0xb64>
  407492:	e5c5      	b.n	407020 <_dtoa_r+0x700>
  407494:	9904      	ldr	r1, [sp, #16]
  407496:	2230      	movs	r2, #48	; 0x30
  407498:	700a      	strb	r2, [r1, #0]
  40749a:	9a02      	ldr	r2, [sp, #8]
  40749c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4074a0:	3201      	adds	r2, #1
  4074a2:	9202      	str	r2, [sp, #8]
  4074a4:	f7ff bbfc 	b.w	406ca0 <_dtoa_r+0x380>
  4074a8:	f000 80bb 	beq.w	407622 <_dtoa_r+0xd02>
  4074ac:	9b02      	ldr	r3, [sp, #8]
  4074ae:	425d      	negs	r5, r3
  4074b0:	4b84      	ldr	r3, [pc, #528]	; (4076c4 <_dtoa_r+0xda4>)
  4074b2:	f005 020f 	and.w	r2, r5, #15
  4074b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4074be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4074c2:	f002 f881 	bl	4095c8 <__aeabi_dmul>
  4074c6:	112d      	asrs	r5, r5, #4
  4074c8:	4607      	mov	r7, r0
  4074ca:	4688      	mov	r8, r1
  4074cc:	f000 812c 	beq.w	407728 <_dtoa_r+0xe08>
  4074d0:	4e7d      	ldr	r6, [pc, #500]	; (4076c8 <_dtoa_r+0xda8>)
  4074d2:	f04f 0a02 	mov.w	sl, #2
  4074d6:	07eb      	lsls	r3, r5, #31
  4074d8:	d509      	bpl.n	4074ee <_dtoa_r+0xbce>
  4074da:	4638      	mov	r0, r7
  4074dc:	4641      	mov	r1, r8
  4074de:	e9d6 2300 	ldrd	r2, r3, [r6]
  4074e2:	f002 f871 	bl	4095c8 <__aeabi_dmul>
  4074e6:	f10a 0a01 	add.w	sl, sl, #1
  4074ea:	4607      	mov	r7, r0
  4074ec:	4688      	mov	r8, r1
  4074ee:	106d      	asrs	r5, r5, #1
  4074f0:	f106 0608 	add.w	r6, r6, #8
  4074f4:	d1ef      	bne.n	4074d6 <_dtoa_r+0xbb6>
  4074f6:	e608      	b.n	40710a <_dtoa_r+0x7ea>
  4074f8:	6871      	ldr	r1, [r6, #4]
  4074fa:	4620      	mov	r0, r4
  4074fc:	f000 ff4c 	bl	408398 <_Balloc>
  407500:	6933      	ldr	r3, [r6, #16]
  407502:	3302      	adds	r3, #2
  407504:	009a      	lsls	r2, r3, #2
  407506:	4605      	mov	r5, r0
  407508:	f106 010c 	add.w	r1, r6, #12
  40750c:	300c      	adds	r0, #12
  40750e:	f7fc fd8b 	bl	404028 <memcpy>
  407512:	4629      	mov	r1, r5
  407514:	2201      	movs	r2, #1
  407516:	4620      	mov	r0, r4
  407518:	f001 f8ea 	bl	4086f0 <__lshift>
  40751c:	9006      	str	r0, [sp, #24]
  40751e:	e4b5      	b.n	406e8c <_dtoa_r+0x56c>
  407520:	2b39      	cmp	r3, #57	; 0x39
  407522:	f8cd b018 	str.w	fp, [sp, #24]
  407526:	46d0      	mov	r8, sl
  407528:	f000 80a5 	beq.w	407676 <_dtoa_r+0xd56>
  40752c:	f103 0a01 	add.w	sl, r3, #1
  407530:	46b3      	mov	fp, r6
  407532:	f887 a000 	strb.w	sl, [r7]
  407536:	1c7d      	adds	r5, r7, #1
  407538:	9e06      	ldr	r6, [sp, #24]
  40753a:	e571      	b.n	407020 <_dtoa_r+0x700>
  40753c:	465a      	mov	r2, fp
  40753e:	46d0      	mov	r8, sl
  407540:	46b3      	mov	fp, r6
  407542:	469a      	mov	sl, r3
  407544:	4616      	mov	r6, r2
  407546:	e54f      	b.n	406fe8 <_dtoa_r+0x6c8>
  407548:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40754a:	495e      	ldr	r1, [pc, #376]	; (4076c4 <_dtoa_r+0xda4>)
  40754c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407550:	462a      	mov	r2, r5
  407552:	4633      	mov	r3, r6
  407554:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407558:	f002 f836 	bl	4095c8 <__aeabi_dmul>
  40755c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407560:	4638      	mov	r0, r7
  407562:	4641      	mov	r1, r8
  407564:	f002 fae0 	bl	409b28 <__aeabi_d2iz>
  407568:	4605      	mov	r5, r0
  40756a:	f001 ffc7 	bl	4094fc <__aeabi_i2d>
  40756e:	460b      	mov	r3, r1
  407570:	4602      	mov	r2, r0
  407572:	4641      	mov	r1, r8
  407574:	4638      	mov	r0, r7
  407576:	f001 fe73 	bl	409260 <__aeabi_dsub>
  40757a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40757c:	460f      	mov	r7, r1
  40757e:	9904      	ldr	r1, [sp, #16]
  407580:	3530      	adds	r5, #48	; 0x30
  407582:	2b01      	cmp	r3, #1
  407584:	700d      	strb	r5, [r1, #0]
  407586:	4606      	mov	r6, r0
  407588:	f101 0501 	add.w	r5, r1, #1
  40758c:	d026      	beq.n	4075dc <_dtoa_r+0xcbc>
  40758e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407590:	9a04      	ldr	r2, [sp, #16]
  407592:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4076d0 <_dtoa_r+0xdb0>
  407596:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40759a:	4413      	add	r3, r2
  40759c:	f04f 0a00 	mov.w	sl, #0
  4075a0:	4699      	mov	r9, r3
  4075a2:	4652      	mov	r2, sl
  4075a4:	465b      	mov	r3, fp
  4075a6:	4630      	mov	r0, r6
  4075a8:	4639      	mov	r1, r7
  4075aa:	f002 f80d 	bl	4095c8 <__aeabi_dmul>
  4075ae:	460f      	mov	r7, r1
  4075b0:	4606      	mov	r6, r0
  4075b2:	f002 fab9 	bl	409b28 <__aeabi_d2iz>
  4075b6:	4680      	mov	r8, r0
  4075b8:	f001 ffa0 	bl	4094fc <__aeabi_i2d>
  4075bc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4075c0:	4602      	mov	r2, r0
  4075c2:	460b      	mov	r3, r1
  4075c4:	4630      	mov	r0, r6
  4075c6:	4639      	mov	r1, r7
  4075c8:	f001 fe4a 	bl	409260 <__aeabi_dsub>
  4075cc:	f805 8b01 	strb.w	r8, [r5], #1
  4075d0:	454d      	cmp	r5, r9
  4075d2:	4606      	mov	r6, r0
  4075d4:	460f      	mov	r7, r1
  4075d6:	d1e4      	bne.n	4075a2 <_dtoa_r+0xc82>
  4075d8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4075dc:	4b3b      	ldr	r3, [pc, #236]	; (4076cc <_dtoa_r+0xdac>)
  4075de:	2200      	movs	r2, #0
  4075e0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4075e4:	f001 fe3e 	bl	409264 <__adddf3>
  4075e8:	4632      	mov	r2, r6
  4075ea:	463b      	mov	r3, r7
  4075ec:	f002 fa5e 	bl	409aac <__aeabi_dcmplt>
  4075f0:	2800      	cmp	r0, #0
  4075f2:	d046      	beq.n	407682 <_dtoa_r+0xd62>
  4075f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4075f6:	9302      	str	r3, [sp, #8]
  4075f8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4075fc:	f7ff bb43 	b.w	406c86 <_dtoa_r+0x366>
  407600:	f04f 0800 	mov.w	r8, #0
  407604:	4646      	mov	r6, r8
  407606:	e6a9      	b.n	40735c <_dtoa_r+0xa3c>
  407608:	9b08      	ldr	r3, [sp, #32]
  40760a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40760c:	1a9d      	subs	r5, r3, r2
  40760e:	2300      	movs	r3, #0
  407610:	f7ff bb71 	b.w	406cf6 <_dtoa_r+0x3d6>
  407614:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407616:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407618:	9d08      	ldr	r5, [sp, #32]
  40761a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40761e:	f7ff bb6a 	b.w	406cf6 <_dtoa_r+0x3d6>
  407622:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  407626:	f04f 0a02 	mov.w	sl, #2
  40762a:	e56e      	b.n	40710a <_dtoa_r+0x7ea>
  40762c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40762e:	2b00      	cmp	r3, #0
  407630:	f43f aeb8 	beq.w	4073a4 <_dtoa_r+0xa84>
  407634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407636:	2b00      	cmp	r3, #0
  407638:	f77f aede 	ble.w	4073f8 <_dtoa_r+0xad8>
  40763c:	2200      	movs	r2, #0
  40763e:	4b24      	ldr	r3, [pc, #144]	; (4076d0 <_dtoa_r+0xdb0>)
  407640:	4638      	mov	r0, r7
  407642:	4641      	mov	r1, r8
  407644:	f001 ffc0 	bl	4095c8 <__aeabi_dmul>
  407648:	4607      	mov	r7, r0
  40764a:	4688      	mov	r8, r1
  40764c:	f10a 0001 	add.w	r0, sl, #1
  407650:	f001 ff54 	bl	4094fc <__aeabi_i2d>
  407654:	463a      	mov	r2, r7
  407656:	4643      	mov	r3, r8
  407658:	f001 ffb6 	bl	4095c8 <__aeabi_dmul>
  40765c:	2200      	movs	r2, #0
  40765e:	4b17      	ldr	r3, [pc, #92]	; (4076bc <_dtoa_r+0xd9c>)
  407660:	f001 fe00 	bl	409264 <__adddf3>
  407664:	9a02      	ldr	r2, [sp, #8]
  407666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407668:	9312      	str	r3, [sp, #72]	; 0x48
  40766a:	3a01      	subs	r2, #1
  40766c:	4605      	mov	r5, r0
  40766e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407672:	9215      	str	r2, [sp, #84]	; 0x54
  407674:	e56a      	b.n	40714c <_dtoa_r+0x82c>
  407676:	2239      	movs	r2, #57	; 0x39
  407678:	46b3      	mov	fp, r6
  40767a:	703a      	strb	r2, [r7, #0]
  40767c:	9e06      	ldr	r6, [sp, #24]
  40767e:	1c7d      	adds	r5, r7, #1
  407680:	e4c0      	b.n	407004 <_dtoa_r+0x6e4>
  407682:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407686:	2000      	movs	r0, #0
  407688:	4910      	ldr	r1, [pc, #64]	; (4076cc <_dtoa_r+0xdac>)
  40768a:	f001 fde9 	bl	409260 <__aeabi_dsub>
  40768e:	4632      	mov	r2, r6
  407690:	463b      	mov	r3, r7
  407692:	f002 fa29 	bl	409ae8 <__aeabi_dcmpgt>
  407696:	b908      	cbnz	r0, 40769c <_dtoa_r+0xd7c>
  407698:	e6ae      	b.n	4073f8 <_dtoa_r+0xad8>
  40769a:	4615      	mov	r5, r2
  40769c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4076a0:	2b30      	cmp	r3, #48	; 0x30
  4076a2:	f105 32ff 	add.w	r2, r5, #4294967295
  4076a6:	d0f8      	beq.n	40769a <_dtoa_r+0xd7a>
  4076a8:	e5d7      	b.n	40725a <_dtoa_r+0x93a>
  4076aa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4076ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4076b0:	9302      	str	r3, [sp, #8]
  4076b2:	f7ff bae8 	b.w	406c86 <_dtoa_r+0x366>
  4076b6:	970c      	str	r7, [sp, #48]	; 0x30
  4076b8:	f7ff bba5 	b.w	406e06 <_dtoa_r+0x4e6>
  4076bc:	401c0000 	.word	0x401c0000
  4076c0:	40140000 	.word	0x40140000
  4076c4:	0040a038 	.word	0x0040a038
  4076c8:	0040a010 	.word	0x0040a010
  4076cc:	3fe00000 	.word	0x3fe00000
  4076d0:	40240000 	.word	0x40240000
  4076d4:	2b39      	cmp	r3, #57	; 0x39
  4076d6:	f8cd b018 	str.w	fp, [sp, #24]
  4076da:	46d0      	mov	r8, sl
  4076dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4076e0:	469a      	mov	sl, r3
  4076e2:	d0c8      	beq.n	407676 <_dtoa_r+0xd56>
  4076e4:	f1bb 0f00 	cmp.w	fp, #0
  4076e8:	f73f aebf 	bgt.w	40746a <_dtoa_r+0xb4a>
  4076ec:	e6bf      	b.n	40746e <_dtoa_r+0xb4e>
  4076ee:	f47f aebe 	bne.w	40746e <_dtoa_r+0xb4e>
  4076f2:	f01a 0f01 	tst.w	sl, #1
  4076f6:	f43f aeba 	beq.w	40746e <_dtoa_r+0xb4e>
  4076fa:	e6b2      	b.n	407462 <_dtoa_r+0xb42>
  4076fc:	f04f 0800 	mov.w	r8, #0
  407700:	4646      	mov	r6, r8
  407702:	e5e9      	b.n	4072d8 <_dtoa_r+0x9b8>
  407704:	4631      	mov	r1, r6
  407706:	2300      	movs	r3, #0
  407708:	220a      	movs	r2, #10
  40770a:	4620      	mov	r0, r4
  40770c:	f000 fe74 	bl	4083f8 <__multadd>
  407710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407712:	2b00      	cmp	r3, #0
  407714:	4606      	mov	r6, r0
  407716:	dd0a      	ble.n	40772e <_dtoa_r+0xe0e>
  407718:	930a      	str	r3, [sp, #40]	; 0x28
  40771a:	f7ff bbaa 	b.w	406e72 <_dtoa_r+0x552>
  40771e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407720:	2b02      	cmp	r3, #2
  407722:	dc23      	bgt.n	40776c <_dtoa_r+0xe4c>
  407724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407726:	e43b      	b.n	406fa0 <_dtoa_r+0x680>
  407728:	f04f 0a02 	mov.w	sl, #2
  40772c:	e4ed      	b.n	40710a <_dtoa_r+0x7ea>
  40772e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407730:	2b02      	cmp	r3, #2
  407732:	dc1b      	bgt.n	40776c <_dtoa_r+0xe4c>
  407734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407736:	e7ef      	b.n	407718 <_dtoa_r+0xdf8>
  407738:	2500      	movs	r5, #0
  40773a:	6465      	str	r5, [r4, #68]	; 0x44
  40773c:	4629      	mov	r1, r5
  40773e:	4620      	mov	r0, r4
  407740:	f000 fe2a 	bl	408398 <_Balloc>
  407744:	f04f 33ff 	mov.w	r3, #4294967295
  407748:	930a      	str	r3, [sp, #40]	; 0x28
  40774a:	930f      	str	r3, [sp, #60]	; 0x3c
  40774c:	2301      	movs	r3, #1
  40774e:	9004      	str	r0, [sp, #16]
  407750:	9525      	str	r5, [sp, #148]	; 0x94
  407752:	6420      	str	r0, [r4, #64]	; 0x40
  407754:	930b      	str	r3, [sp, #44]	; 0x2c
  407756:	f7ff b9dd 	b.w	406b14 <_dtoa_r+0x1f4>
  40775a:	2501      	movs	r5, #1
  40775c:	f7ff b9a5 	b.w	406aaa <_dtoa_r+0x18a>
  407760:	f43f ab69 	beq.w	406e36 <_dtoa_r+0x516>
  407764:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407768:	f7ff bbf9 	b.w	406f5e <_dtoa_r+0x63e>
  40776c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40776e:	930a      	str	r3, [sp, #40]	; 0x28
  407770:	e5e5      	b.n	40733e <_dtoa_r+0xa1e>
  407772:	bf00      	nop

00407774 <__sflush_r>:
  407774:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407778:	b29a      	uxth	r2, r3
  40777a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40777e:	460d      	mov	r5, r1
  407780:	0711      	lsls	r1, r2, #28
  407782:	4680      	mov	r8, r0
  407784:	d43a      	bmi.n	4077fc <__sflush_r+0x88>
  407786:	686a      	ldr	r2, [r5, #4]
  407788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40778c:	2a00      	cmp	r2, #0
  40778e:	81ab      	strh	r3, [r5, #12]
  407790:	dd6f      	ble.n	407872 <__sflush_r+0xfe>
  407792:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407794:	2c00      	cmp	r4, #0
  407796:	d049      	beq.n	40782c <__sflush_r+0xb8>
  407798:	2200      	movs	r2, #0
  40779a:	b29b      	uxth	r3, r3
  40779c:	f8d8 6000 	ldr.w	r6, [r8]
  4077a0:	f8c8 2000 	str.w	r2, [r8]
  4077a4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4077a8:	d067      	beq.n	40787a <__sflush_r+0x106>
  4077aa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4077ac:	075f      	lsls	r7, r3, #29
  4077ae:	d505      	bpl.n	4077bc <__sflush_r+0x48>
  4077b0:	6869      	ldr	r1, [r5, #4]
  4077b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4077b4:	1a52      	subs	r2, r2, r1
  4077b6:	b10b      	cbz	r3, 4077bc <__sflush_r+0x48>
  4077b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4077ba:	1ad2      	subs	r2, r2, r3
  4077bc:	2300      	movs	r3, #0
  4077be:	69e9      	ldr	r1, [r5, #28]
  4077c0:	4640      	mov	r0, r8
  4077c2:	47a0      	blx	r4
  4077c4:	1c44      	adds	r4, r0, #1
  4077c6:	d03c      	beq.n	407842 <__sflush_r+0xce>
  4077c8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4077cc:	692a      	ldr	r2, [r5, #16]
  4077ce:	602a      	str	r2, [r5, #0]
  4077d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4077d4:	2200      	movs	r2, #0
  4077d6:	81ab      	strh	r3, [r5, #12]
  4077d8:	04db      	lsls	r3, r3, #19
  4077da:	606a      	str	r2, [r5, #4]
  4077dc:	d447      	bmi.n	40786e <__sflush_r+0xfa>
  4077de:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4077e0:	f8c8 6000 	str.w	r6, [r8]
  4077e4:	b311      	cbz	r1, 40782c <__sflush_r+0xb8>
  4077e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4077ea:	4299      	cmp	r1, r3
  4077ec:	d002      	beq.n	4077f4 <__sflush_r+0x80>
  4077ee:	4640      	mov	r0, r8
  4077f0:	f000 f9de 	bl	407bb0 <_free_r>
  4077f4:	2000      	movs	r0, #0
  4077f6:	6328      	str	r0, [r5, #48]	; 0x30
  4077f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4077fc:	692e      	ldr	r6, [r5, #16]
  4077fe:	b1ae      	cbz	r6, 40782c <__sflush_r+0xb8>
  407800:	682c      	ldr	r4, [r5, #0]
  407802:	602e      	str	r6, [r5, #0]
  407804:	0791      	lsls	r1, r2, #30
  407806:	bf0c      	ite	eq
  407808:	696b      	ldreq	r3, [r5, #20]
  40780a:	2300      	movne	r3, #0
  40780c:	1ba4      	subs	r4, r4, r6
  40780e:	60ab      	str	r3, [r5, #8]
  407810:	e00a      	b.n	407828 <__sflush_r+0xb4>
  407812:	4623      	mov	r3, r4
  407814:	4632      	mov	r2, r6
  407816:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407818:	69e9      	ldr	r1, [r5, #28]
  40781a:	4640      	mov	r0, r8
  40781c:	47b8      	blx	r7
  40781e:	2800      	cmp	r0, #0
  407820:	eba4 0400 	sub.w	r4, r4, r0
  407824:	4406      	add	r6, r0
  407826:	dd04      	ble.n	407832 <__sflush_r+0xbe>
  407828:	2c00      	cmp	r4, #0
  40782a:	dcf2      	bgt.n	407812 <__sflush_r+0x9e>
  40782c:	2000      	movs	r0, #0
  40782e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407832:	89ab      	ldrh	r3, [r5, #12]
  407834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407838:	81ab      	strh	r3, [r5, #12]
  40783a:	f04f 30ff 	mov.w	r0, #4294967295
  40783e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407842:	f8d8 4000 	ldr.w	r4, [r8]
  407846:	2c1d      	cmp	r4, #29
  407848:	d8f3      	bhi.n	407832 <__sflush_r+0xbe>
  40784a:	4b19      	ldr	r3, [pc, #100]	; (4078b0 <__sflush_r+0x13c>)
  40784c:	40e3      	lsrs	r3, r4
  40784e:	43db      	mvns	r3, r3
  407850:	f013 0301 	ands.w	r3, r3, #1
  407854:	d1ed      	bne.n	407832 <__sflush_r+0xbe>
  407856:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40785a:	606b      	str	r3, [r5, #4]
  40785c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407860:	6929      	ldr	r1, [r5, #16]
  407862:	81ab      	strh	r3, [r5, #12]
  407864:	04da      	lsls	r2, r3, #19
  407866:	6029      	str	r1, [r5, #0]
  407868:	d5b9      	bpl.n	4077de <__sflush_r+0x6a>
  40786a:	2c00      	cmp	r4, #0
  40786c:	d1b7      	bne.n	4077de <__sflush_r+0x6a>
  40786e:	6528      	str	r0, [r5, #80]	; 0x50
  407870:	e7b5      	b.n	4077de <__sflush_r+0x6a>
  407872:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407874:	2a00      	cmp	r2, #0
  407876:	dc8c      	bgt.n	407792 <__sflush_r+0x1e>
  407878:	e7d8      	b.n	40782c <__sflush_r+0xb8>
  40787a:	2301      	movs	r3, #1
  40787c:	69e9      	ldr	r1, [r5, #28]
  40787e:	4640      	mov	r0, r8
  407880:	47a0      	blx	r4
  407882:	1c43      	adds	r3, r0, #1
  407884:	4602      	mov	r2, r0
  407886:	d002      	beq.n	40788e <__sflush_r+0x11a>
  407888:	89ab      	ldrh	r3, [r5, #12]
  40788a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40788c:	e78e      	b.n	4077ac <__sflush_r+0x38>
  40788e:	f8d8 3000 	ldr.w	r3, [r8]
  407892:	2b00      	cmp	r3, #0
  407894:	d0f8      	beq.n	407888 <__sflush_r+0x114>
  407896:	2b1d      	cmp	r3, #29
  407898:	d001      	beq.n	40789e <__sflush_r+0x12a>
  40789a:	2b16      	cmp	r3, #22
  40789c:	d102      	bne.n	4078a4 <__sflush_r+0x130>
  40789e:	f8c8 6000 	str.w	r6, [r8]
  4078a2:	e7c3      	b.n	40782c <__sflush_r+0xb8>
  4078a4:	89ab      	ldrh	r3, [r5, #12]
  4078a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4078aa:	81ab      	strh	r3, [r5, #12]
  4078ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4078b0:	20400001 	.word	0x20400001

004078b4 <_fflush_r>:
  4078b4:	b538      	push	{r3, r4, r5, lr}
  4078b6:	460d      	mov	r5, r1
  4078b8:	4604      	mov	r4, r0
  4078ba:	b108      	cbz	r0, 4078c0 <_fflush_r+0xc>
  4078bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4078be:	b1bb      	cbz	r3, 4078f0 <_fflush_r+0x3c>
  4078c0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4078c4:	b188      	cbz	r0, 4078ea <_fflush_r+0x36>
  4078c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4078c8:	07db      	lsls	r3, r3, #31
  4078ca:	d401      	bmi.n	4078d0 <_fflush_r+0x1c>
  4078cc:	0581      	lsls	r1, r0, #22
  4078ce:	d517      	bpl.n	407900 <_fflush_r+0x4c>
  4078d0:	4620      	mov	r0, r4
  4078d2:	4629      	mov	r1, r5
  4078d4:	f7ff ff4e 	bl	407774 <__sflush_r>
  4078d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4078da:	07da      	lsls	r2, r3, #31
  4078dc:	4604      	mov	r4, r0
  4078de:	d402      	bmi.n	4078e6 <_fflush_r+0x32>
  4078e0:	89ab      	ldrh	r3, [r5, #12]
  4078e2:	059b      	lsls	r3, r3, #22
  4078e4:	d507      	bpl.n	4078f6 <_fflush_r+0x42>
  4078e6:	4620      	mov	r0, r4
  4078e8:	bd38      	pop	{r3, r4, r5, pc}
  4078ea:	4604      	mov	r4, r0
  4078ec:	4620      	mov	r0, r4
  4078ee:	bd38      	pop	{r3, r4, r5, pc}
  4078f0:	f000 f838 	bl	407964 <__sinit>
  4078f4:	e7e4      	b.n	4078c0 <_fflush_r+0xc>
  4078f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4078f8:	f000 fc04 	bl	408104 <__retarget_lock_release_recursive>
  4078fc:	4620      	mov	r0, r4
  4078fe:	bd38      	pop	{r3, r4, r5, pc}
  407900:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407902:	f000 fbfd 	bl	408100 <__retarget_lock_acquire_recursive>
  407906:	e7e3      	b.n	4078d0 <_fflush_r+0x1c>

00407908 <_cleanup_r>:
  407908:	4901      	ldr	r1, [pc, #4]	; (407910 <_cleanup_r+0x8>)
  40790a:	f000 bbaf 	b.w	40806c <_fwalk_reent>
  40790e:	bf00      	nop
  407910:	004090f1 	.word	0x004090f1

00407914 <std.isra.0>:
  407914:	b510      	push	{r4, lr}
  407916:	2300      	movs	r3, #0
  407918:	4604      	mov	r4, r0
  40791a:	8181      	strh	r1, [r0, #12]
  40791c:	81c2      	strh	r2, [r0, #14]
  40791e:	6003      	str	r3, [r0, #0]
  407920:	6043      	str	r3, [r0, #4]
  407922:	6083      	str	r3, [r0, #8]
  407924:	6643      	str	r3, [r0, #100]	; 0x64
  407926:	6103      	str	r3, [r0, #16]
  407928:	6143      	str	r3, [r0, #20]
  40792a:	6183      	str	r3, [r0, #24]
  40792c:	4619      	mov	r1, r3
  40792e:	2208      	movs	r2, #8
  407930:	305c      	adds	r0, #92	; 0x5c
  407932:	f7fc fc13 	bl	40415c <memset>
  407936:	4807      	ldr	r0, [pc, #28]	; (407954 <std.isra.0+0x40>)
  407938:	4907      	ldr	r1, [pc, #28]	; (407958 <std.isra.0+0x44>)
  40793a:	4a08      	ldr	r2, [pc, #32]	; (40795c <std.isra.0+0x48>)
  40793c:	4b08      	ldr	r3, [pc, #32]	; (407960 <std.isra.0+0x4c>)
  40793e:	6220      	str	r0, [r4, #32]
  407940:	61e4      	str	r4, [r4, #28]
  407942:	6261      	str	r1, [r4, #36]	; 0x24
  407944:	62a2      	str	r2, [r4, #40]	; 0x28
  407946:	62e3      	str	r3, [r4, #44]	; 0x2c
  407948:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40794c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407950:	f000 bbd2 	b.w	4080f8 <__retarget_lock_init_recursive>
  407954:	00408cd9 	.word	0x00408cd9
  407958:	00408cfd 	.word	0x00408cfd
  40795c:	00408d39 	.word	0x00408d39
  407960:	00408d59 	.word	0x00408d59

00407964 <__sinit>:
  407964:	b510      	push	{r4, lr}
  407966:	4604      	mov	r4, r0
  407968:	4812      	ldr	r0, [pc, #72]	; (4079b4 <__sinit+0x50>)
  40796a:	f000 fbc9 	bl	408100 <__retarget_lock_acquire_recursive>
  40796e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407970:	b9d2      	cbnz	r2, 4079a8 <__sinit+0x44>
  407972:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  407976:	4810      	ldr	r0, [pc, #64]	; (4079b8 <__sinit+0x54>)
  407978:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40797c:	2103      	movs	r1, #3
  40797e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407982:	63e0      	str	r0, [r4, #60]	; 0x3c
  407984:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407988:	6860      	ldr	r0, [r4, #4]
  40798a:	2104      	movs	r1, #4
  40798c:	f7ff ffc2 	bl	407914 <std.isra.0>
  407990:	2201      	movs	r2, #1
  407992:	2109      	movs	r1, #9
  407994:	68a0      	ldr	r0, [r4, #8]
  407996:	f7ff ffbd 	bl	407914 <std.isra.0>
  40799a:	2202      	movs	r2, #2
  40799c:	2112      	movs	r1, #18
  40799e:	68e0      	ldr	r0, [r4, #12]
  4079a0:	f7ff ffb8 	bl	407914 <std.isra.0>
  4079a4:	2301      	movs	r3, #1
  4079a6:	63a3      	str	r3, [r4, #56]	; 0x38
  4079a8:	4802      	ldr	r0, [pc, #8]	; (4079b4 <__sinit+0x50>)
  4079aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4079ae:	f000 bba9 	b.w	408104 <__retarget_lock_release_recursive>
  4079b2:	bf00      	nop
  4079b4:	20400cf4 	.word	0x20400cf4
  4079b8:	00407909 	.word	0x00407909

004079bc <__sfp_lock_acquire>:
  4079bc:	4801      	ldr	r0, [pc, #4]	; (4079c4 <__sfp_lock_acquire+0x8>)
  4079be:	f000 bb9f 	b.w	408100 <__retarget_lock_acquire_recursive>
  4079c2:	bf00      	nop
  4079c4:	20400d08 	.word	0x20400d08

004079c8 <__sfp_lock_release>:
  4079c8:	4801      	ldr	r0, [pc, #4]	; (4079d0 <__sfp_lock_release+0x8>)
  4079ca:	f000 bb9b 	b.w	408104 <__retarget_lock_release_recursive>
  4079ce:	bf00      	nop
  4079d0:	20400d08 	.word	0x20400d08

004079d4 <__libc_fini_array>:
  4079d4:	b538      	push	{r3, r4, r5, lr}
  4079d6:	4c0a      	ldr	r4, [pc, #40]	; (407a00 <__libc_fini_array+0x2c>)
  4079d8:	4d0a      	ldr	r5, [pc, #40]	; (407a04 <__libc_fini_array+0x30>)
  4079da:	1b64      	subs	r4, r4, r5
  4079dc:	10a4      	asrs	r4, r4, #2
  4079de:	d00a      	beq.n	4079f6 <__libc_fini_array+0x22>
  4079e0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4079e4:	3b01      	subs	r3, #1
  4079e6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4079ea:	3c01      	subs	r4, #1
  4079ec:	f855 3904 	ldr.w	r3, [r5], #-4
  4079f0:	4798      	blx	r3
  4079f2:	2c00      	cmp	r4, #0
  4079f4:	d1f9      	bne.n	4079ea <__libc_fini_array+0x16>
  4079f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4079fa:	f002 bc13 	b.w	40a224 <_fini>
  4079fe:	bf00      	nop
  407a00:	0040a234 	.word	0x0040a234
  407a04:	0040a230 	.word	0x0040a230

00407a08 <__fputwc>:
  407a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407a0c:	b082      	sub	sp, #8
  407a0e:	4680      	mov	r8, r0
  407a10:	4689      	mov	r9, r1
  407a12:	4614      	mov	r4, r2
  407a14:	f000 fb54 	bl	4080c0 <__locale_mb_cur_max>
  407a18:	2801      	cmp	r0, #1
  407a1a:	d036      	beq.n	407a8a <__fputwc+0x82>
  407a1c:	464a      	mov	r2, r9
  407a1e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407a22:	a901      	add	r1, sp, #4
  407a24:	4640      	mov	r0, r8
  407a26:	f001 fa71 	bl	408f0c <_wcrtomb_r>
  407a2a:	1c42      	adds	r2, r0, #1
  407a2c:	4606      	mov	r6, r0
  407a2e:	d025      	beq.n	407a7c <__fputwc+0x74>
  407a30:	b3a8      	cbz	r0, 407a9e <__fputwc+0x96>
  407a32:	f89d e004 	ldrb.w	lr, [sp, #4]
  407a36:	2500      	movs	r5, #0
  407a38:	f10d 0a04 	add.w	sl, sp, #4
  407a3c:	e009      	b.n	407a52 <__fputwc+0x4a>
  407a3e:	6823      	ldr	r3, [r4, #0]
  407a40:	1c5a      	adds	r2, r3, #1
  407a42:	6022      	str	r2, [r4, #0]
  407a44:	f883 e000 	strb.w	lr, [r3]
  407a48:	3501      	adds	r5, #1
  407a4a:	42b5      	cmp	r5, r6
  407a4c:	d227      	bcs.n	407a9e <__fputwc+0x96>
  407a4e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407a52:	68a3      	ldr	r3, [r4, #8]
  407a54:	3b01      	subs	r3, #1
  407a56:	2b00      	cmp	r3, #0
  407a58:	60a3      	str	r3, [r4, #8]
  407a5a:	daf0      	bge.n	407a3e <__fputwc+0x36>
  407a5c:	69a7      	ldr	r7, [r4, #24]
  407a5e:	42bb      	cmp	r3, r7
  407a60:	4671      	mov	r1, lr
  407a62:	4622      	mov	r2, r4
  407a64:	4640      	mov	r0, r8
  407a66:	db02      	blt.n	407a6e <__fputwc+0x66>
  407a68:	f1be 0f0a 	cmp.w	lr, #10
  407a6c:	d1e7      	bne.n	407a3e <__fputwc+0x36>
  407a6e:	f001 f9f5 	bl	408e5c <__swbuf_r>
  407a72:	1c43      	adds	r3, r0, #1
  407a74:	d1e8      	bne.n	407a48 <__fputwc+0x40>
  407a76:	b002      	add	sp, #8
  407a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a7c:	89a3      	ldrh	r3, [r4, #12]
  407a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a82:	81a3      	strh	r3, [r4, #12]
  407a84:	b002      	add	sp, #8
  407a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a8a:	f109 33ff 	add.w	r3, r9, #4294967295
  407a8e:	2bfe      	cmp	r3, #254	; 0xfe
  407a90:	d8c4      	bhi.n	407a1c <__fputwc+0x14>
  407a92:	fa5f fe89 	uxtb.w	lr, r9
  407a96:	4606      	mov	r6, r0
  407a98:	f88d e004 	strb.w	lr, [sp, #4]
  407a9c:	e7cb      	b.n	407a36 <__fputwc+0x2e>
  407a9e:	4648      	mov	r0, r9
  407aa0:	b002      	add	sp, #8
  407aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407aa6:	bf00      	nop

00407aa8 <_fputwc_r>:
  407aa8:	b530      	push	{r4, r5, lr}
  407aaa:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407aac:	f013 0f01 	tst.w	r3, #1
  407ab0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407ab4:	4614      	mov	r4, r2
  407ab6:	b083      	sub	sp, #12
  407ab8:	4605      	mov	r5, r0
  407aba:	b29a      	uxth	r2, r3
  407abc:	d101      	bne.n	407ac2 <_fputwc_r+0x1a>
  407abe:	0590      	lsls	r0, r2, #22
  407ac0:	d51c      	bpl.n	407afc <_fputwc_r+0x54>
  407ac2:	0490      	lsls	r0, r2, #18
  407ac4:	d406      	bmi.n	407ad4 <_fputwc_r+0x2c>
  407ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407ad0:	81a3      	strh	r3, [r4, #12]
  407ad2:	6662      	str	r2, [r4, #100]	; 0x64
  407ad4:	4628      	mov	r0, r5
  407ad6:	4622      	mov	r2, r4
  407ad8:	f7ff ff96 	bl	407a08 <__fputwc>
  407adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407ade:	07da      	lsls	r2, r3, #31
  407ae0:	4605      	mov	r5, r0
  407ae2:	d402      	bmi.n	407aea <_fputwc_r+0x42>
  407ae4:	89a3      	ldrh	r3, [r4, #12]
  407ae6:	059b      	lsls	r3, r3, #22
  407ae8:	d502      	bpl.n	407af0 <_fputwc_r+0x48>
  407aea:	4628      	mov	r0, r5
  407aec:	b003      	add	sp, #12
  407aee:	bd30      	pop	{r4, r5, pc}
  407af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407af2:	f000 fb07 	bl	408104 <__retarget_lock_release_recursive>
  407af6:	4628      	mov	r0, r5
  407af8:	b003      	add	sp, #12
  407afa:	bd30      	pop	{r4, r5, pc}
  407afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407afe:	9101      	str	r1, [sp, #4]
  407b00:	f000 fafe 	bl	408100 <__retarget_lock_acquire_recursive>
  407b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b08:	9901      	ldr	r1, [sp, #4]
  407b0a:	b29a      	uxth	r2, r3
  407b0c:	e7d9      	b.n	407ac2 <_fputwc_r+0x1a>
  407b0e:	bf00      	nop

00407b10 <_malloc_trim_r>:
  407b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b12:	4f24      	ldr	r7, [pc, #144]	; (407ba4 <_malloc_trim_r+0x94>)
  407b14:	460c      	mov	r4, r1
  407b16:	4606      	mov	r6, r0
  407b18:	f7fc fb6e 	bl	4041f8 <__malloc_lock>
  407b1c:	68bb      	ldr	r3, [r7, #8]
  407b1e:	685d      	ldr	r5, [r3, #4]
  407b20:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407b24:	310f      	adds	r1, #15
  407b26:	f025 0503 	bic.w	r5, r5, #3
  407b2a:	4429      	add	r1, r5
  407b2c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407b30:	f021 010f 	bic.w	r1, r1, #15
  407b34:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407b38:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407b3c:	db07      	blt.n	407b4e <_malloc_trim_r+0x3e>
  407b3e:	2100      	movs	r1, #0
  407b40:	4630      	mov	r0, r6
  407b42:	f7fc fb65 	bl	404210 <_sbrk_r>
  407b46:	68bb      	ldr	r3, [r7, #8]
  407b48:	442b      	add	r3, r5
  407b4a:	4298      	cmp	r0, r3
  407b4c:	d004      	beq.n	407b58 <_malloc_trim_r+0x48>
  407b4e:	4630      	mov	r0, r6
  407b50:	f7fc fb58 	bl	404204 <__malloc_unlock>
  407b54:	2000      	movs	r0, #0
  407b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407b58:	4261      	negs	r1, r4
  407b5a:	4630      	mov	r0, r6
  407b5c:	f7fc fb58 	bl	404210 <_sbrk_r>
  407b60:	3001      	adds	r0, #1
  407b62:	d00d      	beq.n	407b80 <_malloc_trim_r+0x70>
  407b64:	4b10      	ldr	r3, [pc, #64]	; (407ba8 <_malloc_trim_r+0x98>)
  407b66:	68ba      	ldr	r2, [r7, #8]
  407b68:	6819      	ldr	r1, [r3, #0]
  407b6a:	1b2d      	subs	r5, r5, r4
  407b6c:	f045 0501 	orr.w	r5, r5, #1
  407b70:	4630      	mov	r0, r6
  407b72:	1b09      	subs	r1, r1, r4
  407b74:	6055      	str	r5, [r2, #4]
  407b76:	6019      	str	r1, [r3, #0]
  407b78:	f7fc fb44 	bl	404204 <__malloc_unlock>
  407b7c:	2001      	movs	r0, #1
  407b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407b80:	2100      	movs	r1, #0
  407b82:	4630      	mov	r0, r6
  407b84:	f7fc fb44 	bl	404210 <_sbrk_r>
  407b88:	68ba      	ldr	r2, [r7, #8]
  407b8a:	1a83      	subs	r3, r0, r2
  407b8c:	2b0f      	cmp	r3, #15
  407b8e:	ddde      	ble.n	407b4e <_malloc_trim_r+0x3e>
  407b90:	4c06      	ldr	r4, [pc, #24]	; (407bac <_malloc_trim_r+0x9c>)
  407b92:	4905      	ldr	r1, [pc, #20]	; (407ba8 <_malloc_trim_r+0x98>)
  407b94:	6824      	ldr	r4, [r4, #0]
  407b96:	f043 0301 	orr.w	r3, r3, #1
  407b9a:	1b00      	subs	r0, r0, r4
  407b9c:	6053      	str	r3, [r2, #4]
  407b9e:	6008      	str	r0, [r1, #0]
  407ba0:	e7d5      	b.n	407b4e <_malloc_trim_r+0x3e>
  407ba2:	bf00      	nop
  407ba4:	20400438 	.word	0x20400438
  407ba8:	20400b98 	.word	0x20400b98
  407bac:	20400840 	.word	0x20400840

00407bb0 <_free_r>:
  407bb0:	2900      	cmp	r1, #0
  407bb2:	d044      	beq.n	407c3e <_free_r+0x8e>
  407bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407bb8:	460d      	mov	r5, r1
  407bba:	4680      	mov	r8, r0
  407bbc:	f7fc fb1c 	bl	4041f8 <__malloc_lock>
  407bc0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407bc4:	4969      	ldr	r1, [pc, #420]	; (407d6c <_free_r+0x1bc>)
  407bc6:	f027 0301 	bic.w	r3, r7, #1
  407bca:	f1a5 0408 	sub.w	r4, r5, #8
  407bce:	18e2      	adds	r2, r4, r3
  407bd0:	688e      	ldr	r6, [r1, #8]
  407bd2:	6850      	ldr	r0, [r2, #4]
  407bd4:	42b2      	cmp	r2, r6
  407bd6:	f020 0003 	bic.w	r0, r0, #3
  407bda:	d05e      	beq.n	407c9a <_free_r+0xea>
  407bdc:	07fe      	lsls	r6, r7, #31
  407bde:	6050      	str	r0, [r2, #4]
  407be0:	d40b      	bmi.n	407bfa <_free_r+0x4a>
  407be2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407be6:	1be4      	subs	r4, r4, r7
  407be8:	f101 0e08 	add.w	lr, r1, #8
  407bec:	68a5      	ldr	r5, [r4, #8]
  407bee:	4575      	cmp	r5, lr
  407bf0:	443b      	add	r3, r7
  407bf2:	d06d      	beq.n	407cd0 <_free_r+0x120>
  407bf4:	68e7      	ldr	r7, [r4, #12]
  407bf6:	60ef      	str	r7, [r5, #12]
  407bf8:	60bd      	str	r5, [r7, #8]
  407bfa:	1815      	adds	r5, r2, r0
  407bfc:	686d      	ldr	r5, [r5, #4]
  407bfe:	07ed      	lsls	r5, r5, #31
  407c00:	d53e      	bpl.n	407c80 <_free_r+0xd0>
  407c02:	f043 0201 	orr.w	r2, r3, #1
  407c06:	6062      	str	r2, [r4, #4]
  407c08:	50e3      	str	r3, [r4, r3]
  407c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407c0e:	d217      	bcs.n	407c40 <_free_r+0x90>
  407c10:	08db      	lsrs	r3, r3, #3
  407c12:	1c58      	adds	r0, r3, #1
  407c14:	109a      	asrs	r2, r3, #2
  407c16:	684d      	ldr	r5, [r1, #4]
  407c18:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407c1c:	60a7      	str	r7, [r4, #8]
  407c1e:	2301      	movs	r3, #1
  407c20:	4093      	lsls	r3, r2
  407c22:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407c26:	432b      	orrs	r3, r5
  407c28:	3a08      	subs	r2, #8
  407c2a:	60e2      	str	r2, [r4, #12]
  407c2c:	604b      	str	r3, [r1, #4]
  407c2e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407c32:	60fc      	str	r4, [r7, #12]
  407c34:	4640      	mov	r0, r8
  407c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407c3a:	f7fc bae3 	b.w	404204 <__malloc_unlock>
  407c3e:	4770      	bx	lr
  407c40:	0a5a      	lsrs	r2, r3, #9
  407c42:	2a04      	cmp	r2, #4
  407c44:	d852      	bhi.n	407cec <_free_r+0x13c>
  407c46:	099a      	lsrs	r2, r3, #6
  407c48:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407c4c:	00ff      	lsls	r7, r7, #3
  407c4e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407c52:	19c8      	adds	r0, r1, r7
  407c54:	59ca      	ldr	r2, [r1, r7]
  407c56:	3808      	subs	r0, #8
  407c58:	4290      	cmp	r0, r2
  407c5a:	d04f      	beq.n	407cfc <_free_r+0x14c>
  407c5c:	6851      	ldr	r1, [r2, #4]
  407c5e:	f021 0103 	bic.w	r1, r1, #3
  407c62:	428b      	cmp	r3, r1
  407c64:	d232      	bcs.n	407ccc <_free_r+0x11c>
  407c66:	6892      	ldr	r2, [r2, #8]
  407c68:	4290      	cmp	r0, r2
  407c6a:	d1f7      	bne.n	407c5c <_free_r+0xac>
  407c6c:	68c3      	ldr	r3, [r0, #12]
  407c6e:	60a0      	str	r0, [r4, #8]
  407c70:	60e3      	str	r3, [r4, #12]
  407c72:	609c      	str	r4, [r3, #8]
  407c74:	60c4      	str	r4, [r0, #12]
  407c76:	4640      	mov	r0, r8
  407c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407c7c:	f7fc bac2 	b.w	404204 <__malloc_unlock>
  407c80:	6895      	ldr	r5, [r2, #8]
  407c82:	4f3b      	ldr	r7, [pc, #236]	; (407d70 <_free_r+0x1c0>)
  407c84:	42bd      	cmp	r5, r7
  407c86:	4403      	add	r3, r0
  407c88:	d040      	beq.n	407d0c <_free_r+0x15c>
  407c8a:	68d0      	ldr	r0, [r2, #12]
  407c8c:	60e8      	str	r0, [r5, #12]
  407c8e:	f043 0201 	orr.w	r2, r3, #1
  407c92:	6085      	str	r5, [r0, #8]
  407c94:	6062      	str	r2, [r4, #4]
  407c96:	50e3      	str	r3, [r4, r3]
  407c98:	e7b7      	b.n	407c0a <_free_r+0x5a>
  407c9a:	07ff      	lsls	r7, r7, #31
  407c9c:	4403      	add	r3, r0
  407c9e:	d407      	bmi.n	407cb0 <_free_r+0x100>
  407ca0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407ca4:	1aa4      	subs	r4, r4, r2
  407ca6:	4413      	add	r3, r2
  407ca8:	68a0      	ldr	r0, [r4, #8]
  407caa:	68e2      	ldr	r2, [r4, #12]
  407cac:	60c2      	str	r2, [r0, #12]
  407cae:	6090      	str	r0, [r2, #8]
  407cb0:	4a30      	ldr	r2, [pc, #192]	; (407d74 <_free_r+0x1c4>)
  407cb2:	6812      	ldr	r2, [r2, #0]
  407cb4:	f043 0001 	orr.w	r0, r3, #1
  407cb8:	4293      	cmp	r3, r2
  407cba:	6060      	str	r0, [r4, #4]
  407cbc:	608c      	str	r4, [r1, #8]
  407cbe:	d3b9      	bcc.n	407c34 <_free_r+0x84>
  407cc0:	4b2d      	ldr	r3, [pc, #180]	; (407d78 <_free_r+0x1c8>)
  407cc2:	4640      	mov	r0, r8
  407cc4:	6819      	ldr	r1, [r3, #0]
  407cc6:	f7ff ff23 	bl	407b10 <_malloc_trim_r>
  407cca:	e7b3      	b.n	407c34 <_free_r+0x84>
  407ccc:	4610      	mov	r0, r2
  407cce:	e7cd      	b.n	407c6c <_free_r+0xbc>
  407cd0:	1811      	adds	r1, r2, r0
  407cd2:	6849      	ldr	r1, [r1, #4]
  407cd4:	07c9      	lsls	r1, r1, #31
  407cd6:	d444      	bmi.n	407d62 <_free_r+0x1b2>
  407cd8:	6891      	ldr	r1, [r2, #8]
  407cda:	68d2      	ldr	r2, [r2, #12]
  407cdc:	60ca      	str	r2, [r1, #12]
  407cde:	4403      	add	r3, r0
  407ce0:	f043 0001 	orr.w	r0, r3, #1
  407ce4:	6091      	str	r1, [r2, #8]
  407ce6:	6060      	str	r0, [r4, #4]
  407ce8:	50e3      	str	r3, [r4, r3]
  407cea:	e7a3      	b.n	407c34 <_free_r+0x84>
  407cec:	2a14      	cmp	r2, #20
  407cee:	d816      	bhi.n	407d1e <_free_r+0x16e>
  407cf0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407cf4:	00ff      	lsls	r7, r7, #3
  407cf6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407cfa:	e7aa      	b.n	407c52 <_free_r+0xa2>
  407cfc:	10aa      	asrs	r2, r5, #2
  407cfe:	2301      	movs	r3, #1
  407d00:	684d      	ldr	r5, [r1, #4]
  407d02:	4093      	lsls	r3, r2
  407d04:	432b      	orrs	r3, r5
  407d06:	604b      	str	r3, [r1, #4]
  407d08:	4603      	mov	r3, r0
  407d0a:	e7b0      	b.n	407c6e <_free_r+0xbe>
  407d0c:	f043 0201 	orr.w	r2, r3, #1
  407d10:	614c      	str	r4, [r1, #20]
  407d12:	610c      	str	r4, [r1, #16]
  407d14:	60e5      	str	r5, [r4, #12]
  407d16:	60a5      	str	r5, [r4, #8]
  407d18:	6062      	str	r2, [r4, #4]
  407d1a:	50e3      	str	r3, [r4, r3]
  407d1c:	e78a      	b.n	407c34 <_free_r+0x84>
  407d1e:	2a54      	cmp	r2, #84	; 0x54
  407d20:	d806      	bhi.n	407d30 <_free_r+0x180>
  407d22:	0b1a      	lsrs	r2, r3, #12
  407d24:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407d28:	00ff      	lsls	r7, r7, #3
  407d2a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407d2e:	e790      	b.n	407c52 <_free_r+0xa2>
  407d30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407d34:	d806      	bhi.n	407d44 <_free_r+0x194>
  407d36:	0bda      	lsrs	r2, r3, #15
  407d38:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407d3c:	00ff      	lsls	r7, r7, #3
  407d3e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407d42:	e786      	b.n	407c52 <_free_r+0xa2>
  407d44:	f240 5054 	movw	r0, #1364	; 0x554
  407d48:	4282      	cmp	r2, r0
  407d4a:	d806      	bhi.n	407d5a <_free_r+0x1aa>
  407d4c:	0c9a      	lsrs	r2, r3, #18
  407d4e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407d52:	00ff      	lsls	r7, r7, #3
  407d54:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407d58:	e77b      	b.n	407c52 <_free_r+0xa2>
  407d5a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407d5e:	257e      	movs	r5, #126	; 0x7e
  407d60:	e777      	b.n	407c52 <_free_r+0xa2>
  407d62:	f043 0101 	orr.w	r1, r3, #1
  407d66:	6061      	str	r1, [r4, #4]
  407d68:	6013      	str	r3, [r2, #0]
  407d6a:	e763      	b.n	407c34 <_free_r+0x84>
  407d6c:	20400438 	.word	0x20400438
  407d70:	20400440 	.word	0x20400440
  407d74:	20400844 	.word	0x20400844
  407d78:	20400bc8 	.word	0x20400bc8

00407d7c <__sfvwrite_r>:
  407d7c:	6893      	ldr	r3, [r2, #8]
  407d7e:	2b00      	cmp	r3, #0
  407d80:	d073      	beq.n	407e6a <__sfvwrite_r+0xee>
  407d82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d86:	898b      	ldrh	r3, [r1, #12]
  407d88:	b083      	sub	sp, #12
  407d8a:	460c      	mov	r4, r1
  407d8c:	0719      	lsls	r1, r3, #28
  407d8e:	9000      	str	r0, [sp, #0]
  407d90:	4616      	mov	r6, r2
  407d92:	d526      	bpl.n	407de2 <__sfvwrite_r+0x66>
  407d94:	6922      	ldr	r2, [r4, #16]
  407d96:	b322      	cbz	r2, 407de2 <__sfvwrite_r+0x66>
  407d98:	f013 0002 	ands.w	r0, r3, #2
  407d9c:	6835      	ldr	r5, [r6, #0]
  407d9e:	d02c      	beq.n	407dfa <__sfvwrite_r+0x7e>
  407da0:	f04f 0900 	mov.w	r9, #0
  407da4:	4fb0      	ldr	r7, [pc, #704]	; (408068 <__sfvwrite_r+0x2ec>)
  407da6:	46c8      	mov	r8, r9
  407da8:	46b2      	mov	sl, r6
  407daa:	45b8      	cmp	r8, r7
  407dac:	4643      	mov	r3, r8
  407dae:	464a      	mov	r2, r9
  407db0:	bf28      	it	cs
  407db2:	463b      	movcs	r3, r7
  407db4:	9800      	ldr	r0, [sp, #0]
  407db6:	f1b8 0f00 	cmp.w	r8, #0
  407dba:	d050      	beq.n	407e5e <__sfvwrite_r+0xe2>
  407dbc:	69e1      	ldr	r1, [r4, #28]
  407dbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407dc0:	47b0      	blx	r6
  407dc2:	2800      	cmp	r0, #0
  407dc4:	dd58      	ble.n	407e78 <__sfvwrite_r+0xfc>
  407dc6:	f8da 3008 	ldr.w	r3, [sl, #8]
  407dca:	1a1b      	subs	r3, r3, r0
  407dcc:	4481      	add	r9, r0
  407dce:	eba8 0800 	sub.w	r8, r8, r0
  407dd2:	f8ca 3008 	str.w	r3, [sl, #8]
  407dd6:	2b00      	cmp	r3, #0
  407dd8:	d1e7      	bne.n	407daa <__sfvwrite_r+0x2e>
  407dda:	2000      	movs	r0, #0
  407ddc:	b003      	add	sp, #12
  407dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407de2:	4621      	mov	r1, r4
  407de4:	9800      	ldr	r0, [sp, #0]
  407de6:	f7fe fc91 	bl	40670c <__swsetup_r>
  407dea:	2800      	cmp	r0, #0
  407dec:	f040 8133 	bne.w	408056 <__sfvwrite_r+0x2da>
  407df0:	89a3      	ldrh	r3, [r4, #12]
  407df2:	6835      	ldr	r5, [r6, #0]
  407df4:	f013 0002 	ands.w	r0, r3, #2
  407df8:	d1d2      	bne.n	407da0 <__sfvwrite_r+0x24>
  407dfa:	f013 0901 	ands.w	r9, r3, #1
  407dfe:	d145      	bne.n	407e8c <__sfvwrite_r+0x110>
  407e00:	464f      	mov	r7, r9
  407e02:	9601      	str	r6, [sp, #4]
  407e04:	b337      	cbz	r7, 407e54 <__sfvwrite_r+0xd8>
  407e06:	059a      	lsls	r2, r3, #22
  407e08:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407e0c:	f140 8083 	bpl.w	407f16 <__sfvwrite_r+0x19a>
  407e10:	4547      	cmp	r7, r8
  407e12:	46c3      	mov	fp, r8
  407e14:	f0c0 80ab 	bcc.w	407f6e <__sfvwrite_r+0x1f2>
  407e18:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407e1c:	f040 80ac 	bne.w	407f78 <__sfvwrite_r+0x1fc>
  407e20:	6820      	ldr	r0, [r4, #0]
  407e22:	46ba      	mov	sl, r7
  407e24:	465a      	mov	r2, fp
  407e26:	4649      	mov	r1, r9
  407e28:	f000 fa52 	bl	4082d0 <memmove>
  407e2c:	68a2      	ldr	r2, [r4, #8]
  407e2e:	6823      	ldr	r3, [r4, #0]
  407e30:	eba2 0208 	sub.w	r2, r2, r8
  407e34:	445b      	add	r3, fp
  407e36:	60a2      	str	r2, [r4, #8]
  407e38:	6023      	str	r3, [r4, #0]
  407e3a:	9a01      	ldr	r2, [sp, #4]
  407e3c:	6893      	ldr	r3, [r2, #8]
  407e3e:	eba3 030a 	sub.w	r3, r3, sl
  407e42:	44d1      	add	r9, sl
  407e44:	eba7 070a 	sub.w	r7, r7, sl
  407e48:	6093      	str	r3, [r2, #8]
  407e4a:	2b00      	cmp	r3, #0
  407e4c:	d0c5      	beq.n	407dda <__sfvwrite_r+0x5e>
  407e4e:	89a3      	ldrh	r3, [r4, #12]
  407e50:	2f00      	cmp	r7, #0
  407e52:	d1d8      	bne.n	407e06 <__sfvwrite_r+0x8a>
  407e54:	f8d5 9000 	ldr.w	r9, [r5]
  407e58:	686f      	ldr	r7, [r5, #4]
  407e5a:	3508      	adds	r5, #8
  407e5c:	e7d2      	b.n	407e04 <__sfvwrite_r+0x88>
  407e5e:	f8d5 9000 	ldr.w	r9, [r5]
  407e62:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407e66:	3508      	adds	r5, #8
  407e68:	e79f      	b.n	407daa <__sfvwrite_r+0x2e>
  407e6a:	2000      	movs	r0, #0
  407e6c:	4770      	bx	lr
  407e6e:	4621      	mov	r1, r4
  407e70:	9800      	ldr	r0, [sp, #0]
  407e72:	f7ff fd1f 	bl	4078b4 <_fflush_r>
  407e76:	b370      	cbz	r0, 407ed6 <__sfvwrite_r+0x15a>
  407e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e80:	f04f 30ff 	mov.w	r0, #4294967295
  407e84:	81a3      	strh	r3, [r4, #12]
  407e86:	b003      	add	sp, #12
  407e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e8c:	4681      	mov	r9, r0
  407e8e:	4633      	mov	r3, r6
  407e90:	464e      	mov	r6, r9
  407e92:	46a8      	mov	r8, r5
  407e94:	469a      	mov	sl, r3
  407e96:	464d      	mov	r5, r9
  407e98:	b34e      	cbz	r6, 407eee <__sfvwrite_r+0x172>
  407e9a:	b380      	cbz	r0, 407efe <__sfvwrite_r+0x182>
  407e9c:	6820      	ldr	r0, [r4, #0]
  407e9e:	6923      	ldr	r3, [r4, #16]
  407ea0:	6962      	ldr	r2, [r4, #20]
  407ea2:	45b1      	cmp	r9, r6
  407ea4:	46cb      	mov	fp, r9
  407ea6:	bf28      	it	cs
  407ea8:	46b3      	movcs	fp, r6
  407eaa:	4298      	cmp	r0, r3
  407eac:	465f      	mov	r7, fp
  407eae:	d904      	bls.n	407eba <__sfvwrite_r+0x13e>
  407eb0:	68a3      	ldr	r3, [r4, #8]
  407eb2:	4413      	add	r3, r2
  407eb4:	459b      	cmp	fp, r3
  407eb6:	f300 80a6 	bgt.w	408006 <__sfvwrite_r+0x28a>
  407eba:	4593      	cmp	fp, r2
  407ebc:	db4b      	blt.n	407f56 <__sfvwrite_r+0x1da>
  407ebe:	4613      	mov	r3, r2
  407ec0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407ec2:	69e1      	ldr	r1, [r4, #28]
  407ec4:	9800      	ldr	r0, [sp, #0]
  407ec6:	462a      	mov	r2, r5
  407ec8:	47b8      	blx	r7
  407eca:	1e07      	subs	r7, r0, #0
  407ecc:	ddd4      	ble.n	407e78 <__sfvwrite_r+0xfc>
  407ece:	ebb9 0907 	subs.w	r9, r9, r7
  407ed2:	d0cc      	beq.n	407e6e <__sfvwrite_r+0xf2>
  407ed4:	2001      	movs	r0, #1
  407ed6:	f8da 3008 	ldr.w	r3, [sl, #8]
  407eda:	1bdb      	subs	r3, r3, r7
  407edc:	443d      	add	r5, r7
  407ede:	1bf6      	subs	r6, r6, r7
  407ee0:	f8ca 3008 	str.w	r3, [sl, #8]
  407ee4:	2b00      	cmp	r3, #0
  407ee6:	f43f af78 	beq.w	407dda <__sfvwrite_r+0x5e>
  407eea:	2e00      	cmp	r6, #0
  407eec:	d1d5      	bne.n	407e9a <__sfvwrite_r+0x11e>
  407eee:	f108 0308 	add.w	r3, r8, #8
  407ef2:	e913 0060 	ldmdb	r3, {r5, r6}
  407ef6:	4698      	mov	r8, r3
  407ef8:	3308      	adds	r3, #8
  407efa:	2e00      	cmp	r6, #0
  407efc:	d0f9      	beq.n	407ef2 <__sfvwrite_r+0x176>
  407efe:	4632      	mov	r2, r6
  407f00:	210a      	movs	r1, #10
  407f02:	4628      	mov	r0, r5
  407f04:	f000 f994 	bl	408230 <memchr>
  407f08:	2800      	cmp	r0, #0
  407f0a:	f000 80a1 	beq.w	408050 <__sfvwrite_r+0x2d4>
  407f0e:	3001      	adds	r0, #1
  407f10:	eba0 0905 	sub.w	r9, r0, r5
  407f14:	e7c2      	b.n	407e9c <__sfvwrite_r+0x120>
  407f16:	6820      	ldr	r0, [r4, #0]
  407f18:	6923      	ldr	r3, [r4, #16]
  407f1a:	4298      	cmp	r0, r3
  407f1c:	d802      	bhi.n	407f24 <__sfvwrite_r+0x1a8>
  407f1e:	6963      	ldr	r3, [r4, #20]
  407f20:	429f      	cmp	r7, r3
  407f22:	d25d      	bcs.n	407fe0 <__sfvwrite_r+0x264>
  407f24:	45b8      	cmp	r8, r7
  407f26:	bf28      	it	cs
  407f28:	46b8      	movcs	r8, r7
  407f2a:	4642      	mov	r2, r8
  407f2c:	4649      	mov	r1, r9
  407f2e:	f000 f9cf 	bl	4082d0 <memmove>
  407f32:	68a3      	ldr	r3, [r4, #8]
  407f34:	6822      	ldr	r2, [r4, #0]
  407f36:	eba3 0308 	sub.w	r3, r3, r8
  407f3a:	4442      	add	r2, r8
  407f3c:	60a3      	str	r3, [r4, #8]
  407f3e:	6022      	str	r2, [r4, #0]
  407f40:	b10b      	cbz	r3, 407f46 <__sfvwrite_r+0x1ca>
  407f42:	46c2      	mov	sl, r8
  407f44:	e779      	b.n	407e3a <__sfvwrite_r+0xbe>
  407f46:	4621      	mov	r1, r4
  407f48:	9800      	ldr	r0, [sp, #0]
  407f4a:	f7ff fcb3 	bl	4078b4 <_fflush_r>
  407f4e:	2800      	cmp	r0, #0
  407f50:	d192      	bne.n	407e78 <__sfvwrite_r+0xfc>
  407f52:	46c2      	mov	sl, r8
  407f54:	e771      	b.n	407e3a <__sfvwrite_r+0xbe>
  407f56:	465a      	mov	r2, fp
  407f58:	4629      	mov	r1, r5
  407f5a:	f000 f9b9 	bl	4082d0 <memmove>
  407f5e:	68a2      	ldr	r2, [r4, #8]
  407f60:	6823      	ldr	r3, [r4, #0]
  407f62:	eba2 020b 	sub.w	r2, r2, fp
  407f66:	445b      	add	r3, fp
  407f68:	60a2      	str	r2, [r4, #8]
  407f6a:	6023      	str	r3, [r4, #0]
  407f6c:	e7af      	b.n	407ece <__sfvwrite_r+0x152>
  407f6e:	6820      	ldr	r0, [r4, #0]
  407f70:	46b8      	mov	r8, r7
  407f72:	46ba      	mov	sl, r7
  407f74:	46bb      	mov	fp, r7
  407f76:	e755      	b.n	407e24 <__sfvwrite_r+0xa8>
  407f78:	6962      	ldr	r2, [r4, #20]
  407f7a:	6820      	ldr	r0, [r4, #0]
  407f7c:	6921      	ldr	r1, [r4, #16]
  407f7e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407f82:	eba0 0a01 	sub.w	sl, r0, r1
  407f86:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407f8a:	f10a 0001 	add.w	r0, sl, #1
  407f8e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407f92:	4438      	add	r0, r7
  407f94:	4540      	cmp	r0, r8
  407f96:	4642      	mov	r2, r8
  407f98:	bf84      	itt	hi
  407f9a:	4680      	movhi	r8, r0
  407f9c:	4642      	movhi	r2, r8
  407f9e:	055b      	lsls	r3, r3, #21
  407fa0:	d544      	bpl.n	40802c <__sfvwrite_r+0x2b0>
  407fa2:	4611      	mov	r1, r2
  407fa4:	9800      	ldr	r0, [sp, #0]
  407fa6:	f7fb fd8f 	bl	403ac8 <_malloc_r>
  407faa:	4683      	mov	fp, r0
  407fac:	2800      	cmp	r0, #0
  407fae:	d055      	beq.n	40805c <__sfvwrite_r+0x2e0>
  407fb0:	4652      	mov	r2, sl
  407fb2:	6921      	ldr	r1, [r4, #16]
  407fb4:	f7fc f838 	bl	404028 <memcpy>
  407fb8:	89a3      	ldrh	r3, [r4, #12]
  407fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407fc2:	81a3      	strh	r3, [r4, #12]
  407fc4:	eb0b 000a 	add.w	r0, fp, sl
  407fc8:	eba8 030a 	sub.w	r3, r8, sl
  407fcc:	f8c4 b010 	str.w	fp, [r4, #16]
  407fd0:	f8c4 8014 	str.w	r8, [r4, #20]
  407fd4:	6020      	str	r0, [r4, #0]
  407fd6:	60a3      	str	r3, [r4, #8]
  407fd8:	46b8      	mov	r8, r7
  407fda:	46ba      	mov	sl, r7
  407fdc:	46bb      	mov	fp, r7
  407fde:	e721      	b.n	407e24 <__sfvwrite_r+0xa8>
  407fe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407fe4:	42b9      	cmp	r1, r7
  407fe6:	bf28      	it	cs
  407fe8:	4639      	movcs	r1, r7
  407fea:	464a      	mov	r2, r9
  407fec:	fb91 f1f3 	sdiv	r1, r1, r3
  407ff0:	9800      	ldr	r0, [sp, #0]
  407ff2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407ff4:	fb03 f301 	mul.w	r3, r3, r1
  407ff8:	69e1      	ldr	r1, [r4, #28]
  407ffa:	47b0      	blx	r6
  407ffc:	f1b0 0a00 	subs.w	sl, r0, #0
  408000:	f73f af1b 	bgt.w	407e3a <__sfvwrite_r+0xbe>
  408004:	e738      	b.n	407e78 <__sfvwrite_r+0xfc>
  408006:	461a      	mov	r2, r3
  408008:	4629      	mov	r1, r5
  40800a:	9301      	str	r3, [sp, #4]
  40800c:	f000 f960 	bl	4082d0 <memmove>
  408010:	6822      	ldr	r2, [r4, #0]
  408012:	9b01      	ldr	r3, [sp, #4]
  408014:	9800      	ldr	r0, [sp, #0]
  408016:	441a      	add	r2, r3
  408018:	6022      	str	r2, [r4, #0]
  40801a:	4621      	mov	r1, r4
  40801c:	f7ff fc4a 	bl	4078b4 <_fflush_r>
  408020:	9b01      	ldr	r3, [sp, #4]
  408022:	2800      	cmp	r0, #0
  408024:	f47f af28 	bne.w	407e78 <__sfvwrite_r+0xfc>
  408028:	461f      	mov	r7, r3
  40802a:	e750      	b.n	407ece <__sfvwrite_r+0x152>
  40802c:	9800      	ldr	r0, [sp, #0]
  40802e:	f000 fcad 	bl	40898c <_realloc_r>
  408032:	4683      	mov	fp, r0
  408034:	2800      	cmp	r0, #0
  408036:	d1c5      	bne.n	407fc4 <__sfvwrite_r+0x248>
  408038:	9d00      	ldr	r5, [sp, #0]
  40803a:	6921      	ldr	r1, [r4, #16]
  40803c:	4628      	mov	r0, r5
  40803e:	f7ff fdb7 	bl	407bb0 <_free_r>
  408042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408046:	220c      	movs	r2, #12
  408048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40804c:	602a      	str	r2, [r5, #0]
  40804e:	e715      	b.n	407e7c <__sfvwrite_r+0x100>
  408050:	f106 0901 	add.w	r9, r6, #1
  408054:	e722      	b.n	407e9c <__sfvwrite_r+0x120>
  408056:	f04f 30ff 	mov.w	r0, #4294967295
  40805a:	e6bf      	b.n	407ddc <__sfvwrite_r+0x60>
  40805c:	9a00      	ldr	r2, [sp, #0]
  40805e:	230c      	movs	r3, #12
  408060:	6013      	str	r3, [r2, #0]
  408062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408066:	e709      	b.n	407e7c <__sfvwrite_r+0x100>
  408068:	7ffffc00 	.word	0x7ffffc00

0040806c <_fwalk_reent>:
  40806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408070:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408074:	d01f      	beq.n	4080b6 <_fwalk_reent+0x4a>
  408076:	4688      	mov	r8, r1
  408078:	4606      	mov	r6, r0
  40807a:	f04f 0900 	mov.w	r9, #0
  40807e:	687d      	ldr	r5, [r7, #4]
  408080:	68bc      	ldr	r4, [r7, #8]
  408082:	3d01      	subs	r5, #1
  408084:	d411      	bmi.n	4080aa <_fwalk_reent+0x3e>
  408086:	89a3      	ldrh	r3, [r4, #12]
  408088:	2b01      	cmp	r3, #1
  40808a:	f105 35ff 	add.w	r5, r5, #4294967295
  40808e:	d908      	bls.n	4080a2 <_fwalk_reent+0x36>
  408090:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408094:	3301      	adds	r3, #1
  408096:	4621      	mov	r1, r4
  408098:	4630      	mov	r0, r6
  40809a:	d002      	beq.n	4080a2 <_fwalk_reent+0x36>
  40809c:	47c0      	blx	r8
  40809e:	ea49 0900 	orr.w	r9, r9, r0
  4080a2:	1c6b      	adds	r3, r5, #1
  4080a4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4080a8:	d1ed      	bne.n	408086 <_fwalk_reent+0x1a>
  4080aa:	683f      	ldr	r7, [r7, #0]
  4080ac:	2f00      	cmp	r7, #0
  4080ae:	d1e6      	bne.n	40807e <_fwalk_reent+0x12>
  4080b0:	4648      	mov	r0, r9
  4080b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4080b6:	46b9      	mov	r9, r7
  4080b8:	4648      	mov	r0, r9
  4080ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4080be:	bf00      	nop

004080c0 <__locale_mb_cur_max>:
  4080c0:	4b04      	ldr	r3, [pc, #16]	; (4080d4 <__locale_mb_cur_max+0x14>)
  4080c2:	4a05      	ldr	r2, [pc, #20]	; (4080d8 <__locale_mb_cur_max+0x18>)
  4080c4:	681b      	ldr	r3, [r3, #0]
  4080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4080c8:	2b00      	cmp	r3, #0
  4080ca:	bf08      	it	eq
  4080cc:	4613      	moveq	r3, r2
  4080ce:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4080d2:	4770      	bx	lr
  4080d4:	2040000c 	.word	0x2040000c
  4080d8:	2040084c 	.word	0x2040084c

004080dc <_localeconv_r>:
  4080dc:	4a04      	ldr	r2, [pc, #16]	; (4080f0 <_localeconv_r+0x14>)
  4080de:	4b05      	ldr	r3, [pc, #20]	; (4080f4 <_localeconv_r+0x18>)
  4080e0:	6812      	ldr	r2, [r2, #0]
  4080e2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4080e4:	2800      	cmp	r0, #0
  4080e6:	bf08      	it	eq
  4080e8:	4618      	moveq	r0, r3
  4080ea:	30f0      	adds	r0, #240	; 0xf0
  4080ec:	4770      	bx	lr
  4080ee:	bf00      	nop
  4080f0:	2040000c 	.word	0x2040000c
  4080f4:	2040084c 	.word	0x2040084c

004080f8 <__retarget_lock_init_recursive>:
  4080f8:	4770      	bx	lr
  4080fa:	bf00      	nop

004080fc <__retarget_lock_close_recursive>:
  4080fc:	4770      	bx	lr
  4080fe:	bf00      	nop

00408100 <__retarget_lock_acquire_recursive>:
  408100:	4770      	bx	lr
  408102:	bf00      	nop

00408104 <__retarget_lock_release_recursive>:
  408104:	4770      	bx	lr
  408106:	bf00      	nop

00408108 <__swhatbuf_r>:
  408108:	b570      	push	{r4, r5, r6, lr}
  40810a:	460c      	mov	r4, r1
  40810c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408110:	2900      	cmp	r1, #0
  408112:	b090      	sub	sp, #64	; 0x40
  408114:	4615      	mov	r5, r2
  408116:	461e      	mov	r6, r3
  408118:	db14      	blt.n	408144 <__swhatbuf_r+0x3c>
  40811a:	aa01      	add	r2, sp, #4
  40811c:	f001 f84a 	bl	4091b4 <_fstat_r>
  408120:	2800      	cmp	r0, #0
  408122:	db0f      	blt.n	408144 <__swhatbuf_r+0x3c>
  408124:	9a02      	ldr	r2, [sp, #8]
  408126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40812a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40812e:	fab2 f282 	clz	r2, r2
  408132:	0952      	lsrs	r2, r2, #5
  408134:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408138:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40813c:	6032      	str	r2, [r6, #0]
  40813e:	602b      	str	r3, [r5, #0]
  408140:	b010      	add	sp, #64	; 0x40
  408142:	bd70      	pop	{r4, r5, r6, pc}
  408144:	89a2      	ldrh	r2, [r4, #12]
  408146:	2300      	movs	r3, #0
  408148:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40814c:	6033      	str	r3, [r6, #0]
  40814e:	d004      	beq.n	40815a <__swhatbuf_r+0x52>
  408150:	2240      	movs	r2, #64	; 0x40
  408152:	4618      	mov	r0, r3
  408154:	602a      	str	r2, [r5, #0]
  408156:	b010      	add	sp, #64	; 0x40
  408158:	bd70      	pop	{r4, r5, r6, pc}
  40815a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40815e:	602b      	str	r3, [r5, #0]
  408160:	b010      	add	sp, #64	; 0x40
  408162:	bd70      	pop	{r4, r5, r6, pc}

00408164 <__smakebuf_r>:
  408164:	898a      	ldrh	r2, [r1, #12]
  408166:	0792      	lsls	r2, r2, #30
  408168:	460b      	mov	r3, r1
  40816a:	d506      	bpl.n	40817a <__smakebuf_r+0x16>
  40816c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408170:	2101      	movs	r1, #1
  408172:	601a      	str	r2, [r3, #0]
  408174:	611a      	str	r2, [r3, #16]
  408176:	6159      	str	r1, [r3, #20]
  408178:	4770      	bx	lr
  40817a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40817c:	b083      	sub	sp, #12
  40817e:	ab01      	add	r3, sp, #4
  408180:	466a      	mov	r2, sp
  408182:	460c      	mov	r4, r1
  408184:	4606      	mov	r6, r0
  408186:	f7ff ffbf 	bl	408108 <__swhatbuf_r>
  40818a:	9900      	ldr	r1, [sp, #0]
  40818c:	4605      	mov	r5, r0
  40818e:	4630      	mov	r0, r6
  408190:	f7fb fc9a 	bl	403ac8 <_malloc_r>
  408194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408198:	b1d8      	cbz	r0, 4081d2 <__smakebuf_r+0x6e>
  40819a:	9a01      	ldr	r2, [sp, #4]
  40819c:	4f15      	ldr	r7, [pc, #84]	; (4081f4 <__smakebuf_r+0x90>)
  40819e:	9900      	ldr	r1, [sp, #0]
  4081a0:	63f7      	str	r7, [r6, #60]	; 0x3c
  4081a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4081a6:	81a3      	strh	r3, [r4, #12]
  4081a8:	6020      	str	r0, [r4, #0]
  4081aa:	6120      	str	r0, [r4, #16]
  4081ac:	6161      	str	r1, [r4, #20]
  4081ae:	b91a      	cbnz	r2, 4081b8 <__smakebuf_r+0x54>
  4081b0:	432b      	orrs	r3, r5
  4081b2:	81a3      	strh	r3, [r4, #12]
  4081b4:	b003      	add	sp, #12
  4081b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4081b8:	4630      	mov	r0, r6
  4081ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4081be:	f001 f80d 	bl	4091dc <_isatty_r>
  4081c2:	b1a0      	cbz	r0, 4081ee <__smakebuf_r+0x8a>
  4081c4:	89a3      	ldrh	r3, [r4, #12]
  4081c6:	f023 0303 	bic.w	r3, r3, #3
  4081ca:	f043 0301 	orr.w	r3, r3, #1
  4081ce:	b21b      	sxth	r3, r3
  4081d0:	e7ee      	b.n	4081b0 <__smakebuf_r+0x4c>
  4081d2:	059a      	lsls	r2, r3, #22
  4081d4:	d4ee      	bmi.n	4081b4 <__smakebuf_r+0x50>
  4081d6:	f023 0303 	bic.w	r3, r3, #3
  4081da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4081de:	f043 0302 	orr.w	r3, r3, #2
  4081e2:	2101      	movs	r1, #1
  4081e4:	81a3      	strh	r3, [r4, #12]
  4081e6:	6022      	str	r2, [r4, #0]
  4081e8:	6122      	str	r2, [r4, #16]
  4081ea:	6161      	str	r1, [r4, #20]
  4081ec:	e7e2      	b.n	4081b4 <__smakebuf_r+0x50>
  4081ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4081f2:	e7dd      	b.n	4081b0 <__smakebuf_r+0x4c>
  4081f4:	00407909 	.word	0x00407909

004081f8 <__ascii_mbtowc>:
  4081f8:	b082      	sub	sp, #8
  4081fa:	b149      	cbz	r1, 408210 <__ascii_mbtowc+0x18>
  4081fc:	b15a      	cbz	r2, 408216 <__ascii_mbtowc+0x1e>
  4081fe:	b16b      	cbz	r3, 40821c <__ascii_mbtowc+0x24>
  408200:	7813      	ldrb	r3, [r2, #0]
  408202:	600b      	str	r3, [r1, #0]
  408204:	7812      	ldrb	r2, [r2, #0]
  408206:	1c10      	adds	r0, r2, #0
  408208:	bf18      	it	ne
  40820a:	2001      	movne	r0, #1
  40820c:	b002      	add	sp, #8
  40820e:	4770      	bx	lr
  408210:	a901      	add	r1, sp, #4
  408212:	2a00      	cmp	r2, #0
  408214:	d1f3      	bne.n	4081fe <__ascii_mbtowc+0x6>
  408216:	4610      	mov	r0, r2
  408218:	b002      	add	sp, #8
  40821a:	4770      	bx	lr
  40821c:	f06f 0001 	mvn.w	r0, #1
  408220:	e7f4      	b.n	40820c <__ascii_mbtowc+0x14>
  408222:	bf00      	nop
	...

00408230 <memchr>:
  408230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408234:	2a10      	cmp	r2, #16
  408236:	db2b      	blt.n	408290 <memchr+0x60>
  408238:	f010 0f07 	tst.w	r0, #7
  40823c:	d008      	beq.n	408250 <memchr+0x20>
  40823e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408242:	3a01      	subs	r2, #1
  408244:	428b      	cmp	r3, r1
  408246:	d02d      	beq.n	4082a4 <memchr+0x74>
  408248:	f010 0f07 	tst.w	r0, #7
  40824c:	b342      	cbz	r2, 4082a0 <memchr+0x70>
  40824e:	d1f6      	bne.n	40823e <memchr+0xe>
  408250:	b4f0      	push	{r4, r5, r6, r7}
  408252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40825a:	f022 0407 	bic.w	r4, r2, #7
  40825e:	f07f 0700 	mvns.w	r7, #0
  408262:	2300      	movs	r3, #0
  408264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408268:	3c08      	subs	r4, #8
  40826a:	ea85 0501 	eor.w	r5, r5, r1
  40826e:	ea86 0601 	eor.w	r6, r6, r1
  408272:	fa85 f547 	uadd8	r5, r5, r7
  408276:	faa3 f587 	sel	r5, r3, r7
  40827a:	fa86 f647 	uadd8	r6, r6, r7
  40827e:	faa5 f687 	sel	r6, r5, r7
  408282:	b98e      	cbnz	r6, 4082a8 <memchr+0x78>
  408284:	d1ee      	bne.n	408264 <memchr+0x34>
  408286:	bcf0      	pop	{r4, r5, r6, r7}
  408288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40828c:	f002 0207 	and.w	r2, r2, #7
  408290:	b132      	cbz	r2, 4082a0 <memchr+0x70>
  408292:	f810 3b01 	ldrb.w	r3, [r0], #1
  408296:	3a01      	subs	r2, #1
  408298:	ea83 0301 	eor.w	r3, r3, r1
  40829c:	b113      	cbz	r3, 4082a4 <memchr+0x74>
  40829e:	d1f8      	bne.n	408292 <memchr+0x62>
  4082a0:	2000      	movs	r0, #0
  4082a2:	4770      	bx	lr
  4082a4:	3801      	subs	r0, #1
  4082a6:	4770      	bx	lr
  4082a8:	2d00      	cmp	r5, #0
  4082aa:	bf06      	itte	eq
  4082ac:	4635      	moveq	r5, r6
  4082ae:	3803      	subeq	r0, #3
  4082b0:	3807      	subne	r0, #7
  4082b2:	f015 0f01 	tst.w	r5, #1
  4082b6:	d107      	bne.n	4082c8 <memchr+0x98>
  4082b8:	3001      	adds	r0, #1
  4082ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4082be:	bf02      	ittt	eq
  4082c0:	3001      	addeq	r0, #1
  4082c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4082c6:	3001      	addeq	r0, #1
  4082c8:	bcf0      	pop	{r4, r5, r6, r7}
  4082ca:	3801      	subs	r0, #1
  4082cc:	4770      	bx	lr
  4082ce:	bf00      	nop

004082d0 <memmove>:
  4082d0:	4288      	cmp	r0, r1
  4082d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4082d4:	d90d      	bls.n	4082f2 <memmove+0x22>
  4082d6:	188b      	adds	r3, r1, r2
  4082d8:	4298      	cmp	r0, r3
  4082da:	d20a      	bcs.n	4082f2 <memmove+0x22>
  4082dc:	1884      	adds	r4, r0, r2
  4082de:	2a00      	cmp	r2, #0
  4082e0:	d051      	beq.n	408386 <memmove+0xb6>
  4082e2:	4622      	mov	r2, r4
  4082e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4082e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4082ec:	4299      	cmp	r1, r3
  4082ee:	d1f9      	bne.n	4082e4 <memmove+0x14>
  4082f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4082f2:	2a0f      	cmp	r2, #15
  4082f4:	d948      	bls.n	408388 <memmove+0xb8>
  4082f6:	ea41 0300 	orr.w	r3, r1, r0
  4082fa:	079b      	lsls	r3, r3, #30
  4082fc:	d146      	bne.n	40838c <memmove+0xbc>
  4082fe:	f100 0410 	add.w	r4, r0, #16
  408302:	f101 0310 	add.w	r3, r1, #16
  408306:	4615      	mov	r5, r2
  408308:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40830c:	f844 6c10 	str.w	r6, [r4, #-16]
  408310:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408314:	f844 6c0c 	str.w	r6, [r4, #-12]
  408318:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40831c:	f844 6c08 	str.w	r6, [r4, #-8]
  408320:	3d10      	subs	r5, #16
  408322:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408326:	f844 6c04 	str.w	r6, [r4, #-4]
  40832a:	2d0f      	cmp	r5, #15
  40832c:	f103 0310 	add.w	r3, r3, #16
  408330:	f104 0410 	add.w	r4, r4, #16
  408334:	d8e8      	bhi.n	408308 <memmove+0x38>
  408336:	f1a2 0310 	sub.w	r3, r2, #16
  40833a:	f023 030f 	bic.w	r3, r3, #15
  40833e:	f002 0e0f 	and.w	lr, r2, #15
  408342:	3310      	adds	r3, #16
  408344:	f1be 0f03 	cmp.w	lr, #3
  408348:	4419      	add	r1, r3
  40834a:	4403      	add	r3, r0
  40834c:	d921      	bls.n	408392 <memmove+0xc2>
  40834e:	1f1e      	subs	r6, r3, #4
  408350:	460d      	mov	r5, r1
  408352:	4674      	mov	r4, lr
  408354:	3c04      	subs	r4, #4
  408356:	f855 7b04 	ldr.w	r7, [r5], #4
  40835a:	f846 7f04 	str.w	r7, [r6, #4]!
  40835e:	2c03      	cmp	r4, #3
  408360:	d8f8      	bhi.n	408354 <memmove+0x84>
  408362:	f1ae 0404 	sub.w	r4, lr, #4
  408366:	f024 0403 	bic.w	r4, r4, #3
  40836a:	3404      	adds	r4, #4
  40836c:	4421      	add	r1, r4
  40836e:	4423      	add	r3, r4
  408370:	f002 0203 	and.w	r2, r2, #3
  408374:	b162      	cbz	r2, 408390 <memmove+0xc0>
  408376:	3b01      	subs	r3, #1
  408378:	440a      	add	r2, r1
  40837a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40837e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408382:	428a      	cmp	r2, r1
  408384:	d1f9      	bne.n	40837a <memmove+0xaa>
  408386:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408388:	4603      	mov	r3, r0
  40838a:	e7f3      	b.n	408374 <memmove+0xa4>
  40838c:	4603      	mov	r3, r0
  40838e:	e7f2      	b.n	408376 <memmove+0xa6>
  408390:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408392:	4672      	mov	r2, lr
  408394:	e7ee      	b.n	408374 <memmove+0xa4>
  408396:	bf00      	nop

00408398 <_Balloc>:
  408398:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40839a:	b570      	push	{r4, r5, r6, lr}
  40839c:	4605      	mov	r5, r0
  40839e:	460c      	mov	r4, r1
  4083a0:	b14b      	cbz	r3, 4083b6 <_Balloc+0x1e>
  4083a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4083a6:	b180      	cbz	r0, 4083ca <_Balloc+0x32>
  4083a8:	6802      	ldr	r2, [r0, #0]
  4083aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4083ae:	2300      	movs	r3, #0
  4083b0:	6103      	str	r3, [r0, #16]
  4083b2:	60c3      	str	r3, [r0, #12]
  4083b4:	bd70      	pop	{r4, r5, r6, pc}
  4083b6:	2221      	movs	r2, #33	; 0x21
  4083b8:	2104      	movs	r1, #4
  4083ba:	f000 fe57 	bl	40906c <_calloc_r>
  4083be:	64e8      	str	r0, [r5, #76]	; 0x4c
  4083c0:	4603      	mov	r3, r0
  4083c2:	2800      	cmp	r0, #0
  4083c4:	d1ed      	bne.n	4083a2 <_Balloc+0xa>
  4083c6:	2000      	movs	r0, #0
  4083c8:	bd70      	pop	{r4, r5, r6, pc}
  4083ca:	2101      	movs	r1, #1
  4083cc:	fa01 f604 	lsl.w	r6, r1, r4
  4083d0:	1d72      	adds	r2, r6, #5
  4083d2:	4628      	mov	r0, r5
  4083d4:	0092      	lsls	r2, r2, #2
  4083d6:	f000 fe49 	bl	40906c <_calloc_r>
  4083da:	2800      	cmp	r0, #0
  4083dc:	d0f3      	beq.n	4083c6 <_Balloc+0x2e>
  4083de:	6044      	str	r4, [r0, #4]
  4083e0:	6086      	str	r6, [r0, #8]
  4083e2:	e7e4      	b.n	4083ae <_Balloc+0x16>

004083e4 <_Bfree>:
  4083e4:	b131      	cbz	r1, 4083f4 <_Bfree+0x10>
  4083e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4083e8:	684a      	ldr	r2, [r1, #4]
  4083ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4083ee:	6008      	str	r0, [r1, #0]
  4083f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4083f4:	4770      	bx	lr
  4083f6:	bf00      	nop

004083f8 <__multadd>:
  4083f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4083fa:	690c      	ldr	r4, [r1, #16]
  4083fc:	b083      	sub	sp, #12
  4083fe:	460d      	mov	r5, r1
  408400:	4606      	mov	r6, r0
  408402:	f101 0e14 	add.w	lr, r1, #20
  408406:	2700      	movs	r7, #0
  408408:	f8de 0000 	ldr.w	r0, [lr]
  40840c:	b281      	uxth	r1, r0
  40840e:	fb02 3301 	mla	r3, r2, r1, r3
  408412:	0c01      	lsrs	r1, r0, #16
  408414:	0c18      	lsrs	r0, r3, #16
  408416:	fb02 0101 	mla	r1, r2, r1, r0
  40841a:	b29b      	uxth	r3, r3
  40841c:	3701      	adds	r7, #1
  40841e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  408422:	42bc      	cmp	r4, r7
  408424:	f84e 3b04 	str.w	r3, [lr], #4
  408428:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40842c:	dcec      	bgt.n	408408 <__multadd+0x10>
  40842e:	b13b      	cbz	r3, 408440 <__multadd+0x48>
  408430:	68aa      	ldr	r2, [r5, #8]
  408432:	4294      	cmp	r4, r2
  408434:	da07      	bge.n	408446 <__multadd+0x4e>
  408436:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40843a:	3401      	adds	r4, #1
  40843c:	6153      	str	r3, [r2, #20]
  40843e:	612c      	str	r4, [r5, #16]
  408440:	4628      	mov	r0, r5
  408442:	b003      	add	sp, #12
  408444:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408446:	6869      	ldr	r1, [r5, #4]
  408448:	9301      	str	r3, [sp, #4]
  40844a:	3101      	adds	r1, #1
  40844c:	4630      	mov	r0, r6
  40844e:	f7ff ffa3 	bl	408398 <_Balloc>
  408452:	692a      	ldr	r2, [r5, #16]
  408454:	3202      	adds	r2, #2
  408456:	f105 010c 	add.w	r1, r5, #12
  40845a:	4607      	mov	r7, r0
  40845c:	0092      	lsls	r2, r2, #2
  40845e:	300c      	adds	r0, #12
  408460:	f7fb fde2 	bl	404028 <memcpy>
  408464:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  408466:	6869      	ldr	r1, [r5, #4]
  408468:	9b01      	ldr	r3, [sp, #4]
  40846a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40846e:	6028      	str	r0, [r5, #0]
  408470:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408474:	463d      	mov	r5, r7
  408476:	e7de      	b.n	408436 <__multadd+0x3e>

00408478 <__hi0bits>:
  408478:	0c02      	lsrs	r2, r0, #16
  40847a:	0412      	lsls	r2, r2, #16
  40847c:	4603      	mov	r3, r0
  40847e:	b9b2      	cbnz	r2, 4084ae <__hi0bits+0x36>
  408480:	0403      	lsls	r3, r0, #16
  408482:	2010      	movs	r0, #16
  408484:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408488:	bf04      	itt	eq
  40848a:	021b      	lsleq	r3, r3, #8
  40848c:	3008      	addeq	r0, #8
  40848e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408492:	bf04      	itt	eq
  408494:	011b      	lsleq	r3, r3, #4
  408496:	3004      	addeq	r0, #4
  408498:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40849c:	bf04      	itt	eq
  40849e:	009b      	lsleq	r3, r3, #2
  4084a0:	3002      	addeq	r0, #2
  4084a2:	2b00      	cmp	r3, #0
  4084a4:	db02      	blt.n	4084ac <__hi0bits+0x34>
  4084a6:	005b      	lsls	r3, r3, #1
  4084a8:	d403      	bmi.n	4084b2 <__hi0bits+0x3a>
  4084aa:	2020      	movs	r0, #32
  4084ac:	4770      	bx	lr
  4084ae:	2000      	movs	r0, #0
  4084b0:	e7e8      	b.n	408484 <__hi0bits+0xc>
  4084b2:	3001      	adds	r0, #1
  4084b4:	4770      	bx	lr
  4084b6:	bf00      	nop

004084b8 <__lo0bits>:
  4084b8:	6803      	ldr	r3, [r0, #0]
  4084ba:	f013 0207 	ands.w	r2, r3, #7
  4084be:	4601      	mov	r1, r0
  4084c0:	d007      	beq.n	4084d2 <__lo0bits+0x1a>
  4084c2:	07da      	lsls	r2, r3, #31
  4084c4:	d421      	bmi.n	40850a <__lo0bits+0x52>
  4084c6:	0798      	lsls	r0, r3, #30
  4084c8:	d421      	bmi.n	40850e <__lo0bits+0x56>
  4084ca:	089b      	lsrs	r3, r3, #2
  4084cc:	600b      	str	r3, [r1, #0]
  4084ce:	2002      	movs	r0, #2
  4084d0:	4770      	bx	lr
  4084d2:	b298      	uxth	r0, r3
  4084d4:	b198      	cbz	r0, 4084fe <__lo0bits+0x46>
  4084d6:	4610      	mov	r0, r2
  4084d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4084dc:	bf04      	itt	eq
  4084de:	0a1b      	lsreq	r3, r3, #8
  4084e0:	3008      	addeq	r0, #8
  4084e2:	071a      	lsls	r2, r3, #28
  4084e4:	bf04      	itt	eq
  4084e6:	091b      	lsreq	r3, r3, #4
  4084e8:	3004      	addeq	r0, #4
  4084ea:	079a      	lsls	r2, r3, #30
  4084ec:	bf04      	itt	eq
  4084ee:	089b      	lsreq	r3, r3, #2
  4084f0:	3002      	addeq	r0, #2
  4084f2:	07da      	lsls	r2, r3, #31
  4084f4:	d407      	bmi.n	408506 <__lo0bits+0x4e>
  4084f6:	085b      	lsrs	r3, r3, #1
  4084f8:	d104      	bne.n	408504 <__lo0bits+0x4c>
  4084fa:	2020      	movs	r0, #32
  4084fc:	4770      	bx	lr
  4084fe:	0c1b      	lsrs	r3, r3, #16
  408500:	2010      	movs	r0, #16
  408502:	e7e9      	b.n	4084d8 <__lo0bits+0x20>
  408504:	3001      	adds	r0, #1
  408506:	600b      	str	r3, [r1, #0]
  408508:	4770      	bx	lr
  40850a:	2000      	movs	r0, #0
  40850c:	4770      	bx	lr
  40850e:	085b      	lsrs	r3, r3, #1
  408510:	600b      	str	r3, [r1, #0]
  408512:	2001      	movs	r0, #1
  408514:	4770      	bx	lr
  408516:	bf00      	nop

00408518 <__i2b>:
  408518:	b510      	push	{r4, lr}
  40851a:	460c      	mov	r4, r1
  40851c:	2101      	movs	r1, #1
  40851e:	f7ff ff3b 	bl	408398 <_Balloc>
  408522:	2201      	movs	r2, #1
  408524:	6144      	str	r4, [r0, #20]
  408526:	6102      	str	r2, [r0, #16]
  408528:	bd10      	pop	{r4, pc}
  40852a:	bf00      	nop

0040852c <__multiply>:
  40852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408530:	690c      	ldr	r4, [r1, #16]
  408532:	6915      	ldr	r5, [r2, #16]
  408534:	42ac      	cmp	r4, r5
  408536:	b083      	sub	sp, #12
  408538:	468b      	mov	fp, r1
  40853a:	4616      	mov	r6, r2
  40853c:	da04      	bge.n	408548 <__multiply+0x1c>
  40853e:	4622      	mov	r2, r4
  408540:	46b3      	mov	fp, r6
  408542:	462c      	mov	r4, r5
  408544:	460e      	mov	r6, r1
  408546:	4615      	mov	r5, r2
  408548:	f8db 3008 	ldr.w	r3, [fp, #8]
  40854c:	f8db 1004 	ldr.w	r1, [fp, #4]
  408550:	eb04 0805 	add.w	r8, r4, r5
  408554:	4598      	cmp	r8, r3
  408556:	bfc8      	it	gt
  408558:	3101      	addgt	r1, #1
  40855a:	f7ff ff1d 	bl	408398 <_Balloc>
  40855e:	f100 0914 	add.w	r9, r0, #20
  408562:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  408566:	45d1      	cmp	r9, sl
  408568:	9000      	str	r0, [sp, #0]
  40856a:	d205      	bcs.n	408578 <__multiply+0x4c>
  40856c:	464b      	mov	r3, r9
  40856e:	2100      	movs	r1, #0
  408570:	f843 1b04 	str.w	r1, [r3], #4
  408574:	459a      	cmp	sl, r3
  408576:	d8fb      	bhi.n	408570 <__multiply+0x44>
  408578:	f106 0c14 	add.w	ip, r6, #20
  40857c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408580:	f10b 0b14 	add.w	fp, fp, #20
  408584:	459c      	cmp	ip, r3
  408586:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40858a:	d24c      	bcs.n	408626 <__multiply+0xfa>
  40858c:	f8cd a004 	str.w	sl, [sp, #4]
  408590:	469a      	mov	sl, r3
  408592:	f8dc 5000 	ldr.w	r5, [ip]
  408596:	b2af      	uxth	r7, r5
  408598:	b1ef      	cbz	r7, 4085d6 <__multiply+0xaa>
  40859a:	2100      	movs	r1, #0
  40859c:	464d      	mov	r5, r9
  40859e:	465e      	mov	r6, fp
  4085a0:	460c      	mov	r4, r1
  4085a2:	f856 2b04 	ldr.w	r2, [r6], #4
  4085a6:	6828      	ldr	r0, [r5, #0]
  4085a8:	b293      	uxth	r3, r2
  4085aa:	b281      	uxth	r1, r0
  4085ac:	fb07 1303 	mla	r3, r7, r3, r1
  4085b0:	0c12      	lsrs	r2, r2, #16
  4085b2:	0c01      	lsrs	r1, r0, #16
  4085b4:	4423      	add	r3, r4
  4085b6:	fb07 1102 	mla	r1, r7, r2, r1
  4085ba:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4085be:	b29b      	uxth	r3, r3
  4085c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4085c4:	45b6      	cmp	lr, r6
  4085c6:	f845 3b04 	str.w	r3, [r5], #4
  4085ca:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4085ce:	d8e8      	bhi.n	4085a2 <__multiply+0x76>
  4085d0:	602c      	str	r4, [r5, #0]
  4085d2:	f8dc 5000 	ldr.w	r5, [ip]
  4085d6:	0c2d      	lsrs	r5, r5, #16
  4085d8:	d01d      	beq.n	408616 <__multiply+0xea>
  4085da:	f8d9 3000 	ldr.w	r3, [r9]
  4085de:	4648      	mov	r0, r9
  4085e0:	461c      	mov	r4, r3
  4085e2:	4659      	mov	r1, fp
  4085e4:	2200      	movs	r2, #0
  4085e6:	880e      	ldrh	r6, [r1, #0]
  4085e8:	0c24      	lsrs	r4, r4, #16
  4085ea:	fb05 4406 	mla	r4, r5, r6, r4
  4085ee:	4422      	add	r2, r4
  4085f0:	b29b      	uxth	r3, r3
  4085f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4085f6:	f840 3b04 	str.w	r3, [r0], #4
  4085fa:	f851 3b04 	ldr.w	r3, [r1], #4
  4085fe:	6804      	ldr	r4, [r0, #0]
  408600:	0c1b      	lsrs	r3, r3, #16
  408602:	b2a6      	uxth	r6, r4
  408604:	fb05 6303 	mla	r3, r5, r3, r6
  408608:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40860c:	458e      	cmp	lr, r1
  40860e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408612:	d8e8      	bhi.n	4085e6 <__multiply+0xba>
  408614:	6003      	str	r3, [r0, #0]
  408616:	f10c 0c04 	add.w	ip, ip, #4
  40861a:	45e2      	cmp	sl, ip
  40861c:	f109 0904 	add.w	r9, r9, #4
  408620:	d8b7      	bhi.n	408592 <__multiply+0x66>
  408622:	f8dd a004 	ldr.w	sl, [sp, #4]
  408626:	f1b8 0f00 	cmp.w	r8, #0
  40862a:	dd0b      	ble.n	408644 <__multiply+0x118>
  40862c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408630:	f1aa 0a04 	sub.w	sl, sl, #4
  408634:	b11b      	cbz	r3, 40863e <__multiply+0x112>
  408636:	e005      	b.n	408644 <__multiply+0x118>
  408638:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40863c:	b913      	cbnz	r3, 408644 <__multiply+0x118>
  40863e:	f1b8 0801 	subs.w	r8, r8, #1
  408642:	d1f9      	bne.n	408638 <__multiply+0x10c>
  408644:	9800      	ldr	r0, [sp, #0]
  408646:	f8c0 8010 	str.w	r8, [r0, #16]
  40864a:	b003      	add	sp, #12
  40864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408650 <__pow5mult>:
  408650:	f012 0303 	ands.w	r3, r2, #3
  408654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408658:	4614      	mov	r4, r2
  40865a:	4607      	mov	r7, r0
  40865c:	d12e      	bne.n	4086bc <__pow5mult+0x6c>
  40865e:	460d      	mov	r5, r1
  408660:	10a4      	asrs	r4, r4, #2
  408662:	d01c      	beq.n	40869e <__pow5mult+0x4e>
  408664:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  408666:	b396      	cbz	r6, 4086ce <__pow5mult+0x7e>
  408668:	07e3      	lsls	r3, r4, #31
  40866a:	f04f 0800 	mov.w	r8, #0
  40866e:	d406      	bmi.n	40867e <__pow5mult+0x2e>
  408670:	1064      	asrs	r4, r4, #1
  408672:	d014      	beq.n	40869e <__pow5mult+0x4e>
  408674:	6830      	ldr	r0, [r6, #0]
  408676:	b1a8      	cbz	r0, 4086a4 <__pow5mult+0x54>
  408678:	4606      	mov	r6, r0
  40867a:	07e3      	lsls	r3, r4, #31
  40867c:	d5f8      	bpl.n	408670 <__pow5mult+0x20>
  40867e:	4632      	mov	r2, r6
  408680:	4629      	mov	r1, r5
  408682:	4638      	mov	r0, r7
  408684:	f7ff ff52 	bl	40852c <__multiply>
  408688:	b1b5      	cbz	r5, 4086b8 <__pow5mult+0x68>
  40868a:	686a      	ldr	r2, [r5, #4]
  40868c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40868e:	1064      	asrs	r4, r4, #1
  408690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408694:	6029      	str	r1, [r5, #0]
  408696:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40869a:	4605      	mov	r5, r0
  40869c:	d1ea      	bne.n	408674 <__pow5mult+0x24>
  40869e:	4628      	mov	r0, r5
  4086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4086a4:	4632      	mov	r2, r6
  4086a6:	4631      	mov	r1, r6
  4086a8:	4638      	mov	r0, r7
  4086aa:	f7ff ff3f 	bl	40852c <__multiply>
  4086ae:	6030      	str	r0, [r6, #0]
  4086b0:	f8c0 8000 	str.w	r8, [r0]
  4086b4:	4606      	mov	r6, r0
  4086b6:	e7e0      	b.n	40867a <__pow5mult+0x2a>
  4086b8:	4605      	mov	r5, r0
  4086ba:	e7d9      	b.n	408670 <__pow5mult+0x20>
  4086bc:	1e5a      	subs	r2, r3, #1
  4086be:	4d0b      	ldr	r5, [pc, #44]	; (4086ec <__pow5mult+0x9c>)
  4086c0:	2300      	movs	r3, #0
  4086c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4086c6:	f7ff fe97 	bl	4083f8 <__multadd>
  4086ca:	4605      	mov	r5, r0
  4086cc:	e7c8      	b.n	408660 <__pow5mult+0x10>
  4086ce:	2101      	movs	r1, #1
  4086d0:	4638      	mov	r0, r7
  4086d2:	f7ff fe61 	bl	408398 <_Balloc>
  4086d6:	f240 2171 	movw	r1, #625	; 0x271
  4086da:	2201      	movs	r2, #1
  4086dc:	2300      	movs	r3, #0
  4086de:	6141      	str	r1, [r0, #20]
  4086e0:	6102      	str	r2, [r0, #16]
  4086e2:	4606      	mov	r6, r0
  4086e4:	64b8      	str	r0, [r7, #72]	; 0x48
  4086e6:	6003      	str	r3, [r0, #0]
  4086e8:	e7be      	b.n	408668 <__pow5mult+0x18>
  4086ea:	bf00      	nop
  4086ec:	0040a100 	.word	0x0040a100

004086f0 <__lshift>:
  4086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4086f4:	4691      	mov	r9, r2
  4086f6:	690a      	ldr	r2, [r1, #16]
  4086f8:	688b      	ldr	r3, [r1, #8]
  4086fa:	ea4f 1469 	mov.w	r4, r9, asr #5
  4086fe:	eb04 0802 	add.w	r8, r4, r2
  408702:	f108 0501 	add.w	r5, r8, #1
  408706:	429d      	cmp	r5, r3
  408708:	460e      	mov	r6, r1
  40870a:	4607      	mov	r7, r0
  40870c:	6849      	ldr	r1, [r1, #4]
  40870e:	dd04      	ble.n	40871a <__lshift+0x2a>
  408710:	005b      	lsls	r3, r3, #1
  408712:	429d      	cmp	r5, r3
  408714:	f101 0101 	add.w	r1, r1, #1
  408718:	dcfa      	bgt.n	408710 <__lshift+0x20>
  40871a:	4638      	mov	r0, r7
  40871c:	f7ff fe3c 	bl	408398 <_Balloc>
  408720:	2c00      	cmp	r4, #0
  408722:	f100 0314 	add.w	r3, r0, #20
  408726:	dd06      	ble.n	408736 <__lshift+0x46>
  408728:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40872c:	2100      	movs	r1, #0
  40872e:	f843 1b04 	str.w	r1, [r3], #4
  408732:	429a      	cmp	r2, r3
  408734:	d1fb      	bne.n	40872e <__lshift+0x3e>
  408736:	6934      	ldr	r4, [r6, #16]
  408738:	f106 0114 	add.w	r1, r6, #20
  40873c:	f019 091f 	ands.w	r9, r9, #31
  408740:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408744:	d01d      	beq.n	408782 <__lshift+0x92>
  408746:	f1c9 0c20 	rsb	ip, r9, #32
  40874a:	2200      	movs	r2, #0
  40874c:	680c      	ldr	r4, [r1, #0]
  40874e:	fa04 f409 	lsl.w	r4, r4, r9
  408752:	4314      	orrs	r4, r2
  408754:	f843 4b04 	str.w	r4, [r3], #4
  408758:	f851 2b04 	ldr.w	r2, [r1], #4
  40875c:	458e      	cmp	lr, r1
  40875e:	fa22 f20c 	lsr.w	r2, r2, ip
  408762:	d8f3      	bhi.n	40874c <__lshift+0x5c>
  408764:	601a      	str	r2, [r3, #0]
  408766:	b10a      	cbz	r2, 40876c <__lshift+0x7c>
  408768:	f108 0502 	add.w	r5, r8, #2
  40876c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40876e:	6872      	ldr	r2, [r6, #4]
  408770:	3d01      	subs	r5, #1
  408772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408776:	6105      	str	r5, [r0, #16]
  408778:	6031      	str	r1, [r6, #0]
  40877a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40877e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408782:	3b04      	subs	r3, #4
  408784:	f851 2b04 	ldr.w	r2, [r1], #4
  408788:	f843 2f04 	str.w	r2, [r3, #4]!
  40878c:	458e      	cmp	lr, r1
  40878e:	d8f9      	bhi.n	408784 <__lshift+0x94>
  408790:	e7ec      	b.n	40876c <__lshift+0x7c>
  408792:	bf00      	nop

00408794 <__mcmp>:
  408794:	b430      	push	{r4, r5}
  408796:	690b      	ldr	r3, [r1, #16]
  408798:	4605      	mov	r5, r0
  40879a:	6900      	ldr	r0, [r0, #16]
  40879c:	1ac0      	subs	r0, r0, r3
  40879e:	d10f      	bne.n	4087c0 <__mcmp+0x2c>
  4087a0:	009b      	lsls	r3, r3, #2
  4087a2:	3514      	adds	r5, #20
  4087a4:	3114      	adds	r1, #20
  4087a6:	4419      	add	r1, r3
  4087a8:	442b      	add	r3, r5
  4087aa:	e001      	b.n	4087b0 <__mcmp+0x1c>
  4087ac:	429d      	cmp	r5, r3
  4087ae:	d207      	bcs.n	4087c0 <__mcmp+0x2c>
  4087b0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4087b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4087b8:	4294      	cmp	r4, r2
  4087ba:	d0f7      	beq.n	4087ac <__mcmp+0x18>
  4087bc:	d302      	bcc.n	4087c4 <__mcmp+0x30>
  4087be:	2001      	movs	r0, #1
  4087c0:	bc30      	pop	{r4, r5}
  4087c2:	4770      	bx	lr
  4087c4:	f04f 30ff 	mov.w	r0, #4294967295
  4087c8:	e7fa      	b.n	4087c0 <__mcmp+0x2c>
  4087ca:	bf00      	nop

004087cc <__mdiff>:
  4087cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4087d0:	690f      	ldr	r7, [r1, #16]
  4087d2:	460e      	mov	r6, r1
  4087d4:	6911      	ldr	r1, [r2, #16]
  4087d6:	1a7f      	subs	r7, r7, r1
  4087d8:	2f00      	cmp	r7, #0
  4087da:	4690      	mov	r8, r2
  4087dc:	d117      	bne.n	40880e <__mdiff+0x42>
  4087de:	0089      	lsls	r1, r1, #2
  4087e0:	f106 0514 	add.w	r5, r6, #20
  4087e4:	f102 0e14 	add.w	lr, r2, #20
  4087e8:	186b      	adds	r3, r5, r1
  4087ea:	4471      	add	r1, lr
  4087ec:	e001      	b.n	4087f2 <__mdiff+0x26>
  4087ee:	429d      	cmp	r5, r3
  4087f0:	d25c      	bcs.n	4088ac <__mdiff+0xe0>
  4087f2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4087f6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4087fa:	42a2      	cmp	r2, r4
  4087fc:	d0f7      	beq.n	4087ee <__mdiff+0x22>
  4087fe:	d25e      	bcs.n	4088be <__mdiff+0xf2>
  408800:	4633      	mov	r3, r6
  408802:	462c      	mov	r4, r5
  408804:	4646      	mov	r6, r8
  408806:	4675      	mov	r5, lr
  408808:	4698      	mov	r8, r3
  40880a:	2701      	movs	r7, #1
  40880c:	e005      	b.n	40881a <__mdiff+0x4e>
  40880e:	db58      	blt.n	4088c2 <__mdiff+0xf6>
  408810:	f106 0514 	add.w	r5, r6, #20
  408814:	f108 0414 	add.w	r4, r8, #20
  408818:	2700      	movs	r7, #0
  40881a:	6871      	ldr	r1, [r6, #4]
  40881c:	f7ff fdbc 	bl	408398 <_Balloc>
  408820:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408824:	6936      	ldr	r6, [r6, #16]
  408826:	60c7      	str	r7, [r0, #12]
  408828:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40882c:	46a6      	mov	lr, r4
  40882e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  408832:	f100 0414 	add.w	r4, r0, #20
  408836:	2300      	movs	r3, #0
  408838:	f85e 1b04 	ldr.w	r1, [lr], #4
  40883c:	f855 8b04 	ldr.w	r8, [r5], #4
  408840:	b28a      	uxth	r2, r1
  408842:	fa13 f388 	uxtah	r3, r3, r8
  408846:	0c09      	lsrs	r1, r1, #16
  408848:	1a9a      	subs	r2, r3, r2
  40884a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40884e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408852:	b292      	uxth	r2, r2
  408854:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408858:	45f4      	cmp	ip, lr
  40885a:	f844 2b04 	str.w	r2, [r4], #4
  40885e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408862:	d8e9      	bhi.n	408838 <__mdiff+0x6c>
  408864:	42af      	cmp	r7, r5
  408866:	d917      	bls.n	408898 <__mdiff+0xcc>
  408868:	46a4      	mov	ip, r4
  40886a:	46ae      	mov	lr, r5
  40886c:	f85e 2b04 	ldr.w	r2, [lr], #4
  408870:	fa13 f382 	uxtah	r3, r3, r2
  408874:	1419      	asrs	r1, r3, #16
  408876:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40887a:	b29b      	uxth	r3, r3
  40887c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408880:	4577      	cmp	r7, lr
  408882:	f84c 2b04 	str.w	r2, [ip], #4
  408886:	ea4f 4321 	mov.w	r3, r1, asr #16
  40888a:	d8ef      	bhi.n	40886c <__mdiff+0xa0>
  40888c:	43ed      	mvns	r5, r5
  40888e:	442f      	add	r7, r5
  408890:	f027 0703 	bic.w	r7, r7, #3
  408894:	3704      	adds	r7, #4
  408896:	443c      	add	r4, r7
  408898:	3c04      	subs	r4, #4
  40889a:	b922      	cbnz	r2, 4088a6 <__mdiff+0xda>
  40889c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4088a0:	3e01      	subs	r6, #1
  4088a2:	2b00      	cmp	r3, #0
  4088a4:	d0fa      	beq.n	40889c <__mdiff+0xd0>
  4088a6:	6106      	str	r6, [r0, #16]
  4088a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4088ac:	2100      	movs	r1, #0
  4088ae:	f7ff fd73 	bl	408398 <_Balloc>
  4088b2:	2201      	movs	r2, #1
  4088b4:	2300      	movs	r3, #0
  4088b6:	6102      	str	r2, [r0, #16]
  4088b8:	6143      	str	r3, [r0, #20]
  4088ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4088be:	4674      	mov	r4, lr
  4088c0:	e7ab      	b.n	40881a <__mdiff+0x4e>
  4088c2:	4633      	mov	r3, r6
  4088c4:	f106 0414 	add.w	r4, r6, #20
  4088c8:	f102 0514 	add.w	r5, r2, #20
  4088cc:	4616      	mov	r6, r2
  4088ce:	2701      	movs	r7, #1
  4088d0:	4698      	mov	r8, r3
  4088d2:	e7a2      	b.n	40881a <__mdiff+0x4e>

004088d4 <__d2b>:
  4088d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4088d8:	b082      	sub	sp, #8
  4088da:	2101      	movs	r1, #1
  4088dc:	461c      	mov	r4, r3
  4088de:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4088e2:	4615      	mov	r5, r2
  4088e4:	9e08      	ldr	r6, [sp, #32]
  4088e6:	f7ff fd57 	bl	408398 <_Balloc>
  4088ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4088ee:	4680      	mov	r8, r0
  4088f0:	b10f      	cbz	r7, 4088f6 <__d2b+0x22>
  4088f2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4088f6:	9401      	str	r4, [sp, #4]
  4088f8:	b31d      	cbz	r5, 408942 <__d2b+0x6e>
  4088fa:	a802      	add	r0, sp, #8
  4088fc:	f840 5d08 	str.w	r5, [r0, #-8]!
  408900:	f7ff fdda 	bl	4084b8 <__lo0bits>
  408904:	2800      	cmp	r0, #0
  408906:	d134      	bne.n	408972 <__d2b+0x9e>
  408908:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40890c:	f8c8 2014 	str.w	r2, [r8, #20]
  408910:	2b00      	cmp	r3, #0
  408912:	bf0c      	ite	eq
  408914:	2101      	moveq	r1, #1
  408916:	2102      	movne	r1, #2
  408918:	f8c8 3018 	str.w	r3, [r8, #24]
  40891c:	f8c8 1010 	str.w	r1, [r8, #16]
  408920:	b9df      	cbnz	r7, 40895a <__d2b+0x86>
  408922:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  408926:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40892a:	6030      	str	r0, [r6, #0]
  40892c:	6918      	ldr	r0, [r3, #16]
  40892e:	f7ff fda3 	bl	408478 <__hi0bits>
  408932:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408934:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408938:	6018      	str	r0, [r3, #0]
  40893a:	4640      	mov	r0, r8
  40893c:	b002      	add	sp, #8
  40893e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408942:	a801      	add	r0, sp, #4
  408944:	f7ff fdb8 	bl	4084b8 <__lo0bits>
  408948:	9b01      	ldr	r3, [sp, #4]
  40894a:	f8c8 3014 	str.w	r3, [r8, #20]
  40894e:	2101      	movs	r1, #1
  408950:	3020      	adds	r0, #32
  408952:	f8c8 1010 	str.w	r1, [r8, #16]
  408956:	2f00      	cmp	r7, #0
  408958:	d0e3      	beq.n	408922 <__d2b+0x4e>
  40895a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40895c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408960:	4407      	add	r7, r0
  408962:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408966:	6037      	str	r7, [r6, #0]
  408968:	6018      	str	r0, [r3, #0]
  40896a:	4640      	mov	r0, r8
  40896c:	b002      	add	sp, #8
  40896e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408972:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408976:	f1c0 0220 	rsb	r2, r0, #32
  40897a:	fa03 f202 	lsl.w	r2, r3, r2
  40897e:	430a      	orrs	r2, r1
  408980:	40c3      	lsrs	r3, r0
  408982:	9301      	str	r3, [sp, #4]
  408984:	f8c8 2014 	str.w	r2, [r8, #20]
  408988:	e7c2      	b.n	408910 <__d2b+0x3c>
  40898a:	bf00      	nop

0040898c <_realloc_r>:
  40898c:	2900      	cmp	r1, #0
  40898e:	f000 8095 	beq.w	408abc <_realloc_r+0x130>
  408992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408996:	460d      	mov	r5, r1
  408998:	4616      	mov	r6, r2
  40899a:	b083      	sub	sp, #12
  40899c:	4680      	mov	r8, r0
  40899e:	f106 070b 	add.w	r7, r6, #11
  4089a2:	f7fb fc29 	bl	4041f8 <__malloc_lock>
  4089a6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4089aa:	2f16      	cmp	r7, #22
  4089ac:	f02e 0403 	bic.w	r4, lr, #3
  4089b0:	f1a5 0908 	sub.w	r9, r5, #8
  4089b4:	d83c      	bhi.n	408a30 <_realloc_r+0xa4>
  4089b6:	2210      	movs	r2, #16
  4089b8:	4617      	mov	r7, r2
  4089ba:	42be      	cmp	r6, r7
  4089bc:	d83d      	bhi.n	408a3a <_realloc_r+0xae>
  4089be:	4294      	cmp	r4, r2
  4089c0:	da43      	bge.n	408a4a <_realloc_r+0xbe>
  4089c2:	4bc4      	ldr	r3, [pc, #784]	; (408cd4 <_realloc_r+0x348>)
  4089c4:	6899      	ldr	r1, [r3, #8]
  4089c6:	eb09 0004 	add.w	r0, r9, r4
  4089ca:	4288      	cmp	r0, r1
  4089cc:	f000 80b4 	beq.w	408b38 <_realloc_r+0x1ac>
  4089d0:	6843      	ldr	r3, [r0, #4]
  4089d2:	f023 0101 	bic.w	r1, r3, #1
  4089d6:	4401      	add	r1, r0
  4089d8:	6849      	ldr	r1, [r1, #4]
  4089da:	07c9      	lsls	r1, r1, #31
  4089dc:	d54c      	bpl.n	408a78 <_realloc_r+0xec>
  4089de:	f01e 0f01 	tst.w	lr, #1
  4089e2:	f000 809b 	beq.w	408b1c <_realloc_r+0x190>
  4089e6:	4631      	mov	r1, r6
  4089e8:	4640      	mov	r0, r8
  4089ea:	f7fb f86d 	bl	403ac8 <_malloc_r>
  4089ee:	4606      	mov	r6, r0
  4089f0:	2800      	cmp	r0, #0
  4089f2:	d03a      	beq.n	408a6a <_realloc_r+0xde>
  4089f4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4089f8:	f023 0301 	bic.w	r3, r3, #1
  4089fc:	444b      	add	r3, r9
  4089fe:	f1a0 0208 	sub.w	r2, r0, #8
  408a02:	429a      	cmp	r2, r3
  408a04:	f000 8121 	beq.w	408c4a <_realloc_r+0x2be>
  408a08:	1f22      	subs	r2, r4, #4
  408a0a:	2a24      	cmp	r2, #36	; 0x24
  408a0c:	f200 8107 	bhi.w	408c1e <_realloc_r+0x292>
  408a10:	2a13      	cmp	r2, #19
  408a12:	f200 80db 	bhi.w	408bcc <_realloc_r+0x240>
  408a16:	4603      	mov	r3, r0
  408a18:	462a      	mov	r2, r5
  408a1a:	6811      	ldr	r1, [r2, #0]
  408a1c:	6019      	str	r1, [r3, #0]
  408a1e:	6851      	ldr	r1, [r2, #4]
  408a20:	6059      	str	r1, [r3, #4]
  408a22:	6892      	ldr	r2, [r2, #8]
  408a24:	609a      	str	r2, [r3, #8]
  408a26:	4629      	mov	r1, r5
  408a28:	4640      	mov	r0, r8
  408a2a:	f7ff f8c1 	bl	407bb0 <_free_r>
  408a2e:	e01c      	b.n	408a6a <_realloc_r+0xde>
  408a30:	f027 0707 	bic.w	r7, r7, #7
  408a34:	2f00      	cmp	r7, #0
  408a36:	463a      	mov	r2, r7
  408a38:	dabf      	bge.n	4089ba <_realloc_r+0x2e>
  408a3a:	2600      	movs	r6, #0
  408a3c:	230c      	movs	r3, #12
  408a3e:	4630      	mov	r0, r6
  408a40:	f8c8 3000 	str.w	r3, [r8]
  408a44:	b003      	add	sp, #12
  408a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a4a:	462e      	mov	r6, r5
  408a4c:	1be3      	subs	r3, r4, r7
  408a4e:	2b0f      	cmp	r3, #15
  408a50:	d81e      	bhi.n	408a90 <_realloc_r+0x104>
  408a52:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408a56:	f003 0301 	and.w	r3, r3, #1
  408a5a:	4323      	orrs	r3, r4
  408a5c:	444c      	add	r4, r9
  408a5e:	f8c9 3004 	str.w	r3, [r9, #4]
  408a62:	6863      	ldr	r3, [r4, #4]
  408a64:	f043 0301 	orr.w	r3, r3, #1
  408a68:	6063      	str	r3, [r4, #4]
  408a6a:	4640      	mov	r0, r8
  408a6c:	f7fb fbca 	bl	404204 <__malloc_unlock>
  408a70:	4630      	mov	r0, r6
  408a72:	b003      	add	sp, #12
  408a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a78:	f023 0303 	bic.w	r3, r3, #3
  408a7c:	18e1      	adds	r1, r4, r3
  408a7e:	4291      	cmp	r1, r2
  408a80:	db1f      	blt.n	408ac2 <_realloc_r+0x136>
  408a82:	68c3      	ldr	r3, [r0, #12]
  408a84:	6882      	ldr	r2, [r0, #8]
  408a86:	462e      	mov	r6, r5
  408a88:	60d3      	str	r3, [r2, #12]
  408a8a:	460c      	mov	r4, r1
  408a8c:	609a      	str	r2, [r3, #8]
  408a8e:	e7dd      	b.n	408a4c <_realloc_r+0xc0>
  408a90:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408a94:	eb09 0107 	add.w	r1, r9, r7
  408a98:	f002 0201 	and.w	r2, r2, #1
  408a9c:	444c      	add	r4, r9
  408a9e:	f043 0301 	orr.w	r3, r3, #1
  408aa2:	4317      	orrs	r7, r2
  408aa4:	f8c9 7004 	str.w	r7, [r9, #4]
  408aa8:	604b      	str	r3, [r1, #4]
  408aaa:	6863      	ldr	r3, [r4, #4]
  408aac:	f043 0301 	orr.w	r3, r3, #1
  408ab0:	3108      	adds	r1, #8
  408ab2:	6063      	str	r3, [r4, #4]
  408ab4:	4640      	mov	r0, r8
  408ab6:	f7ff f87b 	bl	407bb0 <_free_r>
  408aba:	e7d6      	b.n	408a6a <_realloc_r+0xde>
  408abc:	4611      	mov	r1, r2
  408abe:	f7fb b803 	b.w	403ac8 <_malloc_r>
  408ac2:	f01e 0f01 	tst.w	lr, #1
  408ac6:	d18e      	bne.n	4089e6 <_realloc_r+0x5a>
  408ac8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408acc:	eba9 0a01 	sub.w	sl, r9, r1
  408ad0:	f8da 1004 	ldr.w	r1, [sl, #4]
  408ad4:	f021 0103 	bic.w	r1, r1, #3
  408ad8:	440b      	add	r3, r1
  408ada:	4423      	add	r3, r4
  408adc:	4293      	cmp	r3, r2
  408ade:	db25      	blt.n	408b2c <_realloc_r+0x1a0>
  408ae0:	68c2      	ldr	r2, [r0, #12]
  408ae2:	6881      	ldr	r1, [r0, #8]
  408ae4:	4656      	mov	r6, sl
  408ae6:	60ca      	str	r2, [r1, #12]
  408ae8:	6091      	str	r1, [r2, #8]
  408aea:	f8da 100c 	ldr.w	r1, [sl, #12]
  408aee:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408af2:	1f22      	subs	r2, r4, #4
  408af4:	2a24      	cmp	r2, #36	; 0x24
  408af6:	60c1      	str	r1, [r0, #12]
  408af8:	6088      	str	r0, [r1, #8]
  408afa:	f200 8094 	bhi.w	408c26 <_realloc_r+0x29a>
  408afe:	2a13      	cmp	r2, #19
  408b00:	d96f      	bls.n	408be2 <_realloc_r+0x256>
  408b02:	6829      	ldr	r1, [r5, #0]
  408b04:	f8ca 1008 	str.w	r1, [sl, #8]
  408b08:	6869      	ldr	r1, [r5, #4]
  408b0a:	f8ca 100c 	str.w	r1, [sl, #12]
  408b0e:	2a1b      	cmp	r2, #27
  408b10:	f200 80a2 	bhi.w	408c58 <_realloc_r+0x2cc>
  408b14:	3508      	adds	r5, #8
  408b16:	f10a 0210 	add.w	r2, sl, #16
  408b1a:	e063      	b.n	408be4 <_realloc_r+0x258>
  408b1c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408b20:	eba9 0a03 	sub.w	sl, r9, r3
  408b24:	f8da 1004 	ldr.w	r1, [sl, #4]
  408b28:	f021 0103 	bic.w	r1, r1, #3
  408b2c:	1863      	adds	r3, r4, r1
  408b2e:	4293      	cmp	r3, r2
  408b30:	f6ff af59 	blt.w	4089e6 <_realloc_r+0x5a>
  408b34:	4656      	mov	r6, sl
  408b36:	e7d8      	b.n	408aea <_realloc_r+0x15e>
  408b38:	6841      	ldr	r1, [r0, #4]
  408b3a:	f021 0b03 	bic.w	fp, r1, #3
  408b3e:	44a3      	add	fp, r4
  408b40:	f107 0010 	add.w	r0, r7, #16
  408b44:	4583      	cmp	fp, r0
  408b46:	da56      	bge.n	408bf6 <_realloc_r+0x26a>
  408b48:	f01e 0f01 	tst.w	lr, #1
  408b4c:	f47f af4b 	bne.w	4089e6 <_realloc_r+0x5a>
  408b50:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408b54:	eba9 0a01 	sub.w	sl, r9, r1
  408b58:	f8da 1004 	ldr.w	r1, [sl, #4]
  408b5c:	f021 0103 	bic.w	r1, r1, #3
  408b60:	448b      	add	fp, r1
  408b62:	4558      	cmp	r0, fp
  408b64:	dce2      	bgt.n	408b2c <_realloc_r+0x1a0>
  408b66:	4656      	mov	r6, sl
  408b68:	f8da 100c 	ldr.w	r1, [sl, #12]
  408b6c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408b70:	1f22      	subs	r2, r4, #4
  408b72:	2a24      	cmp	r2, #36	; 0x24
  408b74:	60c1      	str	r1, [r0, #12]
  408b76:	6088      	str	r0, [r1, #8]
  408b78:	f200 808f 	bhi.w	408c9a <_realloc_r+0x30e>
  408b7c:	2a13      	cmp	r2, #19
  408b7e:	f240 808a 	bls.w	408c96 <_realloc_r+0x30a>
  408b82:	6829      	ldr	r1, [r5, #0]
  408b84:	f8ca 1008 	str.w	r1, [sl, #8]
  408b88:	6869      	ldr	r1, [r5, #4]
  408b8a:	f8ca 100c 	str.w	r1, [sl, #12]
  408b8e:	2a1b      	cmp	r2, #27
  408b90:	f200 808a 	bhi.w	408ca8 <_realloc_r+0x31c>
  408b94:	3508      	adds	r5, #8
  408b96:	f10a 0210 	add.w	r2, sl, #16
  408b9a:	6829      	ldr	r1, [r5, #0]
  408b9c:	6011      	str	r1, [r2, #0]
  408b9e:	6869      	ldr	r1, [r5, #4]
  408ba0:	6051      	str	r1, [r2, #4]
  408ba2:	68a9      	ldr	r1, [r5, #8]
  408ba4:	6091      	str	r1, [r2, #8]
  408ba6:	eb0a 0107 	add.w	r1, sl, r7
  408baa:	ebab 0207 	sub.w	r2, fp, r7
  408bae:	f042 0201 	orr.w	r2, r2, #1
  408bb2:	6099      	str	r1, [r3, #8]
  408bb4:	604a      	str	r2, [r1, #4]
  408bb6:	f8da 3004 	ldr.w	r3, [sl, #4]
  408bba:	f003 0301 	and.w	r3, r3, #1
  408bbe:	431f      	orrs	r7, r3
  408bc0:	4640      	mov	r0, r8
  408bc2:	f8ca 7004 	str.w	r7, [sl, #4]
  408bc6:	f7fb fb1d 	bl	404204 <__malloc_unlock>
  408bca:	e751      	b.n	408a70 <_realloc_r+0xe4>
  408bcc:	682b      	ldr	r3, [r5, #0]
  408bce:	6003      	str	r3, [r0, #0]
  408bd0:	686b      	ldr	r3, [r5, #4]
  408bd2:	6043      	str	r3, [r0, #4]
  408bd4:	2a1b      	cmp	r2, #27
  408bd6:	d82d      	bhi.n	408c34 <_realloc_r+0x2a8>
  408bd8:	f100 0308 	add.w	r3, r0, #8
  408bdc:	f105 0208 	add.w	r2, r5, #8
  408be0:	e71b      	b.n	408a1a <_realloc_r+0x8e>
  408be2:	4632      	mov	r2, r6
  408be4:	6829      	ldr	r1, [r5, #0]
  408be6:	6011      	str	r1, [r2, #0]
  408be8:	6869      	ldr	r1, [r5, #4]
  408bea:	6051      	str	r1, [r2, #4]
  408bec:	68a9      	ldr	r1, [r5, #8]
  408bee:	6091      	str	r1, [r2, #8]
  408bf0:	461c      	mov	r4, r3
  408bf2:	46d1      	mov	r9, sl
  408bf4:	e72a      	b.n	408a4c <_realloc_r+0xc0>
  408bf6:	eb09 0107 	add.w	r1, r9, r7
  408bfa:	ebab 0b07 	sub.w	fp, fp, r7
  408bfe:	f04b 0201 	orr.w	r2, fp, #1
  408c02:	6099      	str	r1, [r3, #8]
  408c04:	604a      	str	r2, [r1, #4]
  408c06:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408c0a:	f003 0301 	and.w	r3, r3, #1
  408c0e:	431f      	orrs	r7, r3
  408c10:	4640      	mov	r0, r8
  408c12:	f845 7c04 	str.w	r7, [r5, #-4]
  408c16:	f7fb faf5 	bl	404204 <__malloc_unlock>
  408c1a:	462e      	mov	r6, r5
  408c1c:	e728      	b.n	408a70 <_realloc_r+0xe4>
  408c1e:	4629      	mov	r1, r5
  408c20:	f7ff fb56 	bl	4082d0 <memmove>
  408c24:	e6ff      	b.n	408a26 <_realloc_r+0x9a>
  408c26:	4629      	mov	r1, r5
  408c28:	4630      	mov	r0, r6
  408c2a:	461c      	mov	r4, r3
  408c2c:	46d1      	mov	r9, sl
  408c2e:	f7ff fb4f 	bl	4082d0 <memmove>
  408c32:	e70b      	b.n	408a4c <_realloc_r+0xc0>
  408c34:	68ab      	ldr	r3, [r5, #8]
  408c36:	6083      	str	r3, [r0, #8]
  408c38:	68eb      	ldr	r3, [r5, #12]
  408c3a:	60c3      	str	r3, [r0, #12]
  408c3c:	2a24      	cmp	r2, #36	; 0x24
  408c3e:	d017      	beq.n	408c70 <_realloc_r+0x2e4>
  408c40:	f100 0310 	add.w	r3, r0, #16
  408c44:	f105 0210 	add.w	r2, r5, #16
  408c48:	e6e7      	b.n	408a1a <_realloc_r+0x8e>
  408c4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408c4e:	f023 0303 	bic.w	r3, r3, #3
  408c52:	441c      	add	r4, r3
  408c54:	462e      	mov	r6, r5
  408c56:	e6f9      	b.n	408a4c <_realloc_r+0xc0>
  408c58:	68a9      	ldr	r1, [r5, #8]
  408c5a:	f8ca 1010 	str.w	r1, [sl, #16]
  408c5e:	68e9      	ldr	r1, [r5, #12]
  408c60:	f8ca 1014 	str.w	r1, [sl, #20]
  408c64:	2a24      	cmp	r2, #36	; 0x24
  408c66:	d00c      	beq.n	408c82 <_realloc_r+0x2f6>
  408c68:	3510      	adds	r5, #16
  408c6a:	f10a 0218 	add.w	r2, sl, #24
  408c6e:	e7b9      	b.n	408be4 <_realloc_r+0x258>
  408c70:	692b      	ldr	r3, [r5, #16]
  408c72:	6103      	str	r3, [r0, #16]
  408c74:	696b      	ldr	r3, [r5, #20]
  408c76:	6143      	str	r3, [r0, #20]
  408c78:	f105 0218 	add.w	r2, r5, #24
  408c7c:	f100 0318 	add.w	r3, r0, #24
  408c80:	e6cb      	b.n	408a1a <_realloc_r+0x8e>
  408c82:	692a      	ldr	r2, [r5, #16]
  408c84:	f8ca 2018 	str.w	r2, [sl, #24]
  408c88:	696a      	ldr	r2, [r5, #20]
  408c8a:	f8ca 201c 	str.w	r2, [sl, #28]
  408c8e:	3518      	adds	r5, #24
  408c90:	f10a 0220 	add.w	r2, sl, #32
  408c94:	e7a6      	b.n	408be4 <_realloc_r+0x258>
  408c96:	4632      	mov	r2, r6
  408c98:	e77f      	b.n	408b9a <_realloc_r+0x20e>
  408c9a:	4629      	mov	r1, r5
  408c9c:	4630      	mov	r0, r6
  408c9e:	9301      	str	r3, [sp, #4]
  408ca0:	f7ff fb16 	bl	4082d0 <memmove>
  408ca4:	9b01      	ldr	r3, [sp, #4]
  408ca6:	e77e      	b.n	408ba6 <_realloc_r+0x21a>
  408ca8:	68a9      	ldr	r1, [r5, #8]
  408caa:	f8ca 1010 	str.w	r1, [sl, #16]
  408cae:	68e9      	ldr	r1, [r5, #12]
  408cb0:	f8ca 1014 	str.w	r1, [sl, #20]
  408cb4:	2a24      	cmp	r2, #36	; 0x24
  408cb6:	d003      	beq.n	408cc0 <_realloc_r+0x334>
  408cb8:	3510      	adds	r5, #16
  408cba:	f10a 0218 	add.w	r2, sl, #24
  408cbe:	e76c      	b.n	408b9a <_realloc_r+0x20e>
  408cc0:	692a      	ldr	r2, [r5, #16]
  408cc2:	f8ca 2018 	str.w	r2, [sl, #24]
  408cc6:	696a      	ldr	r2, [r5, #20]
  408cc8:	f8ca 201c 	str.w	r2, [sl, #28]
  408ccc:	3518      	adds	r5, #24
  408cce:	f10a 0220 	add.w	r2, sl, #32
  408cd2:	e762      	b.n	408b9a <_realloc_r+0x20e>
  408cd4:	20400438 	.word	0x20400438

00408cd8 <__sread>:
  408cd8:	b510      	push	{r4, lr}
  408cda:	460c      	mov	r4, r1
  408cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408ce0:	f000 faa4 	bl	40922c <_read_r>
  408ce4:	2800      	cmp	r0, #0
  408ce6:	db03      	blt.n	408cf0 <__sread+0x18>
  408ce8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408cea:	4403      	add	r3, r0
  408cec:	6523      	str	r3, [r4, #80]	; 0x50
  408cee:	bd10      	pop	{r4, pc}
  408cf0:	89a3      	ldrh	r3, [r4, #12]
  408cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408cf6:	81a3      	strh	r3, [r4, #12]
  408cf8:	bd10      	pop	{r4, pc}
  408cfa:	bf00      	nop

00408cfc <__swrite>:
  408cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408d00:	4616      	mov	r6, r2
  408d02:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408d06:	461f      	mov	r7, r3
  408d08:	05d3      	lsls	r3, r2, #23
  408d0a:	460c      	mov	r4, r1
  408d0c:	4605      	mov	r5, r0
  408d0e:	d507      	bpl.n	408d20 <__swrite+0x24>
  408d10:	2200      	movs	r2, #0
  408d12:	2302      	movs	r3, #2
  408d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408d18:	f000 fa72 	bl	409200 <_lseek_r>
  408d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408d24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408d28:	81a2      	strh	r2, [r4, #12]
  408d2a:	463b      	mov	r3, r7
  408d2c:	4632      	mov	r2, r6
  408d2e:	4628      	mov	r0, r5
  408d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408d34:	f000 b922 	b.w	408f7c <_write_r>

00408d38 <__sseek>:
  408d38:	b510      	push	{r4, lr}
  408d3a:	460c      	mov	r4, r1
  408d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408d40:	f000 fa5e 	bl	409200 <_lseek_r>
  408d44:	89a3      	ldrh	r3, [r4, #12]
  408d46:	1c42      	adds	r2, r0, #1
  408d48:	bf0e      	itee	eq
  408d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408d52:	6520      	strne	r0, [r4, #80]	; 0x50
  408d54:	81a3      	strh	r3, [r4, #12]
  408d56:	bd10      	pop	{r4, pc}

00408d58 <__sclose>:
  408d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408d5c:	f000 b9b6 	b.w	4090cc <_close_r>

00408d60 <__ssprint_r>:
  408d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d64:	6893      	ldr	r3, [r2, #8]
  408d66:	b083      	sub	sp, #12
  408d68:	4690      	mov	r8, r2
  408d6a:	2b00      	cmp	r3, #0
  408d6c:	d070      	beq.n	408e50 <__ssprint_r+0xf0>
  408d6e:	4682      	mov	sl, r0
  408d70:	460c      	mov	r4, r1
  408d72:	6817      	ldr	r7, [r2, #0]
  408d74:	688d      	ldr	r5, [r1, #8]
  408d76:	6808      	ldr	r0, [r1, #0]
  408d78:	e042      	b.n	408e00 <__ssprint_r+0xa0>
  408d7a:	89a3      	ldrh	r3, [r4, #12]
  408d7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408d80:	d02e      	beq.n	408de0 <__ssprint_r+0x80>
  408d82:	6965      	ldr	r5, [r4, #20]
  408d84:	6921      	ldr	r1, [r4, #16]
  408d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  408d8a:	eba0 0b01 	sub.w	fp, r0, r1
  408d8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408d92:	f10b 0001 	add.w	r0, fp, #1
  408d96:	106d      	asrs	r5, r5, #1
  408d98:	4430      	add	r0, r6
  408d9a:	42a8      	cmp	r0, r5
  408d9c:	462a      	mov	r2, r5
  408d9e:	bf84      	itt	hi
  408da0:	4605      	movhi	r5, r0
  408da2:	462a      	movhi	r2, r5
  408da4:	055b      	lsls	r3, r3, #21
  408da6:	d538      	bpl.n	408e1a <__ssprint_r+0xba>
  408da8:	4611      	mov	r1, r2
  408daa:	4650      	mov	r0, sl
  408dac:	f7fa fe8c 	bl	403ac8 <_malloc_r>
  408db0:	2800      	cmp	r0, #0
  408db2:	d03c      	beq.n	408e2e <__ssprint_r+0xce>
  408db4:	465a      	mov	r2, fp
  408db6:	6921      	ldr	r1, [r4, #16]
  408db8:	9001      	str	r0, [sp, #4]
  408dba:	f7fb f935 	bl	404028 <memcpy>
  408dbe:	89a2      	ldrh	r2, [r4, #12]
  408dc0:	9b01      	ldr	r3, [sp, #4]
  408dc2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408dc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408dca:	81a2      	strh	r2, [r4, #12]
  408dcc:	eba5 020b 	sub.w	r2, r5, fp
  408dd0:	eb03 000b 	add.w	r0, r3, fp
  408dd4:	6165      	str	r5, [r4, #20]
  408dd6:	6123      	str	r3, [r4, #16]
  408dd8:	6020      	str	r0, [r4, #0]
  408dda:	60a2      	str	r2, [r4, #8]
  408ddc:	4635      	mov	r5, r6
  408dde:	46b3      	mov	fp, r6
  408de0:	465a      	mov	r2, fp
  408de2:	4649      	mov	r1, r9
  408de4:	f7ff fa74 	bl	4082d0 <memmove>
  408de8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  408dec:	68a2      	ldr	r2, [r4, #8]
  408dee:	6820      	ldr	r0, [r4, #0]
  408df0:	1b55      	subs	r5, r2, r5
  408df2:	4458      	add	r0, fp
  408df4:	1b9e      	subs	r6, r3, r6
  408df6:	60a5      	str	r5, [r4, #8]
  408df8:	6020      	str	r0, [r4, #0]
  408dfa:	f8c8 6008 	str.w	r6, [r8, #8]
  408dfe:	b33e      	cbz	r6, 408e50 <__ssprint_r+0xf0>
  408e00:	687e      	ldr	r6, [r7, #4]
  408e02:	463b      	mov	r3, r7
  408e04:	3708      	adds	r7, #8
  408e06:	2e00      	cmp	r6, #0
  408e08:	d0fa      	beq.n	408e00 <__ssprint_r+0xa0>
  408e0a:	42ae      	cmp	r6, r5
  408e0c:	f8d3 9000 	ldr.w	r9, [r3]
  408e10:	46ab      	mov	fp, r5
  408e12:	d2b2      	bcs.n	408d7a <__ssprint_r+0x1a>
  408e14:	4635      	mov	r5, r6
  408e16:	46b3      	mov	fp, r6
  408e18:	e7e2      	b.n	408de0 <__ssprint_r+0x80>
  408e1a:	4650      	mov	r0, sl
  408e1c:	f7ff fdb6 	bl	40898c <_realloc_r>
  408e20:	4603      	mov	r3, r0
  408e22:	2800      	cmp	r0, #0
  408e24:	d1d2      	bne.n	408dcc <__ssprint_r+0x6c>
  408e26:	6921      	ldr	r1, [r4, #16]
  408e28:	4650      	mov	r0, sl
  408e2a:	f7fe fec1 	bl	407bb0 <_free_r>
  408e2e:	230c      	movs	r3, #12
  408e30:	f8ca 3000 	str.w	r3, [sl]
  408e34:	89a3      	ldrh	r3, [r4, #12]
  408e36:	2200      	movs	r2, #0
  408e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408e3c:	f04f 30ff 	mov.w	r0, #4294967295
  408e40:	81a3      	strh	r3, [r4, #12]
  408e42:	f8c8 2008 	str.w	r2, [r8, #8]
  408e46:	f8c8 2004 	str.w	r2, [r8, #4]
  408e4a:	b003      	add	sp, #12
  408e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e50:	2000      	movs	r0, #0
  408e52:	f8c8 0004 	str.w	r0, [r8, #4]
  408e56:	b003      	add	sp, #12
  408e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408e5c <__swbuf_r>:
  408e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408e5e:	460d      	mov	r5, r1
  408e60:	4614      	mov	r4, r2
  408e62:	4606      	mov	r6, r0
  408e64:	b110      	cbz	r0, 408e6c <__swbuf_r+0x10>
  408e66:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408e68:	2b00      	cmp	r3, #0
  408e6a:	d04b      	beq.n	408f04 <__swbuf_r+0xa8>
  408e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408e70:	69a3      	ldr	r3, [r4, #24]
  408e72:	60a3      	str	r3, [r4, #8]
  408e74:	b291      	uxth	r1, r2
  408e76:	0708      	lsls	r0, r1, #28
  408e78:	d539      	bpl.n	408eee <__swbuf_r+0x92>
  408e7a:	6923      	ldr	r3, [r4, #16]
  408e7c:	2b00      	cmp	r3, #0
  408e7e:	d036      	beq.n	408eee <__swbuf_r+0x92>
  408e80:	b2ed      	uxtb	r5, r5
  408e82:	0489      	lsls	r1, r1, #18
  408e84:	462f      	mov	r7, r5
  408e86:	d515      	bpl.n	408eb4 <__swbuf_r+0x58>
  408e88:	6822      	ldr	r2, [r4, #0]
  408e8a:	6961      	ldr	r1, [r4, #20]
  408e8c:	1ad3      	subs	r3, r2, r3
  408e8e:	428b      	cmp	r3, r1
  408e90:	da1c      	bge.n	408ecc <__swbuf_r+0x70>
  408e92:	3301      	adds	r3, #1
  408e94:	68a1      	ldr	r1, [r4, #8]
  408e96:	1c50      	adds	r0, r2, #1
  408e98:	3901      	subs	r1, #1
  408e9a:	60a1      	str	r1, [r4, #8]
  408e9c:	6020      	str	r0, [r4, #0]
  408e9e:	7015      	strb	r5, [r2, #0]
  408ea0:	6962      	ldr	r2, [r4, #20]
  408ea2:	429a      	cmp	r2, r3
  408ea4:	d01a      	beq.n	408edc <__swbuf_r+0x80>
  408ea6:	89a3      	ldrh	r3, [r4, #12]
  408ea8:	07db      	lsls	r3, r3, #31
  408eaa:	d501      	bpl.n	408eb0 <__swbuf_r+0x54>
  408eac:	2d0a      	cmp	r5, #10
  408eae:	d015      	beq.n	408edc <__swbuf_r+0x80>
  408eb0:	4638      	mov	r0, r7
  408eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408eb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408eba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408ebe:	81a2      	strh	r2, [r4, #12]
  408ec0:	6822      	ldr	r2, [r4, #0]
  408ec2:	6661      	str	r1, [r4, #100]	; 0x64
  408ec4:	6961      	ldr	r1, [r4, #20]
  408ec6:	1ad3      	subs	r3, r2, r3
  408ec8:	428b      	cmp	r3, r1
  408eca:	dbe2      	blt.n	408e92 <__swbuf_r+0x36>
  408ecc:	4621      	mov	r1, r4
  408ece:	4630      	mov	r0, r6
  408ed0:	f7fe fcf0 	bl	4078b4 <_fflush_r>
  408ed4:	b940      	cbnz	r0, 408ee8 <__swbuf_r+0x8c>
  408ed6:	6822      	ldr	r2, [r4, #0]
  408ed8:	2301      	movs	r3, #1
  408eda:	e7db      	b.n	408e94 <__swbuf_r+0x38>
  408edc:	4621      	mov	r1, r4
  408ede:	4630      	mov	r0, r6
  408ee0:	f7fe fce8 	bl	4078b4 <_fflush_r>
  408ee4:	2800      	cmp	r0, #0
  408ee6:	d0e3      	beq.n	408eb0 <__swbuf_r+0x54>
  408ee8:	f04f 37ff 	mov.w	r7, #4294967295
  408eec:	e7e0      	b.n	408eb0 <__swbuf_r+0x54>
  408eee:	4621      	mov	r1, r4
  408ef0:	4630      	mov	r0, r6
  408ef2:	f7fd fc0b 	bl	40670c <__swsetup_r>
  408ef6:	2800      	cmp	r0, #0
  408ef8:	d1f6      	bne.n	408ee8 <__swbuf_r+0x8c>
  408efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408efe:	6923      	ldr	r3, [r4, #16]
  408f00:	b291      	uxth	r1, r2
  408f02:	e7bd      	b.n	408e80 <__swbuf_r+0x24>
  408f04:	f7fe fd2e 	bl	407964 <__sinit>
  408f08:	e7b0      	b.n	408e6c <__swbuf_r+0x10>
  408f0a:	bf00      	nop

00408f0c <_wcrtomb_r>:
  408f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  408f0e:	4606      	mov	r6, r0
  408f10:	b085      	sub	sp, #20
  408f12:	461f      	mov	r7, r3
  408f14:	b189      	cbz	r1, 408f3a <_wcrtomb_r+0x2e>
  408f16:	4c10      	ldr	r4, [pc, #64]	; (408f58 <_wcrtomb_r+0x4c>)
  408f18:	4d10      	ldr	r5, [pc, #64]	; (408f5c <_wcrtomb_r+0x50>)
  408f1a:	6824      	ldr	r4, [r4, #0]
  408f1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408f1e:	2c00      	cmp	r4, #0
  408f20:	bf08      	it	eq
  408f22:	462c      	moveq	r4, r5
  408f24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408f28:	47a0      	blx	r4
  408f2a:	1c43      	adds	r3, r0, #1
  408f2c:	d103      	bne.n	408f36 <_wcrtomb_r+0x2a>
  408f2e:	2200      	movs	r2, #0
  408f30:	238a      	movs	r3, #138	; 0x8a
  408f32:	603a      	str	r2, [r7, #0]
  408f34:	6033      	str	r3, [r6, #0]
  408f36:	b005      	add	sp, #20
  408f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408f3a:	460c      	mov	r4, r1
  408f3c:	4906      	ldr	r1, [pc, #24]	; (408f58 <_wcrtomb_r+0x4c>)
  408f3e:	4a07      	ldr	r2, [pc, #28]	; (408f5c <_wcrtomb_r+0x50>)
  408f40:	6809      	ldr	r1, [r1, #0]
  408f42:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408f44:	2900      	cmp	r1, #0
  408f46:	bf08      	it	eq
  408f48:	4611      	moveq	r1, r2
  408f4a:	4622      	mov	r2, r4
  408f4c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408f50:	a901      	add	r1, sp, #4
  408f52:	47a0      	blx	r4
  408f54:	e7e9      	b.n	408f2a <_wcrtomb_r+0x1e>
  408f56:	bf00      	nop
  408f58:	2040000c 	.word	0x2040000c
  408f5c:	2040084c 	.word	0x2040084c

00408f60 <__ascii_wctomb>:
  408f60:	b121      	cbz	r1, 408f6c <__ascii_wctomb+0xc>
  408f62:	2aff      	cmp	r2, #255	; 0xff
  408f64:	d804      	bhi.n	408f70 <__ascii_wctomb+0x10>
  408f66:	700a      	strb	r2, [r1, #0]
  408f68:	2001      	movs	r0, #1
  408f6a:	4770      	bx	lr
  408f6c:	4608      	mov	r0, r1
  408f6e:	4770      	bx	lr
  408f70:	238a      	movs	r3, #138	; 0x8a
  408f72:	6003      	str	r3, [r0, #0]
  408f74:	f04f 30ff 	mov.w	r0, #4294967295
  408f78:	4770      	bx	lr
  408f7a:	bf00      	nop

00408f7c <_write_r>:
  408f7c:	b570      	push	{r4, r5, r6, lr}
  408f7e:	460d      	mov	r5, r1
  408f80:	4c08      	ldr	r4, [pc, #32]	; (408fa4 <_write_r+0x28>)
  408f82:	4611      	mov	r1, r2
  408f84:	4606      	mov	r6, r0
  408f86:	461a      	mov	r2, r3
  408f88:	4628      	mov	r0, r5
  408f8a:	2300      	movs	r3, #0
  408f8c:	6023      	str	r3, [r4, #0]
  408f8e:	f7f7 f9cf 	bl	400330 <_write>
  408f92:	1c43      	adds	r3, r0, #1
  408f94:	d000      	beq.n	408f98 <_write_r+0x1c>
  408f96:	bd70      	pop	{r4, r5, r6, pc}
  408f98:	6823      	ldr	r3, [r4, #0]
  408f9a:	2b00      	cmp	r3, #0
  408f9c:	d0fb      	beq.n	408f96 <_write_r+0x1a>
  408f9e:	6033      	str	r3, [r6, #0]
  408fa0:	bd70      	pop	{r4, r5, r6, pc}
  408fa2:	bf00      	nop
  408fa4:	20400d0c 	.word	0x20400d0c

00408fa8 <__register_exitproc>:
  408fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408fac:	4d2c      	ldr	r5, [pc, #176]	; (409060 <__register_exitproc+0xb8>)
  408fae:	4606      	mov	r6, r0
  408fb0:	6828      	ldr	r0, [r5, #0]
  408fb2:	4698      	mov	r8, r3
  408fb4:	460f      	mov	r7, r1
  408fb6:	4691      	mov	r9, r2
  408fb8:	f7ff f8a2 	bl	408100 <__retarget_lock_acquire_recursive>
  408fbc:	4b29      	ldr	r3, [pc, #164]	; (409064 <__register_exitproc+0xbc>)
  408fbe:	681c      	ldr	r4, [r3, #0]
  408fc0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408fc4:	2b00      	cmp	r3, #0
  408fc6:	d03e      	beq.n	409046 <__register_exitproc+0x9e>
  408fc8:	685a      	ldr	r2, [r3, #4]
  408fca:	2a1f      	cmp	r2, #31
  408fcc:	dc1c      	bgt.n	409008 <__register_exitproc+0x60>
  408fce:	f102 0e01 	add.w	lr, r2, #1
  408fd2:	b176      	cbz	r6, 408ff2 <__register_exitproc+0x4a>
  408fd4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408fd8:	2401      	movs	r4, #1
  408fda:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408fde:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408fe2:	4094      	lsls	r4, r2
  408fe4:	4320      	orrs	r0, r4
  408fe6:	2e02      	cmp	r6, #2
  408fe8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408fec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408ff0:	d023      	beq.n	40903a <__register_exitproc+0x92>
  408ff2:	3202      	adds	r2, #2
  408ff4:	f8c3 e004 	str.w	lr, [r3, #4]
  408ff8:	6828      	ldr	r0, [r5, #0]
  408ffa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408ffe:	f7ff f881 	bl	408104 <__retarget_lock_release_recursive>
  409002:	2000      	movs	r0, #0
  409004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409008:	4b17      	ldr	r3, [pc, #92]	; (409068 <__register_exitproc+0xc0>)
  40900a:	b30b      	cbz	r3, 409050 <__register_exitproc+0xa8>
  40900c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409010:	f7fa fd4a 	bl	403aa8 <malloc>
  409014:	4603      	mov	r3, r0
  409016:	b1d8      	cbz	r0, 409050 <__register_exitproc+0xa8>
  409018:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40901c:	6002      	str	r2, [r0, #0]
  40901e:	2100      	movs	r1, #0
  409020:	6041      	str	r1, [r0, #4]
  409022:	460a      	mov	r2, r1
  409024:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409028:	f04f 0e01 	mov.w	lr, #1
  40902c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409030:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409034:	2e00      	cmp	r6, #0
  409036:	d0dc      	beq.n	408ff2 <__register_exitproc+0x4a>
  409038:	e7cc      	b.n	408fd4 <__register_exitproc+0x2c>
  40903a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40903e:	430c      	orrs	r4, r1
  409040:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409044:	e7d5      	b.n	408ff2 <__register_exitproc+0x4a>
  409046:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40904a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40904e:	e7bb      	b.n	408fc8 <__register_exitproc+0x20>
  409050:	6828      	ldr	r0, [r5, #0]
  409052:	f7ff f857 	bl	408104 <__retarget_lock_release_recursive>
  409056:	f04f 30ff 	mov.w	r0, #4294967295
  40905a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40905e:	bf00      	nop
  409060:	20400848 	.word	0x20400848
  409064:	00409f64 	.word	0x00409f64
  409068:	00403aa9 	.word	0x00403aa9

0040906c <_calloc_r>:
  40906c:	b510      	push	{r4, lr}
  40906e:	fb02 f101 	mul.w	r1, r2, r1
  409072:	f7fa fd29 	bl	403ac8 <_malloc_r>
  409076:	4604      	mov	r4, r0
  409078:	b1d8      	cbz	r0, 4090b2 <_calloc_r+0x46>
  40907a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40907e:	f022 0203 	bic.w	r2, r2, #3
  409082:	3a04      	subs	r2, #4
  409084:	2a24      	cmp	r2, #36	; 0x24
  409086:	d818      	bhi.n	4090ba <_calloc_r+0x4e>
  409088:	2a13      	cmp	r2, #19
  40908a:	d914      	bls.n	4090b6 <_calloc_r+0x4a>
  40908c:	2300      	movs	r3, #0
  40908e:	2a1b      	cmp	r2, #27
  409090:	6003      	str	r3, [r0, #0]
  409092:	6043      	str	r3, [r0, #4]
  409094:	d916      	bls.n	4090c4 <_calloc_r+0x58>
  409096:	2a24      	cmp	r2, #36	; 0x24
  409098:	6083      	str	r3, [r0, #8]
  40909a:	60c3      	str	r3, [r0, #12]
  40909c:	bf11      	iteee	ne
  40909e:	f100 0210 	addne.w	r2, r0, #16
  4090a2:	6103      	streq	r3, [r0, #16]
  4090a4:	6143      	streq	r3, [r0, #20]
  4090a6:	f100 0218 	addeq.w	r2, r0, #24
  4090aa:	2300      	movs	r3, #0
  4090ac:	6013      	str	r3, [r2, #0]
  4090ae:	6053      	str	r3, [r2, #4]
  4090b0:	6093      	str	r3, [r2, #8]
  4090b2:	4620      	mov	r0, r4
  4090b4:	bd10      	pop	{r4, pc}
  4090b6:	4602      	mov	r2, r0
  4090b8:	e7f7      	b.n	4090aa <_calloc_r+0x3e>
  4090ba:	2100      	movs	r1, #0
  4090bc:	f7fb f84e 	bl	40415c <memset>
  4090c0:	4620      	mov	r0, r4
  4090c2:	bd10      	pop	{r4, pc}
  4090c4:	f100 0208 	add.w	r2, r0, #8
  4090c8:	e7ef      	b.n	4090aa <_calloc_r+0x3e>
  4090ca:	bf00      	nop

004090cc <_close_r>:
  4090cc:	b538      	push	{r3, r4, r5, lr}
  4090ce:	4c07      	ldr	r4, [pc, #28]	; (4090ec <_close_r+0x20>)
  4090d0:	2300      	movs	r3, #0
  4090d2:	4605      	mov	r5, r0
  4090d4:	4608      	mov	r0, r1
  4090d6:	6023      	str	r3, [r4, #0]
  4090d8:	f7f7 ffba 	bl	401050 <_close>
  4090dc:	1c43      	adds	r3, r0, #1
  4090de:	d000      	beq.n	4090e2 <_close_r+0x16>
  4090e0:	bd38      	pop	{r3, r4, r5, pc}
  4090e2:	6823      	ldr	r3, [r4, #0]
  4090e4:	2b00      	cmp	r3, #0
  4090e6:	d0fb      	beq.n	4090e0 <_close_r+0x14>
  4090e8:	602b      	str	r3, [r5, #0]
  4090ea:	bd38      	pop	{r3, r4, r5, pc}
  4090ec:	20400d0c 	.word	0x20400d0c

004090f0 <_fclose_r>:
  4090f0:	b570      	push	{r4, r5, r6, lr}
  4090f2:	b159      	cbz	r1, 40910c <_fclose_r+0x1c>
  4090f4:	4605      	mov	r5, r0
  4090f6:	460c      	mov	r4, r1
  4090f8:	b110      	cbz	r0, 409100 <_fclose_r+0x10>
  4090fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4090fc:	2b00      	cmp	r3, #0
  4090fe:	d03c      	beq.n	40917a <_fclose_r+0x8a>
  409100:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409102:	07d8      	lsls	r0, r3, #31
  409104:	d505      	bpl.n	409112 <_fclose_r+0x22>
  409106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40910a:	b92b      	cbnz	r3, 409118 <_fclose_r+0x28>
  40910c:	2600      	movs	r6, #0
  40910e:	4630      	mov	r0, r6
  409110:	bd70      	pop	{r4, r5, r6, pc}
  409112:	89a3      	ldrh	r3, [r4, #12]
  409114:	0599      	lsls	r1, r3, #22
  409116:	d53c      	bpl.n	409192 <_fclose_r+0xa2>
  409118:	4621      	mov	r1, r4
  40911a:	4628      	mov	r0, r5
  40911c:	f7fe fb2a 	bl	407774 <__sflush_r>
  409120:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409122:	4606      	mov	r6, r0
  409124:	b133      	cbz	r3, 409134 <_fclose_r+0x44>
  409126:	69e1      	ldr	r1, [r4, #28]
  409128:	4628      	mov	r0, r5
  40912a:	4798      	blx	r3
  40912c:	2800      	cmp	r0, #0
  40912e:	bfb8      	it	lt
  409130:	f04f 36ff 	movlt.w	r6, #4294967295
  409134:	89a3      	ldrh	r3, [r4, #12]
  409136:	061a      	lsls	r2, r3, #24
  409138:	d422      	bmi.n	409180 <_fclose_r+0x90>
  40913a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40913c:	b141      	cbz	r1, 409150 <_fclose_r+0x60>
  40913e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409142:	4299      	cmp	r1, r3
  409144:	d002      	beq.n	40914c <_fclose_r+0x5c>
  409146:	4628      	mov	r0, r5
  409148:	f7fe fd32 	bl	407bb0 <_free_r>
  40914c:	2300      	movs	r3, #0
  40914e:	6323      	str	r3, [r4, #48]	; 0x30
  409150:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409152:	b121      	cbz	r1, 40915e <_fclose_r+0x6e>
  409154:	4628      	mov	r0, r5
  409156:	f7fe fd2b 	bl	407bb0 <_free_r>
  40915a:	2300      	movs	r3, #0
  40915c:	6463      	str	r3, [r4, #68]	; 0x44
  40915e:	f7fe fc2d 	bl	4079bc <__sfp_lock_acquire>
  409162:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409164:	2200      	movs	r2, #0
  409166:	07db      	lsls	r3, r3, #31
  409168:	81a2      	strh	r2, [r4, #12]
  40916a:	d50e      	bpl.n	40918a <_fclose_r+0x9a>
  40916c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40916e:	f7fe ffc5 	bl	4080fc <__retarget_lock_close_recursive>
  409172:	f7fe fc29 	bl	4079c8 <__sfp_lock_release>
  409176:	4630      	mov	r0, r6
  409178:	bd70      	pop	{r4, r5, r6, pc}
  40917a:	f7fe fbf3 	bl	407964 <__sinit>
  40917e:	e7bf      	b.n	409100 <_fclose_r+0x10>
  409180:	6921      	ldr	r1, [r4, #16]
  409182:	4628      	mov	r0, r5
  409184:	f7fe fd14 	bl	407bb0 <_free_r>
  409188:	e7d7      	b.n	40913a <_fclose_r+0x4a>
  40918a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40918c:	f7fe ffba 	bl	408104 <__retarget_lock_release_recursive>
  409190:	e7ec      	b.n	40916c <_fclose_r+0x7c>
  409192:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409194:	f7fe ffb4 	bl	408100 <__retarget_lock_acquire_recursive>
  409198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40919c:	2b00      	cmp	r3, #0
  40919e:	d1bb      	bne.n	409118 <_fclose_r+0x28>
  4091a0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4091a2:	f016 0601 	ands.w	r6, r6, #1
  4091a6:	d1b1      	bne.n	40910c <_fclose_r+0x1c>
  4091a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4091aa:	f7fe ffab 	bl	408104 <__retarget_lock_release_recursive>
  4091ae:	4630      	mov	r0, r6
  4091b0:	bd70      	pop	{r4, r5, r6, pc}
  4091b2:	bf00      	nop

004091b4 <_fstat_r>:
  4091b4:	b538      	push	{r3, r4, r5, lr}
  4091b6:	460b      	mov	r3, r1
  4091b8:	4c07      	ldr	r4, [pc, #28]	; (4091d8 <_fstat_r+0x24>)
  4091ba:	4605      	mov	r5, r0
  4091bc:	4611      	mov	r1, r2
  4091be:	4618      	mov	r0, r3
  4091c0:	2300      	movs	r3, #0
  4091c2:	6023      	str	r3, [r4, #0]
  4091c4:	f7f7 ff47 	bl	401056 <_fstat>
  4091c8:	1c43      	adds	r3, r0, #1
  4091ca:	d000      	beq.n	4091ce <_fstat_r+0x1a>
  4091cc:	bd38      	pop	{r3, r4, r5, pc}
  4091ce:	6823      	ldr	r3, [r4, #0]
  4091d0:	2b00      	cmp	r3, #0
  4091d2:	d0fb      	beq.n	4091cc <_fstat_r+0x18>
  4091d4:	602b      	str	r3, [r5, #0]
  4091d6:	bd38      	pop	{r3, r4, r5, pc}
  4091d8:	20400d0c 	.word	0x20400d0c

004091dc <_isatty_r>:
  4091dc:	b538      	push	{r3, r4, r5, lr}
  4091de:	4c07      	ldr	r4, [pc, #28]	; (4091fc <_isatty_r+0x20>)
  4091e0:	2300      	movs	r3, #0
  4091e2:	4605      	mov	r5, r0
  4091e4:	4608      	mov	r0, r1
  4091e6:	6023      	str	r3, [r4, #0]
  4091e8:	f7f7 ff3a 	bl	401060 <_isatty>
  4091ec:	1c43      	adds	r3, r0, #1
  4091ee:	d000      	beq.n	4091f2 <_isatty_r+0x16>
  4091f0:	bd38      	pop	{r3, r4, r5, pc}
  4091f2:	6823      	ldr	r3, [r4, #0]
  4091f4:	2b00      	cmp	r3, #0
  4091f6:	d0fb      	beq.n	4091f0 <_isatty_r+0x14>
  4091f8:	602b      	str	r3, [r5, #0]
  4091fa:	bd38      	pop	{r3, r4, r5, pc}
  4091fc:	20400d0c 	.word	0x20400d0c

00409200 <_lseek_r>:
  409200:	b570      	push	{r4, r5, r6, lr}
  409202:	460d      	mov	r5, r1
  409204:	4c08      	ldr	r4, [pc, #32]	; (409228 <_lseek_r+0x28>)
  409206:	4611      	mov	r1, r2
  409208:	4606      	mov	r6, r0
  40920a:	461a      	mov	r2, r3
  40920c:	4628      	mov	r0, r5
  40920e:	2300      	movs	r3, #0
  409210:	6023      	str	r3, [r4, #0]
  409212:	f7f7 ff27 	bl	401064 <_lseek>
  409216:	1c43      	adds	r3, r0, #1
  409218:	d000      	beq.n	40921c <_lseek_r+0x1c>
  40921a:	bd70      	pop	{r4, r5, r6, pc}
  40921c:	6823      	ldr	r3, [r4, #0]
  40921e:	2b00      	cmp	r3, #0
  409220:	d0fb      	beq.n	40921a <_lseek_r+0x1a>
  409222:	6033      	str	r3, [r6, #0]
  409224:	bd70      	pop	{r4, r5, r6, pc}
  409226:	bf00      	nop
  409228:	20400d0c 	.word	0x20400d0c

0040922c <_read_r>:
  40922c:	b570      	push	{r4, r5, r6, lr}
  40922e:	460d      	mov	r5, r1
  409230:	4c08      	ldr	r4, [pc, #32]	; (409254 <_read_r+0x28>)
  409232:	4611      	mov	r1, r2
  409234:	4606      	mov	r6, r0
  409236:	461a      	mov	r2, r3
  409238:	4628      	mov	r0, r5
  40923a:	2300      	movs	r3, #0
  40923c:	6023      	str	r3, [r4, #0]
  40923e:	f7f7 f859 	bl	4002f4 <_read>
  409242:	1c43      	adds	r3, r0, #1
  409244:	d000      	beq.n	409248 <_read_r+0x1c>
  409246:	bd70      	pop	{r4, r5, r6, pc}
  409248:	6823      	ldr	r3, [r4, #0]
  40924a:	2b00      	cmp	r3, #0
  40924c:	d0fb      	beq.n	409246 <_read_r+0x1a>
  40924e:	6033      	str	r3, [r6, #0]
  409250:	bd70      	pop	{r4, r5, r6, pc}
  409252:	bf00      	nop
  409254:	20400d0c 	.word	0x20400d0c

00409258 <__aeabi_drsub>:
  409258:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40925c:	e002      	b.n	409264 <__adddf3>
  40925e:	bf00      	nop

00409260 <__aeabi_dsub>:
  409260:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409264 <__adddf3>:
  409264:	b530      	push	{r4, r5, lr}
  409266:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40926a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40926e:	ea94 0f05 	teq	r4, r5
  409272:	bf08      	it	eq
  409274:	ea90 0f02 	teqeq	r0, r2
  409278:	bf1f      	itttt	ne
  40927a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40927e:	ea55 0c02 	orrsne.w	ip, r5, r2
  409282:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409286:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40928a:	f000 80e2 	beq.w	409452 <__adddf3+0x1ee>
  40928e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409292:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409296:	bfb8      	it	lt
  409298:	426d      	neglt	r5, r5
  40929a:	dd0c      	ble.n	4092b6 <__adddf3+0x52>
  40929c:	442c      	add	r4, r5
  40929e:	ea80 0202 	eor.w	r2, r0, r2
  4092a2:	ea81 0303 	eor.w	r3, r1, r3
  4092a6:	ea82 0000 	eor.w	r0, r2, r0
  4092aa:	ea83 0101 	eor.w	r1, r3, r1
  4092ae:	ea80 0202 	eor.w	r2, r0, r2
  4092b2:	ea81 0303 	eor.w	r3, r1, r3
  4092b6:	2d36      	cmp	r5, #54	; 0x36
  4092b8:	bf88      	it	hi
  4092ba:	bd30      	pophi	{r4, r5, pc}
  4092bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4092c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4092c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4092c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4092cc:	d002      	beq.n	4092d4 <__adddf3+0x70>
  4092ce:	4240      	negs	r0, r0
  4092d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4092d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4092d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4092dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4092e0:	d002      	beq.n	4092e8 <__adddf3+0x84>
  4092e2:	4252      	negs	r2, r2
  4092e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4092e8:	ea94 0f05 	teq	r4, r5
  4092ec:	f000 80a7 	beq.w	40943e <__adddf3+0x1da>
  4092f0:	f1a4 0401 	sub.w	r4, r4, #1
  4092f4:	f1d5 0e20 	rsbs	lr, r5, #32
  4092f8:	db0d      	blt.n	409316 <__adddf3+0xb2>
  4092fa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4092fe:	fa22 f205 	lsr.w	r2, r2, r5
  409302:	1880      	adds	r0, r0, r2
  409304:	f141 0100 	adc.w	r1, r1, #0
  409308:	fa03 f20e 	lsl.w	r2, r3, lr
  40930c:	1880      	adds	r0, r0, r2
  40930e:	fa43 f305 	asr.w	r3, r3, r5
  409312:	4159      	adcs	r1, r3
  409314:	e00e      	b.n	409334 <__adddf3+0xd0>
  409316:	f1a5 0520 	sub.w	r5, r5, #32
  40931a:	f10e 0e20 	add.w	lr, lr, #32
  40931e:	2a01      	cmp	r2, #1
  409320:	fa03 fc0e 	lsl.w	ip, r3, lr
  409324:	bf28      	it	cs
  409326:	f04c 0c02 	orrcs.w	ip, ip, #2
  40932a:	fa43 f305 	asr.w	r3, r3, r5
  40932e:	18c0      	adds	r0, r0, r3
  409330:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409338:	d507      	bpl.n	40934a <__adddf3+0xe6>
  40933a:	f04f 0e00 	mov.w	lr, #0
  40933e:	f1dc 0c00 	rsbs	ip, ip, #0
  409342:	eb7e 0000 	sbcs.w	r0, lr, r0
  409346:	eb6e 0101 	sbc.w	r1, lr, r1
  40934a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40934e:	d31b      	bcc.n	409388 <__adddf3+0x124>
  409350:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409354:	d30c      	bcc.n	409370 <__adddf3+0x10c>
  409356:	0849      	lsrs	r1, r1, #1
  409358:	ea5f 0030 	movs.w	r0, r0, rrx
  40935c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409360:	f104 0401 	add.w	r4, r4, #1
  409364:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409368:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40936c:	f080 809a 	bcs.w	4094a4 <__adddf3+0x240>
  409370:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409374:	bf08      	it	eq
  409376:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40937a:	f150 0000 	adcs.w	r0, r0, #0
  40937e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409382:	ea41 0105 	orr.w	r1, r1, r5
  409386:	bd30      	pop	{r4, r5, pc}
  409388:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40938c:	4140      	adcs	r0, r0
  40938e:	eb41 0101 	adc.w	r1, r1, r1
  409392:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409396:	f1a4 0401 	sub.w	r4, r4, #1
  40939a:	d1e9      	bne.n	409370 <__adddf3+0x10c>
  40939c:	f091 0f00 	teq	r1, #0
  4093a0:	bf04      	itt	eq
  4093a2:	4601      	moveq	r1, r0
  4093a4:	2000      	moveq	r0, #0
  4093a6:	fab1 f381 	clz	r3, r1
  4093aa:	bf08      	it	eq
  4093ac:	3320      	addeq	r3, #32
  4093ae:	f1a3 030b 	sub.w	r3, r3, #11
  4093b2:	f1b3 0220 	subs.w	r2, r3, #32
  4093b6:	da0c      	bge.n	4093d2 <__adddf3+0x16e>
  4093b8:	320c      	adds	r2, #12
  4093ba:	dd08      	ble.n	4093ce <__adddf3+0x16a>
  4093bc:	f102 0c14 	add.w	ip, r2, #20
  4093c0:	f1c2 020c 	rsb	r2, r2, #12
  4093c4:	fa01 f00c 	lsl.w	r0, r1, ip
  4093c8:	fa21 f102 	lsr.w	r1, r1, r2
  4093cc:	e00c      	b.n	4093e8 <__adddf3+0x184>
  4093ce:	f102 0214 	add.w	r2, r2, #20
  4093d2:	bfd8      	it	le
  4093d4:	f1c2 0c20 	rsble	ip, r2, #32
  4093d8:	fa01 f102 	lsl.w	r1, r1, r2
  4093dc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4093e0:	bfdc      	itt	le
  4093e2:	ea41 010c 	orrle.w	r1, r1, ip
  4093e6:	4090      	lslle	r0, r2
  4093e8:	1ae4      	subs	r4, r4, r3
  4093ea:	bfa2      	ittt	ge
  4093ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4093f0:	4329      	orrge	r1, r5
  4093f2:	bd30      	popge	{r4, r5, pc}
  4093f4:	ea6f 0404 	mvn.w	r4, r4
  4093f8:	3c1f      	subs	r4, #31
  4093fa:	da1c      	bge.n	409436 <__adddf3+0x1d2>
  4093fc:	340c      	adds	r4, #12
  4093fe:	dc0e      	bgt.n	40941e <__adddf3+0x1ba>
  409400:	f104 0414 	add.w	r4, r4, #20
  409404:	f1c4 0220 	rsb	r2, r4, #32
  409408:	fa20 f004 	lsr.w	r0, r0, r4
  40940c:	fa01 f302 	lsl.w	r3, r1, r2
  409410:	ea40 0003 	orr.w	r0, r0, r3
  409414:	fa21 f304 	lsr.w	r3, r1, r4
  409418:	ea45 0103 	orr.w	r1, r5, r3
  40941c:	bd30      	pop	{r4, r5, pc}
  40941e:	f1c4 040c 	rsb	r4, r4, #12
  409422:	f1c4 0220 	rsb	r2, r4, #32
  409426:	fa20 f002 	lsr.w	r0, r0, r2
  40942a:	fa01 f304 	lsl.w	r3, r1, r4
  40942e:	ea40 0003 	orr.w	r0, r0, r3
  409432:	4629      	mov	r1, r5
  409434:	bd30      	pop	{r4, r5, pc}
  409436:	fa21 f004 	lsr.w	r0, r1, r4
  40943a:	4629      	mov	r1, r5
  40943c:	bd30      	pop	{r4, r5, pc}
  40943e:	f094 0f00 	teq	r4, #0
  409442:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  409446:	bf06      	itte	eq
  409448:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40944c:	3401      	addeq	r4, #1
  40944e:	3d01      	subne	r5, #1
  409450:	e74e      	b.n	4092f0 <__adddf3+0x8c>
  409452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409456:	bf18      	it	ne
  409458:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40945c:	d029      	beq.n	4094b2 <__adddf3+0x24e>
  40945e:	ea94 0f05 	teq	r4, r5
  409462:	bf08      	it	eq
  409464:	ea90 0f02 	teqeq	r0, r2
  409468:	d005      	beq.n	409476 <__adddf3+0x212>
  40946a:	ea54 0c00 	orrs.w	ip, r4, r0
  40946e:	bf04      	itt	eq
  409470:	4619      	moveq	r1, r3
  409472:	4610      	moveq	r0, r2
  409474:	bd30      	pop	{r4, r5, pc}
  409476:	ea91 0f03 	teq	r1, r3
  40947a:	bf1e      	ittt	ne
  40947c:	2100      	movne	r1, #0
  40947e:	2000      	movne	r0, #0
  409480:	bd30      	popne	{r4, r5, pc}
  409482:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409486:	d105      	bne.n	409494 <__adddf3+0x230>
  409488:	0040      	lsls	r0, r0, #1
  40948a:	4149      	adcs	r1, r1
  40948c:	bf28      	it	cs
  40948e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409492:	bd30      	pop	{r4, r5, pc}
  409494:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409498:	bf3c      	itt	cc
  40949a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40949e:	bd30      	popcc	{r4, r5, pc}
  4094a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4094a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4094a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4094ac:	f04f 0000 	mov.w	r0, #0
  4094b0:	bd30      	pop	{r4, r5, pc}
  4094b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4094b6:	bf1a      	itte	ne
  4094b8:	4619      	movne	r1, r3
  4094ba:	4610      	movne	r0, r2
  4094bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4094c0:	bf1c      	itt	ne
  4094c2:	460b      	movne	r3, r1
  4094c4:	4602      	movne	r2, r0
  4094c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4094ca:	bf06      	itte	eq
  4094cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4094d0:	ea91 0f03 	teqeq	r1, r3
  4094d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4094d8:	bd30      	pop	{r4, r5, pc}
  4094da:	bf00      	nop

004094dc <__aeabi_ui2d>:
  4094dc:	f090 0f00 	teq	r0, #0
  4094e0:	bf04      	itt	eq
  4094e2:	2100      	moveq	r1, #0
  4094e4:	4770      	bxeq	lr
  4094e6:	b530      	push	{r4, r5, lr}
  4094e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4094ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4094f0:	f04f 0500 	mov.w	r5, #0
  4094f4:	f04f 0100 	mov.w	r1, #0
  4094f8:	e750      	b.n	40939c <__adddf3+0x138>
  4094fa:	bf00      	nop

004094fc <__aeabi_i2d>:
  4094fc:	f090 0f00 	teq	r0, #0
  409500:	bf04      	itt	eq
  409502:	2100      	moveq	r1, #0
  409504:	4770      	bxeq	lr
  409506:	b530      	push	{r4, r5, lr}
  409508:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40950c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409510:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  409514:	bf48      	it	mi
  409516:	4240      	negmi	r0, r0
  409518:	f04f 0100 	mov.w	r1, #0
  40951c:	e73e      	b.n	40939c <__adddf3+0x138>
  40951e:	bf00      	nop

00409520 <__aeabi_f2d>:
  409520:	0042      	lsls	r2, r0, #1
  409522:	ea4f 01e2 	mov.w	r1, r2, asr #3
  409526:	ea4f 0131 	mov.w	r1, r1, rrx
  40952a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40952e:	bf1f      	itttt	ne
  409530:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  409534:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409538:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40953c:	4770      	bxne	lr
  40953e:	f092 0f00 	teq	r2, #0
  409542:	bf14      	ite	ne
  409544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409548:	4770      	bxeq	lr
  40954a:	b530      	push	{r4, r5, lr}
  40954c:	f44f 7460 	mov.w	r4, #896	; 0x380
  409550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409558:	e720      	b.n	40939c <__adddf3+0x138>
  40955a:	bf00      	nop

0040955c <__aeabi_ul2d>:
  40955c:	ea50 0201 	orrs.w	r2, r0, r1
  409560:	bf08      	it	eq
  409562:	4770      	bxeq	lr
  409564:	b530      	push	{r4, r5, lr}
  409566:	f04f 0500 	mov.w	r5, #0
  40956a:	e00a      	b.n	409582 <__aeabi_l2d+0x16>

0040956c <__aeabi_l2d>:
  40956c:	ea50 0201 	orrs.w	r2, r0, r1
  409570:	bf08      	it	eq
  409572:	4770      	bxeq	lr
  409574:	b530      	push	{r4, r5, lr}
  409576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40957a:	d502      	bpl.n	409582 <__aeabi_l2d+0x16>
  40957c:	4240      	negs	r0, r0
  40957e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409582:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409586:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40958a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40958e:	f43f aedc 	beq.w	40934a <__adddf3+0xe6>
  409592:	f04f 0203 	mov.w	r2, #3
  409596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40959a:	bf18      	it	ne
  40959c:	3203      	addne	r2, #3
  40959e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4095a2:	bf18      	it	ne
  4095a4:	3203      	addne	r2, #3
  4095a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4095aa:	f1c2 0320 	rsb	r3, r2, #32
  4095ae:	fa00 fc03 	lsl.w	ip, r0, r3
  4095b2:	fa20 f002 	lsr.w	r0, r0, r2
  4095b6:	fa01 fe03 	lsl.w	lr, r1, r3
  4095ba:	ea40 000e 	orr.w	r0, r0, lr
  4095be:	fa21 f102 	lsr.w	r1, r1, r2
  4095c2:	4414      	add	r4, r2
  4095c4:	e6c1      	b.n	40934a <__adddf3+0xe6>
  4095c6:	bf00      	nop

004095c8 <__aeabi_dmul>:
  4095c8:	b570      	push	{r4, r5, r6, lr}
  4095ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4095ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4095d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4095d6:	bf1d      	ittte	ne
  4095d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4095dc:	ea94 0f0c 	teqne	r4, ip
  4095e0:	ea95 0f0c 	teqne	r5, ip
  4095e4:	f000 f8de 	bleq	4097a4 <__aeabi_dmul+0x1dc>
  4095e8:	442c      	add	r4, r5
  4095ea:	ea81 0603 	eor.w	r6, r1, r3
  4095ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4095f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4095f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4095fa:	bf18      	it	ne
  4095fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  409600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409608:	d038      	beq.n	40967c <__aeabi_dmul+0xb4>
  40960a:	fba0 ce02 	umull	ip, lr, r0, r2
  40960e:	f04f 0500 	mov.w	r5, #0
  409612:	fbe1 e502 	umlal	lr, r5, r1, r2
  409616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40961a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40961e:	f04f 0600 	mov.w	r6, #0
  409622:	fbe1 5603 	umlal	r5, r6, r1, r3
  409626:	f09c 0f00 	teq	ip, #0
  40962a:	bf18      	it	ne
  40962c:	f04e 0e01 	orrne.w	lr, lr, #1
  409630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  409634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  409638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40963c:	d204      	bcs.n	409648 <__aeabi_dmul+0x80>
  40963e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  409642:	416d      	adcs	r5, r5
  409644:	eb46 0606 	adc.w	r6, r6, r6
  409648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40964c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  409650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  409654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  409658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40965c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409660:	bf88      	it	hi
  409662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409666:	d81e      	bhi.n	4096a6 <__aeabi_dmul+0xde>
  409668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40966c:	bf08      	it	eq
  40966e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  409672:	f150 0000 	adcs.w	r0, r0, #0
  409676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40967a:	bd70      	pop	{r4, r5, r6, pc}
  40967c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409680:	ea46 0101 	orr.w	r1, r6, r1
  409684:	ea40 0002 	orr.w	r0, r0, r2
  409688:	ea81 0103 	eor.w	r1, r1, r3
  40968c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409690:	bfc2      	ittt	gt
  409692:	ebd4 050c 	rsbsgt	r5, r4, ip
  409696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40969a:	bd70      	popgt	{r4, r5, r6, pc}
  40969c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4096a0:	f04f 0e00 	mov.w	lr, #0
  4096a4:	3c01      	subs	r4, #1
  4096a6:	f300 80ab 	bgt.w	409800 <__aeabi_dmul+0x238>
  4096aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4096ae:	bfde      	ittt	le
  4096b0:	2000      	movle	r0, #0
  4096b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4096b6:	bd70      	pople	{r4, r5, r6, pc}
  4096b8:	f1c4 0400 	rsb	r4, r4, #0
  4096bc:	3c20      	subs	r4, #32
  4096be:	da35      	bge.n	40972c <__aeabi_dmul+0x164>
  4096c0:	340c      	adds	r4, #12
  4096c2:	dc1b      	bgt.n	4096fc <__aeabi_dmul+0x134>
  4096c4:	f104 0414 	add.w	r4, r4, #20
  4096c8:	f1c4 0520 	rsb	r5, r4, #32
  4096cc:	fa00 f305 	lsl.w	r3, r0, r5
  4096d0:	fa20 f004 	lsr.w	r0, r0, r4
  4096d4:	fa01 f205 	lsl.w	r2, r1, r5
  4096d8:	ea40 0002 	orr.w	r0, r0, r2
  4096dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4096e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4096e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4096e8:	fa21 f604 	lsr.w	r6, r1, r4
  4096ec:	eb42 0106 	adc.w	r1, r2, r6
  4096f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4096f4:	bf08      	it	eq
  4096f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4096fa:	bd70      	pop	{r4, r5, r6, pc}
  4096fc:	f1c4 040c 	rsb	r4, r4, #12
  409700:	f1c4 0520 	rsb	r5, r4, #32
  409704:	fa00 f304 	lsl.w	r3, r0, r4
  409708:	fa20 f005 	lsr.w	r0, r0, r5
  40970c:	fa01 f204 	lsl.w	r2, r1, r4
  409710:	ea40 0002 	orr.w	r0, r0, r2
  409714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40971c:	f141 0100 	adc.w	r1, r1, #0
  409720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409724:	bf08      	it	eq
  409726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40972a:	bd70      	pop	{r4, r5, r6, pc}
  40972c:	f1c4 0520 	rsb	r5, r4, #32
  409730:	fa00 f205 	lsl.w	r2, r0, r5
  409734:	ea4e 0e02 	orr.w	lr, lr, r2
  409738:	fa20 f304 	lsr.w	r3, r0, r4
  40973c:	fa01 f205 	lsl.w	r2, r1, r5
  409740:	ea43 0302 	orr.w	r3, r3, r2
  409744:	fa21 f004 	lsr.w	r0, r1, r4
  409748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40974c:	fa21 f204 	lsr.w	r2, r1, r4
  409750:	ea20 0002 	bic.w	r0, r0, r2
  409754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  409758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40975c:	bf08      	it	eq
  40975e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409762:	bd70      	pop	{r4, r5, r6, pc}
  409764:	f094 0f00 	teq	r4, #0
  409768:	d10f      	bne.n	40978a <__aeabi_dmul+0x1c2>
  40976a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40976e:	0040      	lsls	r0, r0, #1
  409770:	eb41 0101 	adc.w	r1, r1, r1
  409774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409778:	bf08      	it	eq
  40977a:	3c01      	subeq	r4, #1
  40977c:	d0f7      	beq.n	40976e <__aeabi_dmul+0x1a6>
  40977e:	ea41 0106 	orr.w	r1, r1, r6
  409782:	f095 0f00 	teq	r5, #0
  409786:	bf18      	it	ne
  409788:	4770      	bxne	lr
  40978a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40978e:	0052      	lsls	r2, r2, #1
  409790:	eb43 0303 	adc.w	r3, r3, r3
  409794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409798:	bf08      	it	eq
  40979a:	3d01      	subeq	r5, #1
  40979c:	d0f7      	beq.n	40978e <__aeabi_dmul+0x1c6>
  40979e:	ea43 0306 	orr.w	r3, r3, r6
  4097a2:	4770      	bx	lr
  4097a4:	ea94 0f0c 	teq	r4, ip
  4097a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4097ac:	bf18      	it	ne
  4097ae:	ea95 0f0c 	teqne	r5, ip
  4097b2:	d00c      	beq.n	4097ce <__aeabi_dmul+0x206>
  4097b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4097b8:	bf18      	it	ne
  4097ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4097be:	d1d1      	bne.n	409764 <__aeabi_dmul+0x19c>
  4097c0:	ea81 0103 	eor.w	r1, r1, r3
  4097c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4097c8:	f04f 0000 	mov.w	r0, #0
  4097cc:	bd70      	pop	{r4, r5, r6, pc}
  4097ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4097d2:	bf06      	itte	eq
  4097d4:	4610      	moveq	r0, r2
  4097d6:	4619      	moveq	r1, r3
  4097d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4097dc:	d019      	beq.n	409812 <__aeabi_dmul+0x24a>
  4097de:	ea94 0f0c 	teq	r4, ip
  4097e2:	d102      	bne.n	4097ea <__aeabi_dmul+0x222>
  4097e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4097e8:	d113      	bne.n	409812 <__aeabi_dmul+0x24a>
  4097ea:	ea95 0f0c 	teq	r5, ip
  4097ee:	d105      	bne.n	4097fc <__aeabi_dmul+0x234>
  4097f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4097f4:	bf1c      	itt	ne
  4097f6:	4610      	movne	r0, r2
  4097f8:	4619      	movne	r1, r3
  4097fa:	d10a      	bne.n	409812 <__aeabi_dmul+0x24a>
  4097fc:	ea81 0103 	eor.w	r1, r1, r3
  409800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40980c:	f04f 0000 	mov.w	r0, #0
  409810:	bd70      	pop	{r4, r5, r6, pc}
  409812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40981a:	bd70      	pop	{r4, r5, r6, pc}

0040981c <__aeabi_ddiv>:
  40981c:	b570      	push	{r4, r5, r6, lr}
  40981e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40982a:	bf1d      	ittte	ne
  40982c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409830:	ea94 0f0c 	teqne	r4, ip
  409834:	ea95 0f0c 	teqne	r5, ip
  409838:	f000 f8a7 	bleq	40998a <__aeabi_ddiv+0x16e>
  40983c:	eba4 0405 	sub.w	r4, r4, r5
  409840:	ea81 0e03 	eor.w	lr, r1, r3
  409844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409848:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40984c:	f000 8088 	beq.w	409960 <__aeabi_ddiv+0x144>
  409850:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  409858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40985c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  409860:	ea4f 2202 	mov.w	r2, r2, lsl #8
  409864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  409868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40986c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  409870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  409874:	429d      	cmp	r5, r3
  409876:	bf08      	it	eq
  409878:	4296      	cmpeq	r6, r2
  40987a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40987e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  409882:	d202      	bcs.n	40988a <__aeabi_ddiv+0x6e>
  409884:	085b      	lsrs	r3, r3, #1
  409886:	ea4f 0232 	mov.w	r2, r2, rrx
  40988a:	1ab6      	subs	r6, r6, r2
  40988c:	eb65 0503 	sbc.w	r5, r5, r3
  409890:	085b      	lsrs	r3, r3, #1
  409892:	ea4f 0232 	mov.w	r2, r2, rrx
  409896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40989a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40989e:	ebb6 0e02 	subs.w	lr, r6, r2
  4098a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4098a6:	bf22      	ittt	cs
  4098a8:	1ab6      	subcs	r6, r6, r2
  4098aa:	4675      	movcs	r5, lr
  4098ac:	ea40 000c 	orrcs.w	r0, r0, ip
  4098b0:	085b      	lsrs	r3, r3, #1
  4098b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4098b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4098ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4098be:	bf22      	ittt	cs
  4098c0:	1ab6      	subcs	r6, r6, r2
  4098c2:	4675      	movcs	r5, lr
  4098c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4098c8:	085b      	lsrs	r3, r3, #1
  4098ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4098ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4098d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4098d6:	bf22      	ittt	cs
  4098d8:	1ab6      	subcs	r6, r6, r2
  4098da:	4675      	movcs	r5, lr
  4098dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4098e0:	085b      	lsrs	r3, r3, #1
  4098e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4098e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4098ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4098ee:	bf22      	ittt	cs
  4098f0:	1ab6      	subcs	r6, r6, r2
  4098f2:	4675      	movcs	r5, lr
  4098f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4098f8:	ea55 0e06 	orrs.w	lr, r5, r6
  4098fc:	d018      	beq.n	409930 <__aeabi_ddiv+0x114>
  4098fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  409902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  409906:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40990a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40990e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  409912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  409916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40991a:	d1c0      	bne.n	40989e <__aeabi_ddiv+0x82>
  40991c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409920:	d10b      	bne.n	40993a <__aeabi_ddiv+0x11e>
  409922:	ea41 0100 	orr.w	r1, r1, r0
  409926:	f04f 0000 	mov.w	r0, #0
  40992a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40992e:	e7b6      	b.n	40989e <__aeabi_ddiv+0x82>
  409930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409934:	bf04      	itt	eq
  409936:	4301      	orreq	r1, r0
  409938:	2000      	moveq	r0, #0
  40993a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40993e:	bf88      	it	hi
  409940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409944:	f63f aeaf 	bhi.w	4096a6 <__aeabi_dmul+0xde>
  409948:	ebb5 0c03 	subs.w	ip, r5, r3
  40994c:	bf04      	itt	eq
  40994e:	ebb6 0c02 	subseq.w	ip, r6, r2
  409952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409956:	f150 0000 	adcs.w	r0, r0, #0
  40995a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40995e:	bd70      	pop	{r4, r5, r6, pc}
  409960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  409964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  409968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40996c:	bfc2      	ittt	gt
  40996e:	ebd4 050c 	rsbsgt	r5, r4, ip
  409972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409976:	bd70      	popgt	{r4, r5, r6, pc}
  409978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40997c:	f04f 0e00 	mov.w	lr, #0
  409980:	3c01      	subs	r4, #1
  409982:	e690      	b.n	4096a6 <__aeabi_dmul+0xde>
  409984:	ea45 0e06 	orr.w	lr, r5, r6
  409988:	e68d      	b.n	4096a6 <__aeabi_dmul+0xde>
  40998a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40998e:	ea94 0f0c 	teq	r4, ip
  409992:	bf08      	it	eq
  409994:	ea95 0f0c 	teqeq	r5, ip
  409998:	f43f af3b 	beq.w	409812 <__aeabi_dmul+0x24a>
  40999c:	ea94 0f0c 	teq	r4, ip
  4099a0:	d10a      	bne.n	4099b8 <__aeabi_ddiv+0x19c>
  4099a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4099a6:	f47f af34 	bne.w	409812 <__aeabi_dmul+0x24a>
  4099aa:	ea95 0f0c 	teq	r5, ip
  4099ae:	f47f af25 	bne.w	4097fc <__aeabi_dmul+0x234>
  4099b2:	4610      	mov	r0, r2
  4099b4:	4619      	mov	r1, r3
  4099b6:	e72c      	b.n	409812 <__aeabi_dmul+0x24a>
  4099b8:	ea95 0f0c 	teq	r5, ip
  4099bc:	d106      	bne.n	4099cc <__aeabi_ddiv+0x1b0>
  4099be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4099c2:	f43f aefd 	beq.w	4097c0 <__aeabi_dmul+0x1f8>
  4099c6:	4610      	mov	r0, r2
  4099c8:	4619      	mov	r1, r3
  4099ca:	e722      	b.n	409812 <__aeabi_dmul+0x24a>
  4099cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4099d0:	bf18      	it	ne
  4099d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4099d6:	f47f aec5 	bne.w	409764 <__aeabi_dmul+0x19c>
  4099da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4099de:	f47f af0d 	bne.w	4097fc <__aeabi_dmul+0x234>
  4099e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4099e6:	f47f aeeb 	bne.w	4097c0 <__aeabi_dmul+0x1f8>
  4099ea:	e712      	b.n	409812 <__aeabi_dmul+0x24a>

004099ec <__gedf2>:
  4099ec:	f04f 3cff 	mov.w	ip, #4294967295
  4099f0:	e006      	b.n	409a00 <__cmpdf2+0x4>
  4099f2:	bf00      	nop

004099f4 <__ledf2>:
  4099f4:	f04f 0c01 	mov.w	ip, #1
  4099f8:	e002      	b.n	409a00 <__cmpdf2+0x4>
  4099fa:	bf00      	nop

004099fc <__cmpdf2>:
  4099fc:	f04f 0c01 	mov.w	ip, #1
  409a00:	f84d cd04 	str.w	ip, [sp, #-4]!
  409a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409a10:	bf18      	it	ne
  409a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409a16:	d01b      	beq.n	409a50 <__cmpdf2+0x54>
  409a18:	b001      	add	sp, #4
  409a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  409a1e:	bf0c      	ite	eq
  409a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409a24:	ea91 0f03 	teqne	r1, r3
  409a28:	bf02      	ittt	eq
  409a2a:	ea90 0f02 	teqeq	r0, r2
  409a2e:	2000      	moveq	r0, #0
  409a30:	4770      	bxeq	lr
  409a32:	f110 0f00 	cmn.w	r0, #0
  409a36:	ea91 0f03 	teq	r1, r3
  409a3a:	bf58      	it	pl
  409a3c:	4299      	cmppl	r1, r3
  409a3e:	bf08      	it	eq
  409a40:	4290      	cmpeq	r0, r2
  409a42:	bf2c      	ite	cs
  409a44:	17d8      	asrcs	r0, r3, #31
  409a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409a4a:	f040 0001 	orr.w	r0, r0, #1
  409a4e:	4770      	bx	lr
  409a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409a58:	d102      	bne.n	409a60 <__cmpdf2+0x64>
  409a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409a5e:	d107      	bne.n	409a70 <__cmpdf2+0x74>
  409a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409a68:	d1d6      	bne.n	409a18 <__cmpdf2+0x1c>
  409a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409a6e:	d0d3      	beq.n	409a18 <__cmpdf2+0x1c>
  409a70:	f85d 0b04 	ldr.w	r0, [sp], #4
  409a74:	4770      	bx	lr
  409a76:	bf00      	nop

00409a78 <__aeabi_cdrcmple>:
  409a78:	4684      	mov	ip, r0
  409a7a:	4610      	mov	r0, r2
  409a7c:	4662      	mov	r2, ip
  409a7e:	468c      	mov	ip, r1
  409a80:	4619      	mov	r1, r3
  409a82:	4663      	mov	r3, ip
  409a84:	e000      	b.n	409a88 <__aeabi_cdcmpeq>
  409a86:	bf00      	nop

00409a88 <__aeabi_cdcmpeq>:
  409a88:	b501      	push	{r0, lr}
  409a8a:	f7ff ffb7 	bl	4099fc <__cmpdf2>
  409a8e:	2800      	cmp	r0, #0
  409a90:	bf48      	it	mi
  409a92:	f110 0f00 	cmnmi.w	r0, #0
  409a96:	bd01      	pop	{r0, pc}

00409a98 <__aeabi_dcmpeq>:
  409a98:	f84d ed08 	str.w	lr, [sp, #-8]!
  409a9c:	f7ff fff4 	bl	409a88 <__aeabi_cdcmpeq>
  409aa0:	bf0c      	ite	eq
  409aa2:	2001      	moveq	r0, #1
  409aa4:	2000      	movne	r0, #0
  409aa6:	f85d fb08 	ldr.w	pc, [sp], #8
  409aaa:	bf00      	nop

00409aac <__aeabi_dcmplt>:
  409aac:	f84d ed08 	str.w	lr, [sp, #-8]!
  409ab0:	f7ff ffea 	bl	409a88 <__aeabi_cdcmpeq>
  409ab4:	bf34      	ite	cc
  409ab6:	2001      	movcc	r0, #1
  409ab8:	2000      	movcs	r0, #0
  409aba:	f85d fb08 	ldr.w	pc, [sp], #8
  409abe:	bf00      	nop

00409ac0 <__aeabi_dcmple>:
  409ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
  409ac4:	f7ff ffe0 	bl	409a88 <__aeabi_cdcmpeq>
  409ac8:	bf94      	ite	ls
  409aca:	2001      	movls	r0, #1
  409acc:	2000      	movhi	r0, #0
  409ace:	f85d fb08 	ldr.w	pc, [sp], #8
  409ad2:	bf00      	nop

00409ad4 <__aeabi_dcmpge>:
  409ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
  409ad8:	f7ff ffce 	bl	409a78 <__aeabi_cdrcmple>
  409adc:	bf94      	ite	ls
  409ade:	2001      	movls	r0, #1
  409ae0:	2000      	movhi	r0, #0
  409ae2:	f85d fb08 	ldr.w	pc, [sp], #8
  409ae6:	bf00      	nop

00409ae8 <__aeabi_dcmpgt>:
  409ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
  409aec:	f7ff ffc4 	bl	409a78 <__aeabi_cdrcmple>
  409af0:	bf34      	ite	cc
  409af2:	2001      	movcc	r0, #1
  409af4:	2000      	movcs	r0, #0
  409af6:	f85d fb08 	ldr.w	pc, [sp], #8
  409afa:	bf00      	nop

00409afc <__aeabi_dcmpun>:
  409afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409b04:	d102      	bne.n	409b0c <__aeabi_dcmpun+0x10>
  409b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409b0a:	d10a      	bne.n	409b22 <__aeabi_dcmpun+0x26>
  409b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409b14:	d102      	bne.n	409b1c <__aeabi_dcmpun+0x20>
  409b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409b1a:	d102      	bne.n	409b22 <__aeabi_dcmpun+0x26>
  409b1c:	f04f 0000 	mov.w	r0, #0
  409b20:	4770      	bx	lr
  409b22:	f04f 0001 	mov.w	r0, #1
  409b26:	4770      	bx	lr

00409b28 <__aeabi_d2iz>:
  409b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409b30:	d215      	bcs.n	409b5e <__aeabi_d2iz+0x36>
  409b32:	d511      	bpl.n	409b58 <__aeabi_d2iz+0x30>
  409b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409b3c:	d912      	bls.n	409b64 <__aeabi_d2iz+0x3c>
  409b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  409b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  409b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409b4e:	fa23 f002 	lsr.w	r0, r3, r2
  409b52:	bf18      	it	ne
  409b54:	4240      	negne	r0, r0
  409b56:	4770      	bx	lr
  409b58:	f04f 0000 	mov.w	r0, #0
  409b5c:	4770      	bx	lr
  409b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  409b62:	d105      	bne.n	409b70 <__aeabi_d2iz+0x48>
  409b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409b68:	bf08      	it	eq
  409b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409b6e:	4770      	bx	lr
  409b70:	f04f 0000 	mov.w	r0, #0
  409b74:	4770      	bx	lr
  409b76:	bf00      	nop

00409b78 <__aeabi_uldivmod>:
  409b78:	b953      	cbnz	r3, 409b90 <__aeabi_uldivmod+0x18>
  409b7a:	b94a      	cbnz	r2, 409b90 <__aeabi_uldivmod+0x18>
  409b7c:	2900      	cmp	r1, #0
  409b7e:	bf08      	it	eq
  409b80:	2800      	cmpeq	r0, #0
  409b82:	bf1c      	itt	ne
  409b84:	f04f 31ff 	movne.w	r1, #4294967295
  409b88:	f04f 30ff 	movne.w	r0, #4294967295
  409b8c:	f000 b97a 	b.w	409e84 <__aeabi_idiv0>
  409b90:	f1ad 0c08 	sub.w	ip, sp, #8
  409b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409b98:	f000 f806 	bl	409ba8 <__udivmoddi4>
  409b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
  409ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409ba4:	b004      	add	sp, #16
  409ba6:	4770      	bx	lr

00409ba8 <__udivmoddi4>:
  409ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409bac:	468c      	mov	ip, r1
  409bae:	460d      	mov	r5, r1
  409bb0:	4604      	mov	r4, r0
  409bb2:	9e08      	ldr	r6, [sp, #32]
  409bb4:	2b00      	cmp	r3, #0
  409bb6:	d151      	bne.n	409c5c <__udivmoddi4+0xb4>
  409bb8:	428a      	cmp	r2, r1
  409bba:	4617      	mov	r7, r2
  409bbc:	d96d      	bls.n	409c9a <__udivmoddi4+0xf2>
  409bbe:	fab2 fe82 	clz	lr, r2
  409bc2:	f1be 0f00 	cmp.w	lr, #0
  409bc6:	d00b      	beq.n	409be0 <__udivmoddi4+0x38>
  409bc8:	f1ce 0c20 	rsb	ip, lr, #32
  409bcc:	fa01 f50e 	lsl.w	r5, r1, lr
  409bd0:	fa20 fc0c 	lsr.w	ip, r0, ip
  409bd4:	fa02 f70e 	lsl.w	r7, r2, lr
  409bd8:	ea4c 0c05 	orr.w	ip, ip, r5
  409bdc:	fa00 f40e 	lsl.w	r4, r0, lr
  409be0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409be4:	0c25      	lsrs	r5, r4, #16
  409be6:	fbbc f8fa 	udiv	r8, ip, sl
  409bea:	fa1f f987 	uxth.w	r9, r7
  409bee:	fb0a cc18 	mls	ip, sl, r8, ip
  409bf2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409bf6:	fb08 f309 	mul.w	r3, r8, r9
  409bfa:	42ab      	cmp	r3, r5
  409bfc:	d90a      	bls.n	409c14 <__udivmoddi4+0x6c>
  409bfe:	19ed      	adds	r5, r5, r7
  409c00:	f108 32ff 	add.w	r2, r8, #4294967295
  409c04:	f080 8123 	bcs.w	409e4e <__udivmoddi4+0x2a6>
  409c08:	42ab      	cmp	r3, r5
  409c0a:	f240 8120 	bls.w	409e4e <__udivmoddi4+0x2a6>
  409c0e:	f1a8 0802 	sub.w	r8, r8, #2
  409c12:	443d      	add	r5, r7
  409c14:	1aed      	subs	r5, r5, r3
  409c16:	b2a4      	uxth	r4, r4
  409c18:	fbb5 f0fa 	udiv	r0, r5, sl
  409c1c:	fb0a 5510 	mls	r5, sl, r0, r5
  409c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409c24:	fb00 f909 	mul.w	r9, r0, r9
  409c28:	45a1      	cmp	r9, r4
  409c2a:	d909      	bls.n	409c40 <__udivmoddi4+0x98>
  409c2c:	19e4      	adds	r4, r4, r7
  409c2e:	f100 33ff 	add.w	r3, r0, #4294967295
  409c32:	f080 810a 	bcs.w	409e4a <__udivmoddi4+0x2a2>
  409c36:	45a1      	cmp	r9, r4
  409c38:	f240 8107 	bls.w	409e4a <__udivmoddi4+0x2a2>
  409c3c:	3802      	subs	r0, #2
  409c3e:	443c      	add	r4, r7
  409c40:	eba4 0409 	sub.w	r4, r4, r9
  409c44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409c48:	2100      	movs	r1, #0
  409c4a:	2e00      	cmp	r6, #0
  409c4c:	d061      	beq.n	409d12 <__udivmoddi4+0x16a>
  409c4e:	fa24 f40e 	lsr.w	r4, r4, lr
  409c52:	2300      	movs	r3, #0
  409c54:	6034      	str	r4, [r6, #0]
  409c56:	6073      	str	r3, [r6, #4]
  409c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409c5c:	428b      	cmp	r3, r1
  409c5e:	d907      	bls.n	409c70 <__udivmoddi4+0xc8>
  409c60:	2e00      	cmp	r6, #0
  409c62:	d054      	beq.n	409d0e <__udivmoddi4+0x166>
  409c64:	2100      	movs	r1, #0
  409c66:	e886 0021 	stmia.w	r6, {r0, r5}
  409c6a:	4608      	mov	r0, r1
  409c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409c70:	fab3 f183 	clz	r1, r3
  409c74:	2900      	cmp	r1, #0
  409c76:	f040 808e 	bne.w	409d96 <__udivmoddi4+0x1ee>
  409c7a:	42ab      	cmp	r3, r5
  409c7c:	d302      	bcc.n	409c84 <__udivmoddi4+0xdc>
  409c7e:	4282      	cmp	r2, r0
  409c80:	f200 80fa 	bhi.w	409e78 <__udivmoddi4+0x2d0>
  409c84:	1a84      	subs	r4, r0, r2
  409c86:	eb65 0503 	sbc.w	r5, r5, r3
  409c8a:	2001      	movs	r0, #1
  409c8c:	46ac      	mov	ip, r5
  409c8e:	2e00      	cmp	r6, #0
  409c90:	d03f      	beq.n	409d12 <__udivmoddi4+0x16a>
  409c92:	e886 1010 	stmia.w	r6, {r4, ip}
  409c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409c9a:	b912      	cbnz	r2, 409ca2 <__udivmoddi4+0xfa>
  409c9c:	2701      	movs	r7, #1
  409c9e:	fbb7 f7f2 	udiv	r7, r7, r2
  409ca2:	fab7 fe87 	clz	lr, r7
  409ca6:	f1be 0f00 	cmp.w	lr, #0
  409caa:	d134      	bne.n	409d16 <__udivmoddi4+0x16e>
  409cac:	1beb      	subs	r3, r5, r7
  409cae:	0c3a      	lsrs	r2, r7, #16
  409cb0:	fa1f fc87 	uxth.w	ip, r7
  409cb4:	2101      	movs	r1, #1
  409cb6:	fbb3 f8f2 	udiv	r8, r3, r2
  409cba:	0c25      	lsrs	r5, r4, #16
  409cbc:	fb02 3318 	mls	r3, r2, r8, r3
  409cc0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409cc4:	fb0c f308 	mul.w	r3, ip, r8
  409cc8:	42ab      	cmp	r3, r5
  409cca:	d907      	bls.n	409cdc <__udivmoddi4+0x134>
  409ccc:	19ed      	adds	r5, r5, r7
  409cce:	f108 30ff 	add.w	r0, r8, #4294967295
  409cd2:	d202      	bcs.n	409cda <__udivmoddi4+0x132>
  409cd4:	42ab      	cmp	r3, r5
  409cd6:	f200 80d1 	bhi.w	409e7c <__udivmoddi4+0x2d4>
  409cda:	4680      	mov	r8, r0
  409cdc:	1aed      	subs	r5, r5, r3
  409cde:	b2a3      	uxth	r3, r4
  409ce0:	fbb5 f0f2 	udiv	r0, r5, r2
  409ce4:	fb02 5510 	mls	r5, r2, r0, r5
  409ce8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409cec:	fb0c fc00 	mul.w	ip, ip, r0
  409cf0:	45a4      	cmp	ip, r4
  409cf2:	d907      	bls.n	409d04 <__udivmoddi4+0x15c>
  409cf4:	19e4      	adds	r4, r4, r7
  409cf6:	f100 33ff 	add.w	r3, r0, #4294967295
  409cfa:	d202      	bcs.n	409d02 <__udivmoddi4+0x15a>
  409cfc:	45a4      	cmp	ip, r4
  409cfe:	f200 80b8 	bhi.w	409e72 <__udivmoddi4+0x2ca>
  409d02:	4618      	mov	r0, r3
  409d04:	eba4 040c 	sub.w	r4, r4, ip
  409d08:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409d0c:	e79d      	b.n	409c4a <__udivmoddi4+0xa2>
  409d0e:	4631      	mov	r1, r6
  409d10:	4630      	mov	r0, r6
  409d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409d16:	f1ce 0420 	rsb	r4, lr, #32
  409d1a:	fa05 f30e 	lsl.w	r3, r5, lr
  409d1e:	fa07 f70e 	lsl.w	r7, r7, lr
  409d22:	fa20 f804 	lsr.w	r8, r0, r4
  409d26:	0c3a      	lsrs	r2, r7, #16
  409d28:	fa25 f404 	lsr.w	r4, r5, r4
  409d2c:	ea48 0803 	orr.w	r8, r8, r3
  409d30:	fbb4 f1f2 	udiv	r1, r4, r2
  409d34:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409d38:	fb02 4411 	mls	r4, r2, r1, r4
  409d3c:	fa1f fc87 	uxth.w	ip, r7
  409d40:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409d44:	fb01 f30c 	mul.w	r3, r1, ip
  409d48:	42ab      	cmp	r3, r5
  409d4a:	fa00 f40e 	lsl.w	r4, r0, lr
  409d4e:	d909      	bls.n	409d64 <__udivmoddi4+0x1bc>
  409d50:	19ed      	adds	r5, r5, r7
  409d52:	f101 30ff 	add.w	r0, r1, #4294967295
  409d56:	f080 808a 	bcs.w	409e6e <__udivmoddi4+0x2c6>
  409d5a:	42ab      	cmp	r3, r5
  409d5c:	f240 8087 	bls.w	409e6e <__udivmoddi4+0x2c6>
  409d60:	3902      	subs	r1, #2
  409d62:	443d      	add	r5, r7
  409d64:	1aeb      	subs	r3, r5, r3
  409d66:	fa1f f588 	uxth.w	r5, r8
  409d6a:	fbb3 f0f2 	udiv	r0, r3, r2
  409d6e:	fb02 3310 	mls	r3, r2, r0, r3
  409d72:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409d76:	fb00 f30c 	mul.w	r3, r0, ip
  409d7a:	42ab      	cmp	r3, r5
  409d7c:	d907      	bls.n	409d8e <__udivmoddi4+0x1e6>
  409d7e:	19ed      	adds	r5, r5, r7
  409d80:	f100 38ff 	add.w	r8, r0, #4294967295
  409d84:	d26f      	bcs.n	409e66 <__udivmoddi4+0x2be>
  409d86:	42ab      	cmp	r3, r5
  409d88:	d96d      	bls.n	409e66 <__udivmoddi4+0x2be>
  409d8a:	3802      	subs	r0, #2
  409d8c:	443d      	add	r5, r7
  409d8e:	1aeb      	subs	r3, r5, r3
  409d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409d94:	e78f      	b.n	409cb6 <__udivmoddi4+0x10e>
  409d96:	f1c1 0720 	rsb	r7, r1, #32
  409d9a:	fa22 f807 	lsr.w	r8, r2, r7
  409d9e:	408b      	lsls	r3, r1
  409da0:	fa05 f401 	lsl.w	r4, r5, r1
  409da4:	ea48 0303 	orr.w	r3, r8, r3
  409da8:	fa20 fe07 	lsr.w	lr, r0, r7
  409dac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409db0:	40fd      	lsrs	r5, r7
  409db2:	ea4e 0e04 	orr.w	lr, lr, r4
  409db6:	fbb5 f9fc 	udiv	r9, r5, ip
  409dba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409dbe:	fb0c 5519 	mls	r5, ip, r9, r5
  409dc2:	fa1f f883 	uxth.w	r8, r3
  409dc6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409dca:	fb09 f408 	mul.w	r4, r9, r8
  409dce:	42ac      	cmp	r4, r5
  409dd0:	fa02 f201 	lsl.w	r2, r2, r1
  409dd4:	fa00 fa01 	lsl.w	sl, r0, r1
  409dd8:	d908      	bls.n	409dec <__udivmoddi4+0x244>
  409dda:	18ed      	adds	r5, r5, r3
  409ddc:	f109 30ff 	add.w	r0, r9, #4294967295
  409de0:	d243      	bcs.n	409e6a <__udivmoddi4+0x2c2>
  409de2:	42ac      	cmp	r4, r5
  409de4:	d941      	bls.n	409e6a <__udivmoddi4+0x2c2>
  409de6:	f1a9 0902 	sub.w	r9, r9, #2
  409dea:	441d      	add	r5, r3
  409dec:	1b2d      	subs	r5, r5, r4
  409dee:	fa1f fe8e 	uxth.w	lr, lr
  409df2:	fbb5 f0fc 	udiv	r0, r5, ip
  409df6:	fb0c 5510 	mls	r5, ip, r0, r5
  409dfa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409dfe:	fb00 f808 	mul.w	r8, r0, r8
  409e02:	45a0      	cmp	r8, r4
  409e04:	d907      	bls.n	409e16 <__udivmoddi4+0x26e>
  409e06:	18e4      	adds	r4, r4, r3
  409e08:	f100 35ff 	add.w	r5, r0, #4294967295
  409e0c:	d229      	bcs.n	409e62 <__udivmoddi4+0x2ba>
  409e0e:	45a0      	cmp	r8, r4
  409e10:	d927      	bls.n	409e62 <__udivmoddi4+0x2ba>
  409e12:	3802      	subs	r0, #2
  409e14:	441c      	add	r4, r3
  409e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  409e1a:	eba4 0408 	sub.w	r4, r4, r8
  409e1e:	fba0 8902 	umull	r8, r9, r0, r2
  409e22:	454c      	cmp	r4, r9
  409e24:	46c6      	mov	lr, r8
  409e26:	464d      	mov	r5, r9
  409e28:	d315      	bcc.n	409e56 <__udivmoddi4+0x2ae>
  409e2a:	d012      	beq.n	409e52 <__udivmoddi4+0x2aa>
  409e2c:	b156      	cbz	r6, 409e44 <__udivmoddi4+0x29c>
  409e2e:	ebba 030e 	subs.w	r3, sl, lr
  409e32:	eb64 0405 	sbc.w	r4, r4, r5
  409e36:	fa04 f707 	lsl.w	r7, r4, r7
  409e3a:	40cb      	lsrs	r3, r1
  409e3c:	431f      	orrs	r7, r3
  409e3e:	40cc      	lsrs	r4, r1
  409e40:	6037      	str	r7, [r6, #0]
  409e42:	6074      	str	r4, [r6, #4]
  409e44:	2100      	movs	r1, #0
  409e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409e4a:	4618      	mov	r0, r3
  409e4c:	e6f8      	b.n	409c40 <__udivmoddi4+0x98>
  409e4e:	4690      	mov	r8, r2
  409e50:	e6e0      	b.n	409c14 <__udivmoddi4+0x6c>
  409e52:	45c2      	cmp	sl, r8
  409e54:	d2ea      	bcs.n	409e2c <__udivmoddi4+0x284>
  409e56:	ebb8 0e02 	subs.w	lr, r8, r2
  409e5a:	eb69 0503 	sbc.w	r5, r9, r3
  409e5e:	3801      	subs	r0, #1
  409e60:	e7e4      	b.n	409e2c <__udivmoddi4+0x284>
  409e62:	4628      	mov	r0, r5
  409e64:	e7d7      	b.n	409e16 <__udivmoddi4+0x26e>
  409e66:	4640      	mov	r0, r8
  409e68:	e791      	b.n	409d8e <__udivmoddi4+0x1e6>
  409e6a:	4681      	mov	r9, r0
  409e6c:	e7be      	b.n	409dec <__udivmoddi4+0x244>
  409e6e:	4601      	mov	r1, r0
  409e70:	e778      	b.n	409d64 <__udivmoddi4+0x1bc>
  409e72:	3802      	subs	r0, #2
  409e74:	443c      	add	r4, r7
  409e76:	e745      	b.n	409d04 <__udivmoddi4+0x15c>
  409e78:	4608      	mov	r0, r1
  409e7a:	e708      	b.n	409c8e <__udivmoddi4+0xe6>
  409e7c:	f1a8 0802 	sub.w	r8, r8, #2
  409e80:	443d      	add	r5, r7
  409e82:	e72b      	b.n	409cdc <__udivmoddi4+0x134>

00409e84 <__aeabi_idiv0>:
  409e84:	4770      	bx	lr
  409e86:	bf00      	nop
  409e88:	454c4449 	.word	0x454c4449
  409e8c:	00000000 	.word	0x00000000
  409e90:	51726d54 	.word	0x51726d54
  409e94:	00000000 	.word	0x00000000
  409e98:	20726d54 	.word	0x20726d54
  409e9c:	00637653 	.word	0x00637653
  409ea0:	00005441 	.word	0x00005441
  409ea4:	4e2b5441 	.word	0x4e2b5441
  409ea8:	50454d41 	.word	0x50454d41
  409eac:	6f726465 	.word	0x6f726465
  409eb0:	00000000 	.word	0x00000000
  409eb4:	502b5441 	.word	0x502b5441
  409eb8:	35354e49 	.word	0x35354e49
  409ebc:	00003535 	.word	0x00003535
  409ec0:	00544c42 	.word	0x00544c42
  409ec4:	53545542 	.word	0x53545542
  409ec8:	00000000 	.word	0x00000000
  409ecc:	43454641 	.word	0x43454641
  409ed0:	00000000 	.word	0x00000000
  409ed4:	65756c42 	.word	0x65756c42
  409ed8:	746f6f74 	.word	0x746f6f74
  409edc:	6e692068 	.word	0x6e692068
  409ee0:	61697469 	.word	0x61697469
  409ee4:	697a696c 	.word	0x697a696c
  409ee8:	0a20676e 	.word	0x0a20676e
  409eec:	00000000 	.word	0x00000000
  409ef0:	666e6f43 	.word	0x666e6f43
  409ef4:	64206769 	.word	0x64206769
  409ef8:	20656e6f 	.word	0x20656e6f
  409efc:	0000000a 	.word	0x0000000a
  409f00:	3b64253b 	.word	0x3b64253b
  409f04:	00000000 	.word	0x00000000
  409f08:	00006325 	.word	0x00006325
  409f0c:	686c6166 	.word	0x686c6166
  409f10:	6d652061 	.word	0x6d652061
  409f14:	69726320 	.word	0x69726320
  409f18:	6f207261 	.word	0x6f207261
  409f1c:	6d657320 	.word	0x6d657320
  409f20:	726f6661 	.word	0x726f6661
  409f24:	0a41206f 	.word	0x0a41206f
  409f28:	00000000 	.word	0x00000000
  409f2c:	686c6166 	.word	0x686c6166
  409f30:	6d652061 	.word	0x6d652061
  409f34:	69726320 	.word	0x69726320
  409f38:	6f207261 	.word	0x6f207261
  409f3c:	6d657320 	.word	0x6d657320
  409f40:	726f6661 	.word	0x726f6661
  409f44:	0a42206f 	.word	0x0a42206f
  409f48:	00000000 	.word	0x00000000
  409f4c:	63617473 	.word	0x63617473
  409f50:	766f206b 	.word	0x766f206b
  409f54:	6c667265 	.word	0x6c667265
  409f58:	2520776f 	.word	0x2520776f
  409f5c:	73252078 	.word	0x73252078
  409f60:	00000a0d 	.word	0x00000a0d

00409f64 <_global_impure_ptr>:
  409f64:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  409f74:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  409f84:	46454443 00000000 33323130 37363534     CDEF....01234567
  409f94:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409fa4:	0000296c 00000030                       l)..0...

00409fac <blanks.7223>:
  409fac:	20202020 20202020 20202020 20202020                     

00409fbc <zeroes.7224>:
  409fbc:	30303030 30303030 30303030 30303030     0000000000000000

00409fcc <blanks.7217>:
  409fcc:	20202020 20202020 20202020 20202020                     

00409fdc <zeroes.7218>:
  409fdc:	30303030 30303030 30303030 30303030     0000000000000000
  409fec:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409ffc:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40a00c:	00000000                                ....

0040a010 <__mprec_bigtens>:
  40a010:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40a020:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40a030:	7f73bf3c 75154fdd                       <.s..O.u

0040a038 <__mprec_tens>:
  40a038:	00000000 3ff00000 00000000 40240000     .......?......$@
  40a048:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40a058:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40a068:	00000000 412e8480 00000000 416312d0     .......A......cA
  40a078:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40a088:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40a098:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40a0a8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40a0b8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40a0c8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40a0d8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40a0e8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40a0f8:	79d99db4 44ea7843                       ...yCx.D

0040a100 <p05.6055>:
  40a100:	00000005 00000019 0000007d              ........}...

0040a10c <_ctype_>:
  40a10c:	20202000 20202020 28282020 20282828     .         ((((( 
  40a11c:	20202020 20202020 20202020 20202020                     
  40a12c:	10108820 10101010 10101010 10101010      ...............
  40a13c:	04040410 04040404 10040404 10101010     ................
  40a14c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a15c:	01010101 01010101 01010101 10101010     ................
  40a16c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a17c:	02020202 02020202 02020202 10101010     ................
  40a18c:	00000020 00000000 00000000 00000000      ...............
	...

0040a210 <_init>:
  40a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a212:	bf00      	nop
  40a214:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a216:	bc08      	pop	{r3}
  40a218:	469e      	mov	lr, r3
  40a21a:	4770      	bx	lr

0040a21c <__init_array_start>:
  40a21c:	004067d5 	.word	0x004067d5

0040a220 <__frame_dummy_init_array_entry>:
  40a220:	00400165                                e.@.

0040a224 <_fini>:
  40a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a226:	bf00      	nop
  40a228:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a22a:	bc08      	pop	{r3}
  40a22c:	469e      	mov	lr, r3
  40a22e:	4770      	bx	lr

0040a230 <__fini_array_start>:
  40a230:	00400141 	.word	0x00400141
